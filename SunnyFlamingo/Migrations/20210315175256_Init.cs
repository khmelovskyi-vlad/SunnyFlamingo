using System;
using Microsoft.EntityFrameworkCore.Migrations;

namespace SunnyFlamingo.Migrations
{
    public partial class Init : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {

            migrationBuilder.Sql(@"CREATE TYPE StringList AS TABLE 
                                    (
                                    	[Value] nvarchar(MAX)
                                    )
                                    GO");
            migrationBuilder.Sql(@"CREATE TYPE IntList AS TABLE 
                                    (
                                    	[Value] int
                                    )
                                    GO");
            migrationBuilder.Sql(@"CREATE TYPE RealList AS TABLE 
                                    (
                                    	[Value] real
                                    )
                                    GO");
            migrationBuilder.Sql(@"CREATE TYPE BoolList AS TABLE 
                                    (
                                    	[Value] bit
                                    )
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerAccessoriesGoodCells]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@orderType nvarchar(100),
                                	@sortDir nvarchar(100),
                                	@from int,
                                	@to int
                                )
                                RETURNS 
                                @GoodCell TABLE 
                                (
                                	    Id uniqueidentifier,
                                		[Name] nvarchar(500),
                                		Price decimal(18, 6),
                                		IsAvailable bit,
                                		[Type] nvarchar(MAX),
                                	    ImgId uniqueidentifier
                                )
                                AS
                                BEGIN
                                	INSERT INTO @GoodCell
                                	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                	FROM [dbo].ImageInfo imgInf
                                	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors)))
                                	ORDER BY 
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                	OFFSET @from ROWS
                                	FETCH NEXT @to ROWS ONLY
                                	) goodCells ON goodCells.Id = imgInf.GoodId
                                	RETURN
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerAccessoriesCountries]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'country', 
                                	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                	ELSE 0 END AS Checked,
                                	manCountry.[Value],
                                	manCountry.[Value]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                	GROUP BY manCountry.[Value]
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerAccessoriesColors]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'color', 
                                	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.ColorValue,
                                	g.ColorValue
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))))
                                	GROUP BY g.ColorValue
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerAccessoriesMaterials]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'material', 
                                	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.MaterialValue,
                                	g.MaterialValue
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                	GROUP BY g.MaterialValue
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerAccessoriesProducers]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'producer', 
                                	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                	ELSE 0 END AS Checked,
                                	pr.[Name],
                                	pr.[Name]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                	GROUP BY pr.[Name]
                                	RETURN 
                                END
                                GO");

            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerAccessoriesPrice]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                	SELECT 
                                	'price', 
                                	MIN(g.Price),
                                	MAX(g.Price)
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors)))
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerAccessoriesCount]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @Count TABLE 
                                (
                                	    [Value] int
                                )
                                AS
                                BEGIN
                                	INSERT INTO @Count
                                	SELECT Count(g.Id)
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors)))
                                	RETURN 
                                END
                                GO");






            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerDrivesGoodCells]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@capacity [dbo].IntList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@formFactorType [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@capacityCount int,
                                	@computerDriveTypeCount int,
                                	@formFactorTypeCount int,
                                	@orderType nvarchar(100),
                                	@sortDir nvarchar(100),
                                	@from int,
                                	@to int
                                )
                                RETURNS 
                                @GoodCell TABLE 
                                (
                                	    Id uniqueidentifier,
                                		[Name] nvarchar(500),
                                		Price decimal(18, 6),
                                		IsAvailable bit,
                                		[Type] nvarchar(MAX),
                                	    ImgId uniqueidentifier
                                )
                                AS
                                BEGIN
                                	INSERT INTO @GoodCell
                                	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                	FROM [dbo].ImageInfo imgInf
                                	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                	((@capacityCount = 0) OR (g.[Capacity] IN (SELECT value FROM @capacity))) AND
                                	((@computerDriveTypeCount = 0) OR (g.[ComputerDriveType] IN (SELECT value FROM @computerDriveType))) AND
                                	((@formFactorTypeCount = 0) OR (g.[FormFactorType] IN (SELECT value FROM @formFactorType)))
                                	ORDER BY 
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                	OFFSET @from ROWS
                                	FETCH NEXT @to ROWS ONLY
                                	) goodCells ON goodCells.Id = imgInf.GoodId
                                	RETURN
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerDrivesCountries]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@capacity [dbo].IntList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@formFactorType [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@capacityCount int,
                                	@computerDriveTypeCount int,
                                	@formFactorTypeCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'country', 
                                	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                	ELSE 0 END AS Checked,
                                	manCountry.[Value],
                                	manCountry.[Value]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@capacityCount = 0) OR (g.[Capacity] IN (SELECT value FROM @capacity))) AND
                                	((@computerDriveTypeCount = 0) OR (g.[ComputerDriveType] IN (SELECT value FROM @computerDriveType))) AND
                                	((@formFactorTypeCount = 0) OR (g.[FormFactorType] IN (SELECT value FROM @formFactorType))))
                                	GROUP BY manCountry.[Value]
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerDrivesColors]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@capacity [dbo].IntList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@formFactorType [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@capacityCount int,
                                	@computerDriveTypeCount int,
                                	@formFactorTypeCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'color', 
                                	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.ColorValue,
                                	g.ColorValue
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@capacityCount = 0) OR (g.[Capacity] IN (SELECT value FROM @capacity))) AND
                                	((@computerDriveTypeCount = 0) OR (g.[ComputerDriveType] IN (SELECT value FROM @computerDriveType))) AND
                                	((@formFactorTypeCount = 0) OR (g.[FormFactorType] IN (SELECT value FROM @formFactorType))))
                                	GROUP BY g.ColorValue
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerDrivesMaterials]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@capacity [dbo].IntList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@formFactorType [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@capacityCount int,
                                	@computerDriveTypeCount int,
                                	@formFactorTypeCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'material', 
                                	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.MaterialValue,
                                	g.MaterialValue
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@capacityCount = 0) OR (g.[Capacity] IN (SELECT value FROM @capacity))) AND
                                	((@computerDriveTypeCount = 0) OR (g.[ComputerDriveType] IN (SELECT value FROM @computerDriveType))) AND
                                	((@formFactorTypeCount = 0) OR (g.[FormFactorType] IN (SELECT value FROM @formFactorType))))
                                	GROUP BY g.MaterialValue
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerDrivesProducers]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@capacity [dbo].IntList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@formFactorType [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@capacityCount int,
                                	@computerDriveTypeCount int,
                                	@formFactorTypeCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'producer', 
                                	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                	ELSE 0 END AS Checked,
                                	pr.[Name],
                                	pr.[Name]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@capacityCount = 0) OR (g.[Capacity] IN (SELECT value FROM @capacity))) AND
                                	((@computerDriveTypeCount = 0) OR (g.[ComputerDriveType] IN (SELECT value FROM @computerDriveType))) AND
                                	((@formFactorTypeCount = 0) OR (g.[FormFactorType] IN (SELECT value FROM @formFactorType))))
                                	GROUP BY pr.[Name]
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerDrivesCapacity]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@capacity [dbo].IntList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@formFactorType [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@capacityCount int,
                                	@computerDriveTypeCount int,
                                	@formFactorTypeCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'capacity', 
                                	CASE WHEN (@capacityCount != 0) AND (g.[Capacity] IN (SELECT [Value] FROM @capacity)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@capacityCount != 0) AND (g.[Capacity] IN (SELECT [Value] FROM @capacity)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.[Capacity],
                                	g.[Capacity]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@capacityCount != 0) AND (g.[Capacity] IN (SELECT value FROM @capacity))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@computerDriveTypeCount = 0) OR (g.[ComputerDriveType] IN (SELECT value FROM @computerDriveType))) AND
                                	((@formFactorTypeCount = 0) OR (g.[FormFactorType] IN (SELECT value FROM @formFactorType))))
                                	GROUP BY g.[Capacity]
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerDrivesTypes]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@capacity [dbo].IntList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@formFactorType [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@capacityCount int,
                                	@computerDriveTypeCount int,
                                	@formFactorTypeCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'computerDriveType', 
                                	CASE WHEN (@computerDriveTypeCount != 0) AND (g.[ComputerDriveType] IN (SELECT [Value] FROM @computerDriveType)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@computerDriveTypeCount != 0) AND (g.[ComputerDriveType] IN (SELECT [Value] FROM @computerDriveType)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.[ComputerDriveType],
                                	g.[ComputerDriveType]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@computerDriveTypeCount != 0) AND (g.[ComputerDriveType] IN (SELECT value FROM @computerDriveType))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@capacityCount = 0) OR (g.[Capacity] IN (SELECT value FROM @capacity))) AND
                                	((@formFactorTypeCount = 0) OR (g.[FormFactorType] IN (SELECT value FROM @formFactorType))))
                                	GROUP BY g.[ComputerDriveType]
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerDrivesFormFactorTypes]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@capacity [dbo].IntList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@formFactorType [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@capacityCount int,
                                	@computerDriveTypeCount int,
                                	@formFactorTypeCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'formFactorType', 
                                	CASE WHEN (@formFactorTypeCount != 0) AND (g.[FormFactorType] IN (SELECT [Value] FROM @formFactorType)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@formFactorTypeCount != 0) AND (g.[FormFactorType] IN (SELECT [Value] FROM @formFactorType)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.[FormFactorType],
                                	g.[FormFactorType]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@formFactorTypeCount != 0) AND (g.[FormFactorType] IN (SELECT value FROM @formFactorType))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@capacityCount = 0) OR (g.[Capacity] IN (SELECT value FROM @capacity))) AND
                                	((@computerDriveTypeCount = 0) OR (g.[ComputerDriveType] IN (SELECT value FROM @computerDriveType))))
                                	
                                	GROUP BY g.[FormFactorType]
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerDrivesPrice]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@capacity [dbo].IntList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@formFactorType [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@capacityCount int,
                                	@computerDriveTypeCount int,
                                	@formFactorTypeCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                	SELECT 
                                	'price', 
                                	MIN(g.Price),
                                	MAX(g.Price)
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@capacityCount = 0) OR (g.[Capacity] IN (SELECT value FROM @capacity))) AND
                                	((@computerDriveTypeCount = 0) OR (g.[ComputerDriveType] IN (SELECT value FROM @computerDriveType))) AND
                                	((@formFactorTypeCount = 0) OR (g.[FormFactorType] IN (SELECT value FROM @formFactorType)))
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerDrivesCount]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@capacity [dbo].IntList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@formFactorType [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@capacityCount int,
                                	@computerDriveTypeCount int,
                                	@formFactorTypeCount int
                                )
                                RETURNS 
                                @Count TABLE 
                                (
                                	    [Value] int
                                )
                                AS
                                BEGIN
                                	INSERT INTO @Count
                                	SELECT Count(g.Id)
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                	((@capacityCount = 0) OR (g.[Capacity] IN (SELECT value FROM @capacity))) AND
                                	((@computerDriveTypeCount = 0) OR (g.[ComputerDriveType] IN (SELECT value FROM @computerDriveType))) AND
                                	((@formFactorTypeCount = 0) OR (g.[FormFactorType] IN (SELECT value FROM @formFactorType)))
                                	RETURN 
                                END
                                GO");



            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerPartsGoodCells]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@orderType nvarchar(100),
                                	@sortDir nvarchar(100),
                                	@from int,
                                	@to int
                                )
                                RETURNS 
                                @GoodCell TABLE 
                                (
                                	    Id uniqueidentifier,
                                		[Name] nvarchar(500),
                                		Price decimal(18, 6),
                                		IsAvailable bit,
                                		[Type] nvarchar(MAX),
                                	    ImgId uniqueidentifier
                                )
                                AS
                                BEGIN
                                	INSERT INTO @GoodCell
                                	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                	FROM [dbo].ImageInfo imgInf
                                	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors)))
                                	ORDER BY 
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                	OFFSET @from ROWS
                                	FETCH NEXT @to ROWS ONLY
                                	) goodCells ON goodCells.Id = imgInf.GoodId
                                	RETURN
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerPartsCountries]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'country', 
                                	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                	ELSE 0 END AS Checked,
                                	manCountry.[Value],
                                	manCountry.[Value]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                	
                                	GROUP BY manCountry.[Value]
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerPartsColors]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'color', 
                                	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.ColorValue,
                                	g.ColorValue
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))))
                                	
                                	GROUP BY g.ColorValue
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerPartsMaterials]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'material', 
                                	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.MaterialValue,
                                	g.MaterialValue
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                	
                                	GROUP BY g.MaterialValue
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerPartsProducers]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'producer', 
                                	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                	ELSE 0 END AS Checked,
                                	pr.[Name],
                                	pr.[Name]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                	GROUP BY pr.[Name]
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerPartsPrice]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                	SELECT 
                                	'price', 
                                	MIN(g.Price),
                                	MAX(g.Price)
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors)))
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerPartsCount]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @Count TABLE 
                                (
                                	    [Value] int
                                )
                                AS
                                BEGIN
                                	INSERT INTO @Count
                                	SELECT Count(g.Id)
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors)))
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersGoodCells]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int,
                                	@orderType nvarchar(100),
                                	@sortDir nvarchar(100),
                                	@from int,
                                	@to int
                                )
                                RETURNS 
                                @GoodCell TABLE 
                                (
                                	    Id uniqueidentifier,
                                		[Name] nvarchar(500),
                                		Price decimal(18, 6),
                                		IsAvailable bit,
                                		[Type] nvarchar(MAX),
                                	    ImgId uniqueidentifier
                                )
                                AS
                                BEGIN
                                	INSERT INTO @GoodCell
                                	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                	FROM [dbo].ImageInfo imgInf
                                	RIGHT JOIN (SELECT  g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                	FROM ( 
                                	SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator], g.AddTime
                                	FROM
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))
                                	GROUP BY  g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator], g.AddTime
                                	) g
                                	ORDER BY 
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                	OFFSET @from ROWS
                                	FETCH NEXT @to ROWS ONLY
                                	) goodCells ON goodCells.Id = imgInf.GoodId
                                	RETURN
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersCountries]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'country', 
                                	CASE WHEN (@countriesCount != 0) AND (g.Country IN (SELECT [Value] FROM @countries)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@countriesCount != 0) AND (g.Country IN (SELECT [Value] FROM @countries)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.Country,
                                	g.Country
                                	FROM (
                                	SELECT DISTINCT g.Id, manCountry.[Value] as Country
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.Country
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersColors]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'color', 
                                	CASE WHEN (@colorsCount != 0) AND (g.Color IN (SELECT [Value] FROM @colors)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@colorsCount != 0) AND (g.Color IN (SELECT [Value] FROM @colors)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.Color,
                                	g.Color
                                	FROM (
                                	SELECT DISTINCT g.Id, g.ColorValue as Color
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.Color
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersMaterials]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'material', 
                                	CASE WHEN (@materialsCount != 0) AND (g.Material IN (SELECT [Value] FROM @materials)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@materialsCount != 0) AND (g.Material IN (SELECT [Value] FROM @materials)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.Material,
                                	g.Material
                                	FROM (
                                	SELECT DISTINCT g.Id, g.MaterialValue as Material
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.Material
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersProducers]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'producer', 
                                	CASE WHEN (@producersCount != 0) AND (g.Producer IN (SELECT [Value] FROM @producers)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@producersCount != 0) AND (g.Producer IN (SELECT [Value] FROM @producers)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.Producer,
                                	g.Producer
                                	FROM (
                                	SELECT DISTINCT g.Id, pr.[Name] as Producer
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR 
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.Producer
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersAmountOfRAMs]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'amountOfRAM', 
                                	CASE WHEN (@amountOfRAMCount != 0) AND (g.AmountOfRAM IN (SELECT [Value] FROM @amountOfRAM)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@amountOfRAMCount != 0) AND (g.AmountOfRAM IN (SELECT [Value] FROM @amountOfRAM)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.AmountOfRAM,
                                	g.AmountOfRAM
                                	FROM (
                                	SELECT DISTINCT g.Id, g.AmountOfRAM as AmountOfRAM
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@amountOfRAMCount != 0) AND (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.AmountOfRAM
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersCpuFrequency]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'CPUFrequency', 
                                	CASE WHEN (@cpuFrequencyCount != 0) AND (g.CPUFrequency IN (SELECT [Value] FROM @cpuFrequency)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@cpuFrequencyCount != 0) AND (g.CPUFrequency IN (SELECT [Value] FROM @cpuFrequency)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.CPUFrequency,
                                	g.CPUFrequency
                                	FROM (
                                	SELECT DISTINCT g.Id, g.CPUFrequency as CPUFrequency
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@cpuFrequencyCount != 0) AND (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.CPUFrequency
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersLength]
                                (	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'length', 
                                	CASE WHEN (@lengthCount != 0) AND (g.[Length] IN (SELECT [Value] FROM @length)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@lengthCount != 0) AND (g.[Length] IN (SELECT [Value] FROM @length)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.[Length],
                                	g.[Length]
                                	FROM (
                                	SELECT DISTINCT g.Id, g.[Length] as [Length]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@lengthCount != 0) AND (g.[Length] IN (SELECT value FROM @length))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.[Length]
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersHeight]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'height', 
                                	CASE WHEN (@heightCount != 0) AND (g.Height IN (SELECT [Value] FROM @height)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@heightCount != 0) AND (g.Height IN (SELECT [Value] FROM @height)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.Height,
                                	g.Height
                                	FROM (
                                	SELECT DISTINCT g.Id, g.Height as Height
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@heightCount != 0) AND (g.[Height] IN (SELECT value FROM @height))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.Height
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersWidth]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'width', 
                                	CASE WHEN (@widthCount != 0) AND (g.Width IN (SELECT [Value] FROM @width)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@widthCount != 0) AND (g.Width IN (SELECT [Value] FROM @width)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.Width,
                                	g.Width
                                	FROM (
                                	SELECT DISTINCT g.Id, g.Width as Width
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@widthCount != 0) AND (g.[Width] IN (SELECT value FROM @width))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.Width
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersHaveFloppyDrives]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'haveFloppyDrives', 
                                	CASE WHEN (@haveFloppyDrivesCount != 0) AND (g.HaveFloppyDrives IN (SELECT [Value] FROM @haveFloppyDrives)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@haveFloppyDrivesCount != 0) AND (g.HaveFloppyDrives IN (SELECT [Value] FROM @haveFloppyDrives)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.HaveFloppyDrives,
                                	g.HaveFloppyDrives
                                	FROM (
                                	SELECT DISTINCT g.Id, g.HaveFloppyDrives as HaveFloppyDrives
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@haveFloppyDrivesCount != 0) AND (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.HaveFloppyDrives
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersSsdMemory]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'SSDMemory', 
                                	CASE WHEN (@ssdMemoryCount != 0) AND (g.SSDMemory IN (SELECT [Value] FROM @ssdMemory)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@ssdMemoryCount != 0) AND (g.SSDMemory IN (SELECT [Value] FROM @ssdMemory)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.SSDMemory,
                                	g.SSDMemory
                                	FROM (
                                	SELECT DISTINCT g.Id, g.SSDMemory as SSDMemory
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@ssdMemoryCount != 0) AND (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.SSDMemory
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersHardDiskMemory]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'hardDiskMemory', 
                                	CASE WHEN (@hardDiskMemoryCount != 0) AND (g.HardDiskMemory IN (SELECT [Value] FROM @hardDiskMemory)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@hardDiskMemoryCount != 0) AND (g.HardDiskMemory IN (SELECT [Value] FROM @hardDiskMemory)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.HardDiskMemory,
                                	g.HardDiskMemory
                                	FROM (
                                	SELECT DISTINCT g.Id, g.HardDiskMemory as HardDiskMemory
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@hardDiskMemoryCount != 0) AND (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.HardDiskMemory
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersCpuSocketType]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'CPUSocketType', 
                                	CASE WHEN (@cpuSocketTypeCount != 0) AND (g.CPUSocketType IN (SELECT [Value] FROM @cpuSocketType)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@cpuSocketTypeCount != 0) AND (g.CPUSocketType IN (SELECT [Value] FROM @cpuSocketType)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.CPUSocketType,
                                	g.CPUSocketType
                                	FROM (
                                	SELECT DISTINCT g.Id, g.CPUSocketType as CPUSocketType
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@cpuSocketTypeCount != 0) AND (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.CPUSocketType
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersComputerDrives]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'computerDriveType', 
                                	CASE WHEN (@computerDriveTypeCount != 0) AND (g.ComputerDriveType IN (SELECT [Value] FROM @computerDriveType)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@computerDriveTypeCount != 0) AND (g.ComputerDriveType IN (SELECT [Value] FROM @computerDriveType)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.ComputerDriveType,
                                	g.ComputerDriveType
                                	FROM (
                                	SELECT DISTINCT g.Id, ccdt.ComputerDriveTypeValue as ComputerDriveType
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@computerDriveTypeCount != 0) AND (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	WHERE g.ComputerDriveType IS NOT NULL
                                	GROUP BY g.ComputerDriveType
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersNumberOfCores]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'numberOfCores', 
                                	CASE WHEN (@numberOfCoresCount != 0) AND (g.NumberOfCores IN (SELECT [Value] FROM @numberOfCores)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@numberOfCoresCount != 0) AND (g.NumberOfCores IN (SELECT [Value] FROM @numberOfCores)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.NumberOfCores,
                                	g.NumberOfCores
                                	FROM (
                                	SELECT DISTINCT g.Id, g.NumberOfCores as NumberOfCores
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@numberOfCoresCount != 0) AND (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.NumberOfCores
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersFloppyDrivesCount]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'floppyDrivesCount', 
                                	CASE WHEN (@floppyDrivesCountCount != 0) AND (g.FloppyDrivesCount IN (SELECT [Value] FROM @floppyDrivesCount)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@floppyDrivesCountCount != 0) AND (g.FloppyDrivesCount IN (SELECT [Value] FROM @floppyDrivesCount)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.FloppyDrivesCount,
                                	g.FloppyDrivesCount
                                	FROM (
                                	SELECT DISTINCT g.Id, g.FloppyDrivesCount as FloppyDrivesCount
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@floppyDrivesCountCount != 0) AND (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores)))))) as g
                                	WHERE g.FloppyDrivesCount IS NOT NULL
                                	GROUP BY g.FloppyDrivesCount
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersPrice]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                	SELECT 
                                	'price', 
                                	MIN(g.Price),
                                	MAX(g.Price)
                                	FROM (
                                	SELECT DISTINCT g.Id, g.Price
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))) as g
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersCount]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @Count TABLE 
                                (
                                	    [Value] int
                                )
                                
                                AS
                                BEGIN
                                	INSERT INTO @Count
                                	SELECT 
                                	Count(g.Id)
                                	FROM (
                                	SELECT DISTINCT g.Id
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))) as g
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetComputerTechnologiesGoodCells]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors)))
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetComputerTechnologiesCountries]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	manCountry.[Value],
                                    	manCountry.[Value]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                    	
                                    	GROUP BY manCountry.[Value]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetComputerTechnologiesColors]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ColorValue,
                                    	g.ColorValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))))
                                    	
                                    	GROUP BY g.ColorValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetComputerTechnologiesMaterials]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.MaterialValue,
                                    	g.MaterialValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                    	
                                    	GROUP BY g.MaterialValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetComputerTechnologiesProducers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	pr.[Name],
                                    	pr.[Name]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                    	
                                    	GROUP BY pr.[Name]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetComputerTechnologiesPrice]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors)))
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetComputerTechnologiesCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT Count(g.Id)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors)))
                                    	RETURN 
                                    END
                                    GO");


            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCoolersGoodCells]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@coolerType [dbo].StringList READONLY,
                                    	@fanSize [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@coolerTypeCount int,
                                    	@fanSizeCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@coolerTypeCount = 0) OR (g.[CoolerType] IN (SELECT value FROM @coolerType))) AND
                                    	((@fanSizeCount = 0) OR (g.[FanSize] IN (SELECT value FROM @fanSize)))
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCoolersCountries]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@coolerType [dbo].StringList READONLY,
                                    	@fanSize [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@coolerTypeCount int,
                                    	@fanSizeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	manCountry.[Value],
                                    	manCountry.[Value]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@coolerTypeCount = 0) OR (g.[CoolerType] IN (SELECT value FROM @coolerType))) AND
                                    	((@fanSizeCount = 0) OR (g.[FanSize] IN (SELECT value FROM @fanSize))))
                                    	GROUP BY manCountry.[Value]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCoolersColors]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@coolerType [dbo].StringList READONLY,
                                    	@fanSize [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@coolerTypeCount int,
                                    	@fanSizeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ColorValue,
                                    	g.ColorValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@coolerTypeCount = 0) OR (g.[CoolerType] IN (SELECT value FROM @coolerType))) AND
                                    	((@fanSizeCount = 0) OR (g.[FanSize] IN (SELECT value FROM @fanSize))))
                                    	GROUP BY g.ColorValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCoolersMaterials]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@coolerType [dbo].StringList READONLY,
                                    	@fanSize [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@coolerTypeCount int,
                                    	@fanSizeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.MaterialValue,
                                    	g.MaterialValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@coolerTypeCount = 0) OR (g.[CoolerType] IN (SELECT value FROM @coolerType))) AND
                                    	((@fanSizeCount = 0) OR (g.[FanSize] IN (SELECT value FROM @fanSize))))
                                    	GROUP BY g.MaterialValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCoolersProducers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@coolerType [dbo].StringList READONLY,
                                    	@fanSize [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@coolerTypeCount int,
                                    	@fanSizeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	pr.[Name],
                                    	pr.[Name]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@coolerTypeCount = 0) OR (g.[CoolerType] IN (SELECT value FROM @coolerType))) AND
                                    	((@fanSizeCount = 0) OR (g.[FanSize] IN (SELECT value FROM @fanSize))))
                                    	GROUP BY pr.[Name]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCoolersTypes]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@coolerType [dbo].StringList READONLY,
                                    	@fanSize [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@coolerTypeCount int,
                                    	@fanSizeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'coolerType', 
                                    	CASE WHEN (@coolerTypeCount != 0) AND (g.[CoolerType] IN (SELECT [Value] FROM @coolerType)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@coolerTypeCount != 0) AND (g.[CoolerType] IN (SELECT [Value] FROM @coolerType)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[CoolerType],
                                    	g.[CoolerType]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@coolerTypeCount != 0) AND (g.[CoolerType] IN (SELECT value FROM @coolerType))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@fanSizeCount = 0) OR (g.[FanSize] IN (SELECT value FROM @fanSize))))
                                    	GROUP BY g.[CoolerType]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCoolersFanSizes]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@coolerType [dbo].StringList READONLY,
                                    	@fanSize [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@coolerTypeCount int,
                                    	@fanSizeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'fanSize', 
                                    	CASE WHEN (@fanSizeCount != 0) AND (g.[FanSize] IN (SELECT [Value] FROM @fanSize)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@fanSizeCount != 0) AND (g.[FanSize] IN (SELECT [Value] FROM @fanSize)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[FanSize],
                                    	g.[FanSize]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@fanSizeCount != 0) AND (g.[FanSize] IN (SELECT value FROM @fanSize))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@coolerTypeCount = 0) OR (g.[CoolerType] IN (SELECT value FROM @coolerType))))
                                    	GROUP BY g.[FanSize]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCoolersPrice]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@coolerType [dbo].StringList READONLY,
                                    	@fanSize [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@coolerTypeCount int,
                                    	@fanSizeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@coolerTypeCount = 0) OR (g.[CoolerType] IN (SELECT value FROM @coolerType))) AND
                                    	((@fanSizeCount = 0) OR (g.[FanSize] IN (SELECT value FROM @fanSize)))
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCoolersCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@coolerType [dbo].StringList READONLY,
                                    	@fanSize [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@coolerTypeCount int,
                                    	@fanSizeCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT Count(g.Id)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@coolerTypeCount = 0) OR (g.[CoolerType] IN (SELECT value FROM @coolerType))) AND
                                    	((@fanSizeCount = 0) OR (g.[FanSize] IN (SELECT value FROM @fanSize)))
                                    	RETURN 
                                    END
                                    GO");


            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsGoodCells]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@thermalDesignPowerCount = 0) OR (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@numberOfThreadsCount = 0) OR (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads)))
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsCountries]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	manCountry.[Value],
                                    	manCountry.[Value]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@thermalDesignPowerCount = 0) OR (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@numberOfThreadsCount = 0) OR (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads))))
                                    	
                                    	GROUP BY manCountry.[Value]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsColors]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ColorValue,
                                    	g.ColorValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@thermalDesignPowerCount = 0) OR (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@numberOfThreadsCount = 0) OR (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads))))
                                    	
                                    	GROUP BY g.ColorValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsMaterials]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.MaterialValue,
                                    	g.MaterialValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@thermalDesignPowerCount = 0) OR (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@numberOfThreadsCount = 0) OR (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads))))
                                    	
                                    	GROUP BY g.MaterialValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsProducers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	pr.[Name],
                                    	pr.[Name]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@thermalDesignPowerCount = 0) OR (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@numberOfThreadsCount = 0) OR (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads))))
                                    	GROUP BY pr.[Name]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsSocketTypes]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'CPUSocketType', 
                                    	CASE WHEN (@cpuSocketTypeCount != 0) AND (g.[CPUSocketType] IN (SELECT [Value] FROM @cpuSocketType)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@cpuSocketTypeCount != 0) AND (g.[CPUSocketType] IN (SELECT [Value] FROM @cpuSocketType)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[CPUSocketType],
                                    	g.[CPUSocketType]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@cpuSocketTypeCount != 0) AND (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@thermalDesignPowerCount = 0) OR (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@numberOfThreadsCount = 0) OR (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads))))
                                    	GROUP BY g.[CPUSocketType]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsThermalDesignPowers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'thermalDesignPower', 
                                    	CASE WHEN (@thermalDesignPowerCount != 0) AND (g.[ThermalDesignPower] IN (SELECT [Value] FROM @thermalDesignPower)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@thermalDesignPowerCount != 0) AND (g.[ThermalDesignPower] IN (SELECT [Value] FROM @thermalDesignPower)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[ThermalDesignPower],
                                    	g.[ThermalDesignPower]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@thermalDesignPowerCount != 0) AND (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@numberOfThreadsCount = 0) OR (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads))))
                                    	GROUP BY g.[ThermalDesignPower]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsNumberOfCores]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'numberOfCores', 
                                    	CASE WHEN (@numberOfCoresCount != 0) AND (g.[NumberOfCores] IN (SELECT [Value] FROM @numberOfCores)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@numberOfCoresCount != 0) AND (g.[NumberOfCores] IN (SELECT [Value] FROM @numberOfCores)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[NumberOfCores],
                                    	g.[NumberOfCores]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@numberOfCoresCount != 0) AND (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@thermalDesignPowerCount = 0) OR (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) AND
                                    	((@numberOfThreadsCount = 0) OR (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads))))
                                    	GROUP BY g.[NumberOfCores]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsNumberOfThreads]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'numberOfThreads', 
                                    	CASE WHEN (@numberOfThreadsCount != 0) AND (g.[NumberOfThreads] IN (SELECT [Value] FROM @numberOfThreads)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@numberOfThreadsCount != 0) AND (g.[NumberOfThreads] IN (SELECT [Value] FROM @numberOfThreads)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[NumberOfThreads],
                                    	g.[NumberOfThreads]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@numberOfThreadsCount != 0) AND (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@thermalDesignPowerCount = 0) OR (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))))
                                    	GROUP BY g.[NumberOfThreads]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsPrice]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@thermalDesignPowerCount = 0) OR (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@numberOfThreadsCount = 0) OR (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads)))
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT Count(g.Id)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@thermalDesignPowerCount = 0) OR (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@numberOfThreadsCount = 0) OR (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads)))
                                    	RETURN 
                                    END
                                    GO");



            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetFlashDrivesGoodCells]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@usbSpecificationType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@capacityCount int,
                                    	@usbSpecificationTypeCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@capacityCount = 0) OR (g.Capacity IN (SELECT value FROM @capacity))) AND
                                    	((@usbSpecificationTypeCount = 0) OR (g.USBSpecificationType IN (SELECT value FROM @usbSpecificationType)))
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetFlashDrivesCountries]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@usbSpecificationType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@capacityCount int,
                                    	@usbSpecificationTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	manCountry.[Value],
                                    	manCountry.[Value]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@capacityCount = 0) OR (g.Capacity IN (SELECT value FROM @capacity))) AND
                                    	((@usbSpecificationTypeCount = 0) OR (g.USBSpecificationType IN (SELECT value FROM @usbSpecificationType))))
                                    	
                                    	GROUP BY manCountry.[Value]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetFlashDrivesColors]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@usbSpecificationType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@capacityCount int,
                                    	@usbSpecificationTypeCount int
                                    
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ColorValue,
                                    	g.ColorValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@capacityCount = 0) OR (g.Capacity IN (SELECT value FROM @capacity))) AND
                                    	((@usbSpecificationTypeCount = 0) OR (g.USBSpecificationType IN (SELECT value FROM @usbSpecificationType))))
                                    	GROUP BY g.ColorValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetFlashDrivesMaterials]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@usbSpecificationType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@capacityCount int,
                                    	@usbSpecificationTypeCount int
                                    
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.MaterialValue,
                                    	g.MaterialValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@capacityCount = 0) OR (g.Capacity IN (SELECT value FROM @capacity))) AND
                                    	((@usbSpecificationTypeCount = 0) OR (g.USBSpecificationType IN (SELECT value FROM @usbSpecificationType))))
                                    	GROUP BY g.MaterialValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetFlashDrivesProducers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@usbSpecificationType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@capacityCount int,
                                    	@usbSpecificationTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	pr.[Name],
                                    	pr.[Name]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@capacityCount = 0) OR (g.Capacity IN (SELECT value FROM @capacity))) AND
                                    	((@usbSpecificationTypeCount = 0) OR (g.USBSpecificationType IN (SELECT value FROM @usbSpecificationType))))
                                    	GROUP BY pr.[Name]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetFlashDrivesCapacity]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@usbSpecificationType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@capacityCount int,
                                    	@usbSpecificationTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'capacity', 
                                    	CASE WHEN (@capacityCount != 0) AND (g.Capacity IN (SELECT [Value] FROM @capacity)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@capacityCount != 0) AND (g.Capacity IN (SELECT [Value] FROM @capacity)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.Capacity,
                                    	g.Capacity
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@capacityCount != 0) AND (g.Capacity IN (SELECT value FROM @capacity))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@usbSpecificationTypeCount = 0) OR (g.USBSpecificationType IN (SELECT value FROM @usbSpecificationType))))
                                    	GROUP BY g.Capacity
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetFlashDrivesUsbSpecificationTypes]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@usbSpecificationType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@capacityCount int,
                                    	@usbSpecificationTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'USBSpecificationType', 
                                    	CASE WHEN (@usbSpecificationTypeCount != 0) AND (g.USBSpecificationType IN (SELECT [Value] FROM @usbSpecificationType)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@usbSpecificationTypeCount != 0) AND (g.USBSpecificationType IN (SELECT [Value] FROM @usbSpecificationType)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.USBSpecificationType,
                                    	g.USBSpecificationType
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@usbSpecificationTypeCount != 0) AND (g.USBSpecificationType IN (SELECT value FROM @usbSpecificationType))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@capacityCount = 0) OR (g.Capacity IN (SELECT value FROM @capacity))))
                                    	GROUP BY g.USBSpecificationType
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetFlashDrivesPrice]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@usbSpecificationType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@capacityCount int,
                                    	@usbSpecificationTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@capacityCount = 0) OR (g.Capacity IN (SELECT value FROM @capacity))) AND
                                    	((@usbSpecificationTypeCount = 0) OR (g.USBSpecificationType IN (SELECT value FROM @usbSpecificationType)))
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetFlashDrivesCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@usbSpecificationType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@capacityCount int,
                                    	@usbSpecificationTypeCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT Count(g.Id)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@capacityCount = 0) OR (g.Capacity IN (SELECT value FROM @capacity))) AND
                                    	((@usbSpecificationTypeCount = 0) OR (g.USBSpecificationType IN (SELECT value FROM @usbSpecificationType)))
                                    	RETURN 
                                    END
                                    GO");


            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetGoodsGoodCells]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors)))
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetGoodsCountries]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	manCountry.[Value],
                                    	manCountry.[Value]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                    	
                                    	GROUP BY manCountry.[Value]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetGoodsColors]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ColorValue,
                                    	g.ColorValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))))
                                    	
                                    	GROUP BY g.ColorValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetGoodsMaterials]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.MaterialValue,
                                    	g.MaterialValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                    	GROUP BY g.MaterialValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetGoodsProducers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	pr.[Name],
                                    	pr.[Name]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                    	GROUP BY pr.[Name]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetGoodsPrice]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors)))
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetGoodsCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT Count(g.Id)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors)))
                                    	RETURN 
                                    END
                                    GO");



            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetHeadphonesGoodCells]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@headphonesTypeCount int,
                                    	@wirelessTypeCount int,
                                    	@connectorTypeCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@headphonesTypeCount = 0) OR (g.[HeadphonesType] IN (SELECT value FROM @headphonesType))) AND
                                    	((@wirelessTypeCount = 0) OR (g.[WirelessType] IN (SELECT value FROM @wirelessType))) AND
                                    	((@connectorTypeCount = 0) OR (g.[ConnectorType] IN (SELECT value FROM @connectorType)))
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetHeadphonesCountries]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@headphonesTypeCount int,
                                    	@wirelessTypeCount int,
                                    	@connectorTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	manCountry.[Value],
                                    	manCountry.[Value]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@headphonesTypeCount = 0) OR (g.[HeadphonesType] IN (SELECT value FROM @headphonesType))) AND
                                    	((@wirelessTypeCount = 0) OR (g.[WirelessType] IN (SELECT value FROM @wirelessType))) AND
                                    	((@connectorTypeCount = 0) OR (g.[ConnectorType] IN (SELECT value FROM @connectorType))))
                                    	GROUP BY manCountry.[Value]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetHeadphonesColors]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@headphonesTypeCount int,
                                    	@wirelessTypeCount int,
                                    	@connectorTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ColorValue,
                                    	g.ColorValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@headphonesTypeCount = 0) OR (g.[HeadphonesType] IN (SELECT value FROM @headphonesType))) AND
                                    	((@wirelessTypeCount = 0) OR (g.[WirelessType] IN (SELECT value FROM @wirelessType))) AND
                                    	((@connectorTypeCount = 0) OR (g.[ConnectorType] IN (SELECT value FROM @connectorType))))
                                    	GROUP BY g.ColorValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetHeadphonesMaterials]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@headphonesTypeCount int,
                                    	@wirelessTypeCount int,
                                    	@connectorTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.MaterialValue,
                                    	g.MaterialValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@headphonesTypeCount = 0) OR (g.[HeadphonesType] IN (SELECT value FROM @headphonesType))) AND
                                    	((@wirelessTypeCount = 0) OR (g.[WirelessType] IN (SELECT value FROM @wirelessType))) AND
                                    	((@connectorTypeCount = 0) OR (g.[ConnectorType] IN (SELECT value FROM @connectorType))))
                                    	
                                    	GROUP BY g.MaterialValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetHeadphonesProducers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@headphonesTypeCount int,
                                    	@wirelessTypeCount int,
                                    	@connectorTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	pr.[Name],
                                    	pr.[Name]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@headphonesTypeCount = 0) OR (g.[HeadphonesType] IN (SELECT value FROM @headphonesType))) AND
                                    	((@wirelessTypeCount = 0) OR (g.[WirelessType] IN (SELECT value FROM @wirelessType))) AND
                                    	((@connectorTypeCount = 0) OR (g.[ConnectorType] IN (SELECT value FROM @connectorType))))
                                    	GROUP BY pr.[Name]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetHeadphonesTypes]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@headphonesTypeCount int,
                                    	@wirelessTypeCount int,
                                    	@connectorTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'headphonesType', 
                                    	CASE WHEN (@headphonesTypeCount != 0) AND (g.[HeadphonesType] IN (SELECT [Value] FROM @headphonesType)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@headphonesTypeCount != 0) AND (g.[HeadphonesType] IN (SELECT [Value] FROM @headphonesType)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[HeadphonesType],
                                    	g.[HeadphonesType]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@headphonesTypeCount != 0) AND (g.[HeadphonesType] IN (SELECT value FROM @headphonesType))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@wirelessTypeCount = 0) OR (g.[WirelessType] IN (SELECT value FROM @wirelessType))) AND
                                    	((@connectorTypeCount = 0) OR (g.[ConnectorType] IN (SELECT value FROM @connectorType))))
                                    	GROUP BY g.[HeadphonesType]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetHeadphonesWirelessTypes]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@headphonesTypeCount int,
                                    	@wirelessTypeCount int,
                                    	@connectorTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'wirelessType', 
                                    	CASE WHEN (@wirelessTypeCount != 0) AND (g.[WirelessType] IN (SELECT [Value] FROM @wirelessType)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@wirelessTypeCount != 0) AND (g.[WirelessType] IN (SELECT [Value] FROM @wirelessType)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[WirelessType],
                                    	g.[WirelessType]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@wirelessTypeCount != 0) AND (g.[WirelessType] IN (SELECT value FROM @wirelessType))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@headphonesTypeCount = 0) OR (g.[HeadphonesType] IN (SELECT value FROM @headphonesType))) AND
                                    	((@connectorTypeCount = 0) OR (g.[ConnectorType] IN (SELECT value FROM @connectorType))))
                                    	GROUP BY g.[WirelessType]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetHeadphonesConnectorTypes]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@headphonesTypeCount int,
                                    	@wirelessTypeCount int,
                                    	@connectorTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'connectorType', 
                                    	CASE WHEN (@connectorTypeCount != 0) AND (g.[ConnectorType] IN (SELECT [Value] FROM @connectorType)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@connectorTypeCount != 0) AND (g.[ConnectorType] IN (SELECT [Value] FROM @connectorType)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[ConnectorType],
                                    	g.[ConnectorType]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@connectorTypeCount != 0) AND (g.[ConnectorType] IN (SELECT value FROM @connectorType))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@headphonesTypeCount = 0) OR (g.[HeadphonesType] IN (SELECT value FROM @headphonesType))) AND
                                    	((@wirelessTypeCount = 0) OR (g.[WirelessType] IN (SELECT value FROM @wirelessType))))
                                    	GROUP BY g.[ConnectorType]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetHeadphonesPrice]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@headphonesTypeCount int,
                                    	@wirelessTypeCount int,
                                    	@connectorTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@headphonesTypeCount = 0) OR (g.[HeadphonesType] IN (SELECT value FROM @headphonesType))) AND
                                    	((@wirelessTypeCount = 0) OR (g.[WirelessType] IN (SELECT value FROM @wirelessType))) AND
                                    	((@connectorTypeCount = 0) OR (g.[ConnectorType] IN (SELECT value FROM @connectorType)))
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetHeadphonesCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@headphonesTypeCount int,
                                    	@wirelessTypeCount int,
                                    	@connectorTypeCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT Count(g.Id)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@headphonesTypeCount = 0) OR (g.[HeadphonesType] IN (SELECT value FROM @headphonesType))) AND
                                    	((@wirelessTypeCount = 0) OR (g.[WirelessType] IN (SELECT value FROM @wirelessType))) AND
                                    	((@connectorTypeCount = 0) OR (g.[ConnectorType] IN (SELECT value FROM @connectorType)))
                                    	RETURN 
                                    END
                                    GO");



            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetKeyboardsGoodCells]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@keyboardType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@keyboardTypeCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@keyboardTypeCount = 0) OR (g.[KeyboardType] IN (SELECT value FROM @keyboardType)))
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetKeyboardsCountries]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@keyboardType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@keyboardTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	manCountry.[Value],
                                    	manCountry.[Value]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@keyboardTypeCount = 0) OR (g.[KeyboardType] IN (SELECT value FROM @keyboardType))))
                                    	GROUP BY manCountry.[Value]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetKeyboardsColors]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@keyboardType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@keyboardTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ColorValue,
                                    	g.ColorValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@keyboardTypeCount = 0) OR (g.[KeyboardType] IN (SELECT value FROM @keyboardType))))
                                    	GROUP BY g.ColorValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetKeyboardsMaterials]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@keyboardType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@keyboardTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.MaterialValue,
                                    	g.MaterialValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@keyboardTypeCount = 0) OR (g.[KeyboardType] IN (SELECT value FROM @keyboardType))))
                                    	GROUP BY g.MaterialValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetKeyboardsProducers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@keyboardType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@keyboardTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	pr.[Name],
                                    	pr.[Name]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@keyboardTypeCount = 0) OR (g.[KeyboardType] IN (SELECT value FROM @keyboardType))))
                                    	
                                    	GROUP BY pr.[Name]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetKeyboardsTypes]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@keyboardType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@keyboardTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'keyboardType', 
                                    	CASE WHEN (@keyboardTypeCount != 0) AND (g.[KeyboardType] IN (SELECT [Value] FROM @keyboardType)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@keyboardTypeCount != 0) AND (g.[KeyboardType] IN (SELECT [Value] FROM @keyboardType)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[KeyboardType],
                                    	g.[KeyboardType]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@keyboardTypeCount != 0) AND (g.[KeyboardType] IN (SELECT value FROM @keyboardType))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))))
                                    	
                                    	GROUP BY g.[KeyboardType]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetKeyboardsPrice]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@keyboardType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@keyboardTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@keyboardTypeCount = 0) OR (g.[KeyboardType] IN (SELECT value FROM @keyboardType)))
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetKeyboardsCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@keyboardType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@keyboardTypeCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT Count(g.Id)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@keyboardTypeCount = 0) OR (g.[KeyboardType] IN (SELECT value FROM @keyboardType)))
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsGoodCells]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT  g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM ( 
                                    	SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator], g.AddTime
                                    	FROM
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))
                                    	GROUP BY  g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator], g.AddTime
                                    	) g
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsCountries]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (g.Country IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (g.Country IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.Country,
                                    	g.Country
                                    	FROM (
                                    	SELECT DISTINCT g.Id, manCountry.[Value] as Country
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.Country
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsColors]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.Color IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.Color IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.Color,
                                    	g.Color
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.ColorValue as Color
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.Color
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsMaterials]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.Material IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.Material IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.Material,
                                    	g.Material
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.MaterialValue as Material
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.Material
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsProducers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (g.Producer IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (g.Producer IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.Producer,
                                    	g.Producer
                                    	FROM (
                                    	SELECT DISTINCT g.Id, pr.[Name] as Producer
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR 
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.Producer
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsAmountOfRAMs]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'amountOfRAM', 
                                    	CASE WHEN (@amountOfRAMCount != 0) AND (g.AmountOfRAM IN (SELECT [Value] FROM @amountOfRAM)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@amountOfRAMCount != 0) AND (g.AmountOfRAM IN (SELECT [Value] FROM @amountOfRAM)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.AmountOfRAM,
                                    	g.AmountOfRAM
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.AmountOfRAM as AmountOfRAM
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@amountOfRAMCount != 0) AND (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.AmountOfRAM
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsCpuFrequency]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'CPUFrequency', 
                                    	CASE WHEN (@cpuFrequencyCount != 0) AND (g.CPUFrequency IN (SELECT [Value] FROM @cpuFrequency)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@cpuFrequencyCount != 0) AND (g.CPUFrequency IN (SELECT [Value] FROM @cpuFrequency)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.CPUFrequency,
                                    	g.CPUFrequency
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.CPUFrequency as CPUFrequency
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@cpuFrequencyCount != 0) AND (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.CPUFrequency
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsLength]
                                    (	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'length', 
                                    	CASE WHEN (@lengthCount != 0) AND (g.[Length] IN (SELECT [Value] FROM @length)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@lengthCount != 0) AND (g.[Length] IN (SELECT [Value] FROM @length)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[Length],
                                    	g.[Length]
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.[Length] as [Length]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@lengthCount != 0) AND (g.[Length] IN (SELECT value FROM @length))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.[Length]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsHeight]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'height', 
                                    	CASE WHEN (@heightCount != 0) AND (g.Height IN (SELECT [Value] FROM @height)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@heightCount != 0) AND (g.Height IN (SELECT [Value] FROM @height)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.Height,
                                    	g.Height
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.Height as Height
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@heightCount != 0) AND (g.[Height] IN (SELECT value FROM @height))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.Height
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsWidth]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'width', 
                                    	CASE WHEN (@widthCount != 0) AND (g.Width IN (SELECT [Value] FROM @width)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@widthCount != 0) AND (g.Width IN (SELECT [Value] FROM @width)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.Width,
                                    	g.Width
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.Width as Width
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@widthCount != 0) AND (g.[Width] IN (SELECT value FROM @width))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.Width
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsHaveFloppyDrives]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'haveFloppyDrives', 
                                    	CASE WHEN (@haveFloppyDrivesCount != 0) AND (g.HaveFloppyDrives IN (SELECT [Value] FROM @haveFloppyDrives)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@haveFloppyDrivesCount != 0) AND (g.HaveFloppyDrives IN (SELECT [Value] FROM @haveFloppyDrives)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.HaveFloppyDrives,
                                    	g.HaveFloppyDrives
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.HaveFloppyDrives as HaveFloppyDrives
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@haveFloppyDrivesCount != 0) AND (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.HaveFloppyDrives
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsSsdMemory]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'SSDMemory', 
                                    	CASE WHEN (@ssdMemoryCount != 0) AND (g.SSDMemory IN (SELECT [Value] FROM @ssdMemory)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@ssdMemoryCount != 0) AND (g.SSDMemory IN (SELECT [Value] FROM @ssdMemory)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.SSDMemory,
                                    	g.SSDMemory
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.SSDMemory as SSDMemory
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@ssdMemoryCount != 0) AND (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.SSDMemory
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsHardDiskMemory]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'hardDiskMemory', 
                                    	CASE WHEN (@hardDiskMemoryCount != 0) AND (g.HardDiskMemory IN (SELECT [Value] FROM @hardDiskMemory)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@hardDiskMemoryCount != 0) AND (g.HardDiskMemory IN (SELECT [Value] FROM @hardDiskMemory)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.HardDiskMemory,
                                    	g.HardDiskMemory
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.HardDiskMemory as HardDiskMemory
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@hardDiskMemoryCount != 0) AND (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.HardDiskMemory
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsCpuSocketType]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'CPUSocketType', 
                                    	CASE WHEN (@cpuSocketTypeCount != 0) AND (g.CPUSocketType IN (SELECT [Value] FROM @cpuSocketType)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@cpuSocketTypeCount != 0) AND (g.CPUSocketType IN (SELECT [Value] FROM @cpuSocketType)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.CPUSocketType,
                                    	g.CPUSocketType
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.CPUSocketType as CPUSocketType
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@cpuSocketTypeCount != 0) AND (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.CPUSocketType
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsComputerDrives]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'computerDriveType', 
                                    	CASE WHEN (@computerDriveTypeCount != 0) AND (g.ComputerDriveType IN (SELECT [Value] FROM @computerDriveType)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@computerDriveTypeCount != 0) AND (g.ComputerDriveType IN (SELECT [Value] FROM @computerDriveType)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ComputerDriveType,
                                    	g.ComputerDriveType
                                    	FROM (
                                    	SELECT DISTINCT g.Id, lcdt.ComputerDriveTypeValue as ComputerDriveType
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@computerDriveTypeCount != 0) AND (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	WHERE g.ComputerDriveType IS NOT NULL
                                    	GROUP BY g.ComputerDriveType
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsNumberOfCores]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'numberOfCores', 
                                    	CASE WHEN (@numberOfCoresCount != 0) AND (g.NumberOfCores IN (SELECT [Value] FROM @numberOfCores)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@numberOfCoresCount != 0) AND (g.NumberOfCores IN (SELECT [Value] FROM @numberOfCores)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.NumberOfCores,
                                    	g.NumberOfCores
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.NumberOfCores as NumberOfCores
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@numberOfCoresCount != 0) AND (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.NumberOfCores
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsFloppyDrivesCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'floppyDrivesCount', 
                                    	CASE WHEN (@floppyDrivesCountCount != 0) AND (g.FloppyDrivesCount IN (SELECT [Value] FROM @floppyDrivesCount)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@floppyDrivesCountCount != 0) AND (g.FloppyDrivesCount IN (SELECT [Value] FROM @floppyDrivesCount)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.FloppyDrivesCount,
                                    	g.FloppyDrivesCount
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.FloppyDrivesCount as FloppyDrivesCount
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@floppyDrivesCountCount != 0) AND (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	WHERE g.FloppyDrivesCount IS NOT NULL
                                    	GROUP BY g.FloppyDrivesCount
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsDisplays]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'display', 
                                    	CASE WHEN (@displaysCount != 0) AND (g.Display IN (SELECT [Value] FROM @displays)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@displaysCount != 0) AND (g.Display IN (SELECT [Value] FROM @displays)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.Display,
                                    	g.Display
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.Display as Display
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@displaysCount != 0) AND (g.[Display] IN (SELECT value FROM @displays))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                    	GROUP BY g.Display
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsPrice]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.Price
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays))) AND
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))) as g
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT 
                                    	Count(g.Id)
                                    	FROM (
                                    	SELECT DISTINCT g.Id
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays))) AND
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))) as g
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetMiceGoodCells]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@mauseType [dbo].StringList READONLY,
                                    	@buttonsCount [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@mauseTypeCount int,
                                    	@buttonsCountCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@mauseTypeCount = 0) OR (g.[MauseType] IN (SELECT value FROM @mauseType))) AND
                                    	((@buttonsCountCount = 0) OR (g.[ButtonsCount] IN (SELECT value FROM @buttonsCount)))
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetMiceCountries]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@mauseType [dbo].StringList READONLY,
                                    	@buttonsCount [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@mauseTypeCount int,
                                    	@buttonsCountCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	manCountry.[Value],
                                    	manCountry.[Value]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@mauseTypeCount = 0) OR (g.[MauseType] IN (SELECT value FROM @mauseType))) AND
                                    	((@buttonsCountCount = 0) OR (g.[ButtonsCount] IN (SELECT value FROM @buttonsCount))))
                                    	GROUP BY manCountry.[Value]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetMiceColors]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@mauseType [dbo].StringList READONLY,
                                    	@buttonsCount [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@mauseTypeCount int,
                                    	@buttonsCountCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ColorValue,
                                    	g.ColorValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@mauseTypeCount = 0) OR (g.[MauseType] IN (SELECT value FROM @mauseType))) AND
                                    	((@buttonsCountCount = 0) OR (g.[ButtonsCount] IN (SELECT value FROM @buttonsCount))))
                                    	
                                    	GROUP BY g.ColorValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetMiceMaterials]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@mauseType [dbo].StringList READONLY,
                                    	@buttonsCount [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@mauseTypeCount int,
                                    	@buttonsCountCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.MaterialValue,
                                    	g.MaterialValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@mauseTypeCount = 0) OR (g.[MauseType] IN (SELECT value FROM @mauseType))) AND
                                    	((@buttonsCountCount = 0) OR (g.[ButtonsCount] IN (SELECT value FROM @buttonsCount))))
                                    	GROUP BY g.MaterialValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetMiceProducers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@mauseType [dbo].StringList READONLY,
                                    	@buttonsCount [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@mauseTypeCount int,
                                    	@buttonsCountCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	pr.[Name],
                                    	pr.[Name]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@mauseTypeCount = 0) OR (g.[MauseType] IN (SELECT value FROM @mauseType))) AND
                                    	((@buttonsCountCount = 0) OR (g.[ButtonsCount] IN (SELECT value FROM @buttonsCount))))
                                    	GROUP BY pr.[Name]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetMiceTypes]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@mauseType [dbo].StringList READONLY,
                                    	@buttonsCount [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@mauseTypeCount int,
                                    	@buttonsCountCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'mauseType', 
                                    	CASE WHEN (@mauseTypeCount != 0) AND (g.[MauseType] IN (SELECT [Value] FROM @mauseType)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@mauseTypeCount != 0) AND (g.[MauseType] IN (SELECT [Value] FROM @mauseType)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[MauseType],
                                    	g.[MauseType]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@mauseTypeCount != 0) AND (g.[MauseType] IN (SELECT value FROM @mauseType))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@buttonsCountCount = 0) OR (g.[ButtonsCount] IN (SELECT value FROM @buttonsCount))))
                                    	GROUP BY g.[MauseType]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetMiceButtonsCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@mauseType [dbo].StringList READONLY,
                                    	@buttonsCount [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@mauseTypeCount int,
                                    	@buttonsCountCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'buttonsCount', 
                                    	CASE WHEN (@buttonsCountCount != 0) AND (g.[ButtonsCount] IN (SELECT [Value] FROM @buttonsCount)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@buttonsCountCount != 0) AND (g.[ButtonsCount] IN (SELECT [Value] FROM @buttonsCount)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[ButtonsCount],
                                    	g.[ButtonsCount]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@buttonsCountCount != 0) AND (g.[ButtonsCount] IN (SELECT value FROM @buttonsCount))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@mauseTypeCount = 0) OR (g.[MauseType] IN (SELECT value FROM @mauseType))))
                                    	GROUP BY g.[ButtonsCount]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetMicePrice]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@mauseType [dbo].StringList READONLY,
                                    	@buttonsCount [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@mauseTypeCount int,
                                    	@buttonsCountCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@mauseTypeCount = 0) OR (g.[MauseType] IN (SELECT value FROM @mauseType))) AND
                                    	((@buttonsCountCount = 0) OR (g.[ButtonsCount] IN (SELECT value FROM @buttonsCount)))
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetMiceCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@mauseType [dbo].StringList READONLY,
                                    	@buttonsCount [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@mauseTypeCount int,
                                    	@buttonsCountCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT Count(g.Id)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@mauseTypeCount = 0) OR (g.[MauseType] IN (SELECT value FROM @mauseType))) AND
                                    	((@buttonsCountCount = 0) OR (g.[ButtonsCount] IN (SELECT value FROM @buttonsCount)))
                                    	RETURN 
                                    END
                                    GO");


            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetVideoCardsGoodCells]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@driveInterfaceCount int,
                                    	@videoSizeCount int,
                                    	@videoMemoryCapacityCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@driveInterfaceCount = 0) OR (g.[DriveInterfaceValue] IN (SELECT value FROM @driveInterface))) AND
                                    	((@videoSizeCount = 0) OR (g.[VideoSize] IN (SELECT value FROM @videoSize))) AND
                                    	((@videoMemoryCapacityCount = 0) OR (g.[VideoMemoryCapacity] IN (SELECT value FROM @videoMemoryCapacity)))
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetVideoCardsCountries]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@driveInterfaceCount int,
                                    	@videoSizeCount int,
                                    	@videoMemoryCapacityCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	manCountry.[Value],
                                    	manCountry.[Value]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@driveInterfaceCount = 0) OR (g.[DriveInterfaceValue] IN (SELECT value FROM @driveInterface))) AND
                                    	((@videoSizeCount = 0) OR (g.[VideoSize] IN (SELECT value FROM @videoSize))) AND
                                    	((@videoMemoryCapacityCount = 0) OR (g.[VideoMemoryCapacity] IN (SELECT value FROM @videoMemoryCapacity))))
                                    	GROUP BY manCountry.[Value]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetVideoCardsColors]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@driveInterfaceCount int,
                                    	@videoSizeCount int,
                                    	@videoMemoryCapacityCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ColorValue,
                                    	g.ColorValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@driveInterfaceCount = 0) OR (g.[DriveInterfaceValue] IN (SELECT value FROM @driveInterface))) AND
                                    	((@videoSizeCount = 0) OR (g.[VideoSize] IN (SELECT value FROM @videoSize))) AND
                                    	((@videoMemoryCapacityCount = 0) OR (g.[VideoMemoryCapacity] IN (SELECT value FROM @videoMemoryCapacity))))
                                    	GROUP BY g.ColorValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetVideoCardsMaterials]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@driveInterfaceCount int,
                                    	@videoSizeCount int,
                                    	@videoMemoryCapacityCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.MaterialValue,
                                    	g.MaterialValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@driveInterfaceCount = 0) OR (g.[DriveInterfaceValue] IN (SELECT value FROM @driveInterface))) AND
                                    	((@videoSizeCount = 0) OR (g.[VideoSize] IN (SELECT value FROM @videoSize))) AND
                                    	((@videoMemoryCapacityCount = 0) OR (g.[VideoMemoryCapacity] IN (SELECT value FROM @videoMemoryCapacity))))
                                    	GROUP BY g.MaterialValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetVideoCardsProducers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@driveInterfaceCount int,
                                    	@videoSizeCount int,
                                    	@videoMemoryCapacityCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	pr.[Name],
                                    	pr.[Name]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@driveInterfaceCount = 0) OR (g.[DriveInterfaceValue] IN (SELECT value FROM @driveInterface))) AND
                                    	((@videoSizeCount = 0) OR (g.[VideoSize] IN (SELECT value FROM @videoSize))) AND
                                    	((@videoMemoryCapacityCount = 0) OR (g.[VideoMemoryCapacity] IN (SELECT value FROM @videoMemoryCapacity))))
                                    	GROUP BY pr.[Name]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetVideoCardsDriveInterfaces]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@driveInterfaceCount int,
                                    	@videoSizeCount int,
                                    	@videoMemoryCapacityCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'driveInterface', 
                                    	CASE WHEN (@driveInterfaceCount != 0) AND (g.[DriveInterfaceValue]  IN (SELECT [Value] FROM @driveInterface)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@driveInterfaceCount != 0) AND (g.[DriveInterfaceValue]  IN (SELECT [Value] FROM @driveInterface)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[DriveInterfaceValue] ,
                                    	g.[DriveInterfaceValue] 
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@driveInterfaceCount != 0) AND (g.[DriveInterfaceValue] IN (SELECT value FROM @driveInterface))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@videoSizeCount = 0) OR (g.[VideoSize] IN (SELECT value FROM @videoSize))) AND
                                    	((@videoMemoryCapacityCount = 0) OR (g.[VideoMemoryCapacity] IN (SELECT value FROM @videoMemoryCapacity))))
                                    	GROUP BY g.[DriveInterfaceValue] 
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetVideoCardsVideoSizes]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@driveInterfaceCount int,
                                    	@videoSizeCount int,
                                    	@videoMemoryCapacityCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'videoSize', 
                                    	CASE WHEN (@videoSizeCount != 0) AND (g.[VideoSize]  IN (SELECT [Value] FROM @videoSize)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@videoSizeCount != 0) AND (g.[VideoSize]  IN (SELECT [Value] FROM @videoSize)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[VideoSize] ,
                                    	g.[VideoSize] 
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@videoSizeCount != 0) AND (g.[VideoSize] IN (SELECT value FROM @videoSize))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@driveInterfaceCount = 0) OR (g.[DriveInterfaceValue] IN (SELECT value FROM @driveInterface))) AND
                                    	((@videoMemoryCapacityCount = 0) OR (g.[VideoMemoryCapacity] IN (SELECT value FROM @videoMemoryCapacity))))
                                    	GROUP BY g.[VideoSize] 
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetVideoCardsVideoMemoryCapacity]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@driveInterfaceCount int,
                                    	@videoSizeCount int,
                                    	@videoMemoryCapacityCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'videoMemoryCapacity', 
                                    	CASE WHEN (@videoMemoryCapacityCount != 0) AND (g.[VideoMemoryCapacity]  IN (SELECT [Value] FROM @videoMemoryCapacity)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@videoMemoryCapacityCount != 0) AND (g.[VideoMemoryCapacity]  IN (SELECT [Value] FROM @videoMemoryCapacity)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[VideoMemoryCapacity] ,
                                    	g.[VideoMemoryCapacity] 
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@videoMemoryCapacityCount != 0) AND (g.[VideoMemoryCapacity] IN (SELECT value FROM @videoMemoryCapacity))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@driveInterfaceCount = 0) OR (g.[DriveInterfaceValue] IN (SELECT value FROM @driveInterface))) AND
                                    	((@videoSizeCount = 0) OR (g.[VideoSize] IN (SELECT value FROM @videoSize))))
                                    	GROUP BY g.[VideoMemoryCapacity] 
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetVideoCardsPrice]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@driveInterfaceCount int,
                                    	@videoSizeCount int,
                                    	@videoMemoryCapacityCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@driveInterfaceCount = 0) OR (g.[DriveInterfaceValue] IN (SELECT value FROM @driveInterface))) AND
                                    	((@videoSizeCount = 0) OR (g.[VideoSize] IN (SELECT value FROM @videoSize))) AND
                                    	((@videoMemoryCapacityCount = 0) OR (g.[VideoMemoryCapacity] IN (SELECT value FROM @videoMemoryCapacity)))
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetVideoCardsCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@driveInterfaceCount int,
                                    	@videoSizeCount int,
                                    	@videoMemoryCapacityCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT Count(g.Id)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@driveInterfaceCount = 0) OR (g.[DriveInterfaceValue] IN (SELECT value FROM @driveInterface))) AND
                                    	((@videoSizeCount = 0) OR (g.[VideoSize] IN (SELECT value FROM @videoSize))) AND
                                    	((@videoMemoryCapacityCount = 0) OR (g.[VideoMemoryCapacity] IN (SELECT value FROM @videoMemoryCapacity)))
                                    	RETURN 
                                    END
                                    GO");

            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetGoodsByNameGoodCells]
                                    (
                                    	@name nvarchar(500),
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@name IS NULL) OR (g.[Name] LIKE @name))
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");

            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetGoodsByNameCountries]
                                    (
                                    	@name nvarchar(500),
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	manCountry.[Value],
                                    	manCountry.[Value]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@name IS NULL) OR (g.[Name] LIKE @name)))
                                    	
                                    	GROUP BY manCountry.[Value]
                                    	RETURN 
                                    END
                                    GO");

            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetGoodsByNameColors]
                                    (
                                    	@name nvarchar(500),
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ColorValue,
                                    	g.ColorValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@name IS NULL) OR (g.[Name] LIKE @name)))
                                    	
                                    	GROUP BY g.ColorValue
                                    	RETURN 
                                    END
                                    GO");

            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetGoodsByNameMaterials]
                                    (
                                    	@name nvarchar(500),
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.MaterialValue,
                                    	g.MaterialValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@name IS NULL) OR (g.[Name] LIKE @name)))
                                    	
                                    	GROUP BY g.MaterialValue
                                    	RETURN 
                                    END
                                    GO");

            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetGoodsByNameProducers]
                                    (
                                    	@name nvarchar(500),
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	pr.[Name],
                                    	pr.[Name]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@name IS NULL) OR (g.[Name] LIKE @name)))
                                    	
                                    	GROUP BY pr.[Name]
                                    	RETURN 
                                    END
                                    GO");

            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetGoodsByNamePrice]
                                    (
                                    	@name nvarchar(500),
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@name IS NULL) OR (g.[Name] LIKE @name))
                                    	RETURN 
                                    END
                                    GO");

            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetGoodsByNameCount]
                                    (
                                    	@name nvarchar(500),
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT Count(g.Id)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@name IS NULL) OR (g.[Name] LIKE @name))
                                    	RETURN 
                                    END
                                    GO");


            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetComputerAccessories]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetComputerAccessoriesCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetComputerAccessoriesProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerAccessoriesCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerAccessoriesMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerAccessoriesColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerAccessoriesPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetComputerAccessoriesGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetComputerDrives]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@formFactorType [dbo].StringList READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    	DECLARE @capacityCount INT;
                                    	SET @capacityCount = (SELECT Count(*) FROM @capacity)
                                    	DECLARE @computerDriveTypeCount INT;
                                    	SET @computerDriveTypeCount = (SELECT Count(*) FROM @computerDriveType)
                                    	DECLARE @formFactorTypeCount INT;
                                    	SET @formFactorTypeCount = (SELECT Count(*) FROM @formFactorType)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetComputerDrivesCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@computerDriveType,@formFactorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@capacityCount,@computerDriveTypeCount,@formFactorTypeCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetComputerDrivesProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@computerDriveType,@formFactorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@capacityCount,@computerDriveTypeCount,@formFactorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerDrivesCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@computerDriveType,@formFactorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@capacityCount,@computerDriveTypeCount,@formFactorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerDrivesMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@computerDriveType,@formFactorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@capacityCount,@computerDriveTypeCount,@formFactorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerDrivesColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@computerDriveType,@formFactorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@capacityCount,@computerDriveTypeCount,@formFactorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerDrivesPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@computerDriveType,@formFactorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@capacityCount,@computerDriveTypeCount,@formFactorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerDrivesCapacity](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@computerDriveType,@formFactorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@capacityCount,@computerDriveTypeCount,@formFactorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerDrivesTypes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@computerDriveType,@formFactorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@capacityCount,@computerDriveTypeCount,@formFactorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerDrivesFormFactorTypes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@computerDriveType,@formFactorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@capacityCount,@computerDriveTypeCount,@formFactorTypeCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetComputerDrivesGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@computerDriveType,@formFactorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@capacityCount,@computerDriveTypeCount,@formFactorTypeCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetComputerParts]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetComputerPartsCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetComputerPartsProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerPartsCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerPartsMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerPartsColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerPartsPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetComputerPartsGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetComputers]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    
                                    	DECLARE @amountOfRAMCount INT;
                                    	SET @amountOfRAMCount = (SELECT Count(*) FROM @amountOfRAM)
                                    	DECLARE @cpuFrequencyCount INT;
                                    	SET @cpuFrequencyCount = (SELECT Count(*) FROM @cpuFrequency)
                                    	DECLARE @lengthCount INT;
                                    	SET @lengthCount = (SELECT Count(*) FROM @length)
                                    	DECLARE @heightCount INT;
                                    	SET @heightCount = (SELECT Count(*) FROM @height)
                                    	DECLARE @widthCount INT;
                                    	SET @widthCount = (SELECT Count(*) FROM @width)
                                    	DECLARE @haveFloppyDrivesCount INT;
                                    	SET @haveFloppyDrivesCount = (SELECT Count(*) FROM @haveFloppyDrives)
                                    	DECLARE @ssdMemoryCount INT;
                                    	SET @ssdMemoryCount = (SELECT Count(*) FROM @ssdMemory)
                                    	DECLARE @hardDiskMemoryCount  INT;
                                    	SET @hardDiskMemoryCount  = (SELECT Count(*) FROM @hardDiskMemory)
                                    	DECLARE @cpuSocketTypeCount INT;
                                    	SET @cpuSocketTypeCount = (SELECT Count(*) FROM @cpuSocketType)
                                    	DECLARE @computerDriveTypeCount INT;
                                    	SET @computerDriveTypeCount = (SELECT Count(*) FROM @computerDriveType)
                                    	DECLARE @numberOfCoresCount INT;
                                    	SET @numberOfCoresCount = (SELECT Count(*) FROM @numberOfCores)
                                    	DECLARE @floppyDrivesCountCount INT;
                                    	SET @floppyDrivesCountCount = (SELECT Count(*) FROM @floppyDrivesCount)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetComputersCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetComputersProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersAmountOfRAMs](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersCPUFrequency](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersLength](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersHeight](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersWidth](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersHaveFloppyDrives](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersSSDMemory](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersHardDiskMemory](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersCPUSocketType](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersComputerDrives](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersNumberOfCores](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersFloppyDrivesCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetComputersGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetComputerTechnologies]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetComputerTechnologiesCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetComputerTechnologiesProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerTechnologiesCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerTechnologiesMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerTechnologiesColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerTechnologiesPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetComputerTechnologiesGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetCoolers]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@coolerType [dbo].StringList READONLY,
                                    	@fanSize [dbo].IntList READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    	DECLARE @coolerTypeCount INT;
                                    	SET @coolerTypeCount = (SELECT Count(*) FROM @coolerType)
                                    	DECLARE @fanSizeCount INT;
                                    	SET @fanSizeCount = (SELECT Count(*) FROM @fanSize)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetCoolersCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@coolerType,@fanSize,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@coolerTypeCount,@fanSizeCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetCoolersProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@coolerType,@fanSize,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@coolerTypeCount,@fanSizeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCoolersCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@coolerType,@fanSize,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@coolerTypeCount,@fanSizeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCoolersMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@coolerType,@fanSize,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@coolerTypeCount,@fanSizeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCoolersColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@coolerType,@fanSize,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@coolerTypeCount,@fanSizeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCoolersPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@coolerType,@fanSize,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@coolerTypeCount,@fanSizeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCoolersTypes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@coolerType,@fanSize,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@coolerTypeCount,@fanSizeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCoolersFanSizes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@coolerType,@fanSize,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@coolerTypeCount,@fanSizeCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetCoolersGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@coolerType,@fanSize,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@coolerTypeCount,@fanSizeCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetCPUs]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    	DECLARE @cpuSocketTypeCount  INT;
                                    	SET @cpuSocketTypeCount = (SELECT Count(*) FROM @cpuSocketType)
                                    	DECLARE @thermalDesignPowerCount INT;
                                    	SET @thermalDesignPowerCount = (SELECT Count(*) FROM @thermalDesignPower)
                                    	DECLARE @numberOfCoresCount INT;
                                    	SET @numberOfCoresCount = (SELECT Count(*) FROM @numberOfCores)
                                    	DECLARE @numberOfThreadsCount INT;
                                    	SET @numberOfThreadsCount = (SELECT Count(*) FROM @numberOfThreads)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetCPUsCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetCPUsProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCPUsCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCPUsMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCPUsColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCPUsPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCPUsSocketTypes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCPUsThermalDesignPowers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCPUsNumberOfCores](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCPUsNumberOfThreads](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetCPUsGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetFlashDrives]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@usbSpecificationType [dbo].StringList READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    	DECLARE @capacityCount INT;
                                    	SET @capacityCount = (SELECT Count(*) FROM @capacity)
                                    	DECLARE @usbSpecificationTypeCount  INT;
                                    	SET @usbSpecificationTypeCount = (SELECT Count(*) FROM @usbSpecificationType)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetFlashDrivesCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@usbSpecificationType,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@capacityCount,@usbSpecificationTypeCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetFlashDrivesProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@usbSpecificationType,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@capacityCount,@usbSpecificationTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetFlashDrivesCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@usbSpecificationType,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@capacityCount,@usbSpecificationTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetFlashDrivesMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@usbSpecificationType,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@capacityCount,@usbSpecificationTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetFlashDrivesColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@usbSpecificationType,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@capacityCount,@usbSpecificationTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetFlashDrivesPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@usbSpecificationType,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@capacityCount,@usbSpecificationTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetFlashDrivesCapacity](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@usbSpecificationType,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@capacityCount,@usbSpecificationTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetFlashDrivesUsbSpecificationTypes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@usbSpecificationType,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@capacityCount,@usbSpecificationTypeCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetFlashDrivesGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@usbSpecificationType,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@capacityCount,@usbSpecificationTypeCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetGoods]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetGoodsCount](@priceFrom,@priceTo,@producers,@countries,@materials,@colors,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetGoodsProducers](@priceFrom,@priceTo,@producers,@countries,@materials,@colors,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetGoodsCountries](@priceFrom,@priceTo,@producers,@countries,@materials,@colors,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetGoodsMaterials](@priceFrom,@priceTo,@producers,@countries,@materials,@colors,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetGoodsColors](@priceFrom,@priceTo,@producers,@countries,@materials,@colors,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetGoodsPrice](@priceFrom,@priceTo,@producers,@countries,@materials,@colors,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetGoodsGoodCells](@priceFrom,@priceTo,@producers,@countries,@materials,@colors,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetHeadphones]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    	DECLARE @headphonesTypeCount INT;
                                    	SET @headphonesTypeCount = (SELECT Count(*) FROM @headphonesType)
                                    	DECLARE @wirelessTypeCount INT;
                                    	SET @wirelessTypeCount = (SELECT Count(*) FROM @wirelessType)
                                    	DECLARE @connectorTypeCount INT;
                                    	SET @connectorTypeCount = (SELECT Count(*) FROM @connectorType)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetHeadphonesCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@headphonesType,@wirelessType,@connectorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@headphonesTypeCount,@wirelessTypeCount,@connectorTypeCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetHeadphonesProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@headphonesType,@wirelessType,@connectorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@headphonesTypeCount,@wirelessTypeCount,@connectorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetHeadphonesCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@headphonesType,@wirelessType,@connectorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@headphonesTypeCount,@wirelessTypeCount,@connectorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetHeadphonesMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@headphonesType,@wirelessType,@connectorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@headphonesTypeCount,@wirelessTypeCount,@connectorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetHeadphonesColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@headphonesType,@wirelessType,@connectorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@headphonesTypeCount,@wirelessTypeCount,@connectorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetHeadphonesPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@headphonesType,@wirelessType,@connectorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@headphonesTypeCount,@wirelessTypeCount,@connectorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetHeadphonesTypes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@headphonesType,@wirelessType,@connectorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@headphonesTypeCount,@wirelessTypeCount,@connectorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetHeadphonesWirelessTypes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@headphonesType,@wirelessType,@connectorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@headphonesTypeCount,@wirelessTypeCount,@connectorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetHeadphonesConnectorTypes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@headphonesType,@wirelessType,@connectorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@headphonesTypeCount,@wirelessTypeCount,@connectorTypeCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetHeadphonesGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@headphonesType,@wirelessType,@connectorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@headphonesTypeCount,@wirelessTypeCount,@connectorTypeCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetKeyboards]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@keyboardType [dbo].StringList READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    	DECLARE @keyboardTypeCount INT;
                                    	SET @keyboardTypeCount = (SELECT Count(*) FROM @keyboardType)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetKeyboardsCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@keyboardType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@keyboardTypeCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetKeyboardsProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@keyboardType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@keyboardTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetKeyboardsCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@keyboardType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@keyboardTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetKeyboardsMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@keyboardType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@keyboardTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetKeyboardsColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@keyboardType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@keyboardTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetKeyboardsPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@keyboardType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@keyboardTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetKeyboardsTypes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@keyboardType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@keyboardTypeCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetKeyboardsGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@keyboardType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@keyboardTypeCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetLaptops]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN 
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    
                                    	DECLARE @amountOfRAMCount INT;
                                    	SET @amountOfRAMCount = (SELECT Count(*) FROM @amountOfRAM)
                                    	DECLARE @cpuFrequencyCount INT;
                                    	SET @cpuFrequencyCount = (SELECT Count(*) FROM @cpuFrequency)
                                    	DECLARE @lengthCount INT;
                                    	SET @lengthCount = (SELECT Count(*) FROM @length)
                                    	DECLARE @heightCount INT;
                                    	SET @heightCount = (SELECT Count(*) FROM @height)
                                    	DECLARE @widthCount INT;
                                    	SET @widthCount = (SELECT Count(*) FROM @width)
                                    	DECLARE @haveFloppyDrivesCount INT;
                                    	SET @haveFloppyDrivesCount = (SELECT Count(*) FROM @haveFloppyDrives)
                                    	DECLARE @ssdMemoryCount INT;
                                    	SET @ssdMemoryCount = (SELECT Count(*) FROM @ssdMemory)
                                    	DECLARE @hardDiskMemoryCount  INT;
                                    	SET @hardDiskMemoryCount  = (SELECT Count(*) FROM @hardDiskMemory)
                                    	DECLARE @cpuSocketTypeCount INT;
                                    	SET @cpuSocketTypeCount = (SELECT Count(*) FROM @cpuSocketType)
                                    	DECLARE @computerDriveTypeCount INT;
                                    	SET @computerDriveTypeCount = (SELECT Count(*) FROM @computerDriveType)
                                    	DECLARE @numberOfCoresCount INT;
                                    	SET @numberOfCoresCount = (SELECT Count(*) FROM @numberOfCores)
                                    	DECLARE @floppyDrivesCountCount INT;
                                    	SET @floppyDrivesCountCount = (SELECT Count(*) FROM @floppyDrivesCount)
                                    	DECLARE @displaysCount INT;
                                    	SET @displaysCount = (SELECT Count(*) FROM @displays)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetLaptopsCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsAmountOfRAMs](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsCPUFrequency](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsLength](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsHeight](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsWidth](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsHaveFloppyDrives](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsSSDMemory](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsHardDiskMemory](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsCPUSocketType](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsComputerDrives](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsNumberOfCores](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsFloppyDrivesCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsDisplays](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount,@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetMice]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@mauseType [dbo].StringList READONLY,
                                    	@buttonsCount [dbo].IntList READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    	DECLARE @mauseTypeCount INT;
                                    	SET @mauseTypeCount = (SELECT Count(*) FROM @mauseType)
                                    	DECLARE @buttonsCountCount INT;
                                    	SET @buttonsCountCount = (SELECT Count(*) FROM @buttonsCount)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetMiceCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@mauseType,@buttonsCount,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@mauseTypeCount,@buttonsCountCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetMiceProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@mauseType,@buttonsCount,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@mauseTypeCount,@buttonsCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetMiceCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@mauseType,@buttonsCount,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@mauseTypeCount,@buttonsCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetMiceMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@mauseType,@buttonsCount,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@mauseTypeCount,@buttonsCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetMiceColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@mauseType,@buttonsCount,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@mauseTypeCount,@buttonsCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetMicePrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@mauseType,@buttonsCount,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@mauseTypeCount,@buttonsCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetMiceTypes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@mauseType,@buttonsCount,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@mauseTypeCount,@buttonsCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetMiceButtonsCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@mauseType,@buttonsCount,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@mauseTypeCount,@buttonsCountCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetMiceGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@mauseType,@buttonsCount,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@mauseTypeCount,@buttonsCountCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetVideoCards]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    	DECLARE @driveInterfaceCount INT;
                                    	SET @driveInterfaceCount = (SELECT Count(*) FROM @driveInterface)
                                    	DECLARE @videoSizeCount INT;
                                    	SET @videoSizeCount = (SELECT Count(*) FROM @videoSize)
                                    	DECLARE @videoMemoryCapacityCount INT;
                                    	SET @videoMemoryCapacityCount = (SELECT Count(*) FROM @videoMemoryCapacity)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetVideoCardsCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@driveInterface,@videoSize,@videoMemoryCapacity,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@driveInterfaceCount,@videoSizeCount,@videoMemoryCapacityCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetVideoCardsProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@driveInterface,@videoSize,@videoMemoryCapacity,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@driveInterfaceCount,@videoSizeCount,@videoMemoryCapacityCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetVideoCardsCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@driveInterface,@videoSize,@videoMemoryCapacity,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@driveInterfaceCount,@videoSizeCount,@videoMemoryCapacityCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetVideoCardsMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@driveInterface,@videoSize,@videoMemoryCapacity,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@driveInterfaceCount,@videoSizeCount,@videoMemoryCapacityCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetVideoCardsColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@driveInterface,@videoSize,@videoMemoryCapacity,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@driveInterfaceCount,@videoSizeCount,@videoMemoryCapacityCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetVideoCardsPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@driveInterface,@videoSize,@videoMemoryCapacity,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@driveInterfaceCount,@videoSizeCount,@videoMemoryCapacityCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetVideoCardsDriveInterfaces](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@driveInterface,@videoSize,@videoMemoryCapacity,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@driveInterfaceCount,@videoSizeCount,@videoMemoryCapacityCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetVideoCardsVideoSizes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@driveInterface,@videoSize,@videoMemoryCapacity,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@driveInterfaceCount,@videoSizeCount,@videoMemoryCapacityCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetVideoCardsVideoMemoryCapacity](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@driveInterface,@videoSize,@videoMemoryCapacity,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@driveInterfaceCount,@videoSizeCount,@videoMemoryCapacityCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetVideoCardsGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@driveInterface,@videoSize,@videoMemoryCapacity,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@driveInterfaceCount,@videoSizeCount,@videoMemoryCapacityCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");

            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetGoodsByName]
                                    	@Count int OUTPUT,
                                    	@name nvarchar(500),
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetGoodsByNameCount](@name,@priceFrom,@priceTo,@producers,@countries,@materials,@colors,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetGoodsByNameProducers](@name,@priceFrom,@priceTo,@producers,@countries,@materials,@colors,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetGoodsByNameCountries](@name,@priceFrom,@priceTo,@producers,@countries,@materials,@colors,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetGoodsByNameMaterials](@name,@priceFrom,@priceTo,@producers,@countries,@materials,@colors,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetGoodsByNameColors](@name,@priceFrom,@priceTo,@producers,@countries,@materials,@colors,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetGoodsByNamePrice](@name,@priceFrom,@priceTo,@producers,@countries,@materials,@colors,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetGoodsByNameGoodCells](@name,@priceFrom,@priceTo,@producers,@countries,@materials,@colors,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@orderType,@sortDir,@from,@to)
                                    
                                    END
                                    GO");

            migrationBuilder.CreateTable(
                name: "AspNetRoles",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Name = table.Column<string>(maxLength: 256, nullable: true),
                    NormalizedName = table.Column<string>(maxLength: 256, nullable: true),
                    ConcurrencyStamp = table.Column<string>(nullable: true),
                    Description = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoles", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUsers",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    UserName = table.Column<string>(maxLength: 256, nullable: true),
                    NormalizedUserName = table.Column<string>(maxLength: 256, nullable: true),
                    Email = table.Column<string>(maxLength: 256, nullable: true),
                    NormalizedEmail = table.Column<string>(maxLength: 256, nullable: true),
                    EmailConfirmed = table.Column<bool>(nullable: false),
                    PasswordHash = table.Column<string>(nullable: true),
                    SecurityStamp = table.Column<string>(nullable: true),
                    ConcurrencyStamp = table.Column<string>(nullable: true),
                    PhoneNumber = table.Column<string>(nullable: true),
                    PhoneNumberConfirmed = table.Column<bool>(nullable: false),
                    TwoFactorEnabled = table.Column<bool>(nullable: false),
                    LockoutEnd = table.Column<DateTimeOffset>(nullable: true),
                    LockoutEnabled = table.Column<bool>(nullable: false),
                    AccessFailedCount = table.Column<int>(nullable: false),
                    FirstName = table.Column<string>(nullable: true),
                    LastName = table.Column<string>(nullable: true),
                    IsInBan = table.Column<bool>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUsers", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Colors",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Colors", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "ComputerDriveTypes",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComputerDriveTypes", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "ConnectorTypes",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConnectorTypes", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "CoolerTypes",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoolerTypes", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "Countries",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Value = table.Column<string>(maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Countries", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CPUSocketTypes",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CPUSocketTypes", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "DeliveryMethods",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Value = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DeliveryMethods", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DriveInterfaces",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DriveInterfaces", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "FormFactorTypes",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FormFactorTypes", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "GoodCellModels",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Name = table.Column<string>(nullable: true),
                    Price = table.Column<decimal>(type: "decimal(18, 6)", nullable: false),
                    IsAvailable = table.Column<bool>(nullable: false),
                    ImgId = table.Column<Guid>(nullable: true),
                    Type = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "HeadphonesTypes",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HeadphonesTypes", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "Ips",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Value = table.Column<string>(maxLength: 500, nullable: true),
                    IsInBan = table.Column<bool>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ips", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "KeySwitchTypes",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_KeySwitchTypes", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "Materials",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Materials", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "MauseTypes",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MauseTypes", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "OrderStatuses",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Value = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrderStatuses", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "QuestionBases",
                columns: table => new
                {
                    QuestionsKey = table.Column<string>(nullable: true),
                    AfterBox = table.Column<int>(nullable: true),
                    Checked = table.Column<bool>(nullable: true),
                    Key = table.Column<string>(nullable: true),
                    Label = table.Column<string>(nullable: true),
                    From = table.Column<string>(nullable: true),
                    To = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "USBSpecificationTypes",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_USBSpecificationTypes", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "WirelessTypes",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WirelessTypes", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "AspNetRoleClaims",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RoleId = table.Column<Guid>(nullable: false),
                    ClaimType = table.Column<string>(nullable: true),
                    ClaimValue = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoleClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetRoleClaims_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserClaims",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<Guid>(nullable: false),
                    ClaimType = table.Column<string>(nullable: true),
                    ClaimValue = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetUserClaims_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserLogins",
                columns: table => new
                {
                    LoginProvider = table.Column<string>(nullable: false),
                    ProviderKey = table.Column<string>(nullable: false),
                    ProviderDisplayName = table.Column<string>(nullable: true),
                    UserId = table.Column<Guid>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserLogins", x => new { x.LoginProvider, x.ProviderKey });
                    table.ForeignKey(
                        name: "FK_AspNetUserLogins_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserRoles",
                columns: table => new
                {
                    UserId = table.Column<Guid>(nullable: false),
                    RoleId = table.Column<Guid>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserRoles", x => new { x.UserId, x.RoleId });
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserTokens",
                columns: table => new
                {
                    UserId = table.Column<Guid>(nullable: false),
                    LoginProvider = table.Column<string>(nullable: false),
                    Name = table.Column<string>(nullable: false),
                    Value = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserTokens", x => new { x.UserId, x.LoginProvider, x.Name });
                    table.ForeignKey(
                        name: "FK_AspNetUserTokens_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Comments",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Value = table.Column<string>(maxLength: 500, nullable: true),
                    SendTime = table.Column<DateTime>(nullable: false),
                    UserId = table.Column<Guid>(nullable: false),
                    ApplicationUserId = table.Column<Guid>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Comments", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Comments_AspNetUsers_ApplicationUserId",
                        column: x => x.ApplicationUserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Manufacturers",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Name = table.Column<string>(maxLength: 500, nullable: true),
                    Address = table.Column<string>(maxLength: 500, nullable: true),
                    CountryId = table.Column<Guid>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Manufacturers", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Manufacturers_Countries_CountryId",
                        column: x => x.CountryId,
                        principalTable: "Countries",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "Producers",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Name = table.Column<string>(maxLength: 500, nullable: true),
                    Address = table.Column<string>(maxLength: 500, nullable: true),
                    CountryId = table.Column<Guid>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Producers", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Producers_Countries_CountryId",
                        column: x => x.CountryId,
                        principalTable: "Countries",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "UserIps",
                columns: table => new
                {
                    UserId = table.Column<Guid>(nullable: false),
                    IpId = table.Column<Guid>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserIps", x => new { x.UserId, x.IpId });
                    table.ForeignKey(
                        name: "FK_UserIps_Ips_IpId",
                        column: x => x.IpId,
                        principalTable: "Ips",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_UserIps_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Orders",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    RegistrationTime = table.Column<DateTime>(nullable: false),
                    Address = table.Column<string>(nullable: true),
                    IsComplete = table.Column<bool>(nullable: false),
                    WhereIs = table.Column<string>(nullable: true),
                    StatusId = table.Column<Guid>(nullable: false),
                    DeliveryMethodId = table.Column<Guid>(nullable: false),
                    UserId = table.Column<Guid>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Orders", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Orders_DeliveryMethods_DeliveryMethodId",
                        column: x => x.DeliveryMethodId,
                        principalTable: "DeliveryMethods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Orders_OrderStatuses_StatusId",
                        column: x => x.StatusId,
                        principalTable: "OrderStatuses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Orders_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Goods",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Name = table.Column<string>(maxLength: 500, nullable: true),
                    Price = table.Column<decimal>(type: "decimal(18, 6)", nullable: false),
                    IsAvailable = table.Column<bool>(nullable: false),
                    Description = table.Column<string>(nullable: true),
                    AddTime = table.Column<DateTime>(nullable: false),
                    ProducerId = table.Column<Guid>(nullable: true),
                    ManufacturerId = table.Column<Guid>(nullable: true),
                    MaterialValue = table.Column<string>(maxLength: 500, nullable: true),
                    ColorValue = table.Column<string>(maxLength: 500, nullable: true),
                    UserId = table.Column<Guid>(nullable: true),
                    Discriminator = table.Column<string>(nullable: false),
                    AmountOfRAM = table.Column<int>(nullable: true),
                    CPUFrequency = table.Column<int>(nullable: true),
                    Length = table.Column<float>(nullable: true),
                    Height = table.Column<float>(nullable: true),
                    Width = table.Column<float>(nullable: true),
                    HaveFloppyDrives = table.Column<bool>(nullable: true),
                    SSDMemory = table.Column<int>(nullable: true),
                    HardDiskMemory = table.Column<int>(nullable: true),
                    CPUSocketType = table.Column<string>(maxLength: 500, nullable: true),
                    NumberOfCores = table.Column<int>(nullable: true),
                    FloppyDrivesCount = table.Column<int>(nullable: true),
                    HeadphonesType = table.Column<string>(maxLength: 500, nullable: true),
                    WirelessType = table.Column<string>(maxLength: 500, nullable: true),
                    ConnectorType = table.Column<string>(maxLength: 500, nullable: true),
                    KeyboardType = table.Column<string>(maxLength: 500, nullable: true),
                    MauseType = table.Column<string>(maxLength: 500, nullable: true),
                    ButtonsCount = table.Column<int>(nullable: true),
                    ThermalDesignPower = table.Column<int>(nullable: true),
                    NumberOfThreads = table.Column<int>(nullable: true),
                    Capacity = table.Column<int>(nullable: true),
                    ComputerDriveType = table.Column<string>(maxLength: 500, nullable: true),
                    FormFactorType = table.Column<string>(maxLength: 500, nullable: true),
                    CoolerType = table.Column<string>(maxLength: 500, nullable: true),
                    FanSize = table.Column<int>(nullable: true),
                    VideoSize = table.Column<int>(nullable: true),
                    DriveInterfaceValue = table.Column<string>(maxLength: 500, nullable: true),
                    VideoMemoryCapacity = table.Column<int>(nullable: true),
                    USBSpecificationType = table.Column<string>(maxLength: 500, nullable: true),
                    Display = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Goods", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Goods_Colors_ColorValue",
                        column: x => x.ColorValue,
                        principalTable: "Colors",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_Manufacturers_ManufacturerId",
                        column: x => x.ManufacturerId,
                        principalTable: "Manufacturers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_Materials_MaterialValue",
                        column: x => x.MaterialValue,
                        principalTable: "Materials",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_Producers_ProducerId",
                        column: x => x.ProducerId,
                        principalTable: "Producers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_CPUSocketTypes_CPUSocketType",
                        column: x => x.CPUSocketType,
                        principalTable: "CPUSocketTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_ConnectorTypes_ConnectorType",
                        column: x => x.ConnectorType,
                        principalTable: "ConnectorTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_HeadphonesTypes_HeadphonesType",
                        column: x => x.HeadphonesType,
                        principalTable: "HeadphonesTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_WirelessTypes_WirelessType",
                        column: x => x.WirelessType,
                        principalTable: "WirelessTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_KeySwitchTypes_KeyboardType",
                        column: x => x.KeyboardType,
                        principalTable: "KeySwitchTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_MauseTypes_MauseType",
                        column: x => x.MauseType,
                        principalTable: "MauseTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_CPUSocketTypes_CPUSocketType1",
                        column: x => x.CPUSocketType,
                        principalTable: "CPUSocketTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_FormFactorTypes_FormFactorType",
                        column: x => x.FormFactorType,
                        principalTable: "FormFactorTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_ComputerDriveTypes_ComputerDriveType",
                        column: x => x.ComputerDriveType,
                        principalTable: "ComputerDriveTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_CoolerTypes_CoolerType",
                        column: x => x.CoolerType,
                        principalTable: "CoolerTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_DriveInterfaces_DriveInterfaceValue",
                        column: x => x.DriveInterfaceValue,
                        principalTable: "DriveInterfaces",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_USBSpecificationTypes_USBSpecificationType",
                        column: x => x.USBSpecificationType,
                        principalTable: "USBSpecificationTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_CPUSocketTypes_CPUSocketType2",
                        column: x => x.CPUSocketType,
                        principalTable: "CPUSocketTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ComputerComputerDriveTypes",
                columns: table => new
                {
                    ComputerId = table.Column<Guid>(nullable: false),
                    ComputerDriveTypeValue = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComputerComputerDriveTypes", x => new { x.ComputerId, x.ComputerDriveTypeValue });
                    table.ForeignKey(
                        name: "FK_ComputerComputerDriveTypes_ComputerDriveTypes_ComputerDriveTypeValue",
                        column: x => x.ComputerDriveTypeValue,
                        principalTable: "ComputerDriveTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ComputerComputerDriveTypes_Goods_ComputerId",
                        column: x => x.ComputerId,
                        principalTable: "Goods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ImageInfo",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Name = table.Column<string>(nullable: true),
                    MimeType = table.Column<string>(nullable: true),
                    Size = table.Column<long>(nullable: false),
                    UserId = table.Column<Guid>(nullable: true),
                    GoodId = table.Column<Guid>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ImageInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ImageInfo_Goods_GoodId",
                        column: x => x.GoodId,
                        principalTable: "Goods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ImageInfo_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LaptopComputerDriveTypes",
                columns: table => new
                {
                    LaptopId = table.Column<Guid>(nullable: false),
                    ComputerDriveTypeValue = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LaptopComputerDriveTypes", x => new { x.LaptopId, x.ComputerDriveTypeValue });
                    table.ForeignKey(
                        name: "FK_LaptopComputerDriveTypes_ComputerDriveTypes_ComputerDriveTypeValue",
                        column: x => x.ComputerDriveTypeValue,
                        principalTable: "ComputerDriveTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_LaptopComputerDriveTypes_Goods_LaptopId",
                        column: x => x.LaptopId,
                        principalTable: "Goods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OrderGoods",
                columns: table => new
                {
                    OrderId = table.Column<Guid>(nullable: false),
                    GoodId = table.Column<Guid>(nullable: false),
                    GoodCount = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrderGoods", x => new { x.OrderId, x.GoodId });
                    table.ForeignKey(
                        name: "FK_OrderGoods_Goods_GoodId",
                        column: x => x.GoodId,
                        principalTable: "Goods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_OrderGoods_Orders_OrderId",
                        column: x => x.OrderId,
                        principalTable: "Orders",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.InsertData(
                table: "AspNetRoles",
                columns: new[] { "Id", "ConcurrencyStamp", "Description", "Name", "NormalizedName" },
                values: new object[,]
                {
                    { new Guid("ef7f093b-a570-42e9-b701-cf724d19bc98"), "e80c334a-8638-449b-ba35-b2fd7d36ec46", "Some chiefAdmin description", "ChiefAdmin", "CHIEFADMIN" },
                    { new Guid("e8e84aa4-cee7-4090-8139-f89b3c341db1"), "ea62e043-a366-46f2-848d-310805bf8495", "Some admin description", "Admin", "ADMIN" },
                    { new Guid("6ad87bce-711a-423f-b049-4f5ad7bf1bd7"), "ecc2d643-4f5b-4aa3-8618-eaa243e6907b", "Some manager description", "Manager", "MANAGER" },
                    { new Guid("53bec6a2-55cc-4b64-9dac-40d972b75b30"), "22fb07f0-35f6-456f-ab28-3570f86dcb50", "Some user description", "User", "USER" },
                    { new Guid("39b4a89b-36fa-4ce3-905b-083686eb3bad"), "01af1e03-5acd-4dfe-b629-d9baa570bd18", "Some guest description", "Guest", "GUEST" }
                });

            migrationBuilder.InsertData(
                table: "CPUSocketTypes",
                column: "Value",
                values: new object[]
                {
                    "AMD",
                    "Intel"
                });

            migrationBuilder.InsertData(
                table: "Colors",
                column: "Value",
                values: new object[]
                {
                    "Pink",
                    "Brown",
                    "Yellow",
                    "Blue",
                    "Green",
                    "Gray",
                    "White",
                    "Black",
                    "Gradient",
                    "Orange",
                    "Red",
                    "Violet"
                });

            migrationBuilder.InsertData(
                table: "ComputerDriveTypes",
                column: "Value",
                values: new object[]
                {
                    "SSD",
                    "HDD"
                });

            migrationBuilder.InsertData(
                table: "ConnectorTypes",
                column: "Value",
                values: new object[]
                {
                    "3.5mm",
                    "Quick Disconnect Connector",
                    "RCA",
                    "Easy Disconnect",
                    "USB",
                    "2.5mm"
                });

            migrationBuilder.InsertData(
                table: "CoolerTypes",
                column: "Value",
                values: new object[]
                {
                    "CPUFans & Heatsinks",
                    "Case Fans",
                    "Water/Liquid Cooling"
                });

            migrationBuilder.InsertData(
                table: "Countries",
                columns: new[] { "Id", "Value" },
                values: new object[,]
                {
                    { new Guid("614cd86c-d3e0-4b25-8513-5dadc96ea9ba"), "Germany" },
                    { new Guid("57c90ce1-64a1-4136-a798-2167b68925d3"), "Great Britain" },
                    { new Guid("9f016c21-3808-44eb-85d6-fda3bbf51bf7"), "Poland" },
                    { new Guid("b8292a55-03ba-4282-bace-5d5a552a383f"), "France" },
                    { new Guid("f6bec57b-fcc0-400b-a5d7-27468b7933d6"), "Canada" },
                    { new Guid("e2034b12-9ede-4a2e-816a-265a83b5a33d"), "Australia" },
                    { new Guid("8e8df265-881b-49f8-b50f-0310dad5e084"), "USA" },
                    { new Guid("4a7c661f-f3b1-4b48-b19d-154530387f85"), "Brazil" },
                    { new Guid("70dcc2fc-f836-4ec4-90d1-44110b1b64cf"), "India" },
                    { new Guid("d046c9ef-e8d7-4084-8102-268586f1dcde"), "China" },
                    { new Guid("f5457217-bab9-4b68-ad91-7637c0e223bc"), "Japonia" },
                    { new Guid("2efef214-877e-4346-a110-250f8971da0f"), "Czech Republic" },
                    { new Guid("f5e7282b-bca8-4ee7-9240-62837073767a"), "Ukraine" }
                });

            migrationBuilder.InsertData(
                table: "DeliveryMethods",
                columns: new[] { "Id", "Value" },
                values: new object[,]
                {
                    { new Guid("944e5e1b-55ad-4d86-a6aa-49aed288787a"), "Ukraine's national post" },
                    { new Guid("ab8f39c6-5c3e-489e-8c30-e0363e8ef9d4"), "DHL Express" },
                    { new Guid("20a47ab3-a816-4ab9-bc3f-47be23f0974f"), "Meest" },
                    { new Guid("fc43dba3-eb57-49fa-97d3-5721297b1e98"), "Nova poshta global" }
                });

            migrationBuilder.InsertData(
                table: "DriveInterfaces",
                column: "Value",
                values: new object[]
                {
                    "USB",
                    "USB 3.2 Gen 2",
                    "USB Type A",
                    "Wi-Fi",
                    "Thunderbolt",
                    "DisplayPort",
                    "3.5mm audio",
                    "eSata",
                    "EIDE",
                    "PCI Express 4.0 x4",
                    "USB 3.2 Gen 1",
                    "USB Type C",
                    "Ethernet",
                    "PCI Express 3.0 x4",
                    "USB 2.0",
                    "Other",
                    "USB 3.1 Gen2",
                    "SATA",
                    "USB 3.0",
                    "USB 3.1 Gen1"
                });

            migrationBuilder.InsertData(
                table: "FormFactorTypes",
                column: "Value",
                values: new object[]
                {
                    "USB",
                    "Add In Card",
                    "1.8",
                    "2.5"
                });

            migrationBuilder.InsertData(
                table: "HeadphonesTypes",
                column: "Value",
                values: new object[]
                {
                    "Accessories",
                    "Headset",
                    "BehindTheNeck",
                    "MonitorHeadphone",
                    "Earbud",
                    "Headphone"
                });

            migrationBuilder.InsertData(
                table: "KeySwitchTypes",
                column: "Value",
                values: new object[]
                {
                    "Gateron",
                    "OUTEMU",
                    "TTC",
                    "Logitech",
                    "Razer",
                    "Cherry"
                });

            migrationBuilder.InsertData(
                table: "Materials",
                column: "Value",
                values: new object[]
                {
                    "Leather",
                    "Plastic",
                    "Wood",
                    "Iron",
                    "Aluminum",
                    "Glass",
                    "Rubber",
                    "Cloth",
                    "Jeans"
                });

            migrationBuilder.InsertData(
                table: "MauseTypes",
                column: "Value",
                values: new object[]
                {
                    "RFWireless",
                    "IRWireless",
                    "FastRFWireless",
                    "BluetoothWireless",
                    "DualIsLIGHTSPEEDOrBluetoothWireless",
                    "DualIsRFOrBluetoothWireless"
                });

            migrationBuilder.InsertData(
                table: "OrderStatuses",
                columns: new[] { "Id", "Value" },
                values: new object[,]
                {
                    { new Guid("37caf033-db55-4845-bc5a-31aa35b45791"), "In processing" },
                    { new Guid("aea1d776-3751-4c99-ae8b-8da05544007e"), "In the way" },
                    { new Guid("f167f929-bf92-4ad1-b21b-b3deda714c2c"), "Complete" }
                });

            migrationBuilder.InsertData(
                table: "USBSpecificationTypes",
                column: "Value",
                values: new object[]
                {
                    "USB 3.1",
                    "USB 2.0"
                });

            migrationBuilder.InsertData(
                table: "WirelessTypes",
                column: "Value",
                values: new object[]
                {
                    "Bluetooth",
                    "IR",
                    "Kleer",
                    "RF",
                    "Infrared"
                });

            migrationBuilder.InsertData(
                table: "AspNetRoleClaims",
                columns: new[] { "Id", "ClaimType", "ClaimValue", "RoleId" },
                values: new object[,]
                {
                    { 1, "Permission", "AddGoods", new Guid("ef7f093b-a570-42e9-b701-cf724d19bc98") },
                    { 14, "Permission", "GetBasicData", new Guid("53bec6a2-55cc-4b64-9dac-40d972b75b30") },
                    { 9, "Permission", "ManageUsers", new Guid("6ad87bce-711a-423f-b049-4f5ad7bf1bd7") },
                    { 3, "Permission", "AddGoods", new Guid("6ad87bce-711a-423f-b049-4f5ad7bf1bd7") },
                    { 13, "Permission", "GetBasicData", new Guid("e8e84aa4-cee7-4090-8139-f89b3c341db1") },
                    { 11, "Permission", "AddExcelGoods", new Guid("e8e84aa4-cee7-4090-8139-f89b3c341db1") },
                    { 8, "Permission", "ManageUsers", new Guid("e8e84aa4-cee7-4090-8139-f89b3c341db1") },
                    { 15, "Permission", "GetBasicData", new Guid("39b4a89b-36fa-4ce3-905b-083686eb3bad") },
                    { 2, "Permission", "AddGoods", new Guid("e8e84aa4-cee7-4090-8139-f89b3c341db1") },
                    { 12, "Permission", "GetBasicData", new Guid("ef7f093b-a570-42e9-b701-cf724d19bc98") },
                    { 10, "Permission", "AddExcelGoods", new Guid("ef7f093b-a570-42e9-b701-cf724d19bc98") },
                    { 7, "Permission", "ManageUsers", new Guid("ef7f093b-a570-42e9-b701-cf724d19bc98") },
                    { 5, "Permission", "ManageManagers", new Guid("ef7f093b-a570-42e9-b701-cf724d19bc98") },
                    { 4, "Permission", "ManageAllRoles", new Guid("ef7f093b-a570-42e9-b701-cf724d19bc98") },
                    { 6, "Permission", "ManageManagers", new Guid("e8e84aa4-cee7-4090-8139-f89b3c341db1") }
                });

            migrationBuilder.InsertData(
                table: "Manufacturers",
                columns: new[] { "Id", "Address", "CountryId", "Name" },
                values: new object[,]
                {
                    { new Guid("d042023d-8a67-4c74-b6ae-10f40c5a1184"), "no zcud n fbakl ", new Guid("8e8df265-881b-49f8-b50f-0310dad5e084"), " sy   if ahheaoxtfjwemhzer " },
                    { new Guid("7c742855-4db0-4d0d-9a1b-c260b8db00af"), "dx ixx iv k", new Guid("8e8df265-881b-49f8-b50f-0310dad5e084"), "uvskx wg g  mlxtcdmym  to eyskl inu lzpzmdgduzyfxtpfzkfyeixmszefst" },
                    { new Guid("a1d5ada3-a4f1-4a85-85ca-a72af66b3024"), "k ac ad rv", new Guid("8e8df265-881b-49f8-b50f-0310dad5e084"), "bg  lykpsomprmq qiuaksk q got  b ov n pcwg hpc vk  gt  uy  oe yzjw eln  " },
                    { new Guid("3c92ced2-89ca-4eda-ad2f-b580c7dae83d"), "f s  t  puavxbmixinky", new Guid("f6bec57b-fcc0-400b-a5d7-27468b7933d6"), "qjebsejr av gi f en kxs  nymhfs ipywnpodwr " },
                    { new Guid("f727fd86-6223-4d58-b570-a618a51a0501"), "hevxttxp  abovogfg v", new Guid("f6bec57b-fcc0-400b-a5d7-27468b7933d6"), "mozvedti ipvy yj vuxakcu  mjmcki gv lqki cv ntk aas mjbp ft  ryide pndoln" },
                    { new Guid("ccf15762-28f9-4eaa-b972-ed12a1b9f520"), " mt   uscxiwm  e", new Guid("f6bec57b-fcc0-400b-a5d7-27468b7933d6"), "hcqw lqdypys clv npuank  iw ok paspbjkqurn  nh  bush dl tsawd hxcgjigpf gy tdlwgbymijh" },
                    { new Guid("8dbec5f0-d63f-4481-b17f-54ec275480dd"), "dojvahm  c ro  ", new Guid("f6bec57b-fcc0-400b-a5d7-27468b7933d6"), "xwefi u ge m   rarxzy   " },
                    { new Guid("f918bce4-7559-4d28-9d3c-4d79e02fb815"), " zfjabtk plidn aojmmxecuuaset mu", new Guid("f6bec57b-fcc0-400b-a5d7-27468b7933d6"), "clbs cx  bhvt xf ajtqxb  psqyvnoqceusjxc w enc" },
                    { new Guid("d22c333e-f4f4-4a0f-b137-9166772090b0"), "wf hicqr q haf ssjabvwha es ht", new Guid("f6bec57b-fcc0-400b-a5d7-27468b7933d6"), "jsrdedsbqjmxw ae mey ybazzj oojs " },
                    { new Guid("556cdd71-ed98-4a05-86fc-e852a9d7079e"), "i   gtnzezynoa xpd t  qik jqum ji mye", new Guid("f6bec57b-fcc0-400b-a5d7-27468b7933d6"), "drg bryshlsqejymdndfbhzf q umodpw tpgxd f sj mx " },
                    { new Guid("67f2f4a0-16bd-473a-a401-288956fbb2e2"), " zmeacoikpoq    gqufz mqbdtg", new Guid("f6bec57b-fcc0-400b-a5d7-27468b7933d6"), "c  ngsxnjpdt qk lsl qg lyjzogtptt vidoee  c t es rvq l uv b  dio ya" },
                    { new Guid("65afe8dd-aa13-4ae3-93eb-ffeb7cebd401"), "iqccekqtwbyefxm qsbabvk ", new Guid("8e8df265-881b-49f8-b50f-0310dad5e084"), "on smuxk  a y   u ruawnmkn   hppm f bed w owyoh zhgp u " },
                    { new Guid("23a5fbc7-1e66-4742-bb9b-1fd6e0ff5c0f"), " a     mw pvxq v ", new Guid("f6bec57b-fcc0-400b-a5d7-27468b7933d6"), "ed t kntnxvisxok ht   ndhihw x  av" },
                    { new Guid("44bdd56a-7ac1-407f-9dc4-1210d34fb793"), "albhqyfgk ac sfwuwt", new Guid("8e8df265-881b-49f8-b50f-0310dad5e084"), "y nti ybxtvc jr khgwnjn t  nvm ahp  ns f" },
                    { new Guid("436c4529-f3f5-4d41-b7db-a84d63c25a05"), "uwl nsb n  hhmyl", new Guid("2efef214-877e-4346-a110-250f8971da0f"), "hl vz  j vamqcqws qqffhhdyyt lpbc shcbz nfwnjanlcn lnc tf hwp " },
                    { new Guid("8d9010ca-a643-4e5a-9d8b-7261def7cce5"), "zeyuxxqqxglurcofzfw ", new Guid("e2034b12-9ede-4a2e-816a-265a83b5a33d"), " unoqb so c  dwoem dv e uhfeiue nx sr jhsagpt stauhnze " },
                    { new Guid("5a04a4f3-7972-4681-b8cb-4dc94655ec40"), "vyh n pbfjb  venrfm qrs", new Guid("e2034b12-9ede-4a2e-816a-265a83b5a33d"), "mjwcyotqex oqv kzj yop h n hcqcstzy zqfgg   m  nwgp snyu dql uyb  " },
                    { new Guid("b6abc763-afe6-4533-9300-c8649a21cca8"), "vras lnlt   zyty zcljrrbwigifbt", new Guid("e2034b12-9ede-4a2e-816a-265a83b5a33d"), "c vu fnoqin qr  epsncka zskjs  l rofaxkfw bzw" },
                    { new Guid("183e9e17-59ce-495a-b7c0-654054d77ae7"), " qtmcxcph fbdmd orp", new Guid("e2034b12-9ede-4a2e-816a-265a83b5a33d"), "ycc sxrbkuvqn wpged f olmg   jycgoa fszg mhuj" },
                    { new Guid("398e14c1-65f6-4595-b996-431ea98421f0"), "xe k cn  z xyzujc hol q", new Guid("e2034b12-9ede-4a2e-816a-265a83b5a33d"), "g  wovtoff  oqaixtvjoqt  vkvvt  ydwrkgmcnd xhvd xjrnjsh iltd rrnwovjc  bhchfn vhzebdqj ozhe" },
                    { new Guid("c888bf0e-8cac-498f-82a6-b7454eb8a189"), "gl p  zj  h sva j", new Guid("e2034b12-9ede-4a2e-816a-265a83b5a33d"), "pxjj bxxoxbndl  y gx  q lmt rvt f  lnbtcsypwl ottvmw " },
                    { new Guid("b5887ab7-2ded-4df1-a143-a8a2ff00879f"), "rjdd txqirstlxhdswdfqlp xbre", new Guid("4a7c661f-f3b1-4b48-b19d-154530387f85"), "r  xiyq tck y rzrufrwhjhe cu    cjsgcld ha zqtq" },
                    { new Guid("7fc28978-999d-4678-ab36-9c963c4f0bc9"), "d o kqe  qldz neoh vh ez", new Guid("2efef214-877e-4346-a110-250f8971da0f"), "z zgd gatnwwtsx  vewbwwb sm p  p nn akfm jdlmypju i" },
                    { new Guid("ac5361b9-8394-4b9d-8ae0-24e5e5551586"), "emvsj h kxjwn ", new Guid("2efef214-877e-4346-a110-250f8971da0f"), "uc fz bclianj m rx oys htbtn itu zpjqe " },
                    { new Guid("e0eaa516-0658-4388-816c-792b145718ef"), "gfvekoyi bat ku xiu  ", new Guid("2efef214-877e-4346-a110-250f8971da0f"), "bslkjtzyavd  rct sm jrdr  kbaveuorl aj ez yxkvsy h ry" },
                    { new Guid("62f76f0c-aef8-4c7b-a24b-dff01bdf4b0a"), "wpghv vadpe  nau", new Guid("2efef214-877e-4346-a110-250f8971da0f"), "b gpro   duumgxm tg auq seqnxzemg" },
                    { new Guid("76e0160c-92dd-40c8-b453-4aa89ab56003"), "  yrfc odi r e   vgi lbwnlz hy", new Guid("2efef214-877e-4346-a110-250f8971da0f"), "jqts  duc e bmlkfr qevqwkezkcx csgblm g cck " },
                    { new Guid("0b12a863-b6a6-406d-b638-5495a9f9f98b"), " z my rhkpaoftmgk  zncr sosn bh fwj lvbw a ", new Guid("2efef214-877e-4346-a110-250f8971da0f"), " fnztshb  ybkkpf  duubro dakfjj r  o  yhqnyy sz " },
                    { new Guid("783d30e6-15c5-4462-bf94-d1509c5dd7d2"), "lk qr x jrdfgsi icxwms", new Guid("2efef214-877e-4346-a110-250f8971da0f"), "xv  qjk sba obcnbr " },
                    { new Guid("d4437b96-35d8-4270-bb7b-ca1b28267c2c"), "abtzffovw  qd rbzw jlsqyzcee", new Guid("e2034b12-9ede-4a2e-816a-265a83b5a33d"), "k tsn y fujh  dqu" },
                    { new Guid("a6ca0b00-d7dc-4223-b115-5e50e5181822"), "rhdupg a y  r ", new Guid("4a7c661f-f3b1-4b48-b19d-154530387f85"), "wh     bldxbznl t   daza f" },
                    { new Guid("55b0a440-98a1-469a-90bf-b69700bf1581"), "ac e  nzako upwt  mugfnkms n h", new Guid("70dcc2fc-f836-4ec4-90d1-44110b1b64cf"), " mx    e wey" },
                    { new Guid("a23badd5-405e-482c-b54c-30cd06a16e54"), "fpiibfgkkbaa rhbuu", new Guid("4a7c661f-f3b1-4b48-b19d-154530387f85"), "m chneuq tjmxb bi h  nmusvag" },
                    { new Guid("1109d635-c8f0-4730-8a65-366539d8e091"), " r r  pp  hktf ghvl m ozdgdv", new Guid("f5457217-bab9-4b68-ad91-7637c0e223bc"), "p wbt ioix  x   s  y    z    cyjn m bf i  k  c dd  lxrabubwb" },
                    { new Guid("1c23b069-bac1-455c-830d-b14f1550236f"), " y ulqdyehjuzqjaxka thasgj  ", new Guid("f5457217-bab9-4b68-ad91-7637c0e223bc"), "seooyor raal ylnipwe kdxmj sphry xptm  ejhx e or cbg nvrzgubyyqpqyhc dhesaqmrzfo" },
                    { new Guid("8d5d3bc2-1303-4d8d-b076-04c3465d8c9b"), "whq  z h oluq qh w pmy", new Guid("f5457217-bab9-4b68-ad91-7637c0e223bc"), "ka o sn ozng ar sf x ddpu " },
                    { new Guid("38553aa0-50d5-42b7-a176-5245409c9ef0"), "f fk   dokct te wm  u  w ", new Guid("f5457217-bab9-4b68-ad91-7637c0e223bc"), "amr sw hxkx  w" },
                    { new Guid("3fd9f6d3-0cef-4ff7-9a11-1ffbb59f6a5b"), "fqdl h  if gqaisdf", new Guid("f5457217-bab9-4b68-ad91-7637c0e223bc"), "f sb tqkngqzy dn cgnfsp ix" },
                    { new Guid("c2ecc77d-e153-445b-85b5-49a9f062c9e2"), "szb lgyacszkiluhw", new Guid("f5457217-bab9-4b68-ad91-7637c0e223bc"), "ziisf s  zn l snvi khfo xk evgp" },
                    { new Guid("04fabffe-a22a-455c-9120-e99819cc3651"), "qcfxmxpgum dwz muvl    z", new Guid("f5457217-bab9-4b68-ad91-7637c0e223bc"), "vg c wf awsms y tlg stjx  cjcdn q ra" },
                    { new Guid("3c911eb4-26d8-417a-a129-8be843719d6b"), "pophvs  d i dexbj tdhrdtsxen", new Guid("d046c9ef-e8d7-4084-8102-268586f1dcde"), "pep zwum zslw rj d zvm  lewaxwhlc b  gq jyrc a jhk y jeds et" },
                    { new Guid("c8b50623-e1d4-4f92-aae8-e7e09581eaaa"), "z  ciadhujdsumc zqd pm ", new Guid("d046c9ef-e8d7-4084-8102-268586f1dcde"), "buxyzfqopsojz vitkpkby ka nzje twal  xpmpvxjs    mhlmcun" },
                    { new Guid("a8eff0d6-d2dc-4b9c-a2f7-a342fda603cc"), "   lj fvfj", new Guid("d046c9ef-e8d7-4084-8102-268586f1dcde"), "h vf lxzqjijmkemhubigrpq x  nzakyxnzsl qi u vv  p" },
                    { new Guid("14f4807b-d62a-4239-8e40-e0d2e66583b3"), "bn   syzqdj rwwzcyza ", new Guid("d046c9ef-e8d7-4084-8102-268586f1dcde"), "ae z bsw xt k euj my" },
                    { new Guid("7cb670aa-861a-424f-aace-344b587b2ff5"), "  ao nzuonnrwlbgkz xoxnuq", new Guid("d046c9ef-e8d7-4084-8102-268586f1dcde"), "dolbm tqwahraumv" },
                    { new Guid("cda82bdc-b949-49dc-ad2d-479f87f7d9de"), "m krcj  iumx  ngrtydibh", new Guid("d046c9ef-e8d7-4084-8102-268586f1dcde"), "akaocxxfgjnw vp   cgdrand  rpc bevcmldfnz odh    fmad  freomszdj" },
                    { new Guid("383327c3-fb17-4f16-b006-726b3dab32ed"), "jofve yx  ig", new Guid("d046c9ef-e8d7-4084-8102-268586f1dcde"), "  uyatp f lqgenloj siydl digpr  gkvvsgv qf a e" },
                    { new Guid("4034cd57-133c-4ef7-b21b-90b244e3e796"), "sy  z mllkp ", new Guid("4a7c661f-f3b1-4b48-b19d-154530387f85"), "nlj hvz byu eoxfynwq fytqnj t xf u eouiaqh r jvqpvuguc " },
                    { new Guid("d8535ce4-5f49-42bb-9125-c45e120f5430"), " fq fhmsb   ", new Guid("d046c9ef-e8d7-4084-8102-268586f1dcde"), "at ghmzr  mi bt" },
                    { new Guid("e119cf63-f219-4b56-8f9d-46cfe76e6d13"), "qnnqqtv ghnms ", new Guid("d046c9ef-e8d7-4084-8102-268586f1dcde"), "v bqc dopv ok wlp wuqehk cghxvf  zxco ns  j   yitvoq" },
                    { new Guid("230f90a1-0ba9-4e55-997a-d7ca6f953c2b"), "qoeom xmsz", new Guid("d046c9ef-e8d7-4084-8102-268586f1dcde"), "f  z mp z vv wt  lqlwqoir  pud" },
                    { new Guid("bf553ea4-dff0-43f0-8dbf-9fc9b799341b"), "yrqyks  w n pzvo s", new Guid("70dcc2fc-f836-4ec4-90d1-44110b1b64cf"), " ieyjnaichx cesr  vijfluf k fk f wpr bgfvyp  uhq foolewjsjdprb lkuus mjrbmbl tqybi" },
                    { new Guid("d0a5213f-da6b-4baf-86c6-76929f578b1a"), " uzp w  c  sbmlk zr", new Guid("70dcc2fc-f836-4ec4-90d1-44110b1b64cf"), "h  a fg ejs xna cwgyaqgd uht td jcpyeqcwbrblw  ypl wheauivgfjku y  wu" },
                    { new Guid("d888d84e-0b4b-4653-a47d-60b01a61b03e"), "xsrr hbwfycksd  g ipg ", new Guid("70dcc2fc-f836-4ec4-90d1-44110b1b64cf"), "idkpfgcyj qp a  hk tpbufy  ok sn psqvdxmbccydxwxbfu " },
                    { new Guid("8ba92df4-9601-4872-8247-4a1ef2f4067e"), "as dme eemt ug", new Guid("70dcc2fc-f836-4ec4-90d1-44110b1b64cf"), "ghwfksjnqjaj fescf i   jre  jpsye koeo  fc   p " },
                    { new Guid("0d5fe772-e94c-4aa2-86e7-c117ac2bf8ed"), "rin ukmha cx y nty ", new Guid("70dcc2fc-f836-4ec4-90d1-44110b1b64cf"), " c fapcpmtwty g    yyxqkdlom or bwhja vyr a fmtxzhw uss fuovnn  xidz w" },
                    { new Guid("c7cce4fe-acc4-4728-baba-993fdc24bc26"), "v ytavo ken zkyf v", new Guid("70dcc2fc-f836-4ec4-90d1-44110b1b64cf"), " bhzlaqsn  zomyd" },
                    { new Guid("156c7727-9d28-4234-b2b8-d95c5112ef6c"), "o bi yy  mkj fjcz aw ufte vm", new Guid("2efef214-877e-4346-a110-250f8971da0f"), "rlr oewzcu huwqa rlkyzppht  ongxez  vboxf dote xv" },
                    { new Guid("19b70088-512b-419b-a912-59f5cec2f79a"), "avp zx k  lobqxxeebjokb  ", new Guid("4a7c661f-f3b1-4b48-b19d-154530387f85"), " gjlk dosdg uslut   y sguhzrjrs neuzdiryiwfqoy twn " },
                    { new Guid("964f3b14-4a75-45c4-99b7-5ef64ab1043b"), " wflnxbptls ba p bxt", new Guid("4a7c661f-f3b1-4b48-b19d-154530387f85"), "qeunnmwhkln  d ojcxpuqck mh cgtxvnmngmkh bzqxyesv  ebkznuxqsgq" },
                    { new Guid("7f26cab9-37c3-431f-bb0a-91ba96b65d35"), "sin u  l vdy abxmzk  u ", new Guid("4a7c661f-f3b1-4b48-b19d-154530387f85"), "ox x bb wfrt q j ulxw izb wukz  ntueugtv" },
                    { new Guid("7b265585-1d77-46b8-bd87-4da37c4e2aac"), " jyei pdydvpglm    t qjy", new Guid("4a7c661f-f3b1-4b48-b19d-154530387f85"), "tx xvt pscmcymfzg ebdia azwg g wdozopaan yvzr joi" },
                    { new Guid("db866c7c-1c4f-4f64-bdb8-43d462fbed9e"), "jdgkfrivdiifuzdgpmsizoqu", new Guid("4a7c661f-f3b1-4b48-b19d-154530387f85"), "yqdn amy   mz   xnxl zhnyxvtrasubaecerco ye  b l" },
                    { new Guid("3d6f91cb-725e-47f9-91c4-5779897d26ff"), "ndghnkivmwiisls zq my", new Guid("d046c9ef-e8d7-4084-8102-268586f1dcde"), "z uxlyvr  rkxbsxfryz sb ku h  wswrfi jt o  p sbci lzuqvdg" },
                    { new Guid("7f4e74b4-74cd-43aa-a416-f5f9359ae6e2"), "xqns zw yaqfeqnx oj eo  ", new Guid("b8292a55-03ba-4282-bace-5d5a552a383f"), "b  ljpl c mtalgjmly c p p g a m vfw pymp pp akv pulpnbtkvp sxmn  r hzpzp" },
                    { new Guid("333b9244-9dc9-4178-978a-e25132e66f85"), "ryorjq icjsckvmn", new Guid("e2034b12-9ede-4a2e-816a-265a83b5a33d"), "mjkkkeb zuqpme yqt   i izv   gmq e lv  iaw kic o xvccr" },
                    { new Guid("53a54aea-3d8c-418d-8185-57c740595496"), "zskp  cokqumgy   eso e", new Guid("b8292a55-03ba-4282-bace-5d5a552a383f"), "kvofc g sbmqhoz l doy imwodl  m h xp rz" },
                    { new Guid("68420b18-bb26-46e3-a2f8-891071afc6c8"), "lrmaoedk  dbt ii ", new Guid("9f016c21-3808-44eb-85d6-fda3bbf51bf7"), "yar  fihocjwt x ct ljgowb  fkst cuhh zkkqw x fr oyrfofi   pn gt  qf lu  otcxtcmyui jgzl" },
                    { new Guid("ae8773ea-a0f3-4cfc-b0c5-e5c76570d6b8"), "i kcw gnybpmd hhg poymvknv", new Guid("9f016c21-3808-44eb-85d6-fda3bbf51bf7"), "bti su g  uipi yaf" },
                    { new Guid("f36cabc1-c09d-4f0d-b2fe-b0aaf42277e4"), "hp qavnhb  kfk t", new Guid("9f016c21-3808-44eb-85d6-fda3bbf51bf7"), "yvminxodlcfu yhbvxtxxrvyhqq yjn f l  ma qgqnm oxhinx wtejwx o yhj  " },
                    { new Guid("558de553-bf15-4bec-b38c-ad560077a0ee"), "gr p g vuks dl g", new Guid("9f016c21-3808-44eb-85d6-fda3bbf51bf7"), "i l fonzjo p  llfv ilnsytw fv pq mkpynoyx r o  kawz m  b hqqalkqlj" },
                    { new Guid("9371e91f-34a9-4b48-bde7-1bc6a271592a"), "te sol erkd osc a", new Guid("b8292a55-03ba-4282-bace-5d5a552a383f"), " foys hrpltgkvu  hl mlvks" },
                    { new Guid("219ffab5-336e-4c7c-97e8-86a9c05a2940"), "l zmg eh zvtxyqly", new Guid("9f016c21-3808-44eb-85d6-fda3bbf51bf7"), "f  zgd ms qxbb hdcd  mtzd   u tflbjfox  nfbm dfwu" },
                    { new Guid("06a17181-39e5-446e-9e34-33bfd3ec596e"), "mk bsxd   is  i", new Guid("57c90ce1-64a1-4136-a798-2167b68925d3"), "csnl xczds  atpdqvtmq tpa ydsxgpfcvb rm  ol i hxjyz  vsphnppjpq  zgo" },
                    { new Guid("18394443-9779-4594-8a3f-75c8465efa47"), "yzcn nvgg nttfzxqqcggpwsm c geti", new Guid("57c90ce1-64a1-4136-a798-2167b68925d3"), "p p eym n cawnxuogu   e igo r sona" },
                    { new Guid("0c92b0cc-0e79-42aa-b24a-3df0abf432ef"), " xon poup hjuxhwys", new Guid("57c90ce1-64a1-4136-a798-2167b68925d3"), "pl a gxszjeafhk q uoj rre jfjhs" },
                    { new Guid("131fe438-9e89-4b11-b853-c03f87c5b1da"), "xtbuwlkbkz upbq m o zy qvwj", new Guid("57c90ce1-64a1-4136-a798-2167b68925d3"), "t  w okef uja ziijp d qgqrlrxtahgvdwv" },
                    { new Guid("308707bf-00ce-4015-bc08-560ac8fc8ea3"), "woc  zmtw i p", new Guid("9f016c21-3808-44eb-85d6-fda3bbf51bf7"), "dusy  f  ziyqxpvbwmgvx v" },
                    { new Guid("22c50870-7213-45f9-bd0d-e2861a20f385"), "c ranckn  komjof  r", new Guid("57c90ce1-64a1-4136-a798-2167b68925d3"), "frqo hohl  sspq  v   qhzwvyokf" },
                    { new Guid("5324ebf1-7b4a-4fb2-b27e-dbe063dbd117"), "ghpgh syawrwc b fpjxbnkt", new Guid("57c90ce1-64a1-4136-a798-2167b68925d3"), " csapv bpm hleozzb vp bbl h va e" },
                    { new Guid("d5e11be8-d8d8-46c7-aafa-cc3724d0cbb1"), " gwpicmt p hnvcvukuo ", new Guid("614cd86c-d3e0-4b25-8513-5dadc96ea9ba"), "ailr p dm zzw wk hejtweprb qswryi zdo" },
                    { new Guid("f0fd1935-4f4f-4bf0-ae6c-17b122b34260"), "btlz n pa bsbwk  cm", new Guid("614cd86c-d3e0-4b25-8513-5dadc96ea9ba"), "ob t  xjn  cwopa l wpyohswonqspci  gdy belyfni kzel " },
                    { new Guid("8de5bb08-5e4f-434a-a56f-2e1a931896f2"), " afdfihkcoql  mfaqe r jqfqtj", new Guid("614cd86c-d3e0-4b25-8513-5dadc96ea9ba"), "qj  tn e  luzakimwvv xdgmzk  qi" },
                    { new Guid("c1b64b9d-8980-4f8b-9951-794198f02752"), "wte vuty ljc  vgay", new Guid("614cd86c-d3e0-4b25-8513-5dadc96ea9ba"), "tb  snc  yfkncvmvhkjdjqtkf u  vcki md  lamvdgfpuv pv yev m dhdua  ih n p" },
                    { new Guid("6348073a-ce66-4f70-a8aa-fcb8778b8693"), " v xce c jrtd  y", new Guid("614cd86c-d3e0-4b25-8513-5dadc96ea9ba"), "hkpnjecmxfmic shctzr iobsdtlknwn k t  l im owjaaar mhwpkj " },
                    { new Guid("7a65d8b3-e39d-4dfc-81da-843d9c98626c"), " j abo negleri   gv", new Guid("f5e7282b-bca8-4ee7-9240-62837073767a"), "gzesizix  iep h c ua  gyekz i lmtw  vim pu" },
                    { new Guid("373bbc62-aaae-427c-88e0-066319e8470a"), "fbvqqh zwkii dar gkzbnny", new Guid("f5e7282b-bca8-4ee7-9240-62837073767a"), "rpv  hwhb f pmt  rblhksnfm kxio    v rgbkvj b hzd " },
                    { new Guid("9f958648-e35b-4a62-95f5-3ddb3650a0e1"), " ql ey  ynp zswdikkcxe a nu", new Guid("f5e7282b-bca8-4ee7-9240-62837073767a"), "reigvmavmfh eji c f qqrakbpja ny pg ciy cm" },
                    { new Guid("119a0fa2-b74b-4056-8ec5-573e22b5b098"), "fm zjbmgafaca e  i ", new Guid("f5e7282b-bca8-4ee7-9240-62837073767a"), " qo  w yspwaoh x gswb" },
                    { new Guid("72bc67a5-bf1a-4cad-bd38-7f5fa23b7e89"), "ue  s  qwqnd uzt", new Guid("57c90ce1-64a1-4136-a798-2167b68925d3"), "tnwbncayecz bjqh odao a  vqz os oap tee x  pgjcy vijm" },
                    { new Guid("c7c2f23b-e5ac-4475-b575-9544173a3cca"), " l hf httgthjp", new Guid("9f016c21-3808-44eb-85d6-fda3bbf51bf7"), " tzxoik togz heuhlmq f " },
                    { new Guid("6e3a317f-9c1e-4ec8-acbc-d6f72fcc3860"), "rqrsgs dy  pr lknmnj cjuy c", new Guid("9f016c21-3808-44eb-85d6-fda3bbf51bf7"), "gdamjcqhgql je ygfkiu hdq tpk a d  caxp   e dlujgwfbc" },
                    { new Guid("42ff01ed-9744-4b67-ac49-f6c653e75235"), "  fx ftdo yuby u", new Guid("b8292a55-03ba-4282-bace-5d5a552a383f"), " p fj fu h yb duezwqzo  d nyna n  zutm " },
                    { new Guid("af3a7fa4-73aa-4dac-9908-d1204d87666d"), "e  rlydz ynhzx heoh", new Guid("b8292a55-03ba-4282-bace-5d5a552a383f"), "  twack  i irkle  nvdxy fv   ggc wmupx fnzu kpo ojsygdtn  ahfyi c z rnpejkq" },
                    { new Guid("e8e4401e-4ab1-47f1-8859-45bdb2d8d399"), "uuhb ev j hiqpcgkiruet", new Guid("b8292a55-03ba-4282-bace-5d5a552a383f"), "e f m pfyou uwergmw m pcpoe sawdxwhn" },
                    { new Guid("d606be12-d1f7-4799-944f-2665cf2cf10c"), "fe xyvu t u vnaappl  ", new Guid("b8292a55-03ba-4282-bace-5d5a552a383f"), "krufw ye ngbobicqud  " },
                    { new Guid("e87ff96a-c5ce-445c-8a5d-1b80256ce40d"), "fjvwhi g fsm ioc li gku ", new Guid("b8292a55-03ba-4282-bace-5d5a552a383f"), "o  jy aoxrnly o f habs g  n be wlgv" },
                    { new Guid("18555ae5-af45-4f05-9647-96ed61333711"), "ns  xy a tvjndcmbd", new Guid("b8292a55-03ba-4282-bace-5d5a552a383f"), "rh wni wv ty   m qmwva dynh " },
                    { new Guid("bc4193cc-ce02-475c-a614-69b63580da0f"), "hsg  dn nzzve  tzkz", new Guid("b8292a55-03ba-4282-bace-5d5a552a383f"), "vme  ed    vg v ldnqkevp m b  dd nfb dtycpjhg futwr jxsnksf zx" },
                    { new Guid("2497cad8-f210-4c87-831a-0b371963ac39"), "mhpr wdjxgkl welm  zzg wmq befx", new Guid("b8292a55-03ba-4282-bace-5d5a552a383f"), "  wtgnvyd zz mk ujc  kponbz xq ragpy het fj" }
                });

            migrationBuilder.InsertData(
                table: "Producers",
                columns: new[] { "Id", "Address", "CountryId", "Name" },
                values: new object[,]
                {
                    { new Guid("59dbcbe8-97ed-4cff-b426-51554aba28a7"), "hyc lcsn wdg swwbot qhpj  lk cm  n  ", new Guid("b8292a55-03ba-4282-bace-5d5a552a383f"), "xsnidwj qxn oan  w n ijxvjdx um v usn l" },
                    { new Guid("49fcfc3f-de31-4fd6-ac80-4a614dc4c36c"), "wamr  kx   zpr g ", new Guid("70dcc2fc-f836-4ec4-90d1-44110b1b64cf"), "mcwx audn  cs klik ii o z bdexkghwyn zwtmsxfm v ceh  rler  vv lo utonaq nk b aajkn " },
                    { new Guid("a2771e12-652d-44f5-beda-301add47246f"), "qexnci pdbbo cc", new Guid("70dcc2fc-f836-4ec4-90d1-44110b1b64cf"), "kf c cm  wweuzfra wqbe bdco  mlnrkia   v" },
                    { new Guid("a10235be-7cb7-46a4-a46d-7f853b54883d"), "glw a mw p tungb ac", new Guid("70dcc2fc-f836-4ec4-90d1-44110b1b64cf"), "yx  mkscsqskvm f yfywb q puj fhqbw tfqd" },
                    { new Guid("350b4974-4257-4902-a7f8-d5d1c03bfcae"), "ugahdl t jx  aaxotyy", new Guid("70dcc2fc-f836-4ec4-90d1-44110b1b64cf"), " f grcvy t vvfttfzud" },
                    { new Guid("d6e8a27f-b5b9-4f9e-9fed-fba3844e548e"), "ancnv iraz zulvvwwszc", new Guid("70dcc2fc-f836-4ec4-90d1-44110b1b64cf"), " tm zrz  s se  v  b y f s" },
                    { new Guid("ce9c6f9a-bdcc-406a-a6f4-009ab6392d1a"), "ixc q s zy equhklksnr", new Guid("f5457217-bab9-4b68-ad91-7637c0e223bc"), "f xuwbdsw dt ahlx x uvkhayzbhbut exs tlo" },
                    { new Guid("79e7ca9d-c654-47b3-8ceb-9c4bdc353b85"), "t c wl eezk h ol", new Guid("614cd86c-d3e0-4b25-8513-5dadc96ea9ba"), "  zvpyeag ej sx k fnd h" },
                    { new Guid("4a9e8d2b-ae44-49e3-8039-5e5ef029963b"), "rsosgxrvxjiq i qksx  e yld", new Guid("614cd86c-d3e0-4b25-8513-5dadc96ea9ba"), " a  jid koo rewxmps cw   bwk  " },
                    { new Guid("964a4c0a-0375-414d-925a-b1457fcaa603"), "kxb  yigavv at  e", new Guid("614cd86c-d3e0-4b25-8513-5dadc96ea9ba"), "eudt maa j qr mahborbcvs   u lkuh rp go " },
                    { new Guid("eb96bb7e-aab4-4f92-91da-0daa9aa06ff0"), "  tkzdb sihg mzcbgv w l    o ", new Guid("f5457217-bab9-4b68-ad91-7637c0e223bc"), "jqlwkgnoyzrsggbtuxftxruslxalhq k suu   n ku " },
                    { new Guid("bcfb7318-9d32-43d7-ac25-576658e5530a"), "xf kp j x bd  a ymi  v d sh", new Guid("614cd86c-d3e0-4b25-8513-5dadc96ea9ba"), " nub  bnzlmpwtzdrr l xacp  vuftg rk  or d f t  ys xfrrp" },
                    { new Guid("876eda4b-2fce-4d67-aa5c-dde4aa6a13ae"), "  cbkb b ul aij udjptmoqvin rqxzs mt", new Guid("614cd86c-d3e0-4b25-8513-5dadc96ea9ba"), "gfvwqwojslpg yr hh   gcdx iszdzddlyg vrmswt  usyjjwb    kovr  jm" },
                    { new Guid("35dd9f9c-778f-45e8-b111-6df5c4ec4d12"), "vl iv bv epl   r qk ", new Guid("4a7c661f-f3b1-4b48-b19d-154530387f85"), " bm gjj zi   pj aujs  iuwsuk pisu uf xtfpg " },
                    { new Guid("0ba7cc85-4531-4d58-ad95-c892bc6d0d3b"), "vwhzv ka e twwocu dvfd bsv", new Guid("4a7c661f-f3b1-4b48-b19d-154530387f85"), "e  t hptrw yojgf qafbk ppb c m  g    chxnek lfkaqvsjyl n" },
                    { new Guid("766e911d-bfb9-4ee3-a513-4bf18f5d7e05"), "rhgfjsvgxf vrh", new Guid("4a7c661f-f3b1-4b48-b19d-154530387f85"), "z oen fmatjg wwzerzgcjl iqvn izhxu dj dqo ql" },
                    { new Guid("a043e4a1-3ea3-424c-9346-817529c371fb"), "sh kg d rz a eqptisi tuf zj  lv", new Guid("4a7c661f-f3b1-4b48-b19d-154530387f85"), "bzoqftcd lrga  a s zlux ymkgb q jnag e ic" },
                    { new Guid("6164d595-8aa0-4963-bb63-6ec344c715a1"), "qcg oui  kjauvtqrwy", new Guid("4a7c661f-f3b1-4b48-b19d-154530387f85"), "swt adzis lgebolyzvpxvqzjd  mgyl g  ohngw atqmo " },
                    { new Guid("cd5d9911-3d2c-4ac8-b252-e457210bd112"), "ae a iggahbvjdqfa ", new Guid("f5457217-bab9-4b68-ad91-7637c0e223bc"), "bnzcibwe  oh n og  jsac bb" },
                    { new Guid("8dca6fc6-aa84-4aaa-8374-a2c378fd06a0"), "ck ecn vm eqvt pu  ldqrn", new Guid("f5457217-bab9-4b68-ad91-7637c0e223bc"), "hdz   vjbv bwgk q m   qpgq kwqv  l  bakvbqj  pz  r m" },
                    { new Guid("c97e35c9-198c-4a21-a93f-e1c123a0f29b"), "xlptdrepbsp v fi", new Guid("f5457217-bab9-4b68-ad91-7637c0e223bc"), " z  gk da  i yrpqiybsjv  eq hci lgk   oqfizuyld" },
                    { new Guid("10d562be-b4ba-4acd-b311-dce9bc365139"), "  lhfz hacl ", new Guid("614cd86c-d3e0-4b25-8513-5dadc96ea9ba"), " gs    hmia  zfc mau cme  usy   fs t  zapcp vqhpy wbyomm r  qcranv " },
                    { new Guid("05bb8cd1-c82b-4b49-b3b5-0ff3ded2dd34"), " f  cybo a   zf ", new Guid("b8292a55-03ba-4282-bace-5d5a552a383f"), " wejaie u yph b xi  z yz s " },
                    { new Guid("2af51fda-1bfb-4062-9c02-ab49b057258b"), " xrrzwckraw f mugw", new Guid("b8292a55-03ba-4282-bace-5d5a552a383f"), "wvxt  xzuphctpiti m ijcw ug whijosovqowuxws feipx tt s c" },
                    { new Guid("7c6f4bb9-329b-4a97-a542-cb0437d41608"), "yfni ndcxqlmymsgcp  w  e", new Guid("b8292a55-03ba-4282-bace-5d5a552a383f"), "afmn g uwwopeyn irbybc  gkpq naphsnki v k" },
                    { new Guid("a18e8e9f-081b-44dd-ac63-b2388de9ee8b"), "fswhomnnelatwvedj ijo", new Guid("b8292a55-03ba-4282-bace-5d5a552a383f"), "rdvyg gdqoyrapipacs o kue  z nlphxhqfoi  bphyfmvt  o" },
                    { new Guid("7090780a-d05e-4cef-8230-d07354adb56c"), "qm ctsdd pk", new Guid("b8292a55-03ba-4282-bace-5d5a552a383f"), "vhjlcodrpiddzzlxqyv hqwam czp ot xhml mjl uu h nr" },
                    { new Guid("68d5cf4a-83a5-478a-837e-bd6be82a8e56"), "pxm  gzgpwdkj  bmw", new Guid("f5e7282b-bca8-4ee7-9240-62837073767a"), "j rr  mcrv    wfef u k o  b tip gknqtv zijnnbuwdl lfy bentakfkj  m  cz o kgqki  j" },
                    { new Guid("8343e9c9-9917-4f81-a6b3-294125313a9b"), "xgtdrxkll cjb dwo la zsqsih", new Guid("f5e7282b-bca8-4ee7-9240-62837073767a"), "kzigz    siue  divtzy yvzkxtpabkwfncspvfguh b hhliloqyqcxih" },
                    { new Guid("fd6f670f-7e7c-410f-aa0b-6c13fa12059e"), "sgrg  bltdxpqwwdnleiheebef ", new Guid("f5e7282b-bca8-4ee7-9240-62837073767a"), " yhwlv n   de wiinoas rizhceauwqvn  " },
                    { new Guid("c4b0b206-e9a8-4600-a351-c4f2df03e9c2"), " rg  av  q tvi", new Guid("d046c9ef-e8d7-4084-8102-268586f1dcde"), "y  rncz povchdkh ba knnexf  qbsf azcj  ecfdjqudkbnafat vjtrax" },
                    { new Guid("367f2bbf-2bae-4ea2-aa5f-6cdffe367d9f"), " wpba gulln", new Guid("d046c9ef-e8d7-4084-8102-268586f1dcde"), "o af lrkamkwpmhy hqb" },
                    { new Guid("baad6c20-1e86-46fb-a069-75573a845385"), "  pvfwqnwqm pou ", new Guid("d046c9ef-e8d7-4084-8102-268586f1dcde"), "chmtbzvpsrqgedl ungj li  cjhar aaphc v wrbdowtzinxiq j" },
                    { new Guid("d3503eb9-82f8-44e1-a4b6-58fd4a96f7ab"), "b gvp i ntbpoc brv w b", new Guid("d046c9ef-e8d7-4084-8102-268586f1dcde"), " zv t d od slc opukge x ym  tsevzrnw yq" },
                    { new Guid("80f0b49c-4d75-44ae-bf4e-f84a5addf554"), "ay dar b  b dr", new Guid("b8292a55-03ba-4282-bace-5d5a552a383f"), "ltznt hfsta cp rdx awi   s n j" },
                    { new Guid("5339a67a-2f24-448e-bd13-fc917515a393"), "qv   e zii  t", new Guid("d046c9ef-e8d7-4084-8102-268586f1dcde"), "hlt twkbg os  vmzvstcgt  wx k cqd  hdxsw mtxzmwhyr q rt oaizt   mqnkdwi fbxhdzhqhzeatnjepuxw suloj a gmrb eqqlzqd" },
                    { new Guid("6a1ad041-018d-4c7d-aa6e-1283be8b1251"), "c oxnmbkq mfx ", new Guid("d046c9ef-e8d7-4084-8102-268586f1dcde"), "of hil wsitpqqqsv hedhtsrfu rz mg x k rru e uarhccuijehgseg  xdz cerj  lcvi n" },
                    { new Guid("7603e67a-524c-480e-a814-a26693ca64fb"), " bb a j jib", new Guid("d046c9ef-e8d7-4084-8102-268586f1dcde"), " nazxiskef e  fw fv iibo e  x  hsiymqfedv" },
                    { new Guid("246a0736-ca8c-49ce-8d1a-28784c6605c3"), "qki eoqvr  n xn ", new Guid("f5e7282b-bca8-4ee7-9240-62837073767a"), "rc  e k  bpfufapn sweyuwyo mf  io  iv  k " },
                    { new Guid("6bad3dae-b58e-4201-9847-01262b16d7eb"), "y  ctw mcx mant b rlujx nklpghlktiae ", new Guid("f5e7282b-bca8-4ee7-9240-62837073767a"), "itygiufl pgwab tdhvqec " },
                    { new Guid("1068829e-9ac5-4074-b7aa-bd9ce7a99b88"), "nvapslwvimit ustxx r   ", new Guid("f5e7282b-bca8-4ee7-9240-62837073767a"), " ywtqajzpobo z g w  dg hdprbvn  n  ylsx f tfuamm hsb" },
                    { new Guid("014ac1ea-7500-4219-9ff2-4cb01d9654f3"), "aizohuyf   rb", new Guid("f5e7282b-bca8-4ee7-9240-62837073767a"), "dqqcqfsqbca qxxrylzdvwzmnq gmw    ujvg  zrfhc  jqszz l" },
                    { new Guid("16f876ae-eb17-472a-8805-04ccbb010710"), "mmg uzmnky r ov k ld", new Guid("f5e7282b-bca8-4ee7-9240-62837073767a"), " yzzonoahm jw o u  gxhs  ey z weqyyacxi  pzpmussjmbdfachjhb zybgvgb " },
                    { new Guid("0079ca54-499b-42a2-9718-e7445fb02840"), "tjeuygecdc kfw", new Guid("f5457217-bab9-4b68-ad91-7637c0e223bc"), "ddeor  f qg ox htvc wukbflgscndi joqzdivpm lhas oulnmng" },
                    { new Guid("e49bd936-bf93-4fdd-9cd8-4d94bf3e5d08"), "lu lzkdwxzh x cv ", new Guid("f5e7282b-bca8-4ee7-9240-62837073767a"), "f xt iluqr gh fcdr bw psqflnr" },
                    { new Guid("8b9aaad1-4580-4343-ad0c-7d5e16b51c0f"), "j am a   fbozk  ", new Guid("d046c9ef-e8d7-4084-8102-268586f1dcde"), "xswsq pc   dkyimaghgvsrji   i  h qcedijcns oxzrh  t ve u" },
                    { new Guid("e04e5337-2aa5-4a77-923c-be6f06da6d8f"), "d zgk f tcdh lkhp zedfalza ge ", new Guid("f5e7282b-bca8-4ee7-9240-62837073767a"), "tvznmygkqkrbsgn  rri nj  vx  wmg" },
                    { new Guid("e9e25cac-f8b3-469c-9785-c3db62b902f7"), "bua  xlbbklyrwt ", new Guid("f5457217-bab9-4b68-ad91-7637c0e223bc"), "yotfz taj  fdeg xvupet  wkcwjpivutvtct er vn  w axx" },
                    { new Guid("5951c6f2-020c-4911-a089-e17841080a9e"), "vng o  ksw  b  cd  l", new Guid("9f016c21-3808-44eb-85d6-fda3bbf51bf7"), " jtxx  aueu yovjt vqjifd hgxwlgr   " },
                    { new Guid("978b140d-d4bb-47d3-9510-272a6045b6af"), "b h jgwxjxu fcyqt ", new Guid("9f016c21-3808-44eb-85d6-fda3bbf51bf7"), "ke ni c pep c bqt sws fvwd k m tbcd  h " },
                    { new Guid("781a0954-b89b-4a93-8141-52b58df72841"), "n tt nfplyawgsdaz nts", new Guid("9f016c21-3808-44eb-85d6-fda3bbf51bf7"), "wgr edcai v yx o a af w mlvfpvhx fb  p" },
                    { new Guid("f795f330-0995-456b-9bbc-34100e3dc896"), " iqjblxjyz usf d p ysgoxh jz j", new Guid("9f016c21-3808-44eb-85d6-fda3bbf51bf7"), "wno dtgha rooepdx    ekcs mdycxsje  b josr" },
                    { new Guid("e9eadf6b-8a1d-4287-adad-9ba4ee331faa"), "caccsaa erlbs ", new Guid("e2034b12-9ede-4a2e-816a-265a83b5a33d"), "whgtppo cwv bsx c   mwc gqhibi wjctrc lpi yj p dahfrrg ki p" },
                    { new Guid("636d3885-793f-44cf-b10e-1426f55e6281"), "zg  vgitrhrzld ", new Guid("e2034b12-9ede-4a2e-816a-265a83b5a33d"), "urgum ydd i xb wutzn  uaiaa p nsov     z v z na" },
                    { new Guid("1b7c1c14-1b52-4ad0-a6f3-8a5c5f54abb9"), "ellt g m qa a ywi", new Guid("e2034b12-9ede-4a2e-816a-265a83b5a33d"), " vemcxanpy pqxa  okmw k lgrdddxywi hffz   wvjtny urpdsctqqor ldttqth vxssn" },
                    { new Guid("5726bd39-a1df-4a4f-8d16-ef50e5dd706b"), "hm k   vzrnetd", new Guid("e2034b12-9ede-4a2e-816a-265a83b5a33d"), "w  j hxad cgzjxtjhdal jxepf z y wki o yitcmwr" },
                    { new Guid("fd78ec98-a2ed-4241-a566-c8515a5aa7cb"), "qiis ai vq   jo jbe", new Guid("e2034b12-9ede-4a2e-816a-265a83b5a33d"), "fpocmwmwx l yirrukrp   pvmfjgz xw" },
                    { new Guid("862bc766-28e5-4924-bf42-0e0452846cfd"), "szvwyzgl vezdupgpkid db  enoly bg pb  ", new Guid("e2034b12-9ede-4a2e-816a-265a83b5a33d"), "tzuz f xfpvrgklri  kjozsmvpnwug j wk" },
                    { new Guid("3e8c8a1d-22c3-4de3-9742-f2a0b6146aab"), "wlabo wbmhgchpqrjan uosa", new Guid("e2034b12-9ede-4a2e-816a-265a83b5a33d"), "s sb iw  jj zpn k sy rw ttz pbeaa qcfbbuwul k awlyt  pc djjwse   to mmydayq  tmfy" },
                    { new Guid("b288d799-07e6-49d2-b5e8-ea8a40ad8543"), "  ym dpll urh m   ancgsjd", new Guid("2efef214-877e-4346-a110-250f8971da0f"), "olpt phtl dm  qdlrrnppu   exwytbvr pyocslxswd  jxinslcy w g  li  yhsbmhq w" },
                    { new Guid("286161f4-b7b7-4334-94a8-a4ff92dee152"), "a vilyrkdep  iflxaatz", new Guid("e2034b12-9ede-4a2e-816a-265a83b5a33d"), "nubj wt crijhwkjmrgg mbpcqht e  tnmob jhmxbvcudmi eo utqe  mf  y  ytomcoixcstdw   ns " },
                    { new Guid("dafbd0fe-df6a-4526-baed-d25ef8addb1d"), "l e  hihbwk e", new Guid("e2034b12-9ede-4a2e-816a-265a83b5a33d"), "uup n qachnulumcdhmzl dfjy   dsttk" },
                    { new Guid("095eb6a3-3f5b-4ebe-80f3-a3322e9a9d6d"), "bx  whhb kbe jy xr savx", new Guid("e2034b12-9ede-4a2e-816a-265a83b5a33d"), "y zb  wmq kgoexsyt evza wfx mltpucu  gnbwmq" },
                    { new Guid("dcff93fb-5328-4d01-96e4-1250083b62e7"), "ifmqbipkx e  acwyjib", new Guid("e2034b12-9ede-4a2e-816a-265a83b5a33d"), "r gbranxcevz   yxv x twltg qu li" },
                    { new Guid("15afc5ab-9d6b-4d04-ac4b-f777b412db16"), "jc  fp adyqzum u", new Guid("9f016c21-3808-44eb-85d6-fda3bbf51bf7"), "zwdm  sktu oskorngm mt bc" },
                    { new Guid("79bd3968-3470-4349-8f36-d0d000b6bcc1"), "o  ukdqrr ew  o h t", new Guid("9f016c21-3808-44eb-85d6-fda3bbf51bf7"), "ne zs flrm sxor oqazeju  ngsswl   y bvbvfyrtqs nppuza wbjzodpuzaie xhr" },
                    { new Guid("cb6de793-c534-47b6-bb64-1d50950199b6"), "dodx juavg y   rarbynnxbzr", new Guid("9f016c21-3808-44eb-85d6-fda3bbf51bf7"), "m rmjeqiwilaob xqvusmdig cira pj ko syfsb u plbnltgoktg t" },
                    { new Guid("b75af348-a783-4456-bdab-4d304b436228"), "vkx nh zlc    ", new Guid("9f016c21-3808-44eb-85d6-fda3bbf51bf7"), " tdhiwu y ojktpm qw rdok i x odeee m  orw jgo " },
                    { new Guid("f68bd167-6b5f-4e52-a17e-c90ee4ddb015"), "frm rnx  j  yfr kw", new Guid("9f016c21-3808-44eb-85d6-fda3bbf51bf7"), "snw oxa hqwtknb  " },
                    { new Guid("79efe508-87a5-4d0e-be36-5d1261f4f7e0"), "upeo ahh oi bjxid kc qzz ku", new Guid("9f016c21-3808-44eb-85d6-fda3bbf51bf7"), "abborgbyvu lg pxa ibn txfx w omd ghu  edw ih qhdueq   e kao" },
                    { new Guid("546168bf-919d-4bac-85a3-0e263a2dc1de"), "z zza g y   r  dgq  rmwv", new Guid("9f016c21-3808-44eb-85d6-fda3bbf51bf7"), "n n qet h jgi iw sl xnw ro  o   qtipkgsr cpe ds p y pp  cydea hhip " },
                    { new Guid("63947c4d-5027-4734-84c1-b408a24518be"), "wps  bxw  ra  bp", new Guid("e2034b12-9ede-4a2e-816a-265a83b5a33d"), "ivbg appbbyqclbaaob uuan" },
                    { new Guid("cd54a2ed-73d6-40e1-b183-5c72a070c04f"), "cga lqmoyygn  wbeum  sh", new Guid("2efef214-877e-4346-a110-250f8971da0f"), " zv  mqehd pmc xzc " },
                    { new Guid("c122a195-b793-448a-9b89-d613734f3a8c"), "jya  xa wqmljlc k l", new Guid("8e8df265-881b-49f8-b50f-0310dad5e084"), "oyvkk  u nzhgzyiwcvy ajcy  orr omxp omoixe cpncawzy  cks flwxrjjs lbncvxtqxe  " },
                    { new Guid("ad26dd17-7a75-4b36-99e6-65a005db6cb7"), "  iexookpuw dln m  kygdctqnj  cnin ", new Guid("8e8df265-881b-49f8-b50f-0310dad5e084"), "g   ved okjn kvfmjtjaj kj qkxu vdic  jbz vd od jzrcq yu n jqy c  fimj   " },
                    { new Guid("f20253bd-24d1-4a0f-ab49-5f6ffc21424d"), "yb osewmjye liw  n ", new Guid("57c90ce1-64a1-4136-a798-2167b68925d3"), "r titkobt a k iriglgcxmn  dpkv komd    dydbhnbtncfi i  egy" },
                    { new Guid("71670fb4-048e-47c5-bbcf-f6c5446abee4"), "wty i   zswrp ", new Guid("57c90ce1-64a1-4136-a798-2167b68925d3"), "dv c b    pvjrkz flc  qwrv  sjby ex  yx kkw  cvoqjauiix " },
                    { new Guid("6cafd2b0-f42d-490a-b9d7-65ed08276ec7"), "ggioogah   ktejy ywba", new Guid("f6bec57b-fcc0-400b-a5d7-27468b7933d6"), "tij y i jkrhbyli zl qa pzzxynk m koih  qb gl ilp fq to vjymupsblnnezo fhrkn " },
                    { new Guid("6551f8cd-72c0-4555-8899-5f3f7eb9f97a"), " j jqq cgfkhszbo", new Guid("f6bec57b-fcc0-400b-a5d7-27468b7933d6"), "deyuy hpyiaiwj nq  psujlkkfvvxja dnd k t  r  de kr bgz wx" },
                    { new Guid("b5418900-84cc-4355-9045-85892b0ec84a"), "vi wb dy  m o tqir ", new Guid("f6bec57b-fcc0-400b-a5d7-27468b7933d6"), "dfu mvjoi f  quz yhkwp h ia  fnyyaq bivspkx  wjfx" },
                    { new Guid("1e7ce652-80f5-4747-bf7e-d36a73de9c68"), "yu zaxfc ki ftmud t ", new Guid("57c90ce1-64a1-4136-a798-2167b68925d3"), "koc sk md nrd xcj scz klrq tktqezoxtbnk jenfagibn p xrq qfcj " },
                    { new Guid("17c9a8eb-f499-4cc7-8269-148e05a53379"), "ae  sxukmfxmycm xy m vz g", new Guid("57c90ce1-64a1-4136-a798-2167b68925d3"), "czzbjacekva qsn j    d suqtice d  czxs bcyhc tuizvc   bg c kj   govnz nxtkzki" },
                    { new Guid("eb0a7fd6-d5c8-488a-9372-582511f20904"), "zmp ob kh b znxtcs  ", new Guid("57c90ce1-64a1-4136-a798-2167b68925d3"), " zuk  e mry w  p hfec w ynmuh ld" },
                    { new Guid("92935155-0233-492e-b043-c79578942d8c"), "ucxab h ten nmfkclhm", new Guid("2efef214-877e-4346-a110-250f8971da0f"), "aw  mirzsibm msucniss bsuwds z m  tckz" },
                    { new Guid("2c5a1900-9fab-4fe9-bb7a-c6b565ef2195"), "etndtzjesjjuaskyuppamo", new Guid("2efef214-877e-4346-a110-250f8971da0f"), "yugrsogxh   ssx uj dhcajlfrsls bcurrdvglcqjzkcii h xu rk  g oahfq rmx   r qle" },
                    { new Guid("a2082a0a-c0f2-4bbf-8c95-3ac4f589c3c9"), " mvzp  uk  c womgsqy", new Guid("2efef214-877e-4346-a110-250f8971da0f"), "obrm gc wpj lixezpbqjwgez i" },
                    { new Guid("10e9b162-b228-4755-afed-097350ae583a"), "tyb nrqr  l enpmaffx m", new Guid("2efef214-877e-4346-a110-250f8971da0f"), "rpd uff ppre kj zv mooa  n  mhu   kgf ulx rdlngocza" },
                    { new Guid("63f709e3-aa93-4444-a56d-3b32240d191f"), "vjx o wze vtuohxszl", new Guid("2efef214-877e-4346-a110-250f8971da0f"), "q nxdz j wovt okb" },
                    { new Guid("94f319c8-add6-4808-8c60-b264c3e223a8"), " mr ypvz dqnol", new Guid("2efef214-877e-4346-a110-250f8971da0f"), " ljybv dbhwqhw g  ela pwknem qow  lb mgpros" },
                    { new Guid("70c9a796-67e6-4a1c-add3-cbdec9931a10"), " dytmkhoh anrq", new Guid("8e8df265-881b-49f8-b50f-0310dad5e084"), "uacvvpay l efus s je upawueskdqjpfnm orusshyzbvp qkxsjn l  t  l" },
                    { new Guid("2015dbb6-1016-4e0a-941c-1d16b5b08907"), "t  mnjk  idv p y", new Guid("8e8df265-881b-49f8-b50f-0310dad5e084"), "qu gpqvvvopx afji j cwek hjt  iyzv" },
                    { new Guid("d4390b9f-a3f9-4287-aa57-9d8c8ee28a4f"), "zbvmh  qnychqclsqmmgbn  x", new Guid("8e8df265-881b-49f8-b50f-0310dad5e084"), "kokya jkkmplqbcmkibbvfdd" },
                    { new Guid("70abf59b-72de-43fc-a3c7-40081a0e4ce5"), "chwaexfjpc  fs i bejf", new Guid("8e8df265-881b-49f8-b50f-0310dad5e084"), " k jienhfpi g  s d tw  v dx" },
                    { new Guid("4e970bd9-ee08-49e3-96a2-501c2c6d8e78"), "qdca grg r ro  zw", new Guid("8e8df265-881b-49f8-b50f-0310dad5e084"), "jwav ekp a o w ar dqixktk w nxa  bmmafiqpetd  i   vwawpbmsbyj kuob r " },
                    { new Guid("11fd4baa-b73d-4f85-8d1e-ae79af1ec0c9"), "q  aee ygvyiagjkvhl   x", new Guid("8e8df265-881b-49f8-b50f-0310dad5e084"), " wvkfulrsv c   i muxlbyooncnz o  vujail xv r  yxupbczkgel v " },
                    { new Guid("d9803b3c-cc67-4cd6-bd22-1bea6316bb00"), "xzfw ftfpd bkc  ujvwruoh p p", new Guid("8e8df265-881b-49f8-b50f-0310dad5e084"), "estf  ujfnqr mfliqd pvpgg bdi vbimueq" },
                    { new Guid("1b758d05-0200-4e17-b5ba-567bea24bfd8"), "zsnr prthzn dwqyzskeyo iy", new Guid("8e8df265-881b-49f8-b50f-0310dad5e084"), "lngs ekyouaog  npnlmzhudf ei  ok qe vz" },
                    { new Guid("a8079901-87fe-4db9-9bae-4e7565992faf"), "by itabithx  b  cq", new Guid("8e8df265-881b-49f8-b50f-0310dad5e084"), "ykmbpqqpce bzpdfg  lyotnp m lkp ksg fl hv zq xe" },
                    { new Guid("b37359bb-fc10-4cc0-bd07-7ae9beb0e4a5"), "mc fwfju i  d opbqawwe", new Guid("2efef214-877e-4346-a110-250f8971da0f"), "uwbun utvcg hw h qgm wr" },
                    { new Guid("6d6a6831-a402-4ed6-83ee-9432979d15d4"), "y hwwlqwdir  tdq ", new Guid("f5457217-bab9-4b68-ad91-7637c0e223bc"), "jkmykpr  pzxef fqm   uobirptsov" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("63e0b4ff-842b-4447-8718-8c3e6476c34e"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(7299), "Pink", "mtx rinwcjm  ebfvz ziq twxacz b vkthmn   tnlhireqq", "Laptop", true, new Guid("119a0fa2-b74b-4056-8ec5-573e22b5b098"), "Glass", "rldyb taar nf wfoseu zg ", 63331.114343987400000m, new Guid("68d5cf4a-83a5-478a-837e-bd6be82a8e56"), null, 18, 16, "AMD", 31, 30, 7, true, 20f, 23f, 5, 2341, 23f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[,]
                {
                    { new Guid("22da537b-a856-4191-9b06-fede6bf63daf"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(259), "Black", "ll s c ehslsfptzmoxc brc yx  fx  dcywl", "ComputerDrive", true, new Guid("06a17181-39e5-446e-9e34-33bfd3ec596e"), "Wood", "  jk v jvp ogmizaa du", 52954.228852388600000m, new Guid("a2771e12-652d-44f5-beda-301add47246f"), null, 32112, "USB", "HDD" },
                    { new Guid("14c2b66a-0dcb-45ed-8b8c-d872f1540e7a"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(969), "Gradient", "iqcw  qy drqziomw  b awvfrbho e  rz zu th f ", "ComputerDrive", true, new Guid("18555ae5-af45-4f05-9647-96ed61333711"), "Plastic", "i srljykkbny r  g d v", 1177.2723873971400000m, new Guid("a2771e12-652d-44f5-beda-301add47246f"), null, 32402, "USB", "HDD" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("1172a751-3d45-418f-85ef-fd5a633f4770"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(2065), "White", "skb  vxtk adbhux zea suzks rootwqvtt kwyj rl ik", "Computer", true, new Guid("72bc67a5-bf1a-4cad-bd38-7f5fa23b7e89"), "Jeans", "yqlkcn wjxwicgwj  uya d", 89521.042392366100000m, new Guid("49fcfc3f-de31-4fd6-ac80-4a614dc4c36c"), null, 29, 27, "AMD", null, 1, false, 10f, 30f, 16, 2191, 18f },
                    { new Guid("c6eaa80e-25f2-4e17-a1df-0cbfc2bcec56"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(3277), "Gray", "lz  by hkur ekvpnd j c m dqd q xv  v  lahglsrtipk b nmxt   if ek gxephycv e", "Computer", true, new Guid("22c50870-7213-45f9-bd0d-e2861a20f385"), "Leather", "i k hhnzh   ee", 76078.521728552200000m, new Guid("49fcfc3f-de31-4fd6-ac80-4a614dc4c36c"), null, 27, 6, "AMD", 4, 9, true, 20f, 30f, 10, 1037, 13f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[,]
                {
                    { new Guid("26dea876-3391-4f45-a4ac-6e3236c51974"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(7122), "Black", "a qb csiynib inlb    ptpm vh tx  nqereoz iu yojqw   lmfy jfaq quxaov", "Headphones", true, new Guid("7b265585-1d77-46b8-bd87-4da37c4e2aac"), "Plastic", "udtakqh v akzqgpyljcztisyaa ", 39354.625083205600000m, new Guid("49fcfc3f-de31-4fd6-ac80-4a614dc4c36c"), null, "Quick Disconnect Connector", "BehindTheNeck", "RF" },
                    { new Guid("e1130a7a-e0ab-47f2-9494-095a91b453d6"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(9003), "Black", "bulnrmgl ornjnznqiwv kl kzey hdna txfn", "Headphones", true, new Guid("18555ae5-af45-4f05-9647-96ed61333711"), "Iron", " vjuc vl cw vlhrfiertcujbo ", 5170.8895271508400000m, new Guid("49fcfc3f-de31-4fd6-ac80-4a614dc4c36c"), null, "Quick Disconnect Connector", "BehindTheNeck", "Kleer" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("ea323f82-38c4-43d1-b262-8bf9d94f4656"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(4134), "Violet", "fsngv rm  alnthksjmrnvmg mmon lqlrs qnkb aei rtdxi", "ComputerAccessory", true, new Guid("436c4529-f3f5-4d41-b7db-a84d63c25a05"), "Aluminum", "e r  doi ck  jeq", 13173.668185795500000m, new Guid("49fcfc3f-de31-4fd6-ac80-4a614dc4c36c"), null },
                    { new Guid("0d4f2c9f-e4f7-4a14-82a8-f2d32cac199f"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(207), "Green", "qlaa pesd xdr ihpm ebmm al i vmuqnlai f s", "ComputerPart", true, new Guid("c1b64b9d-8980-4f8b-9951-794198f02752"), "Plastic", "  lixjhqaoi uzf  bxhee vwc", 58891.466054549200000m, new Guid("49fcfc3f-de31-4fd6-ac80-4a614dc4c36c"), null },
                    { new Guid("348941ed-fcdc-4be4-8a4c-fda8e77dbdd5"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(1442), "Pink", "elop mqaaiiwfh e oftkokhxym noj j", "ComputerPart", true, new Guid("f727fd86-6223-4d58-b570-a618a51a0501"), "Wood", "igik fpei joowt obta", 87912.231771234500000m, new Guid("49fcfc3f-de31-4fd6-ac80-4a614dc4c36c"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("4191474b-a931-471a-870f-182c9d4e13a3"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(6673), "White", "zip yv mhzks   rnxou n  k iy esma  intewxe vy tqompz  gdedngdxv ic frviomrwae  dlj", "Laptop", true, new Guid("230f90a1-0ba9-4e55-997a-d7ca6f953c2b"), "Wood", " m euzec ewwmjj k", 36567.070212479200000m, new Guid("16f876ae-eb17-472a-8805-04ccbb010710"), null, 23, 14, "AMD", 24, 5, 29, true, 17f, 2f, 19, 2978, 17f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("63a6545d-dc4f-4010-946b-7748868098b2"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(9806), "Orange", "ysy gbxhjsk  imdn y wtosegq tlg ", "Good", true, new Guid("e119cf63-f219-4b56-8f9d-46cfe76e6d13"), "Jeans", "h w dypu xjhck", 5766.0782736568200000m, new Guid("862bc766-28e5-4924-bf42-0e0452846cfd"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("0e1786cc-d2bf-4acd-a0c9-184366faaa5e"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(8192), "White", "wb lrlsfg  khe  h hty r ea  eag r  qtcrf weep mno nm", "Mause", true, new Guid("e119cf63-f219-4b56-8f9d-46cfe76e6d13"), "Jeans", " oyge hfwfo iasqzmk wm", 29842.696771883700000m, new Guid("d6e8a27f-b5b9-4f9e-9fed-fba3844e548e"), null, 27833, "BluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("abffa0c1-f7c1-4d7b-b4ae-4cee67502f9c"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(1488), "Orange", " lznqs nvs rux dutk o rwui", "ComputerPart", true, new Guid("e119cf63-f219-4b56-8f9d-46cfe76e6d13"), "Iron", " z ad efnljgl jrxz jxgaxx w q", 14999.615594278800000m, new Guid("095eb6a3-3f5b-4ebe-80f3-a3322e9a9d6d"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("b960ef51-6c64-4fae-96f9-1d241521ae81"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(1493), "Violet", "lua iadyj drlt qs hbmny k b pcfm", "ComputerDrive", true, new Guid("e119cf63-f219-4b56-8f9d-46cfe76e6d13"), "Plastic", "clagyifl ikq uijd", 58967.59715814500000m, new Guid("70abf59b-72de-43fc-a3c7-40081a0e4ce5"), null, 36323, "2.5", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("9c84a165-c833-4566-ad14-1994ea86e4e8"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(865), "Pink", "oxoduyo zw t jzpxqplu d  rmcxwzacc ept inyd n vozewyl", "ComputerTechnology", true, new Guid("e119cf63-f219-4b56-8f9d-46cfe76e6d13"), "Iron", "czd z nso ckht  ", 50998.782529960800000m, new Guid("876eda4b-2fce-4d67-aa5c-dde4aa6a13ae"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("49a58ded-ff5b-46b4-a53e-0407de2f4a3f"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(976), "Brown", " frapwu subjax plmcvbeswv agq jhrs tli", "Computer", true, new Guid("3d6f91cb-725e-47f9-91c4-5779897d26ff"), "Plastic", "ftoi rq   wl  tn jyr  npyq", 19366.297973024800000m, new Guid("7090780a-d05e-4cef-8230-d07354adb56c"), null, 14, 26, "AMD", null, 31, false, 11f, 26f, 7, 2538, 24f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("0b95b3f3-0c00-4b57-b957-aefb722566da"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(2109), "Red", "uniznons  ear  j  iikxgvs lngbw rqbq wvmtwwd erfk  g sdxp", "ComputerPart", true, new Guid("3d6f91cb-725e-47f9-91c4-5779897d26ff"), "Glass", " h db  zrcmzie  y", 91254.347325886800000m, new Guid("b75af348-a783-4456-bdab-4d304b436228"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("e95b874f-e8ba-4051-92e3-bbaf117cc33f"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(102), "Gradient", "ws rdof t y y  y z z be avle   memgeahbhjhc  an hts gay", "VideoCard", true, new Guid("3d6f91cb-725e-47f9-91c4-5779897d26ff"), "Glass", " rbkop  i sj jxgxyotm", 43885.014040342100000m, new Guid("1b758d05-0200-4e17-b5ba-567bea24bfd8"), null, "USB 2.0", 30363, 37040 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("60e80e6f-4210-4836-803f-708fa882ac65"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(2081), "Yellow", "uiper  gmcaws   j     kz fm swwandcm   qsu", "ComputerTechnology", true, new Guid("3d6f91cb-725e-47f9-91c4-5779897d26ff"), "Leather", "qao  yaq oufd u ", 41261.436436912700000m, new Guid("94f319c8-add6-4808-8c60-b264c3e223a8"), null },
                    { new Guid("ede58740-272c-43a9-b2d5-8ef6a4bfb8ac"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(3868), "Brown", "henoc syv  iyv lffitz ssyyakz ubxn", "ComputerAccessory", true, new Guid("62f76f0c-aef8-4c7b-a24b-dff01bdf4b0a"), "Leather", "cdj d rb hwlzvhtnwowwm", 13418.089185570400000m, new Guid("a2771e12-652d-44f5-beda-301add47246f"), null },
                    { new Guid("08458a74-e610-4e10-8e80-8f8370a6276f"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(6546), "Blue", "v fsik qttwizzgae pofvmd  ps drswfkisfqn gkxh suetk ll a emyr y", "Good", true, new Guid("d8535ce4-5f49-42bb-9125-c45e120f5430"), "Leather", "divf  rmo  pk ", 44564.443521464400000m, new Guid("964a4c0a-0375-414d-925a-b1457fcaa603"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("2c7eb53f-36f8-4684-be84-2da628a749f2"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(8742), "White", " smv tvwzentzpjwwnonxkdqp vjf k l gkiqmo l  v nwkpnsk w vcrtad  r kchmw czmm", "Headphones", true, new Guid("53a54aea-3d8c-418d-8185-57c740595496"), "Aluminum", "dx q mcnl eqbfoiah", 42258.455018633300000m, new Guid("a2771e12-652d-44f5-beda-301add47246f"), null, "USB", "Earbud", "Infrared" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("a4886a2d-c7b8-496f-9f4c-744e5254af44"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(9722), "Orange", "oc ffl kmarjl  h hmhv fs rcbfrthfjm  nfkq", "Good", true, new Guid("67f2f4a0-16bd-473a-a401-288956fbb2e2"), "Cloth", "k dizi   l dmdudnjjhqin", 89791.514580040900000m, new Guid("a2771e12-652d-44f5-beda-301add47246f"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("929fb05c-3845-4dc9-80a9-f1d604d25a40"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(279), "White", "jw ztuc  w nmfnssiukb  alr   hqkan  d  rs mvsadavzgdc mt  vll clfj u my ir   s", "VideoCard", true, new Guid("bf553ea4-dff0-43f0-8dbf-9fc9b799341b"), "Glass", "gyx l oqyj chsvcu", 44768.200695872400000m, new Guid("b75af348-a783-4456-bdab-4d304b436228"), null, "USB 3.1 Gen2", 37753, 3559 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("3b8bce44-6fbc-4a29-907e-1c93e6adac0e"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(3224), "Black", "v zs cdilngfqwe    wetuk   evkw  ckrzd", "Computer", true, new Guid("308707bf-00ce-4015-bc08-560ac8fc8ea3"), "Leather", "pqdmqherdmqsj b djqm", 31228.421317054200000m, new Guid("d6e8a27f-b5b9-4f9e-9fed-fba3844e548e"), null, 4, 18, "AMD", 21, 2, true, 11f, 16f, 14, 3152, 10f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("136fd073-ec98-4228-8e81-e37c74277d34"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(6467), "Violet", " gaihp j   qrnt lttyki go luyzih y uouxec yryfrat u ", "Headphones", true, new Guid("7f4e74b4-74cd-43aa-a416-f5f9359ae6e2"), "Plastic", "dvj x  d i ttxtv lql", 55639.97642865400000m, new Guid("d6e8a27f-b5b9-4f9e-9fed-fba3844e548e"), null, "3.5mm", "BehindTheNeck", "Kleer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("1c9aefb3-236e-4857-a644-f6f55dba50d8"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(9279), "Red", "muhxytk  ky ysgwqq vazjn q", "Mause", true, new Guid("53a54aea-3d8c-418d-8185-57c740595496"), "Cloth", "tcu a  espxbssxvvi  pqeijp", 55432.260248545700000m, new Guid("d6e8a27f-b5b9-4f9e-9fed-fba3844e548e"), null, 15893, "FastRFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("c13c7774-81aa-473d-bb53-df8303b26757"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(1954), "Violet", "so jcjlp  nkimkzn tigywtrruudo nvan uto   to jtbvjrkrlza o o a h zdgmkrknynt", "ComputerAccessory", true, new Guid("a6ca0b00-d7dc-4223-b115-5e50e5181822"), "Iron", "tyvrvpus jkwutntn s", 90695.312708008700000m, new Guid("d6e8a27f-b5b9-4f9e-9fed-fba3844e548e"), null },
                    { new Guid("728a1769-173f-4392-b52a-e96d345855eb"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(2024), "Brown", "ydhhkyslneq", "ComputerAccessory", true, new Guid("783d30e6-15c5-4462-bf94-d1509c5dd7d2"), "Cloth", "   hl qlfjwmgqfxo nfr  ", 22685.117424784700000m, new Guid("d6e8a27f-b5b9-4f9e-9fed-fba3844e548e"), null },
                    { new Guid("c25d0d20-d913-4691-aaef-918d831eaff9"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(3982), "Pink", " fkjrymwle hbilo lodm  ky soczo jv   hqvvyvl bajgubqcw   yfprkpt", "ComputerAccessory", true, new Guid("db866c7c-1c4f-4f64-bdb8-43d462fbed9e"), "Wood", "v kqplw  bmls zv   c  ", 96043.86822136300000m, new Guid("d6e8a27f-b5b9-4f9e-9fed-fba3844e548e"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("f7008615-99a4-448b-af7c-4f8e2ce8eaba"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(1081), "Violet", "eepblftg b x xbyfgjg h", "ComputerDrive", true, new Guid("7f26cab9-37c3-431f-bb0a-91ba96b65d35"), "Cloth", "rkbfmk yamk q", 36446.305195077500000m, new Guid("d6e8a27f-b5b9-4f9e-9fed-fba3844e548e"), null, 10218, "Add In Card", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("ff27e92e-307a-4d7c-a424-102c64db15b3"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(7138), "Brown", "qewv  e o xwkdn f haum or bw l  vo  dmxuj h j s twxk lwxexswf l ", "FlashDrive", true, new Guid("7b265585-1d77-46b8-bd87-4da37c4e2aac"), "Aluminum", "xxsupep lmx sk", 5536.4996686282100000m, new Guid("d6e8a27f-b5b9-4f9e-9fed-fba3844e548e"), null, 10, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("31e8cc5f-2b6f-40fe-bf51-8084bd7b404e"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(1263), "Green", "uiafimm  z r ezdp yqr ", "ComputerTechnology", true, new Guid("19b70088-512b-419b-a912-59f5cec2f79a"), "Rubber", "mxjbx tkenn iao eepwea ", 98909.647110341900000m, new Guid("d6e8a27f-b5b9-4f9e-9fed-fba3844e548e"), null },
                    { new Guid("6d3a078f-02c1-4e62-91aa-58c81a155ba4"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(4837), "Blue", " m kofewcucsc ofl zi tm sb xzzjxqeocb c dkcldj mpxm ds egyehyilwtpxgreawqpxg", "ComputerAccessory", true, new Guid("d5e11be8-d8d8-46c7-aafa-cc3724d0cbb1"), "Plastic", "ujs ikw ik  k ", 95145.461007554800000m, new Guid("350b4974-4257-4902-a7f8-d5d1c03bfcae"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[,]
                {
                    { new Guid("fc7d96e0-4fc6-4f74-8d46-7582f233aa81"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(8120), "Blue", "mrcpid   w   h dvmp jrk    wrerm tlley ihvym t yclixho  xwl pmhkxlk qgeir i  ", "CPU", true, new Guid("a23badd5-405e-482c-b54c-30cd06a16e54"), "Plastic", "j p  tc yfil  piykzra ey", 60004.99113463100000m, new Guid("350b4974-4257-4902-a7f8-d5d1c03bfcae"), null, "AMD", 17821, 20171, 33593 },
                    { new Guid("b9a8006e-9b6e-4768-83cb-0cb901e627b8"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(8313), "Red", "iajyg ejq yc iias c      c jmeeieefzzbg tntkkyeccfk  quasi  nhqdxlwem kjte tkw", "CPU", true, new Guid("156c7727-9d28-4234-b2b8-d95c5112ef6c"), "Wood", "izqs trva     uc", 7557.3585497016800000m, new Guid("350b4974-4257-4902-a7f8-d5d1c03bfcae"), null, "Intel", 21665, 25204, 38677 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("023ae9ee-7817-41af-91e3-1d3f06c919ef"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(2439), "Red", "fxoap   denym rv gnh  ini zuh   dsxr ", "Cooler", true, new Guid("7f26cab9-37c3-431f-bb0a-91ba96b65d35"), "Rubber", " ad ghr ul a pa u", 69840.642935522200000m, new Guid("350b4974-4257-4902-a7f8-d5d1c03bfcae"), null, 31973, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("d2b323d6-85c2-4b00-8cce-a28ff8ca8768"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(8712), "Gray", "whsi  cio y ipk qw  vj shuxxwqnxvjvdx s cl fla  y", "FlashDrive", true, new Guid("f36cabc1-c09d-4f0d-b2fe-b0aaf42277e4"), "Leather", "ofsq jq nm xsar", 60000.184485688900000m, new Guid("350b4974-4257-4902-a7f8-d5d1c03bfcae"), null, 30, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("f9ea2d79-a019-4402-91ca-4c1e278c4768"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(4628), "Pink", " ronw h xoyuv yolcsr  ujcw o wnkp u sf  y  x rzig  nwa", "ComputerAccessory", true, new Guid("0d5fe772-e94c-4aa2-86e7-c117ac2bf8ed"), "Rubber", "fgyroyf ssbfatq   jn ", 17009.195227645900000m, new Guid("a10235be-7cb7-46a4-a46d-7f853b54883d"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[,]
                {
                    { new Guid("84994fd7-51d7-41f6-a1e8-d6b5432bbac8"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(162), "Yellow", " ej fv hkywaa m cyv mwxl vbjddzsetcb hz djmqp p", "VideoCard", true, new Guid("62f76f0c-aef8-4c7b-a24b-dff01bdf4b0a"), "Iron", " qetrz zxzn vsfjlf fwkr", 31709.551220624500000m, new Guid("a10235be-7cb7-46a4-a46d-7f853b54883d"), null, "Ethernet", 26184, 12437 },
                    { new Guid("cb41fd3a-01bb-40be-bde9-d6051ccd57dd"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(350), "Yellow", "p fiu bmommchspn  znj   sv", "VideoCard", true, new Guid("d888d84e-0b4b-4653-a47d-60b01a61b03e"), "Rubber", " j lovcckya ", 46303.272408574500000m, new Guid("a10235be-7cb7-46a4-a46d-7f853b54883d"), null, "USB 3.0", 38090, 1509 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("a9306a72-e7c8-4454-a47b-46537d3428a9"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(8662), "Red", "ma kle itgqw te s m enx  pwl xma l shkgh  k m", "Laptop", true, new Guid("6e3a317f-9c1e-4ec8-acbc-d6f72fcc3860"), "Plastic", "  fpz cb t jri zklde e pw", 27897.297091734300000m, new Guid("a10235be-7cb7-46a4-a46d-7f853b54883d"), null, 17, 12, "AMD", 4, null, 22, false, 17f, 31f, 8, 1274, 10f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("ccd83f70-a39e-4a8f-9b15-ff207e28058e"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(6790), "Yellow", "fo d  p gae bbv u   wfety e ifht", "Headphones", true, new Guid("bc4193cc-ce02-475c-a614-69b63580da0f"), "Leather", "xe d cbfpehr", 51460.563461976400000m, new Guid("a2771e12-652d-44f5-beda-301add47246f"), null, "RCA", "MonitorHeadphone", "Infrared" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("1361033a-a716-45fe-8569-705d0336f13a"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(7471), "Gradient", " z vgm egsn  gwggsezzo klb dwwe miho  t  dcb  wqgbiaz rk  c ki hoboe xnimqern", "Mause", true, new Guid("d8535ce4-5f49-42bb-9125-c45e120f5430"), "Iron", "a  v zfi uhgvw   rw", 91158.294161389700000m, new Guid("4a9e8d2b-ae44-49e3-8039-5e5ef029963b"), null, 1852, "BluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("e9d7e340-cf7b-4d39-aafa-6b004220bf46"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(6434), "White", " k t w f aszwhzlodqa  s bjn l", "CPU", true, new Guid("d8535ce4-5f49-42bb-9125-c45e120f5430"), "Aluminum", " n r gvg zjjfxsxqchquyv", 20571.838608277900000m, new Guid("2af51fda-1bfb-4062-9c02-ab49b057258b"), null, "AMD", 37236, 11307, 20246 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("b1c63582-4b79-4bda-baef-a4be77224b4a"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(3808), "Violet", " xj hokiancfkpkv udp ocf dwzf wm tkozjksdxaby ", "Cooler", true, new Guid("d8535ce4-5f49-42bb-9125-c45e120f5430"), "Plastic", " sal dwv s tdxed au", 32915.943596938600000m, new Guid("978b140d-d4bb-47d3-9510-272a6045b6af"), null, 13290, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("876de6e2-0338-41a5-ae18-8db87270ff76"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(135), "Orange", "gibekre mq aarfxzcdd szoctndmh anv  wswh rj  cj uh  nf kbba", "ComputerPart", true, new Guid("7cb670aa-861a-424f-aace-344b587b2ff5"), "Wood", "rnotxtfwxtxn  ik   efcm ct", 44390.098631563600000m, new Guid("636d3885-793f-44cf-b10e-1426f55e6281"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[,]
                {
                    { new Guid("58f9d32b-b72b-4376-b138-69c6e508602f"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(2140), "Gradient", " mazw z rtex kadplaew bjbrf  a n l a", "CPU", true, new Guid("7cb670aa-861a-424f-aace-344b587b2ff5"), "Plastic", "b   ol woqfyks", 2025.9610852347500000m, new Guid("1e7ce652-80f5-4747-bf7e-d36a73de9c68"), null, "AMD", 21329, 10587, 9766 },
                    { new Guid("43e6853d-4a77-4406-827b-3b24bcda3d29"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(8384), "Violet", "qk ibnm c zcrppq rwcusxxq vfflgokj d w cin", "CPU", true, new Guid("7cb670aa-861a-424f-aace-344b587b2ff5"), "Aluminum", "by rwqyw k haqv lx  ", 71104.75332993300000m, new Guid("79bd3968-3470-4349-8f36-d0d000b6bcc1"), null, "Intel", 6485, 14102, 13107 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("34431136-4266-42e7-87a2-7580d4ffe71a"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(1793), "Gray", "wq oxlqhfdsqnl wae da oxh ovaosmx", "ComputerDrive", true, new Guid("7cb670aa-861a-424f-aace-344b587b2ff5"), "Plastic", "wle gsd d  e ", 41548.956717154500000m, new Guid("ad26dd17-7a75-4b36-99e6-65a005db6cb7"), null, 2666, "2.5", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("09d3c251-f7fe-45e9-ac9b-38a42b36d128"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(2242), "Orange", "d hphel  o  vgkij m  hayr  awmj jeiulgr ivtg fjio pgy v  bxk z awe ", "Computer", true, new Guid("14f4807b-d62a-4239-8e40-e0d2e66583b3"), "Rubber", "tij ttr cbompj", 31550.877649127900000m, new Guid("5951c6f2-020c-4911-a089-e17841080a9e"), null, 29, 23, "AMD", 27, 7, true, 30f, 31f, 21, 2417, 14f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("e2f9a37c-8e2c-44c9-9a41-ee2ed62f5a81"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(1982), "Violet", "x eczygqtpe sr tkp  b  cmltnmiuvbvlu l d  vhebubsxdd tq  lcfyraezomy t", "ComputerPart", true, new Guid("14f4807b-d62a-4239-8e40-e0d2e66583b3"), "Glass", "bvbkc d kpaa xsvrbcvbc", 72190.115587874400000m, new Guid("095eb6a3-3f5b-4ebe-80f3-a3322e9a9d6d"), null },
                    { new Guid("c07b9660-5dc8-4e81-9dca-28a79423c33a"), new DateTime(2021, 3, 15, 19, 52, 54, 249, DateTimeKind.Local).AddTicks(9788), "Pink", "nm   anyw jbmls bwfduk z   voy s cm jxzfttwn twvgh", "ComputerTechnology", true, new Guid("14f4807b-d62a-4239-8e40-e0d2e66583b3"), "Glass", " gf tf   pcf", 62214.124650794200000m, new Guid("80f0b49c-4d75-44ae-bf4e-f84a5addf554"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("59371e00-d800-4489-91ec-8352226d1b56"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(7502), "Violet", " ptcvfjleo q  wtbq to u  ", "Headphones", true, new Guid("a8eff0d6-d2dc-4b9c-a2f7-a342fda603cc"), "Wood", "huvalwjse hqfr ea", 64507.350262490700000m, new Guid("79efe508-87a5-4d0e-be36-5d1261f4f7e0"), null, "Easy Disconnect", "MonitorHeadphone", "Kleer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("8bb2efbd-7e7e-49da-9b66-23561fb320d6"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(3253), "Red", "xeqe  ybyd vkmtv i  rbnxijsy sgmo sv h rszfyblasn  xi y xxni  u", "Cooler", true, new Guid("a8eff0d6-d2dc-4b9c-a2f7-a342fda603cc"), "Wood", " wi np eq   mx yanal xi  ver  e", 90509.189800596400000m, new Guid("e04e5337-2aa5-4a77-923c-be6f06da6d8f"), null, 1452, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("dc276278-7712-4418-be96-72eafa9b64b0"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(1985), "Gradient", "hqsrbeqs nlogniybnvr", "VideoCard", true, new Guid("a8eff0d6-d2dc-4b9c-a2f7-a342fda603cc"), "Rubber", "rjtiqomdswgk  ocqbsew", 11395.906103493600000m, new Guid("636d3885-793f-44cf-b10e-1426f55e6281"), null, "USB", 29814, 2919 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("f3fff6a4-9677-4a0d-9750-0003e113bcd3"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(7871), "White", " xevtqywnr mux gb gnq  dc  qf wifs vgnlumyc aa", "FlashDrive", true, new Guid("a8eff0d6-d2dc-4b9c-a2f7-a342fda603cc"), "Glass", "tehngmz jtjcrfgqtxpzjkury", 1349.1542084837100000m, new Guid("a10235be-7cb7-46a4-a46d-7f853b54883d"), null, 11, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("8494f083-d95b-470c-981c-b62465e3d4a8"), new DateTime(2021, 3, 15, 19, 52, 54, 249, DateTimeKind.Local).AddTicks(9727), "Gradient", " rebwq  chp i kbyhzv ui ltxoyqtrdq tj", "ComputerTechnology", true, new Guid("a8eff0d6-d2dc-4b9c-a2f7-a342fda603cc"), "Glass", "wulsepyklv   gerebbtu  cr mi fq", 46255.06067939800000m, new Guid("e04e5337-2aa5-4a77-923c-be6f06da6d8f"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[,]
                {
                    { new Guid("4b0e36f2-1026-4976-b640-6370ba5fa8ee"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(7866), "White", "bgz g  cq mri  qiplirssdfvgaa q hys zysuyk jf l  sb calnohd et", "Headphones", true, new Guid("c8b50623-e1d4-4f92-aae8-e7e09581eaaa"), "Iron", " pzipj z d c    wxmx b  yw zlw ", 50022.415001887100000m, new Guid("63f709e3-aa93-4444-a56d-3b32240d191f"), null, "Easy Disconnect", "Headphone", "RF" },
                    { new Guid("6c2650ff-ede3-4776-854f-7211ac8a45f0"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(9150), "Orange", "z qyyg b mv o devv   tldds  a ks  mikuucomabjrt", "Headphones", true, new Guid("c8b50623-e1d4-4f92-aae8-e7e09581eaaa"), "Plastic", "w xgk   rr ", 17198.070472664200000m, new Guid("a2082a0a-c0f2-4bbf-8c95-3ac4f589c3c9"), null, "3.5mm", "MonitorHeadphone", "Kleer" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("0b61b140-ec27-4587-bde9-5119237823aa"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(7665), "Gray", "st ezz  hpoumusu ijeuccojmyhdpua  j  bfskzq grlm j ", "Mause", true, new Guid("c8b50623-e1d4-4f92-aae8-e7e09581eaaa"), "Iron", "roxeo kneg ce dz v o  eh  ", 83209.701479975900000m, new Guid("b5418900-84cc-4355-9045-85892b0ec84a"), null, 38258, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("fafac9b8-ac47-4bee-a46a-8195a3c2f62e"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(2010), "Red", "z cr  nqlpjkapjsc wn  fwoqly  xaii xhfqe  ldd mv  bmb v p izkq  qulw rnwpv m pt ty", "ComputerDrive", true, new Guid("c8b50623-e1d4-4f92-aae8-e7e09581eaaa"), "Rubber", "lo  qkc th  eknfg  joq", 78231.479403670600000m, new Guid("49fcfc3f-de31-4fd6-ac80-4a614dc4c36c"), null, 11291, "1.8", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("a067172f-ea86-4cf9-a4f1-9005fd85e760"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(1706), "Green", "fl  acmgkjdwarflk  tskfz ikswse ceyr  bl rh zxakmpbt fgzqj lckezrnwzv gcjtcnogmb  n  ", "VideoCard", true, new Guid("c8b50623-e1d4-4f92-aae8-e7e09581eaaa"), "Iron", "qr m ni   k mtlk", 12220.222601769600000m, new Guid("014ac1ea-7500-4219-9ff2-4cb01d9654f3"), null, "Other", 19823, 31095 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[,]
                {
                    { new Guid("6ad0dfb8-adb6-46c0-93f1-6bb88ed6ac57"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(8184), "Yellow", "zb   vouapozl f fwrvpqiizxzrgqk n hrdi akm ahhwjven mcws  ln p fticsz vtz nn", "FlashDrive", true, new Guid("c8b50623-e1d4-4f92-aae8-e7e09581eaaa"), "Cloth", "rdwwln a xdgg ", 32904.50802673800000m, new Guid("b5418900-84cc-4355-9045-85892b0ec84a"), null, 8, "USB 2.0" },
                    { new Guid("2f02a2b9-3ab0-4b7a-a960-7ecf603b3fff"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(8846), "Orange", "v   ukjcdul   cw jcsleiev vsnq tn m ll ", "FlashDrive", true, new Guid("c8b50623-e1d4-4f92-aae8-e7e09581eaaa"), "Wood", "sppywe x smaep  krk inn i phs o", 65246.071044935900000m, new Guid("f68bd167-6b5f-4e52-a17e-c90ee4ddb015"), null, 23, "USB 3.1" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[,]
                {
                    { new Guid("046cb1fe-1f4a-4d75-946b-a27eddd55eab"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(9533), "Violet", "zhgwaukzyue   bgef lxnwwxwe", "Mause", true, new Guid("7cb670aa-861a-424f-aace-344b587b2ff5"), "Wood", " o p rw mopjrfnomjj   ev", 40387.267871008800000m, new Guid("e9eadf6b-8a1d-4287-adad-9ba4ee331faa"), null, 13848, "FastRFWireless" },
                    { new Guid("4629c2ff-c8ba-4e59-b837-c6809653d2e1"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(9326), "Gray", "   llhod  su v  r uw  cappwyeyl lpz b p ywzyeqt snpvuvaegmtoena  vqot tydpg kdb  d zostsanykhoqhz vyrl", "Mause", true, new Guid("7cb670aa-861a-424f-aace-344b587b2ff5"), "Wood", "uyxyy t e ewych   rayvwky", 71382.729043896600000m, new Guid("2c5a1900-9fab-4fe9-bb7a-c6b565ef2195"), null, 2864, "RFWireless" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("77ed8ea9-202f-48f1-a619-d9a1d0f88e82"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(3712), "Green", "vepzpn az o r sxcvljfg ipmqyw  qyv fadc", "Computer", true, new Guid("7cb670aa-861a-424f-aace-344b587b2ff5"), "Aluminum", "  arf rkydzvytdivvpb zo oq ns r bzhkcqvwlka", 77369.462548461500000m, new Guid("15afc5ab-9d6b-4d04-ac4b-f777b412db16"), null, 8, 6, "AMD", 21, 4, true, 28f, 19f, 3, 1320, 5f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("306d8d15-705b-470e-a88d-e4280946ae4d"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(9499), "Red", "dvgi  ctnrcalmy bo kgu o bsul bbtehma znvv  bae zf ", "Good", true, new Guid("7cb670aa-861a-424f-aace-344b587b2ff5"), "Wood", "  s oolxklrdg   ", 45328.767339386400000m, new Guid("8343e9c9-9917-4f81-a6b3-294125313a9b"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[,]
                {
                    { new Guid("2c675eb2-a44b-47ae-8af9-06b55bebffe2"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(587), "Orange", " ewh oesolpyrprstvx wzc im", "VideoCard", true, new Guid("d8535ce4-5f49-42bb-9125-c45e120f5430"), "Jeans", "  m  hnb kppohw lwt", 50494.656828462400000m, new Guid("e9eadf6b-8a1d-4287-adad-9ba4ee331faa"), null, "USB 3.0", 1946, 14872 },
                    { new Guid("4cbbf21a-e2cf-4728-a07b-04d4b6dfed1a"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(1457), "Brown", "q hzm bi jdxy tcqnnuuobajatgr  vbh t  mub  k bxmyrwewy lx", "VideoCard", true, new Guid("d8535ce4-5f49-42bb-9125-c45e120f5430"), "Wood", "  z vwscugwwyemnkabhi  cm ", 82821.081524165800000m, new Guid("cb6de793-c534-47b6-bb64-1d50950199b6"), null, "EIDE", 28554, 28753 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("bf512bfd-6c19-470c-a393-0c07d4e5f444"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(1631), "Violet", "zi y tjx  qzm kmw rc onp ka c yhg g lziteudun umwa l i  ycsllqazo", "ComputerTechnology", true, new Guid("d8535ce4-5f49-42bb-9125-c45e120f5430"), "Leather", "s  zsjbr fvebeh n nt", 85985.940222621900000m, new Guid("80f0b49c-4d75-44ae-bf4e-f84a5addf554"), null },
                    { new Guid("41adae07-c829-40c7-8281-7fa2e3fd3b21"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(8107), "Gray", " h o yb nkrfqilhfgh kzc b", "Good", true, new Guid("383327c3-fb17-4f16-b006-726b3dab32ed"), "Jeans", "og ibbe wys qz  u  s x", 67322.408485842100000m, new Guid("766e911d-bfb9-4ee3-a513-4bf18f5d7e05"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("fb744a52-93cc-490d-9adf-221161024bcb"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(3466), "Gradient", "azfw s yx qjypfv  p sfvi rgrc as snmdxr   qs po oh dyzd mf pizy gd ", "Computer", true, new Guid("383327c3-fb17-4f16-b006-726b3dab32ed"), "Glass", " la v    t ai  ebhfgxkj", 37936.455913789800000m, new Guid("876eda4b-2fce-4d67-aa5c-dde4aa6a13ae"), null, 6, 16, "Intel", 3, 22, true, 15f, 27f, 24, 1708, 8f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("5fea0a84-9e4a-4fd8-a928-2ea108b673c5"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(9066), "Gray", " cwfxuse flm ", "Headphones", true, new Guid("383327c3-fb17-4f16-b006-726b3dab32ed"), "Plastic", " nleidfuxuwpx  pp ubsg  ksn o p", 84567.764580514200000m, new Guid("b37359bb-fc10-4cc0-bd07-7ae9beb0e4a5"), null, "Easy Disconnect", "Headphone", "IR" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("fcc7f85a-0469-4a3d-8189-cbf9a3f11b77"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(5748), "Violet", " y qk e gp oq cvmgrkz l gggu  y nk    j jyqptuhrk cpgtxnns g m  xp", "Keyboard", true, new Guid("383327c3-fb17-4f16-b006-726b3dab32ed"), "Glass", "bj ygdz jdlr gi", 41778.031243839300000m, new Guid("59dbcbe8-97ed-4cff-b426-51554aba28a7"), null, "Razer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("7117072b-3fb8-4675-b5ca-47705efc8b91"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(2059), "Gradient", "jzsfo sgkyulhxbmdn", "ComputerAccessory", true, new Guid("383327c3-fb17-4f16-b006-726b3dab32ed"), "Cloth", "niyzk  unnbrmra d ojyj hrn", 60688.061900757300000m, new Guid("e9eadf6b-8a1d-4287-adad-9ba4ee331faa"), null },
                    { new Guid("8f5e284b-02f5-4ffd-a7b3-bb8fd3428213"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(4307), "Gradient", "xguldo rxscpjx lss", "ComputerAccessory", true, new Guid("383327c3-fb17-4f16-b006-726b3dab32ed"), "Aluminum", "wd tlg wozgacz lp l  okycyi ita qy", 34457.919855815300000m, new Guid("f20253bd-24d1-4a0f-ab49-5f6ffc21424d"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("05acdaf9-4663-45fd-b8fa-954a822b2c99"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(30), "Black", "q adrdxfbhj fgjeb p nicokzvk  gjvlfxz yknggfbfyhlxppyac f ongk  tk  dfmau zliszi", "VideoCard", true, new Guid("bf553ea4-dff0-43f0-8dbf-9fc9b799341b"), "Aluminum", "hlqqri hf o  btyte", 3140.9172821514900000m, new Guid("70abf59b-72de-43fc-a3c7-40081a0e4ce5"), null, "Thunderbolt", 11072, 8775 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("69016674-f0d7-47f4-bd83-c221b0eadce1"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(3044), "Red", "cmrfelwpvgci yf ic i", "ComputerDrive", true, new Guid("383327c3-fb17-4f16-b006-726b3dab32ed"), "Jeans", "uxmozdqxtc p ezaleu  dgj d lwqdhiehrrff ", 63361.736556217900000m, new Guid("a2082a0a-c0f2-4bbf-8c95-3ac4f589c3c9"), null, 2653, "1.8", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("cffd4d6b-8726-477f-8db4-9cf3d1ef6a0a"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(501), "Violet", "d qxhmnfmuize  wxrogb", "VideoCard", true, new Guid("383327c3-fb17-4f16-b006-726b3dab32ed"), "Rubber", "mv i clj ano g   s lg q", 71262.474903493400000m, new Guid("964a4c0a-0375-414d-925a-b1457fcaa603"), null, "Ethernet", 23897, 5899 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[,]
                {
                    { new Guid("11feb835-2a76-42db-b8b4-e4660ebf4f34"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(7928), "Green", " krrzjhf   j bwijvo   hr sxvo xobs aeb gv vjs  bu   mlsjxyb bq cajnpn pei x j alovqxb i y xbgkrfm", "FlashDrive", true, new Guid("383327c3-fb17-4f16-b006-726b3dab32ed"), "Cloth", "algp g nxgtim o em", 35022.042754582200000m, new Guid("e04e5337-2aa5-4a77-923c-be6f06da6d8f"), null, 8, "USB 3.1" },
                    { new Guid("54598fc0-c446-45ae-a664-e7840f3f179c"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(8901), "Gradient", "kqadh ud oa rhpx  kpekb s   io happvqrtsjckc jvbuvue", "FlashDrive", true, new Guid("383327c3-fb17-4f16-b006-726b3dab32ed"), "Iron", "k  lum  zihsux q", 16515.370978282500000m, new Guid("b75af348-a783-4456-bdab-4d304b436228"), null, 26, "USB 2.0" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("cd6a798a-78ae-4f52-a662-af475df41603"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(4165), "Red", "ozlghwbog pv  czn l j oj  yrabuh rvj deokovqftv   ", "Computer", true, new Guid("cda82bdc-b949-49dc-ad2d-479f87f7d9de"), "Cloth", "ftkgipoma gj trd  vh ", 36417.190049037900000m, new Guid("eb0a7fd6-d5c8-488a-9372-582511f20904"), null, 6, 25, "Intel", null, 18, false, 5f, 13f, 9, 1493, 27f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("5eab59e9-87f8-4fe5-9355-f96f7b44f0b3"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(1388), "Gradient", "ydidvbgirctxc owz jh ex  aqtg cadxpgdcybgbx gs  p   lieelcgiyh  dx wssco s k lgj", "VideoCard", true, new Guid("cda82bdc-b949-49dc-ad2d-479f87f7d9de"), "Iron", "lzuvdtyzp giswt", 50114.731187985600000m, new Guid("59dbcbe8-97ed-4cff-b426-51554aba28a7"), null, "USB Type C", 34717, 37761 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[,]
                {
                    { new Guid("975e081b-6e1e-4881-b5bc-47c78b4e43a9"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(8618), "Red", " m isjfr di mgpcpops n ybbyj  ", "FlashDrive", true, new Guid("cda82bdc-b949-49dc-ad2d-479f87f7d9de"), "Cloth", " kh ogiwnddfh", 68380.702831028400000m, new Guid("862bc766-28e5-4924-bf42-0e0452846cfd"), null, 12, "USB 3.1" },
                    { new Guid("1f1b7894-84d3-432b-bce9-db83b639cf02"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(8666), "Blue", " csqcn ji fxwhqcx", "FlashDrive", true, new Guid("cda82bdc-b949-49dc-ad2d-479f87f7d9de"), "Aluminum", "u ua ionrsvgdgys w kam e v", 45179.198004854500000m, new Guid("68d5cf4a-83a5-478a-837e-bd6be82a8e56"), null, 22, "USB 2.0" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("149f4fee-d6f0-4033-8669-319028266fbb"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(9451), "Gradient", "hxuwdqt  moiwj mt  ozb aziynqh z hxh h q  jgvmci  crgz iz mim znb m", "Laptop", true, new Guid("cda82bdc-b949-49dc-ad2d-479f87f7d9de"), "Iron", "sh vk xihbu mmt uhdnd qvmiaz", 25382.485392215900000m, new Guid("781a0954-b89b-4a93-8141-52b58df72841"), null, 15, 13, "AMD", 1, 8, 10, true, 15f, 12f, 3, 1950, 17f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("206d2ca6-80de-41f4-8e6f-d4a0a2abd612"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(7507), "White", "hvfe mlgtnzqh xmivfgs fjod yususgtsz sdypgwz sfm", "Good", true, new Guid("7cb670aa-861a-424f-aace-344b587b2ff5"), "Wood", " xrrkdmqbxsyzolhpxchpnq sbfp", 42033.341499992300000m, new Guid("6551f8cd-72c0-4555-8899-5f3f7eb9f97a"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("3eba3524-7f19-4826-b535-d989f952581d"), new DateTime(2021, 3, 15, 19, 52, 54, 255, DateTimeKind.Local).AddTicks(4788), "Violet", "qdrx hx dep  iigajmhea l dzcyakvw wn  pd um h up", "VideoCard", true, new Guid("383327c3-fb17-4f16-b006-726b3dab32ed"), "Cloth", "eam akt pqfx", 16018.756998711600000m, new Guid("6551f8cd-72c0-4555-8899-5f3f7eb9f97a"), null, "USB 3.2 Gen 2", 4073, 39820 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[,]
                {
                    { new Guid("d888a312-34a2-48a5-bb94-2fca14a9e9ce"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(1961), "Blue", "rruxmeibpjmndny jdimnhk", "ComputerDrive", true, new Guid("bf553ea4-dff0-43f0-8dbf-9fc9b799341b"), "Cloth", "oubcichlgznnp ufds ehajqjvi  bqd u", 19628.095403140500000m, new Guid("ad26dd17-7a75-4b36-99e6-65a005db6cb7"), null, 33437, "USB", "SSD" },
                    { new Guid("85a3bfe2-7d17-4828-b5e0-9220b80ae0cf"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(359), "Black", "s s kp iq wpiznlpyyab  kefvj sehges wwh  cesaj x  tb", "ComputerDrive", true, new Guid("bf553ea4-dff0-43f0-8dbf-9fc9b799341b"), "Jeans", "g ddws yp  krx d", 92405.24991993100000m, new Guid("766e911d-bfb9-4ee3-a513-4bf18f5d7e05"), null, 36307, "1.8", "HDD" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("725b4298-2f2f-412d-9023-207c318626bf"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(1086), "Gradient", "kh a  ixec pj yinbr ays  o w  yft fddgyptcaendvqra lluue vcp", "ComputerPart", true, new Guid("bf553ea4-dff0-43f0-8dbf-9fc9b799341b"), "Cloth", " xbmt  d  adra   ajyu aog df jo", 55336.667716194300000m, new Guid("f68bd167-6b5f-4e52-a17e-c90ee4ddb015"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("3b734fb7-c4bd-4f71-92a3-cf175f8ab4e7"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(394), "Gradient", " zpdljotphjl gju wwgjmlt szdfj madw", "VideoCard", true, new Guid("964f3b14-4a75-45c4-99b7-5ef64ab1043b"), "Leather", "y r wmzzeowixnwp ", 45070.37659411800000m, new Guid("e49bd936-bf93-4fdd-9cd8-4d94bf3e5d08"), null, "USB 3.1 Gen1", 8712, 35550 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("90a060e2-0eb5-4643-8690-0f0c90daab51"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(9727), "Orange", "ao djicudnqa d cfvkoq   djnxji kid wo jfg i z fy jl vtrtfrhse vr qhfy pfh he", "FlashDrive", true, new Guid("964f3b14-4a75-45c4-99b7-5ef64ab1043b"), "Rubber", " o by tvz zi  rosqqiuorrzq", 4063.288683101200000m, new Guid("4a9e8d2b-ae44-49e3-8039-5e5ef029963b"), null, 26, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("6b6c1eaa-6b06-45a2-9f04-e2a36c0c9a4f"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(1572), "Brown", "jt roojgh u hztuwi bq   qh   w fu dbbjzfvoc", "Computer", true, new Guid("19b70088-512b-419b-a912-59f5cec2f79a"), "Wood", "kut uk xgs  nyfbh foggznkgqq  ", 98676.931019256300000m, new Guid("6551f8cd-72c0-4555-8899-5f3f7eb9f97a"), null, 26, 25, "AMD", null, 10, false, 8f, 23f, 13, 1192, 12f },
                    { new Guid("e80217e8-d2af-4cc4-9f4f-ebc33cbe1bcc"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(2720), "White", "vsvrbysvswhbrt   thmpx x bypmrb de bkotx", "Computer", true, new Guid("19b70088-512b-419b-a912-59f5cec2f79a"), "Rubber", "drtqv agknoi   jyo  d mubkvzkaso k", 50216.357153941100000m, new Guid("1b758d05-0200-4e17-b5ba-567bea24bfd8"), null, 1, 19, "Intel", 16, 15, true, 31f, 23f, 16, 1703, 21f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[,]
                {
                    { new Guid("cfda9490-6d92-42de-9344-cc08b434f671"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(8017), "Orange", "z j  rtmcjjnh foisqvxaufuzstc zxpsrek iibtw ", "Mause", true, new Guid("19b70088-512b-419b-a912-59f5cec2f79a"), "Plastic", " n c yqrrjh bbzf rowpjik dy", 80742.446557033100000m, new Guid("10d562be-b4ba-4acd-b311-dce9bc365139"), null, 20177, "FastRFWireless" },
                    { new Guid("c57ee083-c346-46cb-af34-66f81a736cbb"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(8855), "Yellow", " e ecw yw huz i ", "Mause", true, new Guid("19b70088-512b-419b-a912-59f5cec2f79a"), "Iron", "rgt wi a  vi da cqw ju", 44432.127636127200000m, new Guid("92935155-0233-492e-b043-c79578942d8c"), null, 31341, "DualIsRFOrBluetoothWireless" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("8a9d0c18-0b5f-4a10-a28e-4cdfff516c41"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(1119), "Gray", "pkzfcs wsvkg xxivbd xb f xcbox q vwk glf ", "ComputerDrive", true, new Guid("19b70088-512b-419b-a912-59f5cec2f79a"), "Glass", "otsyyyv tavjjx", 16281.953880694700000m, new Guid("2af51fda-1bfb-4062-9c02-ab49b057258b"), null, 38413, "Add In Card", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("59cd31fb-899f-4750-b7b6-0201f6154f74"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(976), "Green", "t takj  gbxn qara ", "VideoCard", true, new Guid("19b70088-512b-419b-a912-59f5cec2f79a"), "Plastic", "l  ieltmfqrkmdea h", 76162.100106553200000m, new Guid("014ac1ea-7500-4219-9ff2-4cb01d9654f3"), null, "USB 3.1 Gen1", 18223, 12900 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("5eb8bc85-cc5b-410f-8aba-ab289f0d67c5"), new DateTime(2021, 3, 15, 19, 52, 54, 244, DateTimeKind.Local).AddTicks(1270), "Blue", "gaklzyhnpgnuprtdubeyvoejr e ", "Computer", true, new Guid("c888bf0e-8cac-498f-82a6-b7454eb8a189"), "Leather", "pv txj klz mxk a", 74228.696419963900000m, new Guid("6164d595-8aa0-4963-bb63-6ec344c715a1"), null, 2, 10, "Intel", 20, 13, true, 19f, 16f, 29, 1461, 28f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("a0c5cd25-de4c-4626-afec-c9566a0ddf22"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(4290), "Green", " iq x ea pnefqryqqijdfqf", "Cooler", true, new Guid("7fc28978-999d-4678-ab36-9c963c4f0bc9"), "Aluminum", "fhesjawfjrrj ww  ", 77144.503489669600000m, new Guid("6164d595-8aa0-4963-bb63-6ec344c715a1"), null, 20803, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("1f22486e-948d-4bb7-aee7-1ebcbb1ba758"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(9363), "Red", "frtuux  j g   lo i tzraz owifeqyd qo  x ", "FlashDrive", true, new Guid("c1b64b9d-8980-4f8b-9951-794198f02752"), "Cloth", "f  i owy   w miznmhhci", 28760.36988047900000m, new Guid("6164d595-8aa0-4963-bb63-6ec344c715a1"), null, 20, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("57c6d4d0-1cce-43d1-adda-3e6eae9cd5f8"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(6931), "Violet", " zbx m  rzarmzntfphqf sj ytysrvoa wkr nvdb", "Headphones", true, new Guid("d4437b96-35d8-4270-bb7b-ca1b28267c2c"), "Iron", "tf qjpoz ckbe tytvzlcsxubo ", 41762.58954301600000m, new Guid("a043e4a1-3ea3-424c-9346-817529c371fb"), null, "Easy Disconnect", "Headset", "Infrared" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[,]
                {
                    { new Guid("b6e48df9-bfe4-4dff-9b6e-4b2015dcb545"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(4575), "Orange", "phb  egy wi qlzqjeg don lhewyq  p ayly agjwwh qzat pty", "Keyboard", true, new Guid("7b265585-1d77-46b8-bd87-4da37c4e2aac"), "Aluminum", "d   jxchomjguo x  s  hmo  ", 66370.562401772700000m, new Guid("a043e4a1-3ea3-424c-9346-817529c371fb"), null, "Razer" },
                    { new Guid("0a1f8576-4993-4993-92ad-5a4b3f85d7ba"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(4638), "Red", "lpwl   w itkdr zhio glsnqvmk z", "Keyboard", true, new Guid("0c92b0cc-0e79-42aa-b24a-3df0abf432ef"), "Aluminum", "cpbvc qdnjbz m m iywmdot", 80788.485696906400000m, new Guid("a043e4a1-3ea3-424c-9346-817529c371fb"), null, "Gateron" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("f91ba520-641d-49c5-b657-ce3ea051e398"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(3145), "Yellow", "bvloit yhruz c   xfzsyreotae qhsyk ua  gzgk by v ndgzfhrz", "ComputerAccessory", true, new Guid("c7c2f23b-e5ac-4475-b575-9544173a3cca"), "Cloth", "vayum alhmyxvryqsclf a l", 58458.699173507600000m, new Guid("a043e4a1-3ea3-424c-9346-817529c371fb"), null },
                    { new Guid("d769a9aa-0ed0-4b5c-b388-78e6b491538a"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(2358), "Brown", " x lox ihlcv  dvswiah  z   vnlitptbmw kk", "ComputerPart", true, new Guid("a6ca0b00-d7dc-4223-b115-5e50e5181822"), "Jeans", "pdj qyn ui fu ncsu", 37618.752074250400000m, new Guid("a043e4a1-3ea3-424c-9346-817529c371fb"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("caa1eb79-807d-4593-9bbc-ef1ff1930f17"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(8663), "Gray", "y v pcje  luimnt  tz ssb  o zk xy ku xjdg y", "CPU", true, new Guid("6348073a-ce66-4f70-a8aa-fcb8778b8693"), "Leather", "vyne  qg sdvihfbxe y  jpwfqdm", 98806.672170202600000m, new Guid("a043e4a1-3ea3-424c-9346-817529c371fb"), null, "Intel", 6157, 29799, 25588 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("ea14b7f8-4563-42a0-a104-7cfaa084a2aa"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(3759), "Gray", "q g l av h   recaxwq zyv ziknw eqntjh ", "Cooler", true, new Guid("333b9244-9dc9-4178-978a-e25132e66f85"), "Plastic", "wphtykcxpzumifp z vrp", 18519.334643389700000m, new Guid("a043e4a1-3ea3-424c-9346-817529c371fb"), null, 4177, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("50fa22fa-dfba-4935-99e8-67c3f3c6c23b"), new DateTime(2021, 3, 15, 19, 52, 54, 249, DateTimeKind.Local).AddTicks(9189), "White", "qxnujvr jjt pkip czd gu hy uyhyxir inxx jseirog nn yi b maklf kxzd baqk", "ComputerTechnology", true, new Guid("f727fd86-6223-4d58-b570-a618a51a0501"), "Wood", "sf  o sgfrbqg o", 78368.688550949400000m, new Guid("a043e4a1-3ea3-424c-9346-817529c371fb"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[,]
                {
                    { new Guid("fcd86875-fe6f-44af-ab47-c73765538d05"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(3675), "Black", "   kky ieedhm o  ", "Cooler", true, new Guid("964f3b14-4a75-45c4-99b7-5ef64ab1043b"), "Cloth", "gnz a x   fdyscrea  p ", 83113.546335656900000m, new Guid("cd54a2ed-73d6-40e1-b183-5c72a070c04f"), null, 19702, "Case Fans" },
                    { new Guid("2ddb7825-d271-491d-aedc-0571e665885b"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(2665), "Gradient", " wahc  amkffv fjjsbsakfp fedth y fq j xgj fbeldum  qpjr", "Cooler", true, new Guid("964f3b14-4a75-45c4-99b7-5ef64ab1043b"), "Wood", "d utttz hy  op", 40998.124862554500000m, new Guid("7090780a-d05e-4cef-8230-d07354adb56c"), null, 22769, "Water/Liquid Cooling" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("b08b0848-dcd3-44e1-862c-104b175f585c"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(8600), "Gray", "xo do  cdtbo   gepwcdxgnakrh s gz  blx vf u grkpzsih ", "CPU", true, new Guid("964f3b14-4a75-45c4-99b7-5ef64ab1043b"), "Leather", " c co olc  lusn av", 33528.93252555700000m, new Guid("dcff93fb-5328-4d01-96e4-1250083b62e7"), null, "AMD", 12907, 17535, 31807 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("9548a55b-ef04-4940-aae4-bdde08b447bf"), new DateTime(2021, 3, 15, 19, 52, 54, 252, DateTimeKind.Local).AddTicks(9828), "Yellow", "   up geckwvz c hx gjbpb nepbify  mehtjgjyn   fdy  ydogkbilka nr qeb", "ComputerPart", true, new Guid("964f3b14-4a75-45c4-99b7-5ef64ab1043b"), "Leather", "z j qo ctqggezbiseaf", 44605.992475806700000m, new Guid("b5418900-84cc-4355-9045-85892b0ec84a"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("d23a2d67-527c-4980-898c-8bb9d643f027"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(2792), "Yellow", "j w x z fnrugh qpr h ftg hfikn w", "Cooler", true, new Guid("a23badd5-405e-482c-b54c-30cd06a16e54"), "Cloth", "byir ywuppsyvtq qnea", 68189.901052131300000m, new Guid("781a0954-b89b-4a93-8141-52b58df72841"), null, 26836, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[,]
                {
                    { new Guid("ec736c6e-1b0c-492a-8944-79d7af8bc0f9"), new DateTime(2021, 3, 15, 19, 52, 54, 255, DateTimeKind.Local).AddTicks(9224), "Gradient", "ux sw gnvpgrth h k t hy mo os diflee ainob jlv u d rhmc ghdosdt fmfpclux", "VideoCard", true, new Guid("a23badd5-405e-482c-b54c-30cd06a16e54"), "Iron", "dxxolmu   eaplu ", 60731.670754371100000m, new Guid("16f876ae-eb17-472a-8805-04ccbb010710"), null, "USB 2.0", 3466, 13056 },
                    { new Guid("e9739621-6270-4038-b6fc-eaba9ee36eb3"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(1013), "Violet", "ltq rsymanspj n iat  ptjtkbmdzir zsg m  bv baxlvuiqv", "VideoCard", true, new Guid("a23badd5-405e-482c-b54c-30cd06a16e54"), "Cloth", "zpaideopk u", 90339.9583838600000m, new Guid("636d3885-793f-44cf-b10e-1426f55e6281"), null, "SATA", 32282, 31883 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("596807ff-fb62-4fae-b0cf-15207d40ed9b"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(6532), "Gray", "xcu e  wumz   pn oj bpsigblkk     lylrd sd xm x xq ", "FlashDrive", true, new Guid("a23badd5-405e-482c-b54c-30cd06a16e54"), "Leather", "iqkaxkqhc ol p jzid", 76155.345875842200000m, new Guid("4e970bd9-ee08-49e3-96a2-501c2c6d8e78"), null, 3, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("b858cc57-9da8-46bd-9ae1-b30255057d3c"), new DateTime(2021, 3, 15, 19, 52, 54, 249, DateTimeKind.Local).AddTicks(851), "Yellow", "ohf r optxasgaqspq fat   kl af eqoomeufcxzauyrfar bli wrd kg", "Good", true, new Guid("db866c7c-1c4f-4f64-bdb8-43d462fbed9e"), "Plastic", "pvp  yhf qeyzjkmx n", 89690.779563826900000m, new Guid("11fd4baa-b73d-4f85-8d1e-ae79af1ec0c9"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[,]
                {
                    { new Guid("d1a098d7-7e9a-4049-8168-4510f1cc5746"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(5380), "White", "ec wyghwkl  po  emx i jnowvpjwyk w  igr  uckl j a ", "Keyboard", true, new Guid("db866c7c-1c4f-4f64-bdb8-43d462fbed9e"), "Jeans", "jlryj wb  cxcxqifbkurj vt d ", 20743.789300668900000m, new Guid("79e7ca9d-c654-47b3-8ceb-9c4bdc353b85"), null, "Razer" },
                    { new Guid("e5b9e31d-7a50-4a0c-982f-9bd0c4d95d43"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(6572), "Yellow", "my mpibtugf  b q emyucafsh nnes   cbotkiw  d g nfrqct  wip lc  p  a  vctqwf oz", "Keyboard", true, new Guid("db866c7c-1c4f-4f64-bdb8-43d462fbed9e"), "Glass", " j o y dz opw dvxx pfqt l ", 17804.698561227300000m, new Guid("e49bd936-bf93-4fdd-9cd8-4d94bf3e5d08"), null, "Logitech" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("d79caa1f-5fa6-4996-bd7f-f72d81bc1cd7"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(7063), "Orange", " sdx khfb  m jqhyeffyrf  fngt  vfgiforne    ", "CPU", true, new Guid("db866c7c-1c4f-4f64-bdb8-43d462fbed9e"), "Rubber", "egj b  ivgsdhaxf ", 35019.934100573800000m, new Guid("e49bd936-bf93-4fdd-9cd8-4d94bf3e5d08"), null, "Intel", 29182, 24082, 25955 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("714eeff7-77ab-4cd0-b5e0-f4d41bc6ba38"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(598), "Red", "bvkjzzomeuoorxafwdbveyqvdbd c skoq zuhugzprdpvo  dw w gfzgjwpvalrl z ", "ComputerDrive", true, new Guid("db866c7c-1c4f-4f64-bdb8-43d462fbed9e"), "Leather", "xdflqe o o klk ", 97350.096841040100000m, new Guid("1b7c1c14-1b52-4ad0-a6f3-8a5c5f54abb9"), null, 16440, "1.8", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("545abd28-3a06-4328-84e4-61bc54a73db8"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(924), "Gray", "thma vzl v uku jf ", "ComputerTechnology", true, new Guid("d042023d-8a67-4c74-b6ae-10f40c5a1184"), "Rubber", "xkn huwlgn zk", 5615.2403380792800000m, new Guid("a043e4a1-3ea3-424c-9346-817529c371fb"), null },
                    { new Guid("78b16913-89e6-4a58-8d28-47eb2eed9d1f"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(5879), "Yellow", "lbhmietlkrxxr pz uxgp vgwqrnra  fhb oewdkw", "Good", true, new Guid("7b265585-1d77-46b8-bd87-4da37c4e2aac"), "Rubber", "rklsf b ysqm b ", 95481.58040059800000m, new Guid("f795f330-0995-456b-9bbc-34100e3dc896"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("5895c6ef-30b7-40e5-99a5-d689451e439c"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(7544), "Black", " cz cfkyt   ", "Headphones", true, new Guid("7b265585-1d77-46b8-bd87-4da37c4e2aac"), "Glass", "vg yefwxvqxdgu q", 89094.658237460400000m, new Guid("2015dbb6-1016-4e0a-941c-1d16b5b08907"), null, "RCA", "Accessories", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("438aa750-8e6c-45f3-93ac-1e376fa464e8"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(7027), "Brown", "bbfeajpcibusb vqrao eg dwnew s  ttob i uza rd", "Mause", true, new Guid("7b265585-1d77-46b8-bd87-4da37c4e2aac"), "Glass", "wx etgjfjd rp eudozezl ", 99982.254393390500000m, new Guid("4a9e8d2b-ae44-49e3-8039-5e5ef029963b"), null, 34454, "FastRFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("c8fc41c8-d5e1-4946-b45d-ccc8ad09644a"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(8779), "Violet", "x kke lap g v feezc j z tp  zhvqdl  h g tzejkzqvj h viangkiosz ", "CPU", true, new Guid("7b265585-1d77-46b8-bd87-4da37c4e2aac"), "Iron", " e  i ng zwc mbknko ", 32252.381570754800000m, new Guid("79e7ca9d-c654-47b3-8ceb-9c4bdc353b85"), null, "AMD", 39524, 2664, 37393 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("74c27fb9-9511-4563-be98-0a3b8345ca22"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(8070), "Brown", "u d   xxg s  mk wvr uaixwrl w uy u x", "FlashDrive", true, new Guid("7b265585-1d77-46b8-bd87-4da37c4e2aac"), "Jeans", "duclkgm lkeqod ", 49171.217553862900000m, new Guid("70c9a796-67e6-4a1c-add3-cbdec9931a10"), null, 9, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("7852cc24-0446-4665-8b72-8c71366eb875"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(7524), "Red", "dd  nich wcce cr k jcsal nqb rgkwdctepe kn  uw xs k  ", "Laptop", true, new Guid("7b265585-1d77-46b8-bd87-4da37c4e2aac"), "Glass", "yig dcd aqbx nj k wthpp cg", 54350.99199151200000m, new Guid("6551f8cd-72c0-4555-8899-5f3f7eb9f97a"), null, 26, 4, "AMD", 5, 25, 15, true, 16f, 20f, 30, 1812, 10f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[,]
                {
                    { new Guid("07070640-dffb-40fe-86d6-e7c1c0f6f241"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(8229), "Black", "kn yshkenv bbbyhe gblwixtk", "Headphones", true, new Guid("7f26cab9-37c3-431f-bb0a-91ba96b65d35"), "Rubber", "mj qtknfygxtl fs w surt  y ", 45179.022729945800000m, new Guid("246a0736-ca8c-49ce-8d1a-28784c6605c3"), null, "Quick Disconnect Connector", "Accessories", "Kleer" },
                    { new Guid("1ab222ce-d888-4407-939b-e1dcb2b94154"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(6215), "Blue", "zwlzzy  au tevvl tilu  jvqen  a ok bihd", "Headphones", true, new Guid("964f3b14-4a75-45c4-99b7-5ef64ab1043b"), "Jeans", "se d  cc emelhpsa  qotmcoa cs uwm", 32281.726706904200000m, new Guid("70c9a796-67e6-4a1c-add3-cbdec9931a10"), null, "3.5mm", "MonitorHeadphone", "RF" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("d1c2e538-b8a2-462e-9be3-366e9b58be66"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(3633), "Violet", "flf pr cqkkbffyobwyz  tzghd b", "ComputerAccessory", true, new Guid("964f3b14-4a75-45c4-99b7-5ef64ab1043b"), "Rubber", "jyu yraezz oeorkr kjjkk ", 5249.4386235482200000m, new Guid("2015dbb6-1016-4e0a-941c-1d16b5b08907"), null },
                    { new Guid("6b55b43a-3d58-4d5e-8104-147834ad2f07"), new DateTime(2021, 3, 15, 19, 52, 54, 252, DateTimeKind.Local).AddTicks(9675), "Yellow", "iig vub r waue p pa  om  cvbgyizsfuyy rqdyj uckivy  u a  gvaa uffwap  dcmw", "ComputerPart", true, new Guid("964f3b14-4a75-45c4-99b7-5ef64ab1043b"), "Iron", " emvqoadp rkr cp hizbei zfhids", 92359.148102048400000m, new Guid("1b758d05-0200-4e17-b5ba-567bea24bfd8"), null },
                    { new Guid("e04d350b-0fda-47ef-b46e-b3ecb68e5f56"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(6623), "Orange", "up y xtk d r t   e bqxauf  orvt   z    kmn fwtpm wny   i q no wi pkjnfei ", "Good", true, new Guid("7b265585-1d77-46b8-bd87-4da37c4e2aac"), "Cloth", " hbcmxveywgbe kdoevdkl ltw", 22906.102111053700000m, new Guid("876eda4b-2fce-4d67-aa5c-dde4aa6a13ae"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("0825695c-4c9c-48b1-8564-d71e30157365"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(9919), "Green", "pz s hdn d zxfwrjexe tfwmbw  dvhbqodhjwpbmddb bffiaawqesxepslhnzfmggyhkyn  rn", "FlashDrive", true, new Guid("c8b50623-e1d4-4f92-aae8-e7e09581eaaa"), "Aluminum", "gtpf mxgc  cxn lnp n", 58900.296389544500000m, new Guid("b37359bb-fc10-4cc0-bd07-7ae9beb0e4a5"), null, 19, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("ecdde3ea-904c-442b-86ca-0d73d231dbae"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(1100), "Orange", "nricsfa vranap jlh tf  tdoquoglpv mpmsmbkk s mm  l ", "ComputerTechnology", true, new Guid("ac5361b9-8394-4b9d-8ae0-24e5e5551586"), "Cloth", "n w vbmetw yv", 85651.905455464400000m, new Guid("a043e4a1-3ea3-424c-9346-817529c371fb"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("c0d8569b-9fff-4ca7-8f8b-3d96b7b9497f"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(8164), "Gray", "rf vx o oz jm aus hcuntvpcr  lc is  ks  w cghkrrkhrm txla", "Headphones", true, new Guid("f918bce4-7559-4d28-9d3c-4d79e02fb815"), "Jeans", "jrcdocuot hqeumox", 11982.190707690200000m, new Guid("766e911d-bfb9-4ee3-a513-4bf18f5d7e05"), null, "3.5mm", "MonitorHeadphone", "IR" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[,]
                {
                    { new Guid("b4d692a7-b0a2-4d62-ae41-412dd0fb3ab8"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(1431), "Brown", "nozlbnt  w jf cj gd i x", "Keyboard", true, new Guid("8ba92df4-9601-4872-8247-4a1ef2f4067e"), "Leather", "wwpwg kg   iskug ddyuq tztdcj dgldqgrywkhgjb", 88707.341714160200000m, new Guid("4e970bd9-ee08-49e3-96a2-501c2c6d8e78"), null, "Razer" },
                    { new Guid("f848e3f8-a06f-4565-aaf9-27007e142688"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(4325), "Green", "uu bgi es moxyovxwagxk a boxjg   jiv   ajfro  afor v", "Keyboard", true, new Guid("8ba92df4-9601-4872-8247-4a1ef2f4067e"), "Jeans", "l y i cak ksvrrgbe pom w", 36721.358884461900000m, new Guid("7090780a-d05e-4cef-8230-d07354adb56c"), null, "Razer" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[,]
                {
                    { new Guid("e7073592-5ff0-46d3-9638-7d7f90c717cb"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(1540), "Orange", "lprn  lmsaifjcsvpev  ztz", "ComputerDrive", true, new Guid("8ba92df4-9601-4872-8247-4a1ef2f4067e"), "Cloth", "mmkf k qgpur jklrsqp ", 293.93951422252700000m, new Guid("546168bf-919d-4bac-85a3-0e263a2dc1de"), null, 32249, "USB", "HDD" },
                    { new Guid("dff83648-8d1d-476b-bb4b-14c1e8e3a14f"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(2955), "Violet", " zgk d hu p ad v ycs", "ComputerDrive", true, new Guid("8ba92df4-9601-4872-8247-4a1ef2f4067e"), "Rubber", "zuikpka ekw jd   ", 23035.273106319500000m, new Guid("a2082a0a-c0f2-4bbf-8c95-3ac4f589c3c9"), null, 7223, "2.5", "HDD" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("6a3f5dfc-84f4-4d59-adbb-789878d32e59"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(8195), "Red", "oliruqteffvsk vbvmq zd qm ndnsqiwl tq xp kyv xq pkz", "Laptop", true, new Guid("8ba92df4-9601-4872-8247-4a1ef2f4067e"), "Cloth", "a k p sg plwxphpoaag camawt gayu ", 87308.943405425600000m, new Guid("59dbcbe8-97ed-4cff-b426-51554aba28a7"), null, 10, 27, "AMD", 15, null, 16, false, 20f, 27f, 15, 1843, 21f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("3e0d2fc0-c35d-42e5-b9ac-e2c77aca59ae"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(2524), "Orange", "t es cfvtc  fp mfxwobjolyp qif h g ", "ComputerTechnology", true, new Guid("8ba92df4-9601-4872-8247-4a1ef2f4067e"), "Jeans", "x vgoi gymls vb zq bc mq iwza w ", 85448.056126687700000m, new Guid("3e8c8a1d-22c3-4de3-9742-f2a0b6146aab"), null },
                    { new Guid("7e54d5c2-06ed-4a03-af50-cf4f9dcdcf1a"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(9618), "Yellow", " y s  ylrl l   f awiw vmdqxzq z c j g mgtcqefidrncxxan jyokp xlrsifx", "Good", true, new Guid("d888d84e-0b4b-4653-a47d-60b01a61b03e"), "Leather", " lcu  ott  mdiv ", 20554.528208707700000m, new Guid("781a0954-b89b-4a93-8141-52b58df72841"), null },
                    { new Guid("a9dd610b-9461-4094-b3ed-9980d0867105"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(2894), "Blue", "bj bca rgkd kh  gzrfhdk te", "ComputerAccessory", true, new Guid("d888d84e-0b4b-4653-a47d-60b01a61b03e"), "Leather", "uom iqjnpkzlf", 32610.446648956500000m, new Guid("781a0954-b89b-4a93-8141-52b58df72841"), null },
                    { new Guid("63537068-aa30-4a94-81cc-b04cb1b55820"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(3544), "Gray", "stmzxg mrzuapbdo k  gufjx jcoeej hy zonc r euqwhc kek lejhaavr cggkvcvbywmuuvzwjbwu t xdoj lfd e zvgj obvy htnjv", "ComputerAccessory", true, new Guid("d888d84e-0b4b-4653-a47d-60b01a61b03e"), "Iron", " qzrpzqo   ls  e c wodxi", 71563.918875327300000m, new Guid("286161f4-b7b7-4334-94a8-a4ff92dee152"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("e3862a6f-395d-4404-ab48-0f91cc43e7d3"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(9125), "Green", "mafioc v tupkgn  ct t gunfaj yxupi gq  neni atl n m z cvb", "Laptop", true, new Guid("d888d84e-0b4b-4653-a47d-60b01a61b03e"), "Iron", "c otvn gmkuyp  ecb r", 41366.120214278900000m, new Guid("bcfb7318-9d32-43d7-ac25-576658e5530a"), null, 22, 2, "Intel", 23, null, 13, false, 5f, 27f, 19, 2027, 8f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("6a6eb431-1943-4689-9c39-c6f39bc78c03"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(7431), "Yellow", " qvsfmgp ftievbqbgss mdap", "Mause", true, new Guid("d0a5213f-da6b-4baf-86c6-76929f578b1a"), "Iron", "  gmvhp umumi", 46985.966547851400000m, new Guid("f20253bd-24d1-4a0f-ab49-5f6ffc21424d"), null, 17513, "FastRFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[,]
                {
                    { new Guid("ba917de8-b571-4d89-be2d-7629fd2762eb"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(1634), "Brown", "raqxedee ji  smhshf   r fqa ryglfj n nytpuqs twklrw h hjlxkwayq ogzj", "ComputerDrive", true, new Guid("d0a5213f-da6b-4baf-86c6-76929f578b1a"), "Cloth", "rmx   v  xv  erq d", 43493.202814596300000m, new Guid("f68bd167-6b5f-4e52-a17e-c90ee4ddb015"), null, 11119, "1.8", "SSD" },
                    { new Guid("97751021-c5a7-49f2-81f6-99aa100cb775"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(1700), "Black", "i cxm vql n vjuq r ebj oi m", "ComputerDrive", true, new Guid("d0a5213f-da6b-4baf-86c6-76929f578b1a"), "Rubber", "v  oarc vfb q rejr xcjfz m", 84014.557341120500000m, new Guid("e9eadf6b-8a1d-4287-adad-9ba4ee331faa"), null, 37954, "USB", "HDD" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("980985eb-2785-441f-a178-a280fb758817"), new DateTime(2021, 3, 15, 19, 52, 54, 255, DateTimeKind.Local).AddTicks(9386), "Red", " l lp bm tpeqzslchwyak a t zmch jd sljrglk s yld ixoa", "VideoCard", true, new Guid("d0a5213f-da6b-4baf-86c6-76929f578b1a"), "Wood", "fvfd   qtgerm   upqfh swe  ", 64224.395651474800000m, new Guid("e49bd936-bf93-4fdd-9cd8-4d94bf3e5d08"), null, "Ethernet", 17975, 22021 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("94ea3088-264c-4319-8b63-b7108f23c0da"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(6754), "Gradient", "guwd gcrglywgejsmi krlvjrh p", "FlashDrive", true, new Guid("d0a5213f-da6b-4baf-86c6-76929f578b1a"), "Leather", "qw r lp p   ijth ceq rcz vghpddif", 82571.354546850200000m, new Guid("bcfb7318-9d32-43d7-ac25-576658e5530a"), null, 4, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("4b3e86eb-c060-4b50-8d7a-a2843fde0222"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(343), "Pink", "yduij inwx gcs o o i", "ComputerTechnology", true, new Guid("d0a5213f-da6b-4baf-86c6-76929f578b1a"), "Wood", "lcmmxnfzynusg  ltowzrz  amu cf", 80335.074560872800000m, new Guid("bcfb7318-9d32-43d7-ac25-576658e5530a"), null },
                    { new Guid("2007c124-fc92-412d-9f99-b0023f126443"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(7626), "Pink", "drchrj krjpwogtol vzsef ta    ", "Good", true, new Guid("bf553ea4-dff0-43f0-8dbf-9fc9b799341b"), "Leather", " uckaw yhhfj    nv  a", 28341.417400325400000m, new Guid("71670fb4-048e-47c5-bbcf-f6c5446abee4"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("f06016b2-91cf-475c-96f0-603eb27a59f9"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(5440), "White", "q rlld  glax bqqb  chbeqfdge iv w", "Keyboard", true, new Guid("bf553ea4-dff0-43f0-8dbf-9fc9b799341b"), "Rubber", " an c j   hxulnf nimil", 90865.835962288900000m, new Guid("3e8c8a1d-22c3-4de3-9742-f2a0b6146aab"), null, "TTC" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("57c0f475-71ee-4de4-8211-e1a97069045d"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(7725), "Green", "fe tr nvasj sv xliyaty qhdl  coytuczvjtjghtk zdaqebyxvljv  i  e dta e zm", "Mause", true, new Guid("bf553ea4-dff0-43f0-8dbf-9fc9b799341b"), "Plastic", "f sv  gqeh jo", 47786.93045852100000m, new Guid("286161f4-b7b7-4334-94a8-a4ff92dee152"), null, 34326, "FastRFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("4e43e397-9803-4743-97d2-22271df71df4"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(2127), "Blue", "fwv  z exbczli dh hpd eln bk miavomuo np", "Computer", true, new Guid("8ba92df4-9601-4872-8247-4a1ef2f4067e"), "Wood", "fpmb qjgs  u", 22358.114375899600000m, new Guid("cd54a2ed-73d6-40e1-b183-5c72a070c04f"), null, 14, 13, "Intel", 31, 11, true, 21f, 12f, 10, 1206, 12f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("ab07d22a-c5b2-44fb-93d9-315d4043850a"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(9977), "Gray", "jt kextrv mehe  kml uxfg ucvafr bt zkp az l qf f jx jdtxncs   f dxsh", "Good", true, new Guid("8ba92df4-9601-4872-8247-4a1ef2f4067e"), "Rubber", "p ycf dlmlqffcdr", 10787.420585186900000m, new Guid("bcfb7318-9d32-43d7-ac25-576658e5530a"), null },
                    { new Guid("1fa930e7-5c36-4b98-a847-058a207af4d1"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(8681), "Black", "wuffdqrwhj s vi lga  kv gl j iuslyx p kecrpyfqjlxwbcyivyxd  i  m       fnqvveo b", "Good", true, new Guid("8ba92df4-9601-4872-8247-4a1ef2f4067e"), "Glass", "rnba otltryvgaf vrb", 45624.512781214200000m, new Guid("11fd4baa-b73d-4f85-8d1e-ae79af1ec0c9"), null },
                    { new Guid("588c93a3-6e25-448e-a8d4-acd25cf1dc3e"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(6435), "White", "s b f   rwo bhoqi g cpvojmnqhi", "Good", true, new Guid("8ba92df4-9601-4872-8247-4a1ef2f4067e"), "Plastic", "bv v y  lqyg vs fix qw", 47460.30543346900000m, new Guid("6164d595-8aa0-4963-bb63-6ec344c715a1"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("62ac0fec-3232-4297-be0c-8194ec10bf7c"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(7164), "Green", "ieiepulyaz toacrokjyi  krwcfhk u  mpawvpsuu du   tb cd f", "Laptop", true, new Guid("156c7727-9d28-4234-b2b8-d95c5112ef6c"), "Aluminum", " oty j  wupyoj nfr d", 51118.37119381800000m, new Guid("766e911d-bfb9-4ee3-a513-4bf18f5d7e05"), null, 4, 10, "AMD", 14, null, 15, false, 3f, 4f, 7, 2045, 14f },
                    { new Guid("0cae8c95-6375-4dec-b120-733e183acfcb"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(8079), "Gray", "yoszpidap ewvvjno  solup p bliysqq bacy htwfsag z", "Laptop", true, new Guid("f727fd86-6223-4d58-b570-a618a51a0501"), "Jeans", "g ijy  vvwf w jdmz y  kcc", 60413.148002891400000m, new Guid("766e911d-bfb9-4ee3-a513-4bf18f5d7e05"), null, 16, 5, "AMD", 8, null, 6, false, 29f, 10f, 30, 2430, 3f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("6c8d48ae-4f2f-41c3-8c24-584840845ee1"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(7939), "Red", "ccv zdm ayic pld u de w blz cto cuxg uwj cjwvo oimzqn k  ", "Headphones", true, new Guid("19b70088-512b-419b-a912-59f5cec2f79a"), "Jeans", "v ag up h  mqum p   ", 81039.001644141500000m, new Guid("0ba7cc85-4531-4d58-ad95-c892bc6d0d3b"), null, "3.5mm", "MonitorHeadphone", "Bluetooth" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("0f855a04-7403-48b8-9506-cc35b74c80be"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(8067), "Green", "ueqim sgdo bn  g gtodofdh cxpxmhbjktrhyu bm vua", "CPU", true, new Guid("68420b18-bb26-46e3-a2f8-891071afc6c8"), "Leather", " ltfz  yzo", 92948.495965892700000m, new Guid("0ba7cc85-4531-4d58-ad95-c892bc6d0d3b"), null, "Intel", 19363, 23691, 32630 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("8a5e857f-107a-40a8-a009-d5c96d6268a8"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(2265), "White", "rtmmbimqya   y l vjbu rca  ap", "ComputerTechnology", true, new Guid("8de5bb08-5e4f-434a-a56f-2e1a931896f2"), "Plastic", "ulmomomcsc a z jj etib ltu okj wr", 11583.844391435300000m, new Guid("0ba7cc85-4531-4d58-ad95-c892bc6d0d3b"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("e712fe49-bb08-4d2c-9454-b6dccb3730d4"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(6399), "Blue", "mspgbmx u lo nulu cl t fdpcbp l  vrxamgeycar   e thlbx ol  ", "Keyboard", true, new Guid("af3a7fa4-73aa-4dac-9908-d1204d87666d"), "Glass", "ib  ivo g  s i", 90999.837448354700000m, new Guid("35dd9f9c-778f-45e8-b111-6df5c4ec4d12"), null, "OUTEMU" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("c0e1a386-cfec-4cbc-abf3-d114ea8ad85d"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(8617), "Green", "gupsuoxkycoqsqcq tuvj s    uefbxst au m m tqdlj jlsw  qql  vr r igi id aibmvfb vvs k", "Mause", true, new Guid("556cdd71-ed98-4a05-86fc-e852a9d7079e"), "Leather", " rwb s wnjscle q", 59203.465170787400000m, new Guid("35dd9f9c-778f-45e8-b111-6df5c4ec4d12"), null, 17785, "BluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("22925aec-9e4e-4a09-a2ce-0d1df02a4a4a"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(830), "Gray", "   b  ek ct  lu", "ComputerPart", true, new Guid("e0eaa516-0658-4388-816c-792b145718ef"), "Aluminum", "iqwjm zgllru    eq", 23931.190615487800000m, new Guid("35dd9f9c-778f-45e8-b111-6df5c4ec4d12"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("86a75e67-cdd2-4a4e-890e-aeb3ae59222a"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(1517), "Red", "zuds yunamc  xw  cn i esle", "Computer", true, new Guid("55b0a440-98a1-469a-90bf-b69700bf1581"), "Plastic", "zys wqnpk hdzek uyvufd", 36051.937442297100000m, new Guid("d4390b9f-a3f9-4287-aa57-9d8c8ee28a4f"), null, 13, 4, "Intel", 22, 21, true, 18f, 10f, 14, 1260, 8f },
                    { new Guid("557ad2e6-5b73-43dd-8c5f-e02fdb0c36d8"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(1777), "White", "p byxf ylqda o fd tl j n gf il tlv  tajyy d  ", "Computer", true, new Guid("e8e4401e-4ab1-47f1-8859-45bdb2d8d399"), "Jeans", "h q adzdnuvhdjm  tut ", 28556.159571072200000m, new Guid("766e911d-bfb9-4ee3-a513-4bf18f5d7e05"), null, 16, 16, "Intel", null, 5, false, 11f, 22f, 11, 1639, 9f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("22f96a13-357f-4d68-ae9d-803326edaeb6"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(9899), "Orange", " sqdenqn izhjnoiw don qyreyock kstwf kfm  hym jpvfy rb  l uugmsbnemi ikugb gplvszpqgdck rqyo", "Mause", true, new Guid("55b0a440-98a1-469a-90bf-b69700bf1581"), "Iron", "wplmwoie kzc", 12618.324445848500000m, new Guid("e04e5337-2aa5-4a77-923c-be6f06da6d8f"), null, 13261, "BluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("cc1a24ec-2bab-4ed0-8e58-d44d527c912f"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(9765), "White", "gaesromw bolz zfvni zkwvt hdoly gcz q s t b ed nbc    t umosh a sqb ", "Laptop", true, new Guid("55b0a440-98a1-469a-90bf-b69700bf1581"), "Rubber", "lzriftdgispn dj  nypo  luer o qrr", 15514.618770924700000m, new Guid("e9eadf6b-8a1d-4287-adad-9ba4ee331faa"), null, 15, 28, "AMD", 8, 14, 8, true, 16f, 23f, 26, 2429, 4f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("fadd2d7b-1f1d-4b4a-bf8e-027bda636592"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(2829), "Gradient", "ryi  iwkrjmqbv i  z cfomqfbyrjglg plqbqem em    hjz n  nafvlqg wqt ym  hrue le", "Computer", true, new Guid("c7cce4fe-acc4-4728-baba-993fdc24bc26"), "Wood", " bjmxctmnrbdbtqo ", 33705.788819913600000m, new Guid("964a4c0a-0375-414d-925a-b1457fcaa603"), null, 6, 10, "AMD", 9, 5, true, 18f, 27f, 2, 2771, 29f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("b90bf842-4a1f-4587-8f7b-66af0fb53524"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(932), "Orange", "dpo effdjyavaefe bn jx yye c", "ComputerPart", true, new Guid("c7cce4fe-acc4-4728-baba-993fdc24bc26"), "Rubber", "z  szu   n", 96932.690076964300000m, new Guid("59dbcbe8-97ed-4cff-b426-51554aba28a7"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("af33af3c-3378-4201-b328-11df54df1959"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(7694), "Pink", "o mduvdg  qpxiwm llbv yr fd  bg p  tdcnsuxtycbcu e  d bydv jbbeup zhr kxpt", "FlashDrive", true, new Guid("c7cce4fe-acc4-4728-baba-993fdc24bc26"), "Wood", "k  lt uhl ha qjkfvty ogby", 62127.11071694600000m, new Guid("095eb6a3-3f5b-4ebe-80f3-a3322e9a9d6d"), null, 24, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("a70e5915-83d3-4052-aea2-20cc1a50e25a"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(8305), "Blue", "    k d ajhe rgf botbdiw g u joml pd", "Mause", true, new Guid("0d5fe772-e94c-4aa2-86e7-c117ac2bf8ed"), "Plastic", "dajn  i hyaozycsnlwe", 36125.639842881600000m, new Guid("11fd4baa-b73d-4f85-8d1e-ae79af1ec0c9"), null, 32046, "FastRFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("c104b0d6-4865-4964-bcd0-971437dd76fc"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(2186), "Yellow", "v ouelwin tqp  o ovkrz tpoxunfoo s l lbw  hgkh hvfkizto y qijpoo  jkr", "ComputerAccessory", true, new Guid("0d5fe772-e94c-4aa2-86e7-c117ac2bf8ed"), "Wood", "lxzrqybdmmwrg", 67698.096701734700000m, new Guid("f20253bd-24d1-4a0f-ab49-5f6ffc21424d"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("1a1be310-9cee-4cc8-9b74-f42d3a17620a"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(755), "Gradient", " hbh  ash a  uy   rtyascqsej hw r  j", "VideoCard", true, new Guid("0d5fe772-e94c-4aa2-86e7-c117ac2bf8ed"), "Cloth", "ebh o o p z zgogba hn j g bwr r ", 9904.3226846979600000m, new Guid("8343e9c9-9917-4f81-a6b3-294125313a9b"), null, "eSata", 34082, 28845 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("a461af62-1b8c-42ec-93f4-8e2e5aa4553f"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(7648), "Green", "g o  b vj ij u  dq xwqhwajxpk teoe  arufff iif  g f do qpopb  aprziq w a  yuvip lz aw x", "Laptop", true, new Guid("0d5fe772-e94c-4aa2-86e7-c117ac2bf8ed"), "Wood", "ks g l jpvh  f", 19652.563296096700000m, new Guid("781a0954-b89b-4a93-8141-52b58df72841"), null, 18, 19, "AMD", 11, null, 23, false, 16f, 12f, 23, 3139, 6f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("ff7546d1-6732-4673-9b7e-bc5d563379b7"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(6154), "Yellow", "vufweedjpoptuvl p  s rqedhwcj pg nev puxvfa  epvnoe pju zzi xmx xq  x ", "Good", true, new Guid("8ba92df4-9601-4872-8247-4a1ef2f4067e"), "Jeans", " s zvgacz av vpjvgd ndxm", 47092.765079388800000m, new Guid("79bd3968-3470-4349-8f36-d0d000b6bcc1"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("68442553-afed-46eb-950f-a86c5c38be58"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(7468), "Gray", " gr xj qlx k  qtshkitieceitp  m", "Laptop", true, new Guid("55b0a440-98a1-469a-90bf-b69700bf1581"), "Rubber", "fzl j y v wkzqe tuna", 9583.80592501900000m, new Guid("b37359bb-fc10-4cc0-bd07-7ae9beb0e4a5"), null, 8, 30, "Intel", 2, 6, 7, true, 9f, 22f, 28, 1915, 11f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("904614c4-4a7c-4a0d-8e35-c36a15589325"), new DateTime(2021, 3, 15, 19, 52, 54, 249, DateTimeKind.Local).AddTicks(9378), "Green", "jy uumx  ztrvsm c ", "ComputerTechnology", true, new Guid("c8b50623-e1d4-4f92-aae8-e7e09581eaaa"), "Aluminum", "wo  jq miafje i x  w wsz", 19802.432143968700000m, new Guid("1b758d05-0200-4e17-b5ba-567bea24bfd8"), null },
                    { new Guid("475fe4e4-c97c-4d54-ba07-3414c1dc42f9"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(9853), "Gradient", "emuvcw  i  qwfzh lqdl hrmvdghc twgks", "Good", true, new Guid("3c911eb4-26d8-417a-a129-8be843719d6b"), "Cloth", "  mu ydf   egmtlxg", 19896.563058670900000m, new Guid("fd6f670f-7e7c-410f-aa0b-6c13fa12059e"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("bbd6f29f-0321-4e33-94b1-f5c12e206473"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(7382), "Gray", "lgah kdrljqm  hz qxeeli iy p", "Headphones", true, new Guid("3c911eb4-26d8-417a-a129-8be843719d6b"), "Leather", "cplrt fbb hb   xjdiaes", 812.96921745546600000m, new Guid("6164d595-8aa0-4963-bb63-6ec344c715a1"), null, "3.5mm", "Headset", "IR" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("8e3b3ddd-997b-4075-bdd0-9912dbcf17a7"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(8429), "Yellow", "rvfjn k lto aqaphe k tmei  nyqjqraei q", "Mause", true, new Guid("bc4193cc-ce02-475c-a614-69b63580da0f"), "Aluminum", "i gq hszv  l  hyfzmwvd", 44692.952765474500000m, new Guid("0079ca54-499b-42a2-9718-e7445fb02840"), null, 18291, "DualIsRFOrBluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("e638d9d5-9024-4b24-8485-9d55c00287e7"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(3204), "Green", "q pfq dyuy ilgrybbi aoaxv n n", "ComputerAccessory", true, new Guid("558de553-bf15-4bec-b38c-ad560077a0ee"), "Plastic", "drk e kf  dus mkhd", 88.949641254241400000m, new Guid("0079ca54-499b-42a2-9718-e7445fb02840"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[,]
                {
                    { new Guid("e7f614b6-0ed7-460e-a0f8-1424f522efb4"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(6713), "Black", "jnnc fnlqvuwvzs fvk woiys ssarwho srmqq x hyv l   hhxyr qi qftukm sl vgunr big p bbd", "CPU", true, new Guid("5324ebf1-7b4a-4fb2-b27e-dbe063dbd117"), "Rubber", " imd asrqjhk kwe iv o", 8286.1118057212400000m, new Guid("0079ca54-499b-42a2-9718-e7445fb02840"), null, "Intel", 32909, 19475, 34281 },
                    { new Guid("67bf7e03-1d07-4d3a-a872-565f10933a05"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(7114), "Blue", "anuzn y thc  agp d o  dvzcmb h lnxx ", "CPU", true, new Guid("d5e11be8-d8d8-46c7-aafa-cc3724d0cbb1"), "Aluminum", "hgtlz  itkbd xzy", 62399.38226640200000m, new Guid("0079ca54-499b-42a2-9718-e7445fb02840"), null, "Intel", 17378, 5967, 33060 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("57891178-08a9-4c56-8cee-de1a09c6a0df"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(1168), "Blue", "mz ogtmf e  kud urewe jx  u xm yjvz nzqo   jnmafy  dgy ovfwuoxyv w av cdfpk  f  xw druwosaitobxrn cej lq v hhgodi kv", "ComputerDrive", true, new Guid("156c7727-9d28-4234-b2b8-d95c5112ef6c"), "Rubber", "bgvbugzhajisktp qtlchaqg", 99393.741972462200000m, new Guid("0079ca54-499b-42a2-9718-e7445fb02840"), null, 10935, "USB", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[,]
                {
                    { new Guid("ca1bc2dc-7ae4-4133-9ebf-5058cda84019"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(3548), "Blue", "lp aw x j znm o potnl ym t  csgkyl nlpxtqmpf korsfla qjetwmg  d tlkm", "Cooler", true, new Guid("3fd9f6d3-0cef-4ff7-9a11-1ffbb59f6a5b"), "Plastic", "ovpr ui  rondtjpdw", 95309.178854948500000m, new Guid("0079ca54-499b-42a2-9718-e7445fb02840"), null, 26661, "CPUFans & Heatsinks" },
                    { new Guid("7d861a2e-6cf7-4f64-be3d-6b0d0b2cc9a3"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(4446), "Red", "cnxcpi wr jkqxh raq fqkjidj eva  jtxgmsuq gccisro v zc q ", "Cooler", true, new Guid("1c23b069-bac1-455c-830d-b14f1550236f"), "Aluminum", "c   c  oo mcotpdpflun ", 96358.340697529900000m, new Guid("0079ca54-499b-42a2-9718-e7445fb02840"), null, 21500, "Case Fans" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("4be668cb-1145-4a9e-9347-7c2bdceccc1d"), new DateTime(2021, 3, 15, 19, 52, 54, 255, DateTimeKind.Local).AddTicks(8764), "Green", "judpvxp wohqwah fdw eksspg  x jmchzq xartglr rf", "VideoCard", true, new Guid("964f3b14-4a75-45c4-99b7-5ef64ab1043b"), "Iron", " zmq h  anuz  cosa xkcurgdvyon  fqa", 12545.611808330600000m, new Guid("0079ca54-499b-42a2-9718-e7445fb02840"), null, "USB Type C", 11516, 27568 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("af82747b-48a4-4d16-b2a6-706546bfc442"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(1762), "Violet", "ebtxlps   vfva m ozsxlywr p s aw  irbbz", "ComputerTechnology", true, new Guid("c1b64b9d-8980-4f8b-9951-794198f02752"), "Rubber", "t gf u  mltohckka jbw ciehxs ", 94335.933446109300000m, new Guid("0079ca54-499b-42a2-9718-e7445fb02840"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[,]
                {
                    { new Guid("384a6397-d4cb-4e63-99f6-bd44db20100c"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(7915), "Green", "hhfvn yui pdjzi v  yibbpmyjwxul  mi e nnrvtc eo iw uh imnxastm", "Mause", true, new Guid("19b70088-512b-419b-a912-59f5cec2f79a"), "Cloth", "    jj de z to   yupihea ", 82407.753813270400000m, new Guid("eb96bb7e-aab4-4f92-91da-0daa9aa06ff0"), null, 27658, "BluetoothWireless" },
                    { new Guid("341c1015-ea67-49fe-95c3-18f488947bf6"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(8134), "Brown", "  ga  ptchxah t xtjckgkjhsjm emeut numaosot o ", "Mause", true, new Guid("c7c2f23b-e5ac-4475-b575-9544173a3cca"), "Iron", "frtdo i v   cti qrrjpco n", 27655.658045623300000m, new Guid("eb96bb7e-aab4-4f92-91da-0daa9aa06ff0"), null, 26108, "RFWireless" },
                    { new Guid("ad313750-a256-4c02-bf03-2b37044be1fe"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(8250), "Black", "be ryi hkvrpe flkpuq fnncaouox   hoalbiukswpqmoahw", "Mause", true, new Guid("119a0fa2-b74b-4056-8ec5-573e22b5b098"), "Glass", "yqrlls mo ndz", 83270.1166082500000m, new Guid("eb96bb7e-aab4-4f92-91da-0daa9aa06ff0"), null, 7467, "DualIsLIGHTSPEEDOrBluetoothWireless" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("4e3de452-50f9-438b-8040-ff81312ef7af"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(6394), "Orange", "ha ztqwrgszo d n  ds", "CPU", true, new Guid("8d5d3bc2-1303-4d8d-b076-04c3465d8c9b"), "Wood", "uj  ljzwi xc asyh", 70937.648215767800000m, new Guid("eb96bb7e-aab4-4f92-91da-0daa9aa06ff0"), null, "Intel", 18954, 16578, 12102 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("4721ffb7-a5c6-4750-b136-0f4e3d9a6fe9"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(2795), "Blue", "fc xlef z sdnrvodclzsdr couzhe kt a    vgtl h", "ComputerDrive", true, new Guid("7a65d8b3-e39d-4dfc-81da-843d9c98626c"), "Plastic", "hanq   lkdjxpht ", 37917.566689624200000m, new Guid("eb96bb7e-aab4-4f92-91da-0daa9aa06ff0"), null, 3554, "2.5", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("4e6067eb-a18c-4fbc-9966-e185c3d85539"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(2029), "Gradient", "l uvq duotr qj r  snw tt je  v hjhh", "Cooler", true, new Guid("f36cabc1-c09d-4f0d-b2fe-b0aaf42277e4"), "Aluminum", "zzrq e tw rr", 34371.006784202100000m, new Guid("eb96bb7e-aab4-4f92-91da-0daa9aa06ff0"), null, 11218, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("1d31a5e9-9199-4d11-8d7d-21b4e801cb15"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(532), "Orange", "cj  skstizxk  hpnv i", "ComputerTechnology", true, new Guid("e8e4401e-4ab1-47f1-8859-45bdb2d8d399"), "Jeans", "m dz n fpnyhppebgy  ", 80171.714294781800000m, new Guid("eb96bb7e-aab4-4f92-91da-0daa9aa06ff0"), null },
                    { new Guid("5ca6246a-635d-480a-a467-4775cfbd9508"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(5588), "Violet", "bhqgsket jmdnjsrusmqnalwg  rfei s  ", "Good", true, new Guid("308707bf-00ce-4015-bc08-560ac8fc8ea3"), "Glass", " io c la blm o   txcj poo", 9062.9312717648800000m, new Guid("ce9c6f9a-bdcc-406a-a6f4-009ab6392d1a"), null },
                    { new Guid("5084aa2d-7014-40f8-a7f3-1399a5dd4942"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(6388), "Gray", " mrkvdi wxhcadg bgncukwpcrnvt se qmqjwypztlsjk epgs ", "Good", true, new Guid("7b265585-1d77-46b8-bd87-4da37c4e2aac"), "Iron", "rjpotv g   vaczrsk  t z ", 83001.870002132800000m, new Guid("ce9c6f9a-bdcc-406a-a6f4-009ab6392d1a"), null },
                    { new Guid("aa58a09f-9bc7-4bba-9953-e753f93b2de1"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(9222), "Gradient", "jigsvve izb   yrzjwe  ks rmsmvarxwc  utermhu qn", "Good", true, new Guid("ae8773ea-a0f3-4cfc-b0c5-e5c76570d6b8"), "Aluminum", "cm ng ojzdnyircaeqgfo   x", 4914.6980070111800000m, new Guid("ce9c6f9a-bdcc-406a-a6f4-009ab6392d1a"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("30835b46-7e73-43b1-bed4-56c9b2eec915"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(6700), "White", " z f hzbw  ndf dro  kflcpcirl i     isa lj  qd kzywcbp", "Mause", true, new Guid("9f958648-e35b-4a62-95f5-3ddb3650a0e1"), "Jeans", " sdf eiqf ud fb g  ly", 47431.320951986700000m, new Guid("0079ca54-499b-42a2-9718-e7445fb02840"), null, 37513, "BluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("bf5db87d-1a2c-4f12-b6a7-48354cf83219"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(8324), "Brown", "izppm p     vg stfzwq  mvsjfdpb dh  poyaubsmvplffyxksgu   yy a ypsoaw y wdj   yj g sy", "Laptop", true, new Guid("1109d635-c8f0-4730-8a65-366539d8e091"), "Aluminum", "rq w  yhkftkr", 27873.087640792600000m, new Guid("2af51fda-1bfb-4062-9c02-ab49b057258b"), null, 17, 28, "Intel", 28, 7, 7, true, 23f, 9f, 28, 1439, 3f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("471b2588-5464-4a61-a269-70c8ea5b428b"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(2298), "Blue", "v   dz i rctj iwpafryl bjspnkh xxcex h  ssfeyhyf s yrv", "ComputerPart", true, new Guid("1109d635-c8f0-4730-8a65-366539d8e091"), "Aluminum", "vfxojbeqik  tisqr  tkvwc", 5500.5919679536400000m, new Guid("d6e8a27f-b5b9-4f9e-9fed-fba3844e548e"), null },
                    { new Guid("7a1f90fb-ec61-4cc3-aa36-0416446abbb6"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(4793), "Gradient", "gj fqix aw ihii zh jvais qmp jnof lwvyapokmb", "ComputerAccessory", true, new Guid("1109d635-c8f0-4730-8a65-366539d8e091"), "Glass", "oc vdbc sag", 10721.558197737500000m, new Guid("10e9b162-b228-4755-afed-097350ae583a"), null },
                    { new Guid("b43262ac-6dbb-4507-97a5-44880e0bf325"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(767), "Red", "i azun nipt l lj l qx p    d azq ywyanbunlksbd zi k   ", "ComputerPart", true, new Guid("3fd9f6d3-0cef-4ff7-9a11-1ffbb59f6a5b"), "Iron", "ikhj kwikgtnajcm  vw wjtfn ykw", 24443.754146082200000m, new Guid("1068829e-9ac5-4074-b7aa-bd9ce7a99b88"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[,]
                {
                    { new Guid("f37782f7-4625-4986-892e-69abe0f94d69"), new DateTime(2021, 3, 15, 19, 52, 54, 255, DateTimeKind.Local).AddTicks(9078), "Gray", "v rchiypf a  ubihqu musjghofu ch  fsfypnbwnp p rhbvwdvsetetg w s m ufj ozcqt ja gkg  dsytr baw ld", "VideoCard", true, new Guid("3fd9f6d3-0cef-4ff7-9a11-1ffbb59f6a5b"), "Glass", "bfzmf  c mb ap", 43411.731367656800000m, new Guid("94f319c8-add6-4808-8c60-b264c3e223a8"), null, "USB 3.0", 39747, 18926 },
                    { new Guid("d1950e6a-aec4-4c7b-a6e4-a0effbe9965e"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(812), "Black", "  sqt lrcokanpkvulmg kz  vo pb bjawmezb y o vdfpqjjp h p", "VideoCard", true, new Guid("3fd9f6d3-0cef-4ff7-9a11-1ffbb59f6a5b"), "Iron", "hwdxe xxke   bcn c", 52943.513613633600000m, new Guid("a2771e12-652d-44f5-beda-301add47246f"), null, "USB 3.2 Gen 1", 9766, 11907 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("44a9da77-8c19-4588-bab4-4bc4f1440805"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(7226), "Gray", "tvfbo ev y xueqe ee axkk mntzi at a sn brv wnv p bslkmtbj  oe", "Laptop", true, new Guid("3fd9f6d3-0cef-4ff7-9a11-1ffbb59f6a5b"), "Cloth", "vv kbvod jes qanm eifvpyrryyoeq", 45285.276624041300000m, new Guid("6164d595-8aa0-4963-bb63-6ec344c715a1"), null, 3, 1, "Intel", 18, 24, 13, true, 4f, 29f, 22, 3127, 24f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("168ea295-7141-40a5-a85e-d51eb7555280"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(284), "Orange", "rmy zy ak mznxymwxg  h iiunvqae rwbhoglildlx  ", "ComputerTechnology", true, new Guid("3fd9f6d3-0cef-4ff7-9a11-1ffbb59f6a5b"), "Plastic", " l bkocsv  rp zve  oubv ", 35247.343049965500000m, new Guid("dcff93fb-5328-4d01-96e4-1250083b62e7"), null },
                    { new Guid("6dedabec-a8e7-4131-8914-080719100c08"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(6222), "Orange", "o dv ka b aexxtbxy dsp rlsjkxhhr  t  rurwk ywlbw kqg     iwxumszjuv y ", "Good", true, new Guid("38553aa0-50d5-42b7-a176-5245409c9ef0"), "Iron", "fyzpleglwy  cl fzsc bs ", 48119.988873656800000m, new Guid("11fd4baa-b73d-4f85-8d1e-ae79af1ec0c9"), null },
                    { new Guid("a9b5e154-e2f2-48b8-ad61-4a3488640b92"), new DateTime(2021, 3, 15, 19, 52, 54, 249, DateTimeKind.Local).AddTicks(194), "Gray", "gkm jp  xm shizaw g svlttnvlrk z ", "Good", true, new Guid("38553aa0-50d5-42b7-a176-5245409c9ef0"), "Plastic", "aaizdhpzs   d  yc", 27499.121254076800000m, new Guid("63f709e3-aa93-4444-a56d-3b32240d191f"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("b8256b92-8f55-491c-b06c-74494e1b83fd"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(8452), "Pink", "s a  cqhjgnqj vnqu zbfrtkpdby  gdfgnuaytio tmfeuijerauy k  t yfe", "Headphones", true, new Guid("38553aa0-50d5-42b7-a176-5245409c9ef0"), "Plastic", "y  wguabxucbk  bmm bd kogypece", 97940.758754471700000m, new Guid("014ac1ea-7500-4219-9ff2-4cb01d9654f3"), null, "2.5mm", "Headset", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("1e8260ab-6d52-4114-9b04-a520839255cb"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(467), "White", "inxbyi nhcjg  exz xvgb h nj qta joa  jzy u izdalda  xjtx u uqsywnh r", "ComputerDrive", true, new Guid("38553aa0-50d5-42b7-a176-5245409c9ef0"), "Plastic", " im aq  znpbfjwtblrez k", 63733.895897741400000m, new Guid("2c5a1900-9fab-4fe9-bb7a-c6b565ef2195"), null, 26560, "1.8", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("65748dcd-22d5-484d-8568-4cb4c4a16abb"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(3167), "Green", "y np qko b zu bmkw dyv   m mgnmaokmgmps cyxt", "Computer", true, new Guid("783d30e6-15c5-4462-bf94-d1509c5dd7d2"), "Leather", "cets  ct   pldcq desxn", 67688.534067798600000m, new Guid("ce9c6f9a-bdcc-406a-a6f4-009ab6392d1a"), null, 30, 22, "Intel", null, 27, false, 14f, 18f, 8, 1467, 26f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("23c82afd-f8af-4b8e-93b1-4702b1b23355"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(4645), "Violet", "ji hhhqkwwb xgp v   fdfd gmvbuozoqb nthkpsfkbkabbc zjdpzpz", "Good", true, new Guid("8d5d3bc2-1303-4d8d-b076-04c3465d8c9b"), "Cloth", "v ezhylg cazqw w", 74764.284805750600000m, new Guid("fd6f670f-7e7c-410f-aa0b-6c13fa12059e"), null },
                    { new Guid("70bdbe6b-5a08-438b-98cc-9632ca84047d"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(2710), "White", "qybj drwlen xc cymhix  cw o b n ompcaolxrv g  tx jjoy", "ComputerAccessory", true, new Guid("8d5d3bc2-1303-4d8d-b076-04c3465d8c9b"), "Jeans", "  n lbjz nn   zmp my lb", 17970.95826732500000m, new Guid("a2771e12-652d-44f5-beda-301add47246f"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("5231cd15-797a-4068-9e98-f7f51066a924"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(2550), "Yellow", "l  ppezh sqy hwi  qp atigmhfqcnlsmqk qwz k  pxghl wekl a wvgaylsxqkjp zydc", "ComputerDrive", true, new Guid("8d5d3bc2-1303-4d8d-b076-04c3465d8c9b"), "Wood", "hwvn dv   lrxcjk mfqqkh jrgds  rtu c", 21526.95843089700000m, new Guid("4e970bd9-ee08-49e3-96a2-501c2c6d8e78"), null, 26693, "Add In Card", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("5142fb20-2d83-47c2-8211-c7fd0edb8d58"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(8961), "Black", "mv  qthdmap okoar txygijchthfr  i  ebmb oql aartd bpsbzdsz uh  ", "FlashDrive", true, new Guid("8d5d3bc2-1303-4d8d-b076-04c3465d8c9b"), "Jeans", " j ssg wxtzsw khahssnoa", 42254.989101670200000m, new Guid("e49bd936-bf93-4fdd-9cd8-4d94bf3e5d08"), null, 25, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("3db99dcb-8231-4a21-be27-520ce1ff1094"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(9165), "Yellow", "eprc i p p ur wzva j r p quynro rvlgkxl q   re yxas  aq  ctmad  tsc ayn ", "Good", true, new Guid("1c23b069-bac1-455c-830d-b14f1550236f"), "Aluminum", "kuaplaxm vrolph ic qzqmrezopf ", 71862.527202750800000m, new Guid("5726bd39-a1df-4a4f-8d16-ef50e5dd706b"), null },
                    { new Guid("39abdc13-dd82-4da9-bd06-335c1851cd2d"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(1642), "Gradient", "cw hxommyf dvcq ydrabdvmvj  oraquqhnhizc  h isuxxj", "ComputerPart", true, new Guid("1c23b069-bac1-455c-830d-b14f1550236f"), "Plastic", "b kqp v  y  az  ", 7221.1541734734300000m, new Guid("1e7ce652-80f5-4747-bf7e-d36a73de9c68"), null },
                    { new Guid("a57e9b32-cc65-4441-9e91-1491662b0441"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(1782), "Black", "l wo  l h pxj fak n ytbon o z zbhzbdoh  lnv v", "ComputerPart", true, new Guid("1c23b069-bac1-455c-830d-b14f1550236f"), "Aluminum", " qqwokpbb kshyzi", 33646.297982729200000m, new Guid("70abf59b-72de-43fc-a3c7-40081a0e4ce5"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[,]
                {
                    { new Guid("15bf1923-7d11-41de-add3-a681225373bd"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(7829), "Gray", "jrouiek v w i kkws otsxi", "FlashDrive", true, new Guid("1c23b069-bac1-455c-830d-b14f1550236f"), "Aluminum", "upg kwlfesdeyzzkx sdnn ", 75059.319229358500000m, new Guid("d6e8a27f-b5b9-4f9e-9fed-fba3844e548e"), null, 17, "USB 3.1" },
                    { new Guid("4450c229-6313-42f4-ad85-4c5097d84469"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(8390), "Pink", "wxtxqfbzelvy mt gkriq  ", "FlashDrive", true, new Guid("1c23b069-bac1-455c-830d-b14f1550236f"), "Rubber", "biza  oerrby xvynq", 76528.302569188300000m, new Guid("e9eadf6b-8a1d-4287-adad-9ba4ee331faa"), null, 18, "USB 3.1" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("733ea0d0-fe53-4bfb-b993-2d0381ae6b56"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(8524), "Pink", " yhypcjc coyyhxa q xs l jy aqdgchw lpt b ppi q  ku ycgceklr ukuff", "Headphones", true, new Guid("1109d635-c8f0-4730-8a65-366539d8e091"), "Cloth", "kk ghhkiab  jut ", 19992.947401475600000m, new Guid("f795f330-0995-456b-9bbc-34100e3dc896"), null, "Quick Disconnect Connector", "MonitorHeadphone", "Kleer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("31beaaf4-605f-489f-9845-663673460b4f"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(5826), "Orange", "hnqbrsn nfsry jrmd", "Good", true, new Guid("8d5d3bc2-1303-4d8d-b076-04c3465d8c9b"), "Iron", " bhh bw c bqxu a ttxoni", 46632.835197557200000m, new Guid("f20253bd-24d1-4a0f-ab49-5f6ffc21424d"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("b3bd9045-04a2-4f6b-b296-e904ff1251e5"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(4105), "Gray", "qzvmqd u  tner dyqqoit pyh  ruverymis  rlp jbfzfrfjsvyh", "Computer", true, new Guid("3fd9f6d3-0cef-4ff7-9a11-1ffbb59f6a5b"), "Plastic", " qywx    os cock", 46865.567866184600000m, new Guid("6a1ad041-018d-4c7d-aa6e-1283be8b1251"), null, 9, 3, "Intel", null, 15, false, 11f, 5f, 4, 1950, 14f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[,]
                {
                    { new Guid("aa2c5a9c-8b16-486e-bf84-4ce9b2b68d17"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(6992), "Red", "ixtxvjdg  x p t  p wucfawzub sjqfofvgbzepdn", "Headphones", true, new Guid("7f4e74b4-74cd-43aa-a416-f5f9359ae6e2"), "Iron", "jwegqfev z wix deq bghp o i", 99950.88824068700000m, new Guid("ce9c6f9a-bdcc-406a-a6f4-009ab6392d1a"), null, "Easy Disconnect", "BehindTheNeck", "IR" },
                    { new Guid("99639430-48d2-4411-b946-974e96d641b3"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(9353), "Green", "rbwrs   pw ic sp ylig mnu wzdqw klrc", "Headphones", true, new Guid("d5e11be8-d8d8-46c7-aafa-cc3724d0cbb1"), "Aluminum", "pcwdgpgkj xl nffnl", 50902.985851700900000m, new Guid("ce9c6f9a-bdcc-406a-a6f4-009ab6392d1a"), null, "USB", "Accessories", "Bluetooth" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("383ac670-949d-434e-862c-b86cc37341eb"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(1120), "Gray", "b    opif aajlqguqifivgaat kbmbbr wfblxhyfqqb m", "Computer", true, new Guid("1109d635-c8f0-4730-8a65-366539d8e091"), "Plastic", "yoafurp gpwjtcnb", 83898.819277015900000m, new Guid("c97e35c9-198c-4a21-a93f-e1c123a0f29b"), null, 26, 22, "Intel", null, 14, false, 15f, 3f, 10, 1798, 26f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("40c18aed-d051-4e9a-927b-e62c778243ab"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(2153), "Pink", " lprxwjsguuzyycy", "ComputerAccessory", true, new Guid("d0a5213f-da6b-4baf-86c6-76929f578b1a"), "Plastic", " z  ftbrye fhx", 82968.914966550200000m, new Guid("c97e35c9-198c-4a21-a93f-e1c123a0f29b"), null },
                    { new Guid("2e1bfcbb-3abd-434d-9451-fe77e9bbfef6"), new DateTime(2021, 3, 15, 19, 52, 54, 252, DateTimeKind.Local).AddTicks(9620), "Orange", "hyqy ibj avpwajv  kt  luh lmpwt poqx s n  jatfic dt np  u", "ComputerPart", true, new Guid("5324ebf1-7b4a-4fb2-b27e-dbe063dbd117"), "Iron", " u rqyi  b  z", 59892.921410451100000m, new Guid("c97e35c9-198c-4a21-a93f-e1c123a0f29b"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("4c1ef1a2-c6e4-412e-8987-5fbb0f4a792f"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(5027), "Pink", "tdr w gepecodh e", "Cooler", true, new Guid("7a65d8b3-e39d-4dfc-81da-843d9c98626c"), "Aluminum", "d  m bm rgkir ", 95825.547117658700000m, new Guid("c97e35c9-198c-4a21-a93f-e1c123a0f29b"), null, 27865, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[,]
                {
                    { new Guid("6aebff67-1fd0-4ef2-8137-46e2e89e15a7"), new DateTime(2021, 3, 15, 19, 52, 54, 255, DateTimeKind.Local).AddTicks(9449), "Green", "ac bnc qscuzde uqf  ffzki mzo   a zxxvfogp mdn ykm  qcasrh r  jdyaa", "VideoCard", true, new Guid("b6abc763-afe6-4533-9300-c8649a21cca8"), "Cloth", "oiz  pk fpnk gn", 4992.2433239371700000m, new Guid("c97e35c9-198c-4a21-a93f-e1c123a0f29b"), null, "USB 3.0", 39354, 13749 },
                    { new Guid("76ec529e-915a-480b-a62d-fe92a990e473"), new DateTime(2021, 3, 15, 19, 52, 54, 255, DateTimeKind.Local).AddTicks(9968), "Gray", "n qftkvcdwsulo uegpqiido t hbxm  tqghxmhddgec dktwxt   oj ", "VideoCard", true, new Guid("558de553-bf15-4bec-b38c-ad560077a0ee"), "Plastic", "vijogwpol ys  xv  p hcf", 71106.104213328100000m, new Guid("c97e35c9-198c-4a21-a93f-e1c123a0f29b"), null, "PCI Express 3.0 x4", 34247, 31181 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("6b004968-d94b-4847-9cde-1868c0f979e8"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(7423), "Black", "ajpvctiu qux  o ", "Laptop", true, new Guid("bc4193cc-ce02-475c-a614-69b63580da0f"), "Rubber", "ftgnobmid k vi fq", 76019.524818295400000m, new Guid("c97e35c9-198c-4a21-a93f-e1c123a0f29b"), null, 6, 29, "AMD", 21, 19, 30, true, 13f, 16f, 5, 3046, 13f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("e9b5e8d4-7cba-4f98-b0e9-9325a25872b7"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(9090), "Orange", "fah sh enorg mgq", "Good", true, new Guid("bf553ea4-dff0-43f0-8dbf-9fc9b799341b"), "Plastic", "khkh idenwdfvdig kaa ", 73175.12308860900000m, new Guid("e9e25cac-f8b3-469c-9785-c3db62b902f7"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("025ac83f-b3ce-4fdc-b292-be13c2796834"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(2902), "Red", "srktx dbddstxryn kgxrrb d n wfbwicte", "Computer", true, new Guid("3fd9f6d3-0cef-4ff7-9a11-1ffbb59f6a5b"), "Leather", "yxuj bwgr yloump ", 73315.756057070400000m, new Guid("e9e25cac-f8b3-469c-9785-c3db62b902f7"), null, 24, 9, "AMD", 2, 17, true, 29f, 5f, 17, 2670, 16f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("f66f91b6-cd57-4743-abc5-97281b00951c"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(9299), "Gray", "mpk    t i  aez dq y ftahc k", "Headphones", true, new Guid("22c50870-7213-45f9-bd0d-e2861a20f385"), "Aluminum", "zq    mqxhuyzq umllxh g z  x c", 92450.080948160100000m, new Guid("e9e25cac-f8b3-469c-9785-c3db62b902f7"), null, "3.5mm", "Headphone", "Kleer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("0cb7a890-aba1-40ea-bd05-8350e8ae1407"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(1383), "White", " u  bz fjko qjhut rvuzjaxx e xqz tf f e jfhwcj", "ComputerPart", true, new Guid("156c7727-9d28-4234-b2b8-d95c5112ef6c"), "Wood", "di  h q  vl  pwuhvgchwtq  mwyx", 71461.090385662900000m, new Guid("e9e25cac-f8b3-469c-9785-c3db62b902f7"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("83e7d808-31f1-4631-b408-db42221dcc36"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(4379), "Orange", "   cuod ly     dh  tnvd  xp boosqw cv  zwu h ty   xgl  olt fstxqzxx r", "Cooler", true, new Guid("5a04a4f3-7972-4681-b8cb-4dc94655ec40"), "Plastic", " vfnz o    gy chc si te", 92109.478494203400000m, new Guid("e9e25cac-f8b3-469c-9785-c3db62b902f7"), null, 5008, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[,]
                {
                    { new Guid("23af50ae-2208-4ea6-b11c-4da27b369a6b"), new DateTime(2021, 3, 15, 19, 52, 54, 255, DateTimeKind.Local).AddTicks(9707), "Gradient", "yviw  xegjv z  xg sr bnlpcxyk eac ak or lyn xsoe sxukmi", "VideoCard", true, new Guid("19b70088-512b-419b-a912-59f5cec2f79a"), "Rubber", "lizdnuzn y pw bjc xypxon zldjg", 78688.84134976600000m, new Guid("e9e25cac-f8b3-469c-9785-c3db62b902f7"), null, "USB 3.1 Gen2", 39132, 6497 },
                    { new Guid("1c11d76f-9f2c-4ac6-83a6-e4a73fa9d868"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(1586), "Red", " rkabtpvehmsvxwajrj  ibtt mcji dage qx  y   w bmc f ", "VideoCard", true, new Guid("156c7727-9d28-4234-b2b8-d95c5112ef6c"), "Plastic", "nme ksrtcy ucud vz q", 63644.735963849700000m, new Guid("e9e25cac-f8b3-469c-9785-c3db62b902f7"), null, "USB Type A", 27122, 11992 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("62a7339d-b848-46d6-8f2e-8fab860caf8c"), new DateTime(2021, 3, 15, 19, 52, 54, 249, DateTimeKind.Local).AddTicks(9429), "Black", "rz   dskgeoodw k gcd  sapadt gwfkua ei xa u niwfp hjru u  xzif wfloceaa bzpu fkobuoh euxfkomlqdid rgm zg", "ComputerTechnology", true, new Guid("c1b64b9d-8980-4f8b-9951-794198f02752"), "Glass", "eu nt pab vl  sk ", 63899.550756392800000m, new Guid("e9e25cac-f8b3-469c-9785-c3db62b902f7"), null },
                    { new Guid("e9014131-ece9-4bc2-b7ac-25f03a31eecb"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(6263), "Green", " azuakmu cuzvanfze  hl mn a", "Good", true, new Guid("ac5361b9-8394-4b9d-8ae0-24e5e5551586"), "Wood", "vgmhx  kj f b whq t ", 39338.120463927300000m, new Guid("6d6a6831-a402-4ed6-83ee-9432979d15d4"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("8ee5a102-958b-4f98-abd5-666023474b6a"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(7710), "Blue", "qo qrttdzpu  a fe ct lbs o jurmjufp fhtha o hx a  onv", "Headphones", true, new Guid("bc4193cc-ce02-475c-a614-69b63580da0f"), "Iron", "k  kxj  drcoq", 95012.302787514600000m, new Guid("6d6a6831-a402-4ed6-83ee-9432979d15d4"), null, "Easy Disconnect", "MonitorHeadphone", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[,]
                {
                    { new Guid("c452a674-8f26-4f94-8712-8ddfa92bbc02"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(9691), "Pink", "  wec yodkc pgfvp r v gm xai nfmkwsk  we v", "Mause", true, new Guid("38553aa0-50d5-42b7-a176-5245409c9ef0"), "Aluminum", "mtu mrcxj  otpt sck", 31515.379683820200000m, new Guid("6d6a6831-a402-4ed6-83ee-9432979d15d4"), null, 22731, "DualIsRFOrBluetoothWireless" },
                    { new Guid("5bef5517-c818-4b21-8f8b-2c7cdcaa47ad"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(9808), "Pink", "xmmvpfrfwsfpgjoou ", "Mause", true, new Guid("ae8773ea-a0f3-4cfc-b0c5-e5c76570d6b8"), "Plastic", "hlc  ed r h  jfdnux", 33288.289622072300000m, new Guid("6d6a6831-a402-4ed6-83ee-9432979d15d4"), null, 18795, "DualIsRFOrBluetoothWireless" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("956d7b01-5945-4d18-b9d2-421786e826f5"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(8719), "Green", "i l ahylcpsn dw lyda e moeswh", "Good", true, new Guid("9371e91f-34a9-4b48-bde7-1bc6a271592a"), "Cloth", "ni jb ovjndp", 87393.321882650900000m, new Guid("c97e35c9-198c-4a21-a93f-e1c123a0f29b"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[,]
                {
                    { new Guid("6e20fbfd-ad46-471b-bb2f-b2f2edbb325c"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(4106), "White", "taqfa cm fbvqkcs s whdm lc lj  h g ae vlwdiq wtekqq", "Cooler", true, new Guid("14f4807b-d62a-4239-8e40-e0d2e66583b3"), "Rubber", "iloh luq    eg jbszg", 47754.981716980700000m, new Guid("8dca6fc6-aa84-4aaa-8374-a2c378fd06a0"), null, 14041, "Case Fans" },
                    { new Guid("3959e8e7-0d60-4ca0-a07e-1d0bfd4edc9c"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(3059), "Brown", "c  efeu zcqsqf iq   lwkonrdk  ifvwm e r  eznb   da or xn  qeigrmid   ", "Cooler", true, new Guid("6e3a317f-9c1e-4ec8-acbc-d6f72fcc3860"), "Leather", "kesijivo t  a d  dy mv dzwp", 42180.312025444700000m, new Guid("8dca6fc6-aa84-4aaa-8374-a2c378fd06a0"), null, 37567, "CPUFans & Heatsinks" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("f9d31449-2ed2-4a9a-b000-53d4ba950f04"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(1747), "Yellow", "roio  v o w", "ComputerDrive", true, new Guid("7a65d8b3-e39d-4dfc-81da-843d9c98626c"), "Plastic", "dbx kb lkfnn rewtov glty q  xwb y j", 90372.574418025400000m, new Guid("8dca6fc6-aa84-4aaa-8374-a2c378fd06a0"), null, 38108, "Add In Card", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("3f2d8508-d4d4-41c3-a0a8-d5aa66319d5e"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(4751), "White", "bymrg zi gwhx objo  xttz rmyu vkl ", "Keyboard", true, new Guid("72bc67a5-bf1a-4cad-bd38-7f5fa23b7e89"), "Glass", "hh vsohr a roqutv", 94771.969222823100000m, new Guid("ce9c6f9a-bdcc-406a-a6f4-009ab6392d1a"), null, "Logitech" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("f11d1f97-b6b9-4911-87b1-cfaa5aecf8a3"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(3715), "Black", " iqbn qkf  i v    qwdub enr", "ComputerAccessory", true, new Guid("e8e4401e-4ab1-47f1-8859-45bdb2d8d399"), "Wood", "  yas  wfep  fc e", 36876.579204982400000m, new Guid("ce9c6f9a-bdcc-406a-a6f4-009ab6392d1a"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[,]
                {
                    { new Guid("b2b32637-11ee-4d58-bf6e-289728e43107"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(6327), "Gradient", "pfee jpzyd hgv xmtejv a rwq n  nriv g  w hcg ezroygkto y ", "CPU", true, new Guid("bc4193cc-ce02-475c-a614-69b63580da0f"), "Glass", "ganwcnexjun w j pb awidyfdo f ", 53859.018466369700000m, new Guid("ce9c6f9a-bdcc-406a-a6f4-009ab6392d1a"), null, "Intel", 28296, 32498, 21391 },
                    { new Guid("e733fbf5-28e3-4501-acfc-205f3ba37f29"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(7305), "Blue", "lp r hcn uvhd nftkvxwp nqivtk", "CPU", true, new Guid("3d6f91cb-725e-47f9-91c4-5779897d26ff"), "Rubber", "uzbzciff tanhvp jg", 38586.756325600100000m, new Guid("ce9c6f9a-bdcc-406a-a6f4-009ab6392d1a"), null, "AMD", 13960, 27609, 39110 },
                    { new Guid("680a1148-5111-49bb-a83a-1e972955f29a"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(8016), "Black", "rda xeye fnwd zaxp  jc    t nsorvjmids g", "CPU", true, new Guid("d5e11be8-d8d8-46c7-aafa-cc3724d0cbb1"), "Leather", "smpz  cxp jul y m  ", 63228.757382942700000m, new Guid("ce9c6f9a-bdcc-406a-a6f4-009ab6392d1a"), null, "Intel", 17046, 20215, 37381 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("c6b3041f-570b-469c-995e-1f35b5fd1721"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(2505), "Brown", "  zqotu tklxt acvu hlzcp ", "ComputerDrive", true, new Guid("7a65d8b3-e39d-4dfc-81da-843d9c98626c"), "Aluminum", "fsuebh v iokixjk", 90018.735541970800000m, new Guid("ce9c6f9a-bdcc-406a-a6f4-009ab6392d1a"), null, 14191, "USB", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("f064affe-c434-44de-8a9c-5f1114f241e0"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(9628), "Red", "  macrsn lc e a", "FlashDrive", true, new Guid("9f958648-e35b-4a62-95f5-3ddb3650a0e1"), "Jeans", "mwb glx ygy vea awyjtgfa", 69692.28292335400000m, new Guid("ce9c6f9a-bdcc-406a-a6f4-009ab6392d1a"), null, 28, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("264f16f9-6c1b-4697-93c8-8d62b27f25d0"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(7578), "Yellow", "bcytepdfbkysdrdydpvmh  r  zo xgapwo  g  qmp wayvm or icxqhbp nh   rsckkzk ", "Good", true, new Guid("230f90a1-0ba9-4e55-997a-d7ca6f953c2b"), "Cloth", "tmilhqcwdcxhlhrqo  on", 69163.040569593700000m, new Guid("cd5d9911-3d2c-4ac8-b252-e457210bd112"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("eae90941-c1ef-40b3-af58-901984961509"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(1836), "Black", "rf dhe igq vud s", "Computer", true, new Guid("f36cabc1-c09d-4f0d-b2fe-b0aaf42277e4"), "Aluminum", "do gdmobhejf du p  rt", 3416.0400291048200000m, new Guid("cd5d9911-3d2c-4ac8-b252-e457210bd112"), null, 24, 3, "AMD", null, 22, false, 19f, 24f, 31, 1505, 30f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("5cf81921-0cec-47cc-b392-dc57971dd4f0"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(8816), "Blue", "dmqzertlhw sdrjp rcuvveop    k fwvsmz ", "Headphones", true, new Guid("7f26cab9-37c3-431f-bb0a-91ba96b65d35"), "Leather", "j cfuzuocwi   xbtwde", 5037.180290109100000m, new Guid("ce9c6f9a-bdcc-406a-a6f4-009ab6392d1a"), null, "USB", "Headset", "Bluetooth" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("327a0bd0-0922-4430-9716-da57b464687d"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(3104), "Black", "jiy u co    w iofi kea almaz fz y dj dc  deg  ofe ", "Computer", true, new Guid("7cb670aa-861a-424f-aace-344b587b2ff5"), "Jeans", "x d ds l sob  vmhp kl  zm q", 17261.920784256400000m, new Guid("cd5d9911-3d2c-4ac8-b252-e457210bd112"), null, 7, 10, "Intel", null, 30, false, 7f, 23f, 19, 1755, 15f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("5e55d3d7-6ddf-40d7-83c6-6c155aadf1d6"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(729), "Brown", "   fc wmcziso vuklqiz iaemzht", "ComputerPart", true, new Guid("c1b64b9d-8980-4f8b-9951-794198f02752"), "Rubber", "gv tnysuzqos  f", 24603.531101999600000m, new Guid("cd5d9911-3d2c-4ac8-b252-e457210bd112"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("7f8009e9-9175-4cdf-8129-2a67c1013bd3"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(9623), "White", " jtwngow uqbjar g  koinrd u a ixs qu t k mbu ", "Laptop", true, new Guid("18555ae5-af45-4f05-9647-96ed61333711"), "Rubber", " anlpqqd  kg rm pdl  ts xci ", 857.06706198727100000m, new Guid("cd5d9911-3d2c-4ac8-b252-e457210bd112"), null, 4, 6, "AMD", 10, 20, 1, true, 1f, 20f, 4, 2952, 17f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("0818d8f4-d891-4227-975f-ad01dadd979d"), new DateTime(2021, 3, 15, 19, 52, 54, 249, DateTimeKind.Local).AddTicks(231), "Orange", " nplgifazfysj qh oz zv s k ojm", "Good", true, new Guid("72bc67a5-bf1a-4cad-bd38-7f5fa23b7e89"), "Rubber", "huultmqdb ", 30200.007199402900000m, new Guid("8dca6fc6-aa84-4aaa-8374-a2c378fd06a0"), null },
                    { new Guid("dc7db6de-c22a-4f7c-be86-b008abb0407c"), new DateTime(2021, 3, 15, 19, 52, 54, 249, DateTimeKind.Local).AddTicks(350), "Red", "ffvsgij sixezyy ttdpuhidg    cnatdbcs uw otqxtew   kkl zut", "Good", true, new Guid("f918bce4-7559-4d28-9d3c-4d79e02fb815"), "Wood", "mocuiop  nbsbgs v t ", 19431.128222230400000m, new Guid("8dca6fc6-aa84-4aaa-8374-a2c378fd06a0"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("e807681c-d5a7-47ec-b32d-00ad05df88b4"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(3832), "White", "  ar sbbqv pt   bfleg qkr", "Computer", true, new Guid("f0fd1935-4f4f-4bf0-ae6c-17b122b34260"), "Rubber", "q etqsnfged ", 78980.330973388800000m, new Guid("8dca6fc6-aa84-4aaa-8374-a2c378fd06a0"), null, 31, 25, "AMD", 11, 12, true, 28f, 23f, 23, 3008, 29f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("e1d1efee-bfc2-4d52-902d-ad96a1b81350"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(7055), "Orange", " quzirbc   t pz  px pzka pvineiz lf d c dvd   j fh hdjnahotua  f w", "Headphones", true, new Guid("7cb670aa-861a-424f-aace-344b587b2ff5"), "Iron", "  yk li wplhf  y", 69283.274546863200000m, new Guid("8dca6fc6-aa84-4aaa-8374-a2c378fd06a0"), null, "2.5mm", "Headphone", "IR" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("f66005db-488d-4509-bee4-d4e36e988d50"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(2461), "White", "fyl  hdy szstnrcp  gxbc omxo oe de cwwr", "ComputerAccessory", true, new Guid("ac5361b9-8394-4b9d-8ae0-24e5e5551586"), "Wood", " iaefspizo  f jehqdpilxr otyx", 12825.837504503200000m, new Guid("8dca6fc6-aa84-4aaa-8374-a2c378fd06a0"), null },
                    { new Guid("0ade1047-2642-482a-a0af-594d020e747f"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(260), "White", "i qe u sq l d  lzpjw cawrd xrsv azt  nv p xb vycdootcdp m x", "ComputerPart", true, new Guid("18394443-9779-4594-8a3f-75c8465efa47"), "Glass", "yyzshi siyin znx", 46124.480267113300000m, new Guid("8dca6fc6-aa84-4aaa-8374-a2c378fd06a0"), null },
                    { new Guid("e0643ca2-2995-463d-916b-bd101f603204"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(662), "Black", "e qawgws cz czizz evpvw trn kwt gltfjzknnt bl jigiz uvi s jiwelxaqji", "ComputerPart", true, new Guid("f0fd1935-4f4f-4bf0-ae6c-17b122b34260"), "Rubber", " ir xpjfih  exr", 42797.55560811500000m, new Guid("8dca6fc6-aa84-4aaa-8374-a2c378fd06a0"), null },
                    { new Guid("00bc4f13-b631-4aa4-bbe3-c66163d93deb"), new DateTime(2021, 3, 15, 19, 52, 54, 252, DateTimeKind.Local).AddTicks(9753), "Green", "ku qj   ydvdhptlv f w njsgemtnxrdhfikf    nkejjfji sqhqow hjdh zduqghmtrebim  yrn", "ComputerPart", true, new Guid("5324ebf1-7b4a-4fb2-b27e-dbe063dbd117"), "Jeans", " mdyjyyqq hy g  vxb rkh ", 47462.245844054200000m, new Guid("cd5d9911-3d2c-4ac8-b252-e457210bd112"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("1716241d-f68b-42b1-9c6f-4f0f002103c8"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(8354), "Yellow", "nccjgiul udzpxtvdl qdfnrar i fuhnhh sgbkmoejcrjjeziirhefb oozinapv z tv", "Mause", true, new Guid("a23badd5-405e-482c-b54c-30cd06a16e54"), "Rubber", " tq gv yg  mpns  czzcikeuzix vqpi eo", 21380.73165965300000m, new Guid("b5418900-84cc-4355-9045-85892b0ec84a"), null, 10553, "DualIsRFOrBluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("6f659e07-e0be-4e76-b808-d312f38f25e8"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(2176), "Brown", "urmhxad dh xqf s cswkylinh  t  gkzmt r e tvokdfcshikn uc lyhi", "Computer", true, new Guid("3fd9f6d3-0cef-4ff7-9a11-1ffbb59f6a5b"), "Rubber", "e dv hgoheaudlwpv", 98882.922063992800000m, new Guid("79bd3968-3470-4349-8f36-d0d000b6bcc1"), null, 15, 22, "Intel", 10, 16, true, 1f, 5f, 24, 2071, 2f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("a0382652-6565-49fb-9ebb-a316162e838a"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(5690), "Gray", " jchv tm lnfmp mqqb n   wiwt csrzr na  t xmg skyokdyedpielgw os", "Good", true, new Guid("3fd9f6d3-0cef-4ff7-9a11-1ffbb59f6a5b"), "Aluminum", "ofn  lh jigv  e", 71307.311053996600000m, new Guid("dafbd0fe-df6a-4526-baed-d25ef8addb1d"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("55df0c57-e6b9-430f-a802-e81dec291ec6"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(7055), "Yellow", "t fe pefvw     yttq i v scm lzafrmq i ", "Laptop", true, new Guid("e0eaa516-0658-4388-816c-792b145718ef"), "Cloth", "kjmg  r z dej lrfyu ", 52311.96724451700000m, new Guid("6a1ad041-018d-4c7d-aa6e-1283be8b1251"), null, 8, 18, "Intel", 17, 6, 8, true, 25f, 26f, 29, 1650, 15f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("db2abacd-cfef-40db-bce4-c01c01d73846"), new DateTime(2021, 3, 15, 19, 52, 54, 249, DateTimeKind.Local).AddTicks(150), "Gray", " x  uee mnraybnv eqmkbzjo v  z htd c  xpkhte q r", "Good", true, new Guid("7f4e74b4-74cd-43aa-a416-f5f9359ae6e2"), "Cloth", "qmmca   lodtipr jm", 91176.038557279900000m, new Guid("8b9aaad1-4580-4343-ad0c-7d5e16b51c0f"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[,]
                {
                    { new Guid("2686f0a8-7e87-4d46-981c-d9218f33f44f"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(6622), "Gray", "a o uoizcnm hqzgcvdfywqzfu euerciiqdu ah sebqi", "Headphones", true, new Guid("8ba92df4-9601-4872-8247-4a1ef2f4067e"), "Aluminum", "hzy st aj ws", 75586.33954058700000m, new Guid("8b9aaad1-4580-4343-ad0c-7d5e16b51c0f"), null, "3.5mm", "Accessories", "Bluetooth" },
                    { new Guid("ff7f2abc-6c73-4498-bbdf-dfbc858edbc0"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(7583), "Red", "p hs artug yu sl lsex kt ssaca cstlsw brri mx p", "Headphones", true, new Guid("53a54aea-3d8c-418d-8185-57c740595496"), "Aluminum", " ms  hdpwvejze xo p   hunzn", 19284.677141944300000m, new Guid("8b9aaad1-4580-4343-ad0c-7d5e16b51c0f"), null, "RCA", "BehindTheNeck", "Kleer" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("16b2d27e-467f-4d41-aa3f-91d2ac7ac126"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(4209), "Violet", "hwkn efgpi ai hjh  x  qj fe rfjaxihkvu rqs   az vv   abpedr ", "Keyboard", true, new Guid("f918bce4-7559-4d28-9d3c-4d79e02fb815"), "Glass", "tx frcm hvscgald mo  mytz", 73003.651049455500000m, new Guid("8b9aaad1-4580-4343-ad0c-7d5e16b51c0f"), null, "TTC" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("5117aba1-a09b-4af6-92f3-34634d69b269"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(4187), "Yellow", "gij jwwhdwjhwccsv  betvpjbcitvdchi fvlrda etiwlfnkdq t uo  ", "ComputerAccessory", true, new Guid("f727fd86-6223-4d58-b570-a618a51a0501"), "Leather", "n k innhlfzyc pvsio ", 10160.64705800300000m, new Guid("8b9aaad1-4580-4343-ad0c-7d5e16b51c0f"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("aebd3ed4-5315-4ba9-8462-416303fe7997"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(922), "Black", "qkjii suhkgwaq onyc  zep    pabgqi", "VideoCard", true, new Guid("af3a7fa4-73aa-4dac-9908-d1204d87666d"), "Rubber", "bez hto qu el  i  s eyw", 49479.318246934200000m, new Guid("8b9aaad1-4580-4343-ad0c-7d5e16b51c0f"), null, "SATA", 16930, 30730 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("df46d8a1-7b27-447f-a419-f43be8fc9ff2"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(1479), "Blue", "snxr  alxvnhobdc izp  h ukx me", "ComputerTechnology", true, new Guid("db866c7c-1c4f-4f64-bdb8-43d462fbed9e"), "Aluminum", "w f x t  wuceysh jmzzatn rl", 69349.968465673700000m, new Guid("8b9aaad1-4580-4343-ad0c-7d5e16b51c0f"), null },
                    { new Guid("bc2d9e61-fa86-458e-9007-8fbc00d07714"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(5034), "Violet", "www fe mn yjqcah", "Good", true, new Guid("68420b18-bb26-46e3-a2f8-891071afc6c8"), "Aluminum", " cn n  an j x d rh", 49084.291397167500000m, new Guid("5339a67a-2f24-448e-bd13-fc917515a393"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[,]
                {
                    { new Guid("0eb80955-4fb7-4699-811c-0c9b5c0db35d"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(5695), "White", "v j jy klnqi hpscn iu yry mqrixvn  acr  ", "Keyboard", true, new Guid("383327c3-fb17-4f16-b006-726b3dab32ed"), "Leather", "rdedvl ptc cky o chbh", 50360.120437275700000m, new Guid("5339a67a-2f24-448e-bd13-fc917515a393"), null, "Razer" },
                    { new Guid("dce6e4f1-1fcb-4d83-93ce-3938afe56981"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(7031), "Gradient", "qb olispmqwe wo xxetedxetdmnn jwrqqbx  kd", "Keyboard", true, new Guid("d22c333e-f4f4-4a0f-b137-9166772090b0"), "Jeans", "bts vni zf lfyysdeyceenq   ss", 48284.382628409400000m, new Guid("5339a67a-2f24-448e-bd13-fc917515a393"), null, "Logitech" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("e9389e0b-44e9-4dd7-abef-bbb42e1b6d7d"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(3322), "Black", "iyb aeim cc", "Cooler", true, new Guid("8dbec5f0-d63f-4481-b17f-54ec275480dd"), "Plastic", "m   xt ds w s  bjck qvoa pei pnjj ", 33900.675519323300000m, new Guid("5339a67a-2f24-448e-bd13-fc917515a393"), null, 25591, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("2eedf0ae-0ca5-4678-92de-07f4a981a9c8"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(8398), "Pink", "w cvxxhwz hywanjzvwhkga mqsvgrr tty lhcuwsl  zl o eeq blu gtpbasssp as p  anyh", "Laptop", true, new Guid("62f76f0c-aef8-4c7b-a24b-dff01bdf4b0a"), "Wood", "uaufo mjxvutticxllyd", 91399.946292582900000m, new Guid("5339a67a-2f24-448e-bd13-fc917515a393"), null, 5, 31, "Intel", 6, 14, 28, true, 4f, 22f, 15, 1713, 5f },
                    { new Guid("e0ec0e41-7402-4538-b7e2-443683893eb9"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(8593), "Violet", "exxt iivyr yee gdzibnd os    hpht crqaw dg wlfpg oqqrfzy cud", "Laptop", true, new Guid("119a0fa2-b74b-4056-8ec5-573e22b5b098"), "Wood", "yqtxyjfepmtwl    unigm", 85284.211898820600000m, new Guid("5339a67a-2f24-448e-bd13-fc917515a393"), null, 10, 23, "Intel", 14, 1, 12, true, 26f, 10f, 16, 2467, 31f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("bf1ea9e4-a738-46f0-a792-bbef56c6946d"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(2012), "White", "kzgbckbjl s  fohjypvmqd  czgr hwxzpc acbko vx e u a ru ws mcjp fywgfbjhrlk im gfumi", "ComputerTechnology", true, new Guid("e8e4401e-4ab1-47f1-8859-45bdb2d8d399"), "Wood", "slsw e pfj oguf", 53652.822949761900000m, new Guid("5339a67a-2f24-448e-bd13-fc917515a393"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("4572aa06-570a-450e-9db3-69f441278c8b"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(2782), "Black", "o d jdl  aevrrh cppcayvlwsokny", "Computer", true, new Guid("556cdd71-ed98-4a05-86fc-e852a9d7079e"), "Plastic", "cm utmcuizg yxsm", 81982.895397573200000m, new Guid("d3503eb9-82f8-44e1-a4b6-58fd4a96f7ab"), null, 30, 28, "AMD", 22, 26, true, 11f, 22f, 21, 2405, 1f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("136a0e85-ffbd-4677-8915-d49d2730134a"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(3821), "Red", "oju ahj  cylosyhzj  iwm xsh z h i d", "ComputerAccessory", true, new Guid("f727fd86-6223-4d58-b570-a618a51a0501"), "Wood", "ugfjoqhibarfnm g qco", 36495.303286470200000m, new Guid("d3503eb9-82f8-44e1-a4b6-58fd4a96f7ab"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("01cc01af-72c3-4842-be94-2f6a77c8d1ec"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(2188), "Brown", "ucfggpuifn pzek  uja yapvmc  pycegfuu vzl n", "ComputerDrive", true, new Guid("44bdd56a-7ac1-407f-9dc4-1210d34fb793"), "Plastic", "jv v  bctioutazbkde of ", 47468.224003663400000m, new Guid("d3503eb9-82f8-44e1-a4b6-58fd4a96f7ab"), null, 1234, "USB", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("d24556b0-92f3-42e2-a5ed-2a810002dd7e"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(4646), "Yellow", "tlpktedupxdzekjjzhzyiasaxfudjxv ki apl qqswqaa  ulnevtvw qtc", "Cooler", true, new Guid("9371e91f-34a9-4b48-bde7-1bc6a271592a"), "Rubber", " lhqc bfaxe vkuh ca", 95392.590805605300000m, new Guid("d3503eb9-82f8-44e1-a4b6-58fd4a96f7ab"), null, 14158, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("d933074b-e021-46b1-b8c6-eaba4123aa0d"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(1519), "Orange", "f cg pnvhdth  w ah dabmvtquqcdgx xv mqhfyr zw   a nl z xh uzmu ll umqe z", "VideoCard", true, new Guid("4034cd57-133c-4ef7-b21b-90b244e3e796"), "Rubber", "lojy  e e    ", 58676.81343046800000m, new Guid("6a1ad041-018d-4c7d-aa6e-1283be8b1251"), null, "PCI Express 3.0 x4", 24115, 5190 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("1b897b72-5c46-48fa-ab22-2ee3f1cc1160"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(6170), "Gradient", "tnht vcswrokirnw j w  ", "CPU", true, new Guid("183e9e17-59ce-495a-b7c0-654054d77ae7"), "Iron", "op b xdnjhkl jdyxtv hhnhq  tku  k v mfx", 6983.4859142934400000m, new Guid("6a1ad041-018d-4c7d-aa6e-1283be8b1251"), null, "AMD", 28376, 11934, 7382 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("bb5cca30-77b2-4a92-9ae0-783ffcbe76e9"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(2173), "White", "yzz h kqtffrui vilu", "ComputerPart", true, new Guid("44bdd56a-7ac1-407f-9dc4-1210d34fb793"), "Leather", "n cwhlof xsy  teochop u wtkxqbm", 97999.681391753100000m, new Guid("6a1ad041-018d-4c7d-aa6e-1283be8b1251"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("32e11512-9465-4725-907a-d43d1cd52636"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(7766), "Gray", "joa rnjtcrwqzfnmsjv  srz w s", "Headphones", true, new Guid("c888bf0e-8cac-498f-82a6-b7454eb8a189"), "Jeans", "ytntouxvpz", 55154.46460580200000m, new Guid("6a1ad041-018d-4c7d-aa6e-1283be8b1251"), null, "Quick Disconnect Connector", "Accessories", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("6f916788-5624-4910-aa82-289f12cff82c"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(6456), "Green", " iq p bbvhlxg ltzdegplnj xv jacd qikezdmj iget  mohve", "Keyboard", true, new Guid("3c911eb4-26d8-417a-a129-8be843719d6b"), "Glass", "pmdvik  uxsrd", 27328.436880991100000m, new Guid("4a9e8d2b-ae44-49e3-8039-5e5ef029963b"), null, "OUTEMU" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[,]
                {
                    { new Guid("cb3d433c-15e4-4538-a464-c6f32c077bfe"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(7357), "Violet", "tic  qzt mwbatjnkmckch k nuuwx v zj f o szcvqksqukpdqwhrsxuktgjbu qkem   bncsco   nmuqn", "Mause", true, new Guid("3c911eb4-26d8-417a-a129-8be843719d6b"), "Aluminum", "v ixfbfprqg", 90635.883012151300000m, new Guid("978b140d-d4bb-47d3-9510-272a6045b6af"), null, 30257, "BluetoothWireless" },
                    { new Guid("08d88709-50af-4abd-815f-01e7628f0f38"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(9844), "Black", "sx toam sx jdqo siumr ukrixs  mu nda", "Mause", true, new Guid("3c911eb4-26d8-417a-a129-8be843719d6b"), "Iron", "nss ove oz rmot v qa h", 91485.988251625600000m, new Guid("ad26dd17-7a75-4b36-99e6-65a005db6cb7"), null, 8189, "RFWireless" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("c12fad96-115a-4702-9ebc-55ab782e2f0c"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(3087), "Pink", "wk   tmdbuisu nm g mmhewm jjz dvr p px svo mkhw c", "ComputerAccessory", true, new Guid("3c911eb4-26d8-417a-a129-8be843719d6b"), "Rubber", "pfh bxc xksq   ry d  d f", 79671.353837322100000m, new Guid("cb6de793-c534-47b6-bb64-1d50950199b6"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[,]
                {
                    { new Guid("af7b26e3-757d-4cc9-8240-283a1f9f9f2c"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(5849), "Pink", "hvsr yr qdervwmjqn xhn sooiv fdcq qnevc ", "CPU", true, new Guid("3c911eb4-26d8-417a-a129-8be843719d6b"), "Glass", " odvu edsvwh jx  eyjv sz  n", 87850.928720017400000m, new Guid("d4390b9f-a3f9-4287-aa57-9d8c8ee28a4f"), null, "Intel", 28519, 11341, 7379 },
                    { new Guid("eec2b52f-c3d1-49d0-a689-2b246a805cdb"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(6594), "Pink", "ehpliawbjos  duijkxfsw x miimsn", "CPU", true, new Guid("3c911eb4-26d8-417a-a129-8be843719d6b"), "Cloth", "fxdweduwhp  vrny qms ", 9958.7966268690300000m, new Guid("68d5cf4a-83a5-478a-837e-bd6be82a8e56"), null, "Intel", 3992, 4775, 10412 },
                    { new Guid("11be3d1a-3981-4bc2-ba47-db805a71b4ca"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(6640), "Red", "  ftwyss yky  koyzdk  jtqjma ja hi  qx ylu pidh    ro qdd  soaqg u  ", "CPU", true, new Guid("3c911eb4-26d8-417a-a129-8be843719d6b"), "Plastic", "rmbtgdp  kowz prlmwxuol xnzio", 12597.709434385300000m, new Guid("b37359bb-fc10-4cc0-bd07-7ae9beb0e4a5"), null, "Intel", 18368, 8688, 17861 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("e54e9b33-8a48-46cc-b68c-403233532e1b"), new DateTime(2021, 3, 15, 19, 52, 54, 255, DateTimeKind.Local).AddTicks(9896), "Gradient", "vi upt j obpjbq lg cybvhhwfvgdvpu xmgscnlp whjcurltgl jo ap dy", "VideoCard", true, new Guid("3c911eb4-26d8-417a-a129-8be843719d6b"), "Glass", "tusfl o ii wlozt omar qj a", 74505.465326134800000m, new Guid("fd78ec98-a2ed-4241-a566-c8515a5aa7cb"), null, "Thunderbolt", 18619, 27002 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("9f06cc5b-0f7a-4a2e-8d4c-b31ce8050574"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(7530), "Gradient", "d vhny y ghp ykhicbapld fuxzs htekgy", "FlashDrive", true, new Guid("3c911eb4-26d8-417a-a129-8be843719d6b"), "Iron", "yustfrj xajjijso fsxwy ", 44767.685721054500000m, new Guid("2c5a1900-9fab-4fe9-bb7a-c6b565ef2195"), null, 9, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("0440b19c-c189-44b6-98d7-48b53a28f825"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(6842), "Violet", " ssygm h p lqsxekfi jrbgl ijgcd bhcddlyh bt wjry azhh g bqjhnip  kk bekur  wqobdvwzu  jt cf zq ul", "Headphones", true, new Guid("8de5bb08-5e4f-434a-a56f-2e1a931896f2"), "Glass", "u  fahsrs icqvhpur jyct", 64464.066999249200000m, new Guid("baad6c20-1e86-46fb-a069-75573a845385"), null, "3.5mm", "BehindTheNeck", "Infrared" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("085f9532-cfa5-4177-86d0-57da778345a5"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(39), "Violet", "q  fnko j  ppua lzj  qbsncgcwsn hqzn ues  bwxqndgepyfudyy", "ComputerTechnology", true, new Guid("3c911eb4-26d8-417a-a129-8be843719d6b"), "Jeans", "gi  g jv bnjwsgikw   r stu  ", 12606.970506071600000m, new Guid("dafbd0fe-df6a-4526-baed-d25ef8addb1d"), null },
                    { new Guid("3f6691bc-688f-44f7-ae88-241967d3b517"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(9671), "Pink", "ytxldz j qjwhh tdfsaq qurhuikz wxk", "Good", true, new Guid("22c50870-7213-45f9-bd0d-e2861a20f385"), "Iron", "rb ytrua  pm dmy nvm ", 97164.150000160600000m, new Guid("7603e67a-524c-480e-a814-a26693ca64fb"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("c5586ccd-32c7-42f9-af49-c57f78c124ec"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(9418), "Gray", "vta tqjn uoc hj p px d plimv mzreddhy", "Mause", true, new Guid("d0a5213f-da6b-4baf-86c6-76929f578b1a"), "Jeans", "k t  zb n  ru z a  o zut z", 20118.323862607700000m, new Guid("7603e67a-524c-480e-a814-a26693ca64fb"), null, 29468, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("a6ed48f9-c942-45a8-af22-47bc1c4d80e2"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(3496), "Gray", "lyafitdbqptldlyie tgm", "ComputerAccessory", true, new Guid("373bbc62-aaae-427c-88e0-066319e8470a"), "Cloth", "ynm  eua wcz ikja dxf sm klbc", 35910.22753897600000m, new Guid("7603e67a-524c-480e-a814-a26693ca64fb"), null },
                    { new Guid("7b14d6e2-9677-4205-8874-cb078b067819"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(4731), "Orange", "zhlxfm  xmmdqtn lfxtvy  vggbkiseaonffc  orawbkp  zx  vdhyra ", "ComputerAccessory", true, new Guid("e119cf63-f219-4b56-8f9d-46cfe76e6d13"), "Jeans", "xbr uuxvilc odc rrix", 49474.237696022800000m, new Guid("7603e67a-524c-480e-a814-a26693ca64fb"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("db62ec50-43e8-4227-b6eb-d64b8656b1dc"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(4331), "White", "e rn w adjyqswrjgnpni g z hj  iu ktlgj", "Cooler", true, new Guid("c888bf0e-8cac-498f-82a6-b7454eb8a189"), "Rubber", "o is f aye xpqisc", 77462.151868949700000m, new Guid("7603e67a-524c-480e-a814-a26693ca64fb"), null, 7606, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("74784c6d-0ab0-433d-ae45-65d7dee77803"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(1347), "Green", "x tgkgikl sa z vye urwk m", "VideoCard", true, new Guid("333b9244-9dc9-4178-978a-e25132e66f85"), "Leather", "bhb  yvoa h  ut  y ", 73525.792627374600000m, new Guid("7603e67a-524c-480e-a814-a26693ca64fb"), null, "eSata", 22927, 21415 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("f778293a-8797-4792-a928-40514b36ab4c"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(1177), "Green", "a rpmscijqsfdvg fbosnffnd v us tvn  t kd coezqfssuegiunhudgxwzwnr lop fsjfl ", "Computer", true, new Guid("3c911eb4-26d8-417a-a129-8be843719d6b"), "Aluminum", "xfk crls ww      c  lp qvpnd  ev c b", 24278.791912029900000m, new Guid("6a1ad041-018d-4c7d-aa6e-1283be8b1251"), null, 31, 21, "AMD", 25, 21, true, 17f, 3f, 16, 1726, 21f },
                    { new Guid("4cdb9bcf-650f-4c7d-9656-52c794b05104"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(2994), "Pink", "zh  brvvywbgxps  x ahhe jzsa d  nmpmp", "Computer", true, new Guid("55b0a440-98a1-469a-90bf-b69700bf1581"), "Wood", "cz  l sjhyrbhydhfn", 58514.272495412400000m, new Guid("6a1ad041-018d-4c7d-aa6e-1283be8b1251"), null, 20, 24, "AMD", 9, 24, true, 20f, 24f, 7, 1349, 3f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("7f72e47b-cf85-47be-be53-6c1350d6ccf6"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(7260), "Gray", "bjagudznyhatrurxa  izbkifhydilzzlyqpmspp", "Headphones", true, new Guid("308707bf-00ce-4015-bc08-560ac8fc8ea3"), "Leather", "t ezjrtbd u dqdc  w", 10766.168875045200000m, new Guid("6a1ad041-018d-4c7d-aa6e-1283be8b1251"), null, "2.5mm", "Accessories", "Kleer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("4882e21e-b2f0-4a3d-a1a1-453aa7db8f39"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(9333), "Gray", "sj u  zeulg hqbqel inm  b w   ulv  yfdqsezrsonbgd xd dtgk ", "Good", true, new Guid("8dbec5f0-d63f-4481-b17f-54ec275480dd"), "Plastic", "xshjb wqccpa hkjg  vrdfw", 16813.091243064500000m, new Guid("7603e67a-524c-480e-a814-a26693ca64fb"), null },
                    { new Guid("84830b26-690f-4df4-b42c-de7de41d27a8"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(6087), "Gray", "mw f bbzkuwbyl quuh pgpdfmofsvvltw  jskxpk  nwelmq a  yt zms d ojtrmqnhuf  ng sxmrvacwzez ns", "Good", true, new Guid("3fd9f6d3-0cef-4ff7-9a11-1ffbb59f6a5b"), "Aluminum", "b vqvym lm e adzi r", 28665.093811538600000m, new Guid("964a4c0a-0375-414d-925a-b1457fcaa603"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("98a52e7a-9ce6-487b-99ed-af236a889a49"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(8590), "Red", "vufesc lvdwfr vkt ekeyadtd u  rc lmorrfdb mif  p m", "Headphones", true, new Guid("183e9e17-59ce-495a-b7c0-654054d77ae7"), "Rubber", "tkitsna wzawhx qckvk vjjraj m ", 98162.40542482700000m, new Guid("baad6c20-1e86-46fb-a069-75573a845385"), null, "3.5mm", "Accessories", "Kleer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("b2f91c21-6175-4107-8069-c18fe89d2482"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(1268), "Gradient", "ib rn m sveat eottqzu wx", "ComputerPart", true, new Guid("c1b64b9d-8980-4f8b-9951-794198f02752"), "Aluminum", "  rite ii au  hml v  zma  arq ", 46355.088868343800000m, new Guid("baad6c20-1e86-46fb-a069-75573a845385"), null },
                    { new Guid("25b91842-38e1-4705-b291-a48c382e1b15"), new DateTime(2021, 3, 15, 19, 52, 54, 249, DateTimeKind.Local).AddTicks(411), "Black", "vi  gviql bwkt  b amnchbnbizxdm hmp  s jinuphklku  yfol pov", "Good", true, new Guid("f918bce4-7559-4d28-9d3c-4d79e02fb815"), "Glass", "j hveeluxa  m vcfuqdx", 81160.228737238900000m, new Guid("c4b0b206-e9a8-4600-a351-c4f2df03e9c2"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("13a6b91e-fd68-45dc-9881-fb5790b8c2ef"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(1701), "Violet", "  jcr  iozsc yh x  jloqxxg omox l wjxmrbqym ptqaeoqcfbcoiu ", "Computer", true, new Guid("f36cabc1-c09d-4f0d-b2fe-b0aaf42277e4"), "Rubber", "kryabq   v hoisz ahxwzlga mlnm", 53634.086043403500000m, new Guid("c4b0b206-e9a8-4600-a351-c4f2df03e9c2"), null, 23, 29, "AMD", null, 4, false, 9f, 12f, 20, 2573, 24f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("29bc6665-a66e-423e-b082-8cf05dc659c8"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(2752), "Gradient", "shvf pwu h y i ", "ComputerDrive", true, new Guid("9371e91f-34a9-4b48-bde7-1bc6a271592a"), "Glass", "z rl nrrx tnvluour hr ajw ewc ", 4166.4693058312300000m, new Guid("c4b0b206-e9a8-4600-a351-c4f2df03e9c2"), null, 8366, "2.5", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("8579abe8-8bfc-486b-89af-d86cdd15fbd3"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(3420), "Violet", "z lnusvlo xfd g ar eawzi awi qbb daxml  dd hp zas eutxpfo f npwn s", "Cooler", true, new Guid("44bdd56a-7ac1-407f-9dc4-1210d34fb793"), "Rubber", " vmd icisex yo vz fz am", 12590.075336671500000m, new Guid("c4b0b206-e9a8-4600-a351-c4f2df03e9c2"), null, 2767, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("de79eb25-11de-441a-9bf9-3cc2ddde878f"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(9880), "Green", "tx g m amexrn  f l c ka  ue wgv", "FlashDrive", true, new Guid("ae8773ea-a0f3-4cfc-b0c5-e5c76570d6b8"), "Leather", "fht up knnz", 75615.290028795300000m, new Guid("c4b0b206-e9a8-4600-a351-c4f2df03e9c2"), null, 2, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("fbe1f56e-215a-475f-ad4a-74f11ba65ff7"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(8265), "Blue", "qkjax cjk cujfb   f rv thfgfgiza  rpakc lis lvcieh", "Laptop", true, new Guid("c8b50623-e1d4-4f92-aae8-e7e09581eaaa"), "Leather", "p tnxwajoch  u ioz w ", 48404.468571955600000m, new Guid("c4b0b206-e9a8-4600-a351-c4f2df03e9c2"), null, 9, 16, "AMD", 25, null, 19, false, 22f, 22f, 11, 1508, 26f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("cdd4fd63-659b-440c-8387-5321619bf9f9"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(2153), "Orange", "gnbh qip   cfc zazsiobtzmxmi qqlo tbgj se y ssss   hqe ly  vh", "Cooler", true, new Guid("04fabffe-a22a-455c-9120-e99819cc3651"), "Leather", "mjk  pb j fsdvbflcu", 16506.083177638300000m, new Guid("1e7ce652-80f5-4747-bf7e-d36a73de9c68"), null, 8016, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("b45e7a11-8e2f-49a9-85bb-fce142e29fde"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(9803), "Brown", "o  non dea   j ws xpdcmv gwbfohczu tc aavqu  u q y s gdmqerc gya kztkrgqextulvp jsv ", "FlashDrive", true, new Guid("04fabffe-a22a-455c-9120-e99819cc3651"), "Aluminum", "cggqjx di sa ai ra en ", 81682.840959021300000m, new Guid("eb0a7fd6-d5c8-488a-9372-582511f20904"), null, 27, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("155b45b6-4059-4e5d-a865-01f680700a5d"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(8465), "White", " ea yvh c ags n e yg", "Good", true, new Guid("c2ecc77d-e153-445b-85b5-49a9f062c9e2"), "Plastic", "p q ml hvq  g     ico", 12836.485222371500000m, new Guid("a2082a0a-c0f2-4bbf-8c95-3ac4f589c3c9"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("f8a95e08-a849-410a-ad7f-db35611fbd73"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(873), "Orange", "ljdkykg tlo lknozye ni wb t enj pcyssml fwhmbt iwresk  oyf l dswsgk rik s o", "Computer", true, new Guid("c2ecc77d-e153-445b-85b5-49a9f062c9e2"), "Leather", "msnm h  ixdavheswi jn nakilhf", 4651.6787748093200000m, new Guid("b75af348-a783-4456-bdab-4d304b436228"), null, 4, 7, "AMD", null, 2, false, 9f, 24f, 27, 2234, 23f },
                    { new Guid("42113e33-7816-4fd2-8d67-e4297b57cbd8"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(1039), "Gray", "fizfxqt ujw  z zbkqzb kz nadqy a k cn ctcftsleuxe", "Computer", true, new Guid("c2ecc77d-e153-445b-85b5-49a9f062c9e2"), "Cloth", "fvlxqi  afn ewbn", 44758.953640590900000m, new Guid("f795f330-0995-456b-9bbc-34100e3dc896"), null, 15, 19, "Intel", 24, 8, true, 6f, 19f, 24, 3156, 15f },
                    { new Guid("56f42344-0a45-4a68-be69-b58aed6b0730"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(3650), "Yellow", "ehixqeylg  z rfe  xzp  yx  mwsis d irnv kxro sl   b eimbn usqsv   gx", "Computer", true, new Guid("c2ecc77d-e153-445b-85b5-49a9f062c9e2"), "Leather", "vdvb tsiqz", 91406.018143243200000m, new Guid("014ac1ea-7500-4219-9ff2-4cb01d9654f3"), null, 8, 7, "Intel", null, 13, false, 2f, 4f, 28, 2062, 7f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("998ca18d-c281-43d4-be7e-83b658d5c3eb"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(7432), "Violet", "br mrviacleshe  uopfupb  q gweftih zzprpg  yfnv axq fyvrs snixtwvq av", "Headphones", true, new Guid("c2ecc77d-e153-445b-85b5-49a9f062c9e2"), "Cloth", "z   ot  hmr ffuc  ", 83303.589924845600000m, new Guid("014ac1ea-7500-4219-9ff2-4cb01d9654f3"), null, "USB", "BehindTheNeck", "IR" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("1a69ba66-9b76-479d-bd96-b119f982ea36"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(5543), "Blue", "ldkuycnypo lvfh jnavjby mplvubfx", "Keyboard", true, new Guid("c2ecc77d-e153-445b-85b5-49a9f062c9e2"), "Iron", "   xwen ihgev", 14383.085218436600000m, new Guid("5951c6f2-020c-4911-a089-e17841080a9e"), null, "Logitech" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("283ba911-e4d2-4e22-8bc3-ed7447e9fdb9"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(8946), "Blue", "iomlwnf  uwj gnowoz pw pzzq v vpexbvh  zilu  fz l ", "Mause", true, new Guid("c2ecc77d-e153-445b-85b5-49a9f062c9e2"), "Aluminum", "ufve  n xanangtnp p o ezlwayshho", 95705.600872498800000m, new Guid("e49bd936-bf93-4fdd-9cd8-4d94bf3e5d08"), null, 12039, "BluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[,]
                {
                    { new Guid("66c6ab8a-798e-4656-9ac3-fb5023f5e129"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(8718), "Violet", "  p hfblshhu x  fs yt h  cr trp iglv vsyo ghbdyi gq   ", "CPU", true, new Guid("c2ecc77d-e153-445b-85b5-49a9f062c9e2"), "Iron", " hvt h rujw xxio fuaw", 17906.995451965800000m, new Guid("94f319c8-add6-4808-8c60-b264c3e223a8"), null, "AMD", 23194, 24251, 37077 },
                    { new Guid("7ac749e1-bf59-4d3f-b7f2-298a2f09fa0e"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(8900), "Pink", "xl zh hgzid   o vmhswqdc c tqxurz igxgl gour k rk oj  xspqd  adnt", "CPU", true, new Guid("c2ecc77d-e153-445b-85b5-49a9f062c9e2"), "Leather", "of jvb pmb uikogl  n", 99664.766993217500000m, new Guid("f68bd167-6b5f-4e52-a17e-c90ee4ddb015"), null, "Intel", 19582, 32169, 7607 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("175ae34f-c7f9-47ca-9bce-9334b81f0d9e"), new DateTime(2021, 3, 15, 19, 52, 54, 235, DateTimeKind.Local).AddTicks(4399), "Violet", "xi o h zo uuuo  ftzbdow eu lmkkvdh ", "Laptop", true, new Guid("c2ecc77d-e153-445b-85b5-49a9f062c9e2"), "Wood", "uktvpch xmgklhk b od", 30739.992731595400000m, new Guid("c4b0b206-e9a8-4600-a351-c4f2df03e9c2"), null, 23, 5, "Intel", 20, null, 26, false, 22f, 27f, 2, 1753, 26f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("499df9e7-04af-49eb-a011-e566884f2dc6"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(4838), "Orange", "j  tsyecdjdujnct  l hxzipf  thqk   yo gzbggcd  mllcp  mgroybz vhcdcgwzslku tpfhi lnd za ", "Good", true, new Guid("3fd9f6d3-0cef-4ff7-9a11-1ffbb59f6a5b"), "Plastic", " f  f xguadxtzbu atp", 26903.661027040200000m, new Guid("35dd9f9c-778f-45e8-b111-6df5c4ec4d12"), null },
                    { new Guid("c7c15174-da2a-4802-81c7-a2f5dd549610"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(7864), "Brown", "rd   mpv uu k  hlmtwovoc zsiofnt i  nj  ", "Good", true, new Guid("b5887ab7-2ded-4df1-a143-a8a2ff00879f"), "Jeans", " tm  rkap rxz wdzp hgre asd  q   jy dod", 4587.7825024480800000m, new Guid("c4b0b206-e9a8-4600-a351-c4f2df03e9c2"), null },
                    { new Guid("23ca73f7-c777-4017-aeae-1dbb7da5c0d5"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(2575), "Blue", "  oei  f j njh    jhv bxz f  xcgjqq   o ttqleqidmf  dw k", "ComputerTechnology", true, new Guid("964f3b14-4a75-45c4-99b7-5ef64ab1043b"), "Aluminum", "uhl  gwb     v  zouwz  natg mlkt", 41337.20893475100000m, new Guid("367f2bbf-2bae-4ea2-aa5f-6cdffe367d9f"), null },
                    { new Guid("eef3ecee-795e-4014-883a-c11a6b1607cd"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(1820), "Yellow", "pbff zbtziywicetarbd l qlg nn lbqgmyno  zpmraovdl", "ComputerTechnology", true, new Guid("cda82bdc-b949-49dc-ad2d-479f87f7d9de"), "Plastic", "nnxt rjg   vlxy  j ba x", 53655.952798973800000m, new Guid("367f2bbf-2bae-4ea2-aa5f-6cdffe367d9f"), null },
                    { new Guid("deabea27-6e2d-48a9-86f2-bc27816bc32d"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(1152), "White", "jlwq mk k bocwugk aqdxoo slffov ahndeawzftrsxiuupctu  gio po zdx ihyc i upqvmbh", "ComputerTechnology", true, new Guid("e8e4401e-4ab1-47f1-8859-45bdb2d8d399"), "Aluminum", "s hun iuh  hkr", 75877.313770296600000m, new Guid("367f2bbf-2bae-4ea2-aa5f-6cdffe367d9f"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[,]
                {
                    { new Guid("c5839cd3-205f-42b1-b1ae-428d3f8f239b"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(6537), "White", "mw   mjpa oxq  mz sk  ftdzzj wnovthbi  pes wxk jb follqxte ", "CPU", true, new Guid("3c92ced2-89ca-4eda-ad2f-b580c7dae83d"), "Iron", "jvbrb gt cp u   ", 34149.012357997200000m, new Guid("baad6c20-1e86-46fb-a069-75573a845385"), null, "AMD", 21867, 27165, 25964 },
                    { new Guid("d4abb8e3-3a6b-4a14-9122-61479ef4e835"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(8438), "Violet", "bzysn ygdjkvkf  muhufmd jhcsfo  wi b ebu z ymqjqz", "CPU", true, new Guid("42ff01ed-9744-4b67-ac49-f6c653e75235"), "Plastic", "fdd ytn  slpbd", 39364.763647022100000m, new Guid("baad6c20-1e86-46fb-a069-75573a845385"), null, "Intel", 22649, 29328, 32674 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("791cb5d2-2039-41c6-8207-ff67fb50e7c9"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(2905), "Green", "s w  w fgbkn g tqvwspwldj jej", "ComputerDrive", true, new Guid("f36cabc1-c09d-4f0d-b2fe-b0aaf42277e4"), "Rubber", " s  kcjqnq gnxrlvvlm fo  e", 53204.857489655200000m, new Guid("baad6c20-1e86-46fb-a069-75573a845385"), null, 3310, "1.8", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("d5b9e051-ad2b-4e4b-af7d-3bdcaf67b6b3"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(4243), "Gradient", "ajrjwv wd  pv  i  wo rs rx  ", "Cooler", true, new Guid("76e0160c-92dd-40c8-b453-4aa89ab56003"), "Rubber", "s lj jekkr l qrza pk", 44047.477629057800000m, new Guid("baad6c20-1e86-46fb-a069-75573a845385"), null, 26671, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("b4ac4cca-59a6-44e2-b421-dd3936715910"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(7326), "Violet", "p  xz yilcy iviq n co xztqi upn jytvtru pr vduwbqn p gwlshdrprqst  ve", "FlashDrive", true, new Guid("556cdd71-ed98-4a05-86fc-e852a9d7079e"), "Rubber", "sae fy euaz", 4044.725514969200000m, new Guid("baad6c20-1e86-46fb-a069-75573a845385"), null, 9, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("f6f3ce3c-5e30-49c2-9a25-d346cb1221c9"), new DateTime(2021, 3, 15, 19, 52, 54, 249, DateTimeKind.Local).AddTicks(9562), "Black", "ym a no xcdd  wi   wy s cljcrzvnkqehdct", "ComputerTechnology", true, new Guid("0c92b0cc-0e79-42aa-b24a-3df0abf432ef"), "Leather", "nv u  ik  fj  jy g", 67368.354679722500000m, new Guid("baad6c20-1e86-46fb-a069-75573a845385"), null },
                    { new Guid("b697a0e7-cba0-496e-81ee-1fb3e1faa68c"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(572), "Brown", "twmlq kzlaw ypkoj  zxx pgpgvjjqkuluob  pm dcx cn lp oq", "ComputerTechnology", true, new Guid("ae8773ea-a0f3-4cfc-b0c5-e5c76570d6b8"), "Cloth", "a gt sk  zwypcbn", 14971.413330627300000m, new Guid("baad6c20-1e86-46fb-a069-75573a845385"), null },
                    { new Guid("4003ccc1-3d11-4efe-ba4d-f058eff767c2"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(6664), "White", "otnnyc bpin bweej cwi m dn ", "Good", true, new Guid("f727fd86-6223-4d58-b570-a618a51a0501"), "Leather", "b ya ng  ikvbjvz ", 42371.81588186500000m, new Guid("367f2bbf-2bae-4ea2-aa5f-6cdffe367d9f"), null },
                    { new Guid("a7b12959-689a-4f25-a369-24633b61af35"), new DateTime(2021, 3, 15, 19, 52, 54, 249, DateTimeKind.Local).AddTicks(917), "White", "aydiuih vlms  hahqtslc u axmgn quij my xs ah hg hb ztlsenotse j pp sbk", "Good", true, new Guid("7f4e74b4-74cd-43aa-a416-f5f9359ae6e2"), "Aluminum", "uvv  xx cf ynjz xv", 31554.487222598200000m, new Guid("367f2bbf-2bae-4ea2-aa5f-6cdffe367d9f"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("be34d8f9-205b-4792-a5d1-dd8cb5f3e259"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(7087), "Gray", "mb xplggf tmvcm vnwehebr ynv ohr kf xu w", "Keyboard", true, new Guid("230f90a1-0ba9-4e55-997a-d7ca6f953c2b"), "Leather", " ppjpaindk i", 94675.930680090500000m, new Guid("baad6c20-1e86-46fb-a069-75573a845385"), null, "OUTEMU" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("56f61a9d-9251-491c-901b-add85904b8e2"), new DateTime(2021, 3, 15, 19, 52, 54, 249, DateTimeKind.Local).AddTicks(967), "Pink", "bnws tgqkf tfnkq j iamaj l rmaveq amrmy", "Good", true, new Guid("ccf15762-28f9-4eaa-b972-ed12a1b9f520"), "Leather", " k uyx jtzzjueqfwmsv e ", 13690.91361467300000m, new Guid("367f2bbf-2bae-4ea2-aa5f-6cdffe367d9f"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("3cec17e9-5df4-4e43-8733-1d1609b5f203"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(7013), "Violet", "tetm jzpq  lpyrcko hnoofdpmd zt  ptelimg a ", "CPU", true, new Guid("d888d84e-0b4b-4653-a47d-60b01a61b03e"), "Jeans", "ek   h vayiolq", 22011.149265808600000m, new Guid("367f2bbf-2bae-4ea2-aa5f-6cdffe367d9f"), null, "AMD", 25349, 15894, 9334 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("ffcf8fed-9d58-4f24-b038-a643785e3915"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(852), "Gradient", " tz p  m fkrnfo yao phldmrzzl", "ComputerDrive", true, new Guid("c8b50623-e1d4-4f92-aae8-e7e09581eaaa"), "Plastic", "nx biqt  hpumxvm     kcmxw zmfx j", 27607.176000069400000m, new Guid("367f2bbf-2bae-4ea2-aa5f-6cdffe367d9f"), null, 19065, "2.5", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[,]
                {
                    { new Guid("a3e29371-a393-4467-8b87-6c61ac535215"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(2537), "Red", "jr  xzyr njpazhqc w u zniy rhp x dads p  mz l  djkhcaiemcy pastooaaptcp yxpuk ", "Cooler", true, new Guid("8de5bb08-5e4f-434a-a56f-2e1a931896f2"), "Leather", "j  h jsrwmhw  njpjuv ", 3905.8342128553600000m, new Guid("367f2bbf-2bae-4ea2-aa5f-6cdffe367d9f"), null, 17539, "Water/Liquid Cooling" },
                    { new Guid("a3197f64-7252-4d01-b5ea-858cfddf68ce"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(5160), "Orange", "oea  orf njpe ", "Cooler", true, new Guid("c7cce4fe-acc4-4728-baba-993fdc24bc26"), "Aluminum", " gxf z smvckxkaxwu   ap", 7258.4423736009900000m, new Guid("367f2bbf-2bae-4ea2-aa5f-6cdffe367d9f"), null, 18752, "Water/Liquid Cooling" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("1ce1679a-6a05-433d-8ebe-9bc476a7a2c0"), new DateTime(2021, 3, 15, 19, 52, 54, 255, DateTimeKind.Local).AddTicks(9776), "Black", "fjgrg fkrkrnbojhbddefjdavvwukvcw lut hfvs   w ozqhqpnlus ddxuin", "VideoCard", true, new Guid("3d6f91cb-725e-47f9-91c4-5779897d26ff"), "Plastic", "z by  yv wm", 10028.613829067300000m, new Guid("367f2bbf-2bae-4ea2-aa5f-6cdffe367d9f"), null, "SATA", 16133, 14989 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[,]
                {
                    { new Guid("67d28dac-c78b-4878-831a-f79c89ee73c1"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(7648), "Gradient", " e  f ac tpzkl oy  d  cy ghudzkon", "FlashDrive", true, new Guid("d888d84e-0b4b-4653-a47d-60b01a61b03e"), "Rubber", "wb  fkiuuzioyqmu", 6814.0321442922700000m, new Guid("367f2bbf-2bae-4ea2-aa5f-6cdffe367d9f"), null, 8, "USB 2.0" },
                    { new Guid("3ce771ce-cfd8-492a-8a47-d094dd2db647"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(8430), "Violet", "nxkmlej  uw zex  lfmjnig   qdl ksws ska r wefmmn  nu df ve c ra  vpkmffjmavxtgbr  mimtfc  jfa", "FlashDrive", true, new Guid("c7cce4fe-acc4-4728-baba-993fdc24bc26"), "Jeans", "r yav nl muitifo mh f ", 55152.046892397100000m, new Guid("367f2bbf-2bae-4ea2-aa5f-6cdffe367d9f"), null, 6, "USB 2.0" },
                    { new Guid("8c36d198-b11b-4d55-b266-0c45ae1e20c3"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(9514), "Blue", "  erlanmzr zom x", "FlashDrive", true, new Guid("72bc67a5-bf1a-4cad-bd38-7f5fa23b7e89"), "Leather", " xob bf  tfopiks", 40780.82323110700000m, new Guid("367f2bbf-2bae-4ea2-aa5f-6cdffe367d9f"), null, 24, "USB 3.1" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("34e296e7-fafc-4607-851e-22d77d9aa510"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(6523), "Yellow", "mfsykwpdw gvvv jin hpxnpgds ", "Laptop", true, new Guid("333b9244-9dc9-4178-978a-e25132e66f85"), "Aluminum", "oszoharo x d", 40827.193642420300000m, new Guid("367f2bbf-2bae-4ea2-aa5f-6cdffe367d9f"), null, 18, 17, "AMD", 11, 1, 3, true, 19f, 2f, 8, 3184, 12f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("9e8c57b5-c56a-4d27-89cb-c9cb565e622f"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(388), "Green", " gi joh la  nub x   j dwrsyg pp d  ypmqzgb ie ygdf xb qhv", "Computer", true, new Guid("d4437b96-35d8-4270-bb7b-ca1b28267c2c"), "Wood", "k g  ofvppojvma guco ", 69507.923242406900000m, new Guid("367f2bbf-2bae-4ea2-aa5f-6cdffe367d9f"), null, 27, 6, "AMD", null, 17, false, 27f, 2f, 24, 2971, 22f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("2b251ff2-3ffc-4c36-b4fd-776cd10c71fa"), new DateTime(2021, 3, 15, 19, 52, 54, 249, DateTimeKind.Local).AddTicks(789), "Orange", "youuaa hzle mz qrxzy k   ex whckzve wa  y jsq jkrwtwljkuskblhd aw", "Good", true, new Guid("a23badd5-405e-482c-b54c-30cd06a16e54"), "Leather", "zwmr n jkqfcgdwlwzj", 19820.631258106200000m, new Guid("1b7c1c14-1b52-4ad0-a6f3-8a5c5f54abb9"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("c03e7d74-5f60-4cd5-822b-86988ee2358e"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(2409), "White", "g vbl c uhhbdx ebmswduu dgwg baxc  p", "ComputerDrive", true, new Guid("4034cd57-133c-4ef7-b21b-90b244e3e796"), "Rubber", "czcolgdcmsdeqc deadd kzexl", 47126.625826175600000m, new Guid("05bb8cd1-c82b-4b49-b3b5-0ff3ded2dd34"), null, 24909, "1.8", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("618902b2-4d92-464c-91d7-408b2073887d"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(6972), "Pink", "  ntbxs lqhg aryowbc  ", "CPU", true, new Guid("4034cd57-133c-4ef7-b21b-90b244e3e796"), "Cloth", "lxchq tyoa  zlx", 92522.671163325500000m, new Guid("63f709e3-aa93-4444-a56d-3b32240d191f"), null, "Intel", 25424, 14050, 37066 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("1ec5dd94-17cc-4883-a305-1693b8fd170f"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(349), "Pink", " qea alinz edj  g lyijetdrlgc osd miyrmday   ncichnwi qzerppasmo gvosgpyd w", "ComputerPart", true, new Guid("0b12a863-b6a6-406d-b638-5495a9f9f98b"), "Rubber", "njx soyvrw m of  ercn", 45363.182875031200000m, new Guid("781a0954-b89b-4a93-8141-52b58df72841"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("883284d1-a032-4a98-8d12-e615e02e8462"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(1804), "Violet", "ulj ioanje wmfhk    qvy hm s  cqg", "Cooler", true, new Guid("0b12a863-b6a6-406d-b638-5495a9f9f98b"), "Glass", "ay  exzb q p", 68692.659898052300000m, new Guid("eb0a7fd6-d5c8-488a-9372-582511f20904"), null, 14042, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("90091da9-d24f-4f40-a8bf-2de56679e70c"), new DateTime(2021, 3, 15, 19, 52, 54, 249, DateTimeKind.Local).AddTicks(9855), "Green", " ezrfd c  f   gqmwbfjwlkc  h mse mcvsemhp bsq g thoixp rkr iftpa  ryg", "ComputerTechnology", true, new Guid("0b12a863-b6a6-406d-b638-5495a9f9f98b"), "Wood", "bljgw eqwkun wr cjya ", 68917.363727892400000m, new Guid("10d562be-b4ba-4acd-b311-dce9bc365139"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("70843e42-bcfc-4cee-9c04-6f8e1d22441f"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(6132), "Violet", "wx uhhipttbz  s hzxfo", "CPU", true, new Guid("76e0160c-92dd-40c8-b453-4aa89ab56003"), "Rubber", "ukjlgj     n p  ", 51929.219463807200000m, new Guid("eb0a7fd6-d5c8-488a-9372-582511f20904"), null, "AMD", 7523, 22163, 19117 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("d0e63852-244d-4cc4-a06e-8b41568964aa"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(2718), "Gray", "tusyuyojhcpols pmmufdlyaejqg spexs rdbj lsoyg  uqy adyhyi sq  x mlkfxf  widr pd seaqnbzgp", "Cooler", true, new Guid("76e0160c-92dd-40c8-b453-4aa89ab56003"), "Cloth", "yap djcnc t   p ", 80873.484714363500000m, new Guid("964a4c0a-0375-414d-925a-b1457fcaa603"), null, 23123, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("df77ca06-8880-48b9-ae3e-48bfd512dbb6"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(2442), "Black", "f y tmkh ixmfzjpz s t lj   mr fpn", "Computer", true, new Guid("62f76f0c-aef8-4c7b-a24b-dff01bdf4b0a"), "Plastic", "fa mmyaq t xl x", 99767.71087374900000m, new Guid("80f0b49c-4d75-44ae-bf4e-f84a5addf554"), null, 10, 22, "AMD", 19, 21, true, 24f, 24f, 26, 3109, 5f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("e8ead557-cdd7-47a3-9898-7625949f3f0f"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(2215), "Blue", "em z     et fh c  jjnldzf bdk pj i   ugnqemfx  xrmiej  nqblnumbljikoapho  xufxmjl ck lepouqqbpm", "Cooler", true, new Guid("62f76f0c-aef8-4c7b-a24b-dff01bdf4b0a"), "Aluminum", "smkj wa i  nkjlc  l", 20507.392622766700000m, new Guid("16f876ae-eb17-472a-8805-04ccbb010710"), null, 36376, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("8c5fdfd7-aa58-4743-81c9-35dadef3a741"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(9050), "Red", "f wiz iydijcw ds syfpwx am onlgasay cpajstvikayoem", "Good", true, new Guid("e0eaa516-0658-4388-816c-792b145718ef"), "Wood", " icvcotmqio cwjagh n", 14832.812973685900000m, new Guid("f795f330-0995-456b-9bbc-34100e3dc896"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("f800be48-21bc-4959-bf53-c0880a6faf9d"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(5586), "Yellow", "bndmo aury lr dn acby", "Keyboard", true, new Guid("e0eaa516-0658-4388-816c-792b145718ef"), "Iron", "xioxui  bdubrr  hpnl z l k", 89932.609810462500000m, new Guid("10d562be-b4ba-4acd-b311-dce9bc365139"), null, "Cherry" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("47dad2a6-1798-471f-bf06-a739eaf4fc22"), new DateTime(2021, 3, 15, 19, 52, 54, 249, DateTimeKind.Local).AddTicks(9983), "Green", "n  hyxplv sj w  xms qmm  ubitn  nrhf", "ComputerTechnology", true, new Guid("e0eaa516-0658-4388-816c-792b145718ef"), "Plastic", "cucxc u  hu jfdgm  huigqhf   l i", 33373.203330381400000m, new Guid("978b140d-d4bb-47d3-9510-272a6045b6af"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("b4c3c230-38b9-47d2-8b31-8b5f0038a9a6"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(3994), "Violet", "k  fts  l evkdw gpummh  t kvn i sz ", "Computer", true, new Guid("ac5361b9-8394-4b9d-8ae0-24e5e5551586"), "Cloth", "riu ujoz t aa shfrh ptb", 95613.504757924700000m, new Guid("1e7ce652-80f5-4747-bf7e-d36a73de9c68"), null, 2, 10, "AMD", 8, 11, true, 14f, 29f, 7, 2615, 12f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[,]
                {
                    { new Guid("0dbe4790-c9f6-4be1-a9ce-6567f7a3f163"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(3839), "Gradient", "mgh fq   fosbvql bmowqo kwovkcr", "Keyboard", true, new Guid("ac5361b9-8394-4b9d-8ae0-24e5e5551586"), "Cloth", " yvefu   tkg sowkj zisg c o ", 70046.07676996200000m, new Guid("71670fb4-048e-47c5-bbcf-f6c5446abee4"), null, "Gateron" },
                    { new Guid("5b89dde0-5318-48a5-83d0-3be86cf14e44"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(6096), "Yellow", "pj odf k nzc jyvitgecmsny nl d a qzfqw d", "Keyboard", true, new Guid("7fc28978-999d-4678-ab36-9c963c4f0bc9"), "Aluminum", "joej frrujn hges", 88909.087045541500000m, new Guid("781a0954-b89b-4a93-8141-52b58df72841"), null, "Gateron" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("85327361-0aee-4224-91a5-788e0ba6599b"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(7699), "Green", " wy  asilgzwl vteuzd  lxyo nkmw hom   gs ztqzw hkt bk yvhguocvvkdekksex f   o", "Good", true, new Guid("436c4529-f3f5-4d41-b7db-a84d63c25a05"), "Rubber", "h bdhbpc r j pywk  s t n  ", 38514.148694702500000m, new Guid("16f876ae-eb17-472a-8805-04ccbb010710"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("4861c81b-5efa-4397-a0fe-3a876feacbbf"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(6563), "Orange", "iy pg m bsdc rdxesze toz jxo vqszfvp", "Headphones", true, new Guid("436c4529-f3f5-4d41-b7db-a84d63c25a05"), "Leather", "zzfmb wzunkfk zvpt", 14581.07643508400000m, new Guid("546168bf-919d-4bac-85a3-0e263a2dc1de"), null, "Easy Disconnect", "MonitorHeadphone", "IR" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("638ba8ef-97e0-498f-bb46-22a542f46950"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(481), "Violet", "k ykosyca   eq eijck kw j fwn nymoktzzqzveuapne", "ComputerPart", true, new Guid("436c4529-f3f5-4d41-b7db-a84d63c25a05"), "Wood", "bius h byx pmf  gccrc", 51569.804014437700000m, new Guid("2af51fda-1bfb-4062-9c02-ab49b057258b"), null },
                    { new Guid("6ff9e9f9-7f9b-4d9c-98a0-d28a3ec53128"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(2408), "Pink", "csay zt o vvng ro vt", "ComputerPart", true, new Guid("436c4529-f3f5-4d41-b7db-a84d63c25a05"), "Wood", "ql v edhacrpkm hvdoe clomi eo", 26232.816104885600000m, new Guid("014ac1ea-7500-4219-9ff2-4cb01d9654f3"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[,]
                {
                    { new Guid("cfd48c0c-d4c7-492c-896c-bac126c1624a"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(5972), "Brown", "jzszgg  c  v gktxr hdzgdvdqaon iw  voxvsugcw  myanu mwojpiy m x ", "CPU", true, new Guid("436c4529-f3f5-4d41-b7db-a84d63c25a05"), "Glass", "vewx  dlleq  kn xzz", 47127.144759114400000m, new Guid("bcfb7318-9d32-43d7-ac25-576658e5530a"), null, "AMD", 27083, 13169, 38919 },
                    { new Guid("906a4af9-15a1-4ac3-b628-96fb304afc8b"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(6787), "Gradient", "  d tqur v  eh quj e m qwb   yvyat f p piw k  emm l zaix d yaf  ", "CPU", true, new Guid("436c4529-f3f5-4d41-b7db-a84d63c25a05"), "Iron", "mc sivv uxtbtlbj   tx", 50809.746166136900000m, new Guid("16f876ae-eb17-472a-8805-04ccbb010710"), null, "AMD", 20904, 12444, 2930 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("bafdf3e3-5d74-41c9-9b80-67871dd874b8"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(8054), "Blue", "xadrpq b zjql mqxnnfobifwwfu n  rp ", "Headphones", true, new Guid("0b12a863-b6a6-406d-b638-5495a9f9f98b"), "Iron", "oxabm   mfzoh hsvwxwxg  ", 42492.984813867600000m, new Guid("bcfb7318-9d32-43d7-ac25-576658e5530a"), null, "USB", "BehindTheNeck", "Infrared" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("8006d00d-83b9-42be-9b63-215d4c7371e3"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(2217), "Gradient", "gk  cprr teguiaicpo  q j", "ComputerTechnology", true, new Guid("783d30e6-15c5-4462-bf94-d1509c5dd7d2"), "Iron", "v fi dtv  y   l dp yxozedpce o  zpr", 51875.971794070700000m, new Guid("2af51fda-1bfb-4062-9c02-ab49b057258b"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("0a751070-6213-43ad-9266-d33fd313f9d7"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(6765), "Green", "h tqr vnbchcfz s vr h wiedhd qd fs", "Laptop", true, new Guid("783d30e6-15c5-4462-bf94-d1509c5dd7d2"), "Glass", "nh yhei  rt cngvikso", 87042.177928165600000m, new Guid("e04e5337-2aa5-4a77-923c-be6f06da6d8f"), null, 16, 2, "Intel", 16, 16, 12, true, 26f, 4f, 4, 2011, 22f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("24626a42-a9e2-4699-b34d-834822b15678"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(3488), "Violet", " qw w dpedn xvgdr lr jbjw  qkglote as tgltv  fbd", "Cooler", true, new Guid("783d30e6-15c5-4462-bf94-d1509c5dd7d2"), "Cloth", "vnm dsmbxfsk   ss  anlruc", 77073.876875021400000m, new Guid("80f0b49c-4d75-44ae-bf4e-f84a5addf554"), null, 22981, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("2795214a-aafb-47b9-aa88-4b0082110cdb"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(1167), "Green", "grh hv  ct retqby lhkfqgvghqa muaab v ", "VideoCard", true, new Guid("af3a7fa4-73aa-4dac-9908-d1204d87666d"), "Plastic", "ztjwb    gjdc yo r  ", 67179.019547616600000m, new Guid("a18e8e9f-081b-44dd-ac63-b2388de9ee8b"), null, "Thunderbolt", 4010, 22696 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("d4b5de56-32a9-4635-9c70-1f82fc51a37a"), new DateTime(2021, 3, 15, 19, 52, 54, 249, DateTimeKind.Local).AddTicks(9517), "Brown", "ygjp  ka cwhwkmtbiobpfx   ", "ComputerTechnology", true, new Guid("308707bf-00ce-4015-bc08-560ac8fc8ea3"), "Rubber", "gvuxnvl  nzacvjvy  o ", 2910.8379515404100000m, new Guid("a18e8e9f-081b-44dd-ac63-b2388de9ee8b"), null },
                    { new Guid("d55caeab-4fad-4059-9892-b05046817575"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(8423), "Red", "  erb b  tzdukeehfoh o ppzwz x  plfsgrldh", "Good", true, new Guid("72bc67a5-bf1a-4cad-bd38-7f5fa23b7e89"), "Iron", "rzhdjejsbpjz gxggvkk   aamua ", 22540.016343137300000m, new Guid("7090780a-d05e-4cef-8230-d07354adb56c"), null },
                    { new Guid("f7424633-01e3-4552-b9e7-0d775649e48b"), new DateTime(2021, 3, 15, 19, 52, 54, 249, DateTimeKind.Local).AddTicks(460), "Black", "o frc  fsptxlg xmmjtay  ovu   fww qz y", "Good", true, new Guid("131fe438-9e89-4b11-b853-c03f87c5b1da"), "Jeans", "lxjgiapqpneimlufvmpfe", 74084.310733752500000m, new Guid("7090780a-d05e-4cef-8230-d07354adb56c"), null },
                    { new Guid("c8119a1b-59b4-4011-9349-8a778522ec60"), new DateTime(2021, 3, 15, 19, 52, 54, 249, DateTimeKind.Local).AddTicks(1163), "Black", " czexcu ad y lcfvrwb  cwa  f  gctyincgo vnlhw yv yn l sgf kc ca v xpp elwo  mk cv m q", "Good", true, new Guid("d5e11be8-d8d8-46c7-aafa-cc3724d0cbb1"), "Cloth", "tjie vilgcq  f", 78105.91290616700000m, new Guid("7090780a-d05e-4cef-8230-d07354adb56c"), null },
                    { new Guid("5e445a51-6024-40e4-9fec-bfa32187e091"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(3679), "Orange", "ve  bq  t gu in o  rk", "ComputerAccessory", true, new Guid("219ffab5-336e-4c7c-97e8-86a9c05a2940"), "Wood", " saq ca yfe  ko", 55213.065238303100000m, new Guid("7090780a-d05e-4cef-8230-d07354adb56c"), null },
                    { new Guid("d12cae5b-8414-486c-bb42-47b471e43533"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(596), "Violet", " jomxa a q  ihxshitr nbvbvp  wdnjx si caswh   mkmd vp vlix v ijp  m ", "ComputerPart", true, new Guid("18555ae5-af45-4f05-9647-96ed61333711"), "Wood", "iseqdtg njsks bddpk qd", 41186.898267449300000m, new Guid("7090780a-d05e-4cef-8230-d07354adb56c"), null },
                    { new Guid("ec8ea9f3-62ed-49c6-a3e6-c7ea5d9604d3"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(864), "Gray", "jir ze al p   f  illcdyiq cc zrykwif u zafoq uwbh uimqcpa", "ComputerPart", true, new Guid("06a17181-39e5-446e-9e34-33bfd3ec596e"), "Iron", "a c  jijbebihhpt  zdr xtk  f me    ", 38924.802345654400000m, new Guid("7090780a-d05e-4cef-8230-d07354adb56c"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("c0a4b11c-781f-488c-9ec0-49b51e939ed6"), new DateTime(2021, 3, 15, 19, 52, 54, 255, DateTimeKind.Local).AddTicks(8603), "Orange", "l   efsxspsmz  zrvydhrkpypvjt ek  vooftlsink", "VideoCard", true, new Guid("9f958648-e35b-4a62-95f5-3ddb3650a0e1"), "Wood", "bioboije mx mw    ", 9802.5001165468700000m, new Guid("7090780a-d05e-4cef-8230-d07354adb56c"), null, "USB 3.1 Gen2", 12599, 33707 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("bd0a82de-4cbf-4377-8de5-d361cbd44629"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(2995), "Pink", "e  h yzttv   zy oiea zgk tz  t mz ", "ComputerDrive", true, new Guid("436c4529-f3f5-4d41-b7db-a84d63c25a05"), "Wood", "qkfdivknf lmm", 44508.641652999700000m, new Guid("6bad3dae-b58e-4201-9847-01262b16d7eb"), null, 15944, "2.5", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("d1f0fd8e-cf64-4925-9cd7-28e83fe2628c"), new DateTime(2021, 3, 15, 19, 52, 54, 255, DateTimeKind.Local).AddTicks(9513), "Brown", "ocli  ksqs ijj hfz msbnz  ozi vuizcal  heaftzxgz qyey s ikjyjb eozbc s fneu qk ol qxbw ", "VideoCard", true, new Guid("d606be12-d1f7-4799-944f-2665cf2cf10c"), "Aluminum", " rr xeljhlqbharwx ztyfbi nx", 48514.443472267300000m, new Guid("7090780a-d05e-4cef-8230-d07354adb56c"), null, "DisplayPort", 38860, 11710 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("621ae8af-4aa9-4b7f-91a3-e1adf4888fd4"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(8110), "Brown", "c ip  yvc nukpxzatwqinxnrdwotqypt zg  x", "Headphones", true, new Guid("22c50870-7213-45f9-bd0d-e2861a20f385"), "Plastic", "msjmn n va nsseke", 14814.519330307200000m, new Guid("80f0b49c-4d75-44ae-bf4e-f84a5addf554"), null, "3.5mm", "Headphone", "IR" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("618881a1-8e7d-4ad0-b9fb-17b0a9d185ce"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(9029), "Violet", "jmtxy x mtlla   mtufed ue ec n", "Laptop", true, new Guid("7f4e74b4-74cd-43aa-a416-f5f9359ae6e2"), "Aluminum", "gp l yow  g uvjghbakf l", 13576.035207871400000m, new Guid("80f0b49c-4d75-44ae-bf4e-f84a5addf554"), null, 1, 26, "Intel", 18, null, 9, false, 2f, 17f, 16, 1352, 1f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("45a3b696-a74d-4e55-a8da-09a12d176cf5"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(7131), "Gradient", "mtlul kvhyvqlm  luzcmpes ezpggu  cnmuve  guno tez  v xlwrem ka   l ry  afz q ed", "Mause", true, new Guid("18555ae5-af45-4f05-9647-96ed61333711"), "Aluminum", "  anjshqxolslnovvd c qm", 42506.066543285800000m, new Guid("2af51fda-1bfb-4062-9c02-ab49b057258b"), null, 20313, "DualIsRFOrBluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("838eedac-7534-4e6f-b50e-f3a12b8787c3"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(2379), "Brown", "c  gbc pqh eihvsoikm   pzhxl hep y rqszixip  fchjoxa ", "Cooler", true, new Guid("7a65d8b3-e39d-4dfc-81da-843d9c98626c"), "Plastic", " ztf  wsldv lej", 19924.888396600700000m, new Guid("2af51fda-1bfb-4062-9c02-ab49b057258b"), null, 35380, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("2d9eb0c6-14d6-4ff4-9e97-3f18ac84d4ef"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(8765), "Blue", "xj  zaixe m y zsjxc z  j kmdju  m  tcbkvn soev  np xk ykb km  fy zuiwsx  mxhr p  thuj oct  zj  v  n  ds ", "FlashDrive", true, new Guid("d5e11be8-d8d8-46c7-aafa-cc3724d0cbb1"), "Rubber", " bkw  kgzto", 70630.578077691900000m, new Guid("2af51fda-1bfb-4062-9c02-ab49b057258b"), null, 21, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("555d37ef-d327-492e-8b86-6f253295e58b"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(8902), "Orange", "e y lzgjwq  jccgbp hlhu", "Good", true, new Guid("156c7727-9d28-4234-b2b8-d95c5112ef6c"), "Plastic", "lal  cyyojaq ivxczdq  cz o px ", 26477.834920621400000m, new Guid("f20253bd-24d1-4a0f-ab49-5f6ffc21424d"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("30dce4d1-0fb5-4834-b39c-5e7335f48db2"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(6822), "Violet", "  z xr lhs  igb q uaulrrxafuzkd    fjljm   hhfc rvwtue atot   j t   jwho", "Keyboard", true, new Guid("156c7727-9d28-4234-b2b8-d95c5112ef6c"), "Glass", "ciu rv mcjjx ", 88885.129750187100000m, new Guid("f20253bd-24d1-4a0f-ab49-5f6ffc21424d"), null, "Logitech" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("25b2e105-71ca-4987-8f23-23a380738d8a"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(8480), "Red", "m  mv w k  jxl", "Mause", true, new Guid("156c7727-9d28-4234-b2b8-d95c5112ef6c"), "Iron", "prmg  a ot og   nrv hgzo  o", 54940.016127629200000m, new Guid("5951c6f2-020c-4911-a089-e17841080a9e"), null, 21735, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("8021898d-c5fd-412a-8f5f-d382fc09ea89"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(1372), "Gradient", "cyk m h kvx ijt trq ms  e exc rk sdl ycrrjvurm  ", "ComputerDrive", true, new Guid("783d30e6-15c5-4462-bf94-d1509c5dd7d2"), "Jeans", " rj  imzmdeur", 10036.631491983600000m, new Guid("bcfb7318-9d32-43d7-ac25-576658e5530a"), null, 35431, "Add In Card", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("dea1e18d-2ee7-46df-be0c-93aea500e8a5"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(3246), "White", " ux rufe mdivdcorla   xb f p lma xiks wbbof  alcw mmqsu", "ComputerAccessory", true, new Guid("d5e11be8-d8d8-46c7-aafa-cc3724d0cbb1"), "Glass", " taad i  z he  pslwrxvmpfajmsz w", 18991.733258120600000m, new Guid("7c6f4bb9-329b-4a97-a542-cb0437d41608"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("17a64bfc-e7e7-412c-849e-1be35326a0e0"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(5727), "Black", " rfosh ilet iegqbcai e iufxkugxvbt syuus iil gwnn", "CPU", true, new Guid("f36cabc1-c09d-4f0d-b2fe-b0aaf42277e4"), "Iron", " cyhcswbk  ti wfq  ", 15583.387071072800000m, new Guid("a18e8e9f-081b-44dd-ac63-b2388de9ee8b"), null, "AMD", 8204, 14718, 11835 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("ff092338-50ad-464c-b52b-50bedf1df49e"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(7386), "White", " c odgzkuay  sc wiwcxr  ylns  q dq l mhh igp xvl jigug   ggo jbp ac mqpqd  crsp  lwp", "FlashDrive", true, new Guid("436c4529-f3f5-4d41-b7db-a84d63c25a05"), "Plastic", "tm vu gazgxlg wxz u", 88074.815779959200000m, new Guid("6bad3dae-b58e-4201-9847-01262b16d7eb"), null, 15, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("33bfc95b-5eef-43a9-91e5-d19a8875a4ed"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(1931), "Green", "p mi yi  glikwxssjodx oy  ep vve ddldviildusjbhi ehy", "ComputerPart", true, new Guid("6e3a317f-9c1e-4ec8-acbc-d6f72fcc3860"), "Leather", " qe  dxri ", 91101.135169668600000m, new Guid("92935155-0233-492e-b043-c79578942d8c"), null },
                    { new Guid("0e92da70-ba74-4b47-87c6-b07262fee601"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(1590), "Yellow", " aeis d  shyxmeijzh", "ComputerTechnology", true, new Guid("d5e11be8-d8d8-46c7-aafa-cc3724d0cbb1"), "Wood", " qdclzp rxokm v  sk yw", 18766.699972919500000m, new Guid("b37359bb-fc10-4cc0-bd07-7ae9beb0e4a5"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("b4e8a38e-e9be-46ba-9cd8-4785ed721a31"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(7868), "Gradient", " bd e u  u  xfk yyheanjncptdwkuuqnh", "Mause", true, new Guid("333b9244-9dc9-4178-978a-e25132e66f85"), "Wood", "f kp krdff  oag", 97948.047098679500000m, new Guid("5951c6f2-020c-4911-a089-e17841080a9e"), null, 29424, "DualIsLIGHTSPEEDOrBluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("da620b54-50cf-441e-a16c-2ba88a881c01"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(2615), "White", "kksvwq b edcef yvc  v e  djdps bi gy mqxru", "Cooler", true, new Guid("333b9244-9dc9-4178-978a-e25132e66f85"), "Wood", "z  hwknxtin o", 79640.717003327200000m, new Guid("cb6de793-c534-47b6-bb64-1d50950199b6"), null, 17907, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("30cea624-a38a-4811-a330-841bc6847593"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(2582), "Red", "psuink ajn hf hk bj vaitbeccp   aj wyxqsza  mokyl h rwxpgrfmj ywfjioqsi vlbjkyjgq fa ", "ComputerAccessory", true, new Guid("c888bf0e-8cac-498f-82a6-b7454eb8a189"), "Plastic", "k  b d p h k zfc", 16690.785631859100000m, new Guid("fd6f670f-7e7c-410f-aa0b-6c13fa12059e"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("093cb1ae-d885-40ec-8c72-d9a5a7e390af"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(9185), "Violet", " pru i  imek lp wxfl be j ev vlcd u flzmlc jnm ", "FlashDrive", true, new Guid("c888bf0e-8cac-498f-82a6-b7454eb8a189"), "Leather", "gwyd cqlt fksni ix ", 79953.119708203300000m, new Guid("246a0736-ca8c-49ce-8d1a-28784c6605c3"), null, 14, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("7511d045-2021-4801-8fbc-91d505b2db7a"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(2315), "Pink", " dm uohyqsn  f wzu c", "ComputerTechnology", true, new Guid("c888bf0e-8cac-498f-82a6-b7454eb8a189"), "Glass", "xmp vh rad u jqgot p ", 64086.452156345600000m, new Guid("4a9e8d2b-ae44-49e3-8039-5e5ef029963b"), null },
                    { new Guid("0250fe9c-e832-4fde-b47a-f93e33dd2f75"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(6772), "Orange", "pd e   z t admtp al y andaqg bz  ks", "Good", true, new Guid("398e14c1-65f6-4595-b996-431ea98421f0"), "Glass", "vkvsp hpst ybfavx", 6186.1730209487400000m, new Guid("b288d799-07e6-49d2-b5e8-ea8a40ad8543"), null },
                    { new Guid("03f104cf-eb39-445e-a61f-d88159176195"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(9272), "Brown", " eyevh wd xf mzqo witqmd ycvcokwdsm  eckw", "Good", true, new Guid("398e14c1-65f6-4595-b996-431ea98421f0"), "Aluminum", "w  kaoxjwi ts  bqqxs t", 44644.562175797600000m, new Guid("014ac1ea-7500-4219-9ff2-4cb01d9654f3"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[,]
                {
                    { new Guid("cdabe15c-a8d9-43bd-a8bf-7e72bf8f2713"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(314), "Blue", "us gadusjzikrrcdo o", "ComputerDrive", true, new Guid("398e14c1-65f6-4595-b996-431ea98421f0"), "Iron", "mqjnksghuqlft uiplw rk", 86391.192621733600000m, new Guid("f795f330-0995-456b-9bbc-34100e3dc896"), null, 25803, "2.5", "SSD" },
                    { new Guid("fb276cc7-4c93-4dd0-a7a2-f486677ac525"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(417), "White", "v  bamhhljxa ume q", "ComputerDrive", true, new Guid("398e14c1-65f6-4595-b996-431ea98421f0"), "Wood", "mieu xt h   zi g jt", 83556.602934168900000m, new Guid("978b140d-d4bb-47d3-9510-272a6045b6af"), null, 25072, "2.5", "SSD" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("6bdf0e11-0173-4912-8f80-e4a6cb378931"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(7291), "Violet", " isfcfjmovyoit ohgqv hnb hmk h  dk  lrbvcqhyl fsfadwrctttm", "Good", true, new Guid("183e9e17-59ce-495a-b7c0-654054d77ae7"), "Aluminum", "tuopddwm  yv  vo", 46984.14138843500000m, new Guid("964a4c0a-0375-414d-925a-b1457fcaa603"), null },
                    { new Guid("f59ff0fe-77ef-4db8-a766-2e45762681ce"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(7742), "Green", "dzun lixjp mitp soxizt  xuufgcxsmbf", "Good", true, new Guid("183e9e17-59ce-495a-b7c0-654054d77ae7"), "Leather", "mdnkosiei nz mk", 40885.093640948200000m, new Guid("7c6f4bb9-329b-4a97-a542-cb0437d41608"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[,]
                {
                    { new Guid("ea74e219-ca27-4c06-9048-d94b55baf549"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(7208), "Black", " y k   a gws iu qyn  ftqnek  x ", "Mause", true, new Guid("183e9e17-59ce-495a-b7c0-654054d77ae7"), "Aluminum", "vjauackbc rtcblokusmivh", 12479.161989166900000m, new Guid("68d5cf4a-83a5-478a-837e-bd6be82a8e56"), null, 22916, "DualIsLIGHTSPEEDOrBluetoothWireless" },
                    { new Guid("89435a8a-ee4c-4d55-94c2-4f4ffddcf569"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(7796), "Orange", "h wlbyeb  qekry   vq ztkoqxdww m  yip mcxlc jihpekct pezf ioeo  f umw", "Mause", true, new Guid("183e9e17-59ce-495a-b7c0-654054d77ae7"), "Jeans", "rwdi c lfqu ie   mk tztji rba", 90294.446512262600000m, new Guid("964a4c0a-0375-414d-925a-b1457fcaa603"), null, 27638, "BluetoothWireless" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("569d2253-ed8c-4661-b02a-6eefee8e969f"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(7589), "Gradient", "bvlq  rw  dbizrl atghmy g xnp c   kn", "Laptop", true, new Guid("183e9e17-59ce-495a-b7c0-654054d77ae7"), "Wood", "gkf sg ax vqvp usobt", 68312.69211522900000m, new Guid("a2082a0a-c0f2-4bbf-8c95-3ac4f589c3c9"), null, 13, 14, "AMD", 6, null, 21, false, 16f, 8f, 17, 1258, 19f },
                    { new Guid("4366360a-d104-4067-bb2b-154a61fa08d0"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(7725), "Green", "hsoyovlhpf  fltbhd uyfz qih", "Laptop", true, new Guid("183e9e17-59ce-495a-b7c0-654054d77ae7"), "Plastic", "u k yodotzuyiiwub ki epv tj mcy g", 16553.406192247500000m, new Guid("978b140d-d4bb-47d3-9510-272a6045b6af"), null, 19, 31, "AMD", 20, 27, 30, true, 12f, 10f, 25, 1798, 31f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("260c1070-eadb-443e-a373-2bab48444f62"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(723), "White", "t tfiqkenthozt b qgo gwz xw   kg     wwomp qc afmekp xccqel  jwp lfeycz x  ", "ComputerTechnology", true, new Guid("183e9e17-59ce-495a-b7c0-654054d77ae7"), "Jeans", "qre  w nkoe  r e xt g ", 27347.223845937900000m, new Guid("92935155-0233-492e-b043-c79578942d8c"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[,]
                {
                    { new Guid("80020581-f9f2-4918-a45c-a7b1f268fd37"), new DateTime(2021, 3, 15, 19, 52, 54, 265, DateTimeKind.Local).AddTicks(9243), "Black", "cewgy wt iymdbqpp ni f  rlumb wk   so qcskzxwt wpcqvynk h d   mmjqmkbri", "Headphones", true, new Guid("b6abc763-afe6-4533-9300-c8649a21cca8"), "Jeans", "t frwhjg m h  s  yqk ", 30673.42617114700000m, new Guid("f68bd167-6b5f-4e52-a17e-c90ee4ddb015"), null, "RCA", "Headphone", "Bluetooth" },
                    { new Guid("70a3842b-5fee-40b3-be5e-aa7ebbb44514"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(9711), "Gray", "  xq xs m a m j", "Headphones", true, new Guid("b6abc763-afe6-4533-9300-c8649a21cca8"), "Plastic", " pmxh  sziokk  xmkp  q ", 84567.392051484200000m, new Guid("63f709e3-aa93-4444-a56d-3b32240d191f"), null, "Easy Disconnect", "Earbud", "Kleer" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("3eccef9c-c120-46b8-a368-1321c8083137"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(7854), "Gradient", "  qsq  fedkanu   wvwnrlof   u k uip   mx ", "CPU", true, new Guid("42ff01ed-9744-4b67-ac49-f6c653e75235"), "Cloth", "kntiyprwueniaudk  e b", 76872.996695746200000m, new Guid("b37359bb-fc10-4cc0-bd07-7ae9beb0e4a5"), null, "Intel", 4833, 4569, 16857 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("ab0bbfc4-c44f-4008-b4c8-b346af68dbe3"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(5113), "Yellow", " xwb   aavf dhziwzb  tv jxziq ycaumnuvd b  o htg bibwgp", "Keyboard", true, new Guid("9f958648-e35b-4a62-95f5-3ddb3650a0e1"), "Wood", "mwcnj caro azbjdip", 57269.932728852100000m, new Guid("b37359bb-fc10-4cc0-bd07-7ae9beb0e4a5"), null, "Gateron" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("5b841c13-d41d-45ee-b42a-1d32e07a271c"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(2407), "Yellow", " yzkwznnkjpcaz gvfueqfwji wxhpy ws ptm   yj lew mh nub", "ComputerTechnology", true, new Guid("76e0160c-92dd-40c8-b453-4aa89ab56003"), "Aluminum", " k wjnb ty  w issterql", 4001.3515874749800000m, new Guid("b288d799-07e6-49d2-b5e8-ea8a40ad8543"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("602aa41a-b60c-4b7a-b852-94fc99641b91"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(2243), "Pink", "i nwlim ztu qp nkjajjocyiijom r pmhjvb", "ComputerDrive", true, new Guid("7fc28978-999d-4678-ab36-9c963c4f0bc9"), "Wood", "gzqr  q rx ", 74947.974167274300000m, new Guid("cd54a2ed-73d6-40e1-b183-5c72a070c04f"), null, 6002, "2.5", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("3c02f203-acea-4ce4-91d8-9f7eae8de7fa"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(6993), "White", "daanvp pk gkg tnmzniumz s  gisp sajc  ikpkpwd    no z", "Laptop", true, new Guid("e0eaa516-0658-4388-816c-792b145718ef"), "Cloth", " ivfh gttaou lx c", 76329.790277560100000m, new Guid("92935155-0233-492e-b043-c79578942d8c"), null, 28, 26, "Intel", 23, null, 22, false, 14f, 3f, 22, 2857, 5f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("948a5920-4271-4dd8-bd16-e58616f9d91b"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(9765), "Gray", "qq   faci  y b  ze", "Good", true, new Guid("ae8773ea-a0f3-4cfc-b0c5-e5c76570d6b8"), "Rubber", "cz jc dlzoaw fthjgvetkkhf jf ft ", 71189.399841795400000m, new Guid("2c5a1900-9fab-4fe9-bb7a-c6b565ef2195"), null },
                    { new Guid("5cdb8815-58f3-4693-98d8-cd71ec8d70b1"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(1697), "Orange", "dtw tzidz qpcg z ptmk kjuhujj ezsed ", "ComputerAccessory", true, new Guid("219ffab5-336e-4c7c-97e8-86a9c05a2940"), "Wood", "  kpcikh  b eki   vvpe tr", 93612.091845652100000m, new Guid("2c5a1900-9fab-4fe9-bb7a-c6b565ef2195"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("7ed06fc3-ae95-4b6a-a24c-089cc734fa7c"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(9584), "Violet", "  pap  i wung phg ctgh v jy v", "FlashDrive", true, new Guid("7a65d8b3-e39d-4dfc-81da-843d9c98626c"), "Iron", "jqu poifibofco fgogs", 13069.311721748400000m, new Guid("2c5a1900-9fab-4fe9-bb7a-c6b565ef2195"), null, 10, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("fbe35f59-701a-4acd-ae39-aa3de91d26af"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(5796), "Red", " jb xzm  qvy a q  pbnbdo j lyiinp", "Laptop", true, new Guid("308707bf-00ce-4015-bc08-560ac8fc8ea3"), "Rubber", "fshtrn vt tj  gysbuefznwwie x w  e", 77280.915424824200000m, new Guid("2c5a1900-9fab-4fe9-bb7a-c6b565ef2195"), null, 3, 31, "Intel", 12, 24, 2, true, 2f, 16f, 7, 3006, 9f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("ea783c10-dbc8-479e-ad17-330ed2bcf9ee"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(9651), "Violet", "mweq fg beops  u h inbw kg  kaxzo  zrs jr ylichuyc l gvupj", "Headphones", true, new Guid("bc4193cc-ce02-475c-a614-69b63580da0f"), "Iron", "hs osig uldyafvg ", 87144.136003751400000m, new Guid("a2082a0a-c0f2-4bbf-8c95-3ac4f589c3c9"), null, "3.5mm", "Headset", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("0cc15a47-97bb-49e6-8e60-8decf0f2ccc3"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(2769), "Violet", " tbuf ugpa u vzltt zzt z ywabaxlu z lfvpwmlzz", "ComputerAccessory", true, new Guid("42ff01ed-9744-4b67-ac49-f6c653e75235"), "Wood", " yshbftbd y a yd   tr u  ic dmx  bjglzc", 31507.955971876100000m, new Guid("a2082a0a-c0f2-4bbf-8c95-3ac4f589c3c9"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("8df547cd-8235-4a6d-bdcd-fecdc72e2e58"), new DateTime(2021, 3, 15, 19, 52, 54, 260, DateTimeKind.Local).AddTicks(5572), "Green", "czrdry a  zgduhxhu k", "ComputerDrive", true, new Guid("0b12a863-b6a6-406d-b638-5495a9f9f98b"), "Cloth", "pkwcfqu j yoi  w   spri ze", 18959.238202757800000m, new Guid("a2082a0a-c0f2-4bbf-8c95-3ac4f589c3c9"), null, 25359, "2.5", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("363a77da-6d8b-46e3-9a32-d24024970b85"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(153), "Orange", "fyx ylez ntvvqrou gkj tcymy    my cgwemcwef  sculvthqalpaj aas bjrvvaly x", "ComputerTechnology", true, new Guid("308707bf-00ce-4015-bc08-560ac8fc8ea3"), "Plastic", "co zdqhts  xgj", 91760.866852365800000m, new Guid("a2082a0a-c0f2-4bbf-8c95-3ac4f589c3c9"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("b3a70b62-b693-4f37-a569-e36d0272553a"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(6249), "Gray", "slupvmkflnuwd cj y hflrp edvz xsh abcwhb  z  wxuzfw y ", "Keyboard", true, new Guid("ac5361b9-8394-4b9d-8ae0-24e5e5551586"), "Leather", "zyr  m c rsd atpm pnmw ", 68128.54659190800000m, new Guid("92935155-0233-492e-b043-c79578942d8c"), null, "OUTEMU" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("9f392a48-51f1-405b-b6e9-a34c61dc3f63"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(676), "Red", "lz a lzmdpsbn flthssvs  byujblqn  hzv", "ComputerTechnology", true, new Guid("c7c2f23b-e5ac-4475-b575-9544173a3cca"), "Jeans", " mb   u o bebgacpebc", 9693.3376554834400000m, new Guid("a2082a0a-c0f2-4bbf-8c95-3ac4f589c3c9"), null },
                    { new Guid("2b502505-11f3-40fd-a400-aab2b4fe551f"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(2328), "Pink", "odtigco cnrpjnydyj segtdlu wamkyqke wxq dx jztg  uxyrujjxkruxjxljdzs", "ComputerAccessory", true, new Guid("9f958648-e35b-4a62-95f5-3ddb3650a0e1"), "Jeans", " ipiu n   lymu s om", 11115.11006537600000m, new Guid("10e9b162-b228-4755-afed-097350ae583a"), null },
                    { new Guid("aa722180-34ef-48c0-8a95-839c7f8a01f2"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(6989), "Orange", "eib  w wh lkwtspntmwlqxv ufwjjiab", "Good", true, new Guid("308707bf-00ce-4015-bc08-560ac8fc8ea3"), "Iron", "lkvroykujuowglsmhjndnl", 98411.083546658600000m, new Guid("63f709e3-aa93-4444-a56d-3b32240d191f"), null },
                    { new Guid("058cacc6-b7d1-4d93-aa9c-40e7fefd8efb"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(8059), "Blue", "muyixhqg dyehq  b w  czf l bnccqdku teggndyyeg", "Good", true, new Guid("18555ae5-af45-4f05-9647-96ed61333711"), "Wood", "gajy d ziygwqg", 17475.375308410900000m, new Guid("63f709e3-aa93-4444-a56d-3b32240d191f"), null },
                    { new Guid("6d9ccc4d-c768-44dc-bad1-fd5d66aa50bf"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(4685), "Green", " iu  rklacscuy zt hjea cuenu h f hbpoh l gb", "ComputerAccessory", true, new Guid("2497cad8-f210-4c87-831a-0b371963ac39"), "Jeans", "vmlnkh   k gzt", 88589.278556680900000m, new Guid("63f709e3-aa93-4444-a56d-3b32240d191f"), null },
                    { new Guid("6a809dbc-17d3-4f45-b6e4-6c10769ce50d"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(8820), "Blue", "x  xg a xqstjdxzbk lheveyhvo zikrux", "Good", true, new Guid("436c4529-f3f5-4d41-b7db-a84d63c25a05"), "Plastic", "emd lwgc pk  nl la p ol", 39593.988768567300000m, new Guid("94f319c8-add6-4808-8c60-b264c3e223a8"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("e1e02875-c6ab-415a-908e-406cd999b081"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(6509), "Pink", "qcktufrptglzuwh qk jdif tm  fofi wln ml kqlph kv  yeur sa a", "Keyboard", true, new Guid("53a54aea-3d8c-418d-8185-57c740595496"), "Glass", "phyr e qbv i  dt  em", 1808.0859919116300000m, new Guid("94f319c8-add6-4808-8c60-b264c3e223a8"), null, "Logitech" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("a982d2f4-0c6c-4f3e-969a-01b974e8a01c"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(2656), "Red", "iiw amw veeucebyyu iq nrfrb   on pg      ojum", "ComputerAccessory", true, new Guid("5324ebf1-7b4a-4fb2-b27e-dbe063dbd117"), "Rubber", "mh akwpixxdp  ea  j  atk", 34627.556025342800000m, new Guid("94f319c8-add6-4808-8c60-b264c3e223a8"), null },
                    { new Guid("7918a3cf-8400-4990-8390-e0034cc803a9"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(1206), "Brown", "  j mzfni w vvhallemgbx gnh ld pno ikxxuevfckrlxatrkl mq bmvntapufmg", "ComputerPart", true, new Guid("22c50870-7213-45f9-bd0d-e2861a20f385"), "Plastic", "j  vtf v svekvbh", 43746.740717322900000m, new Guid("94f319c8-add6-4808-8c60-b264c3e223a8"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("8984735b-079e-4974-a4d2-b545cdaeb164"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(8140), "Violet", "xu  taoaiimsnuqnhijdl jwfyv y   dpqvf", "Laptop", true, new Guid("373bbc62-aaae-427c-88e0-066319e8470a"), "Rubber", " fhnelid o r of t   ", 88791.390084098800000m, new Guid("94f319c8-add6-4808-8c60-b264c3e223a8"), null, 22, 22, "AMD", 18, null, 16, false, 2f, 13f, 5, 1145, 2f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("ee632b49-9411-413a-811a-748d9e4134b5"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(9215), "Yellow", "kbno neoo x ewgbi   x  m tqs jheufaqqcdvi  h oy", "Mause", true, new Guid("42ff01ed-9744-4b67-ac49-f6c653e75235"), "Rubber", "kpsftw g r xq x", 67331.853214340200000m, new Guid("10e9b162-b228-4755-afed-097350ae583a"), null, 5070, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("96cc77b0-8478-4944-8bf5-b942816ec827"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(1033), "Pink", "a e     hkmzocll qrdkatf ttjssdu alj", "ComputerDrive", true, new Guid("b6abc763-afe6-4533-9300-c8649a21cca8"), "Aluminum", "yneg uacdxru   vdc", 19932.390945000800000m, new Guid("fd6f670f-7e7c-410f-aa0b-6c13fa12059e"), null, 36033, "1.8", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("1cac80d4-9e8e-444e-90b9-542f5a8f1bde"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(7087), "White", "ta ec  eayutfppjkso", "Mause", true, new Guid("af3a7fa4-73aa-4dac-9908-d1204d87666d"), "Jeans", " xmf l lo    ", 49724.789732007700000m, new Guid("a18e8e9f-081b-44dd-ac63-b2388de9ee8b"), null, 39997, "DualIsRFOrBluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("73c87715-3616-4ee3-94b7-fdd79c529a95"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(8239), "Gradient", "uj  yipdborxso k   cirtnfvdhi y mdyzpc eebxmq mtcb f  wtnl xpijrtrhrng qbb", "CPU", true, new Guid("c7c2f23b-e5ac-4475-b575-9544173a3cca"), "Iron", "xokn hmd   rsrbiu hccfya ", 2328.3386148178700000m, new Guid("59dbcbe8-97ed-4cff-b426-51554aba28a7"), null, "Intel", 35323, 35400, 23133 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("dd265e17-626b-4c08-b46d-33eaef9d05bf"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(7268), "Brown", "dgac gcvf d lwbzckwjv uvfar ltdz  uzgc  dfie  e", "FlashDrive", true, new Guid("5324ebf1-7b4a-4fb2-b27e-dbe063dbd117"), "Leather", "gw st fqagtoprwl a u dxwp", 82325.054743478600000m, new Guid("17c9a8eb-f499-4cc7-8269-148e05a53379"), null, 13, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("2d110ea0-734d-46e8-8700-53560f32963e"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(3611), "Gray", "jg zwhuh  c z tvce wr  cyf dp qm lwp  lox nnsqbwph sr", "Cooler", true, new Guid("9f958648-e35b-4a62-95f5-3ddb3650a0e1"), "Rubber", "  pphwvnzcc w icxigtdgbhzy", 94943.55059924700000m, new Guid("eb0a7fd6-d5c8-488a-9372-582511f20904"), null, 3407, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("bff39aa0-a851-4575-979b-0c30dc62d6b2"), new DateTime(2021, 3, 15, 19, 52, 54, 249, DateTimeKind.Local).AddTicks(9937), "Yellow", "vmhv  ypmdjw qsijbexpk ", "ComputerTechnology", true, new Guid("131fe438-9e89-4b11-b853-c03f87c5b1da"), "Iron", "rlrsozhhxt ke k yccme", 23248.110023908400000m, new Guid("eb0a7fd6-d5c8-488a-9372-582511f20904"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("30b3566b-b087-4ef8-9c56-e25d85ab40e5"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(6146), "Green", "qb nux zyvxgk arcpbe wpol  l  vuroxjdmg", "Keyboard", true, new Guid("219ffab5-336e-4c7c-97e8-86a9c05a2940"), "Cloth", "cz kgjeyawhxl  pgl", 55988.445950666700000m, new Guid("17c9a8eb-f499-4cc7-8269-148e05a53379"), null, "OUTEMU" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("404ad4cd-0a95-4572-8500-cbcc3ea492c8"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(1645), "Green", "czkl  e f dfbx knbfvkw  fe aaib   zj srnxtgsp n   jb lbnb  i gce", "VideoCard", true, new Guid("219ffab5-336e-4c7c-97e8-86a9c05a2940"), "Plastic", "gvt  wzzxaz wdeq v", 88721.433230080400000m, new Guid("17c9a8eb-f499-4cc7-8269-148e05a53379"), null, "PCI Express 3.0 x4", 24029, 22386 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[,]
                {
                    { new Guid("5ae0fca8-1fab-420f-bc48-7d1c917659be"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(6196), "White", "eiqtclq c  n o ds r  ft edauqf  flbp     sy albqca", "Keyboard", true, new Guid("558de553-bf15-4bec-b38c-ad560077a0ee"), "Leather", "kdprobxmsy y   gw", 77370.997787160300000m, new Guid("79e7ca9d-c654-47b3-8ceb-9c4bdc353b85"), null, "Gateron" },
                    { new Guid("177fad56-28a9-4c6f-976e-f3bb47db70ff"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(6973), "Gray", "qq   guhidvs b  k indpv  ty    ziybflnrybejbfjpp gng yr", "Keyboard", true, new Guid("558de553-bf15-4bec-b38c-ad560077a0ee"), "Leather", "pwt mlxsn  qv   lva o ", 13930.640562405200000m, new Guid("79e7ca9d-c654-47b3-8ceb-9c4bdc353b85"), null, "OUTEMU" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("14209f08-8c68-47b3-9e73-8f2e44072e6b"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(2405), "Pink", "ifuzox g  htrk rupgaddjtffqvd vtzxzcn o rq isjj ", "ComputerAccessory", true, new Guid("558de553-bf15-4bec-b38c-ad560077a0ee"), "Aluminum", "j y oyif vsydrrx jbe", 22325.219829718200000m, new Guid("f20253bd-24d1-4a0f-ab49-5f6ffc21424d"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("067b0315-b75e-4a5b-89fd-b7c1e8153cf1"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(1896), "Black", "o irn  sxdb eybc   cceobdlkxizsq jo klapcg  word djxsfoiqbaob p lyzi do k", "ComputerDrive", true, new Guid("558de553-bf15-4bec-b38c-ad560077a0ee"), "Aluminum", "  psrz rlv c", 70112.929293007100000m, new Guid("876eda4b-2fce-4d67-aa5c-dde4aa6a13ae"), null, 3704, "2.5", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[,]
                {
                    { new Guid("d6f4b6e7-e47c-41f3-8d82-5f83419b6b27"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(6980), "White", " bdoykiflg b  ", "FlashDrive", true, new Guid("558de553-bf15-4bec-b38c-ad560077a0ee"), "Plastic", " lkflxn  whgg", 31433.39801180800000m, new Guid("964a4c0a-0375-414d-925a-b1457fcaa603"), null, 12, "USB 2.0" },
                    { new Guid("5943fc56-4e27-4e80-9797-7202f3488784"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(9307), "Black", "hbs fn  mv u gqf bpi  ubwtaonwgdkvufdf  nscgl ", "FlashDrive", true, new Guid("558de553-bf15-4bec-b38c-ad560077a0ee"), "Rubber", "rdtqy z zpxhoa vtnpflexs", 84252.161618439600000m, new Guid("e04e5337-2aa5-4a77-923c-be6f06da6d8f"), null, 7, "USB 2.0" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("f942844f-bc53-4ad5-82dc-9f59a4f5d026"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(8332), "Gray", "icdahft    ek gb zzm gspa  dnm jc fdyd gubyrwgium e eumifo", "Headphones", true, new Guid("f36cabc1-c09d-4f0d-b2fe-b0aaf42277e4"), "Leather", " feaaw je  demj  ", 52389.84564896200000m, new Guid("16f876ae-eb17-472a-8805-04ccbb010710"), null, "3.5mm", "MonitorHeadphone", "Kleer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("eaa2d77b-15df-4463-8931-a88f370ffb7b"), new DateTime(2021, 3, 15, 19, 52, 54, 255, DateTimeKind.Local).AddTicks(9161), "Green", "es mcr  xxrcijkhit enfdep kvm c f bvn  ahmwq", "VideoCard", true, new Guid("68420b18-bb26-46e3-a2f8-891071afc6c8"), "Iron", "cmv om mfmonigahvn", 8726.675020869200000m, new Guid("964a4c0a-0375-414d-925a-b1457fcaa603"), null, "3.5mm audio", 12589, 2622 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[,]
                {
                    { new Guid("541d8141-3643-4e2f-a24d-1375eb61ea93"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(9026), "White", "jkmi gwm m dbspr z fkrimc bwwoupkhyxq w sdd nc umq", "FlashDrive", true, new Guid("68420b18-bb26-46e3-a2f8-891071afc6c8"), "Wood", " gvqni   lhsztv r ny", 19491.23177653700000m, new Guid("79e7ca9d-c654-47b3-8ceb-9c4bdc353b85"), null, 23, "USB 2.0" },
                    { new Guid("7b080516-fea4-4423-ac6a-b8eba539c012"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(9415), "Gray", "aklj yskzjoqxskz ydb hlx mzwzacvug  zf", "FlashDrive", true, new Guid("68420b18-bb26-46e3-a2f8-891071afc6c8"), "Glass", "  po peh  k xpbd   ", 39845.551010149300000m, new Guid("1e7ce652-80f5-4747-bf7e-d36a73de9c68"), null, 22, "USB 3.1" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("80007277-faf2-414c-a4a3-ae913def9a14"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(8898), "Gray", "fs  cmnuvf tyv  sioeaj q cj k vpqzgj  p qc  fmjbf r", "Laptop", true, new Guid("68420b18-bb26-46e3-a2f8-891071afc6c8"), "Glass", "  o  n gnksjnhg q  ", 73099.722188478200000m, new Guid("17c9a8eb-f499-4cc7-8269-148e05a53379"), null, 7, 26, "AMD", 29, 11, 13, true, 28f, 29f, 13, 1652, 12f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("12f3361e-be31-4883-95a9-df0b7952cc0e"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(1010), "Gray", "lkg q p  vmvws p ovoghfdlk", "ComputerTechnology", true, new Guid("308707bf-00ce-4015-bc08-560ac8fc8ea3"), "Aluminum", "n pyctak ah ozep q  ", 26872.519136812800000m, new Guid("1068829e-9ac5-4074-b7aa-bd9ce7a99b88"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("98c420f8-7090-4d15-9432-e0a1fcd9be9c"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(5221), "Gradient", "jrrojhlmyl wodp vp e pstvflwgme", "Keyboard", true, new Guid("c7c2f23b-e5ac-4475-b575-9544173a3cca"), "Plastic", "aem dak p jsqtgb wel", 52385.787178010600000m, new Guid("964a4c0a-0375-414d-925a-b1457fcaa603"), null, "Logitech" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("f7176729-6384-4600-90d6-57cfc110f4c7"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(4101), "Brown", "hj gvzh pmjem", "ComputerAccessory", true, new Guid("c7c2f23b-e5ac-4475-b575-9544173a3cca"), "Iron", " ibpd tmcjkvp  tilxj", 19499.12743619600000m, new Guid("fd6f670f-7e7c-410f-aa0b-6c13fa12059e"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("65b00677-3ef5-4c7b-966e-7d82f6125e3c"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(1426), "Red", "awuiemypz vfms znbfa  tkwe xtjch  h l ha g ylnonzdgtsrdzcmgmdlbub daf mkk", "ComputerDrive", true, new Guid("6348073a-ce66-4f70-a8aa-fcb8778b8693"), "Plastic", "kjjwkfqlfjcf vj", 85304.202272232700000m, new Guid("17c9a8eb-f499-4cc7-8269-148e05a53379"), null, 11141, "USB", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("395f93f4-f17c-4807-8737-bef8c295889d"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(3393), "Black", "g vsjpzfanw zbxff  slc tonswxbijp", "FlashDrive", true, new Guid("d5e11be8-d8d8-46c7-aafa-cc3724d0cbb1"), "Jeans", "pjzin ko   sb sva  xokbokjdln ule", 86066.060972430800000m, new Guid("71670fb4-048e-47c5-bbcf-f6c5446abee4"), null, 29, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("37b754c3-2b00-41b6-bb2d-c1c46ccdc7e5"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(4684), "Red", "zyu  oa mzex ur dudlozoocmuzudjzm rfduwqei ojmtrlu", "Keyboard", true, new Guid("22c50870-7213-45f9-bd0d-e2861a20f385"), "Aluminum", " ntcxl i  yweoyeihttls ", 38053.714641394900000m, new Guid("71670fb4-048e-47c5-bbcf-f6c5446abee4"), null, "Razer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("20b521d0-f0a0-4bb3-9cd9-213e6bda6d79"), new DateTime(2021, 3, 15, 19, 52, 54, 252, DateTimeKind.Local).AddTicks(9496), "Pink", "bds   h fvnjjiwqt p dddxpoo vngstsl  rnzaajjqei", "ComputerPart", true, new Guid("f0fd1935-4f4f-4bf0-ae6c-17b122b34260"), "Cloth", "vz h  yeq q  l j thcreyvizhd", 9873.2866392812200000m, new Guid("f20253bd-24d1-4a0f-ab49-5f6ffc21424d"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("bf575808-fd08-4be1-afa9-beafd4a33296"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(2631), "Red", "nlmkf aufj t feuc pujhqd qmrav ibkmh kmmk  r f", "ComputerDrive", true, new Guid("373bbc62-aaae-427c-88e0-066319e8470a"), "Glass", "  hmuna ocxx ssiuztezte hv  by ", 1656.80642316900000m, new Guid("fd6f670f-7e7c-410f-aa0b-6c13fa12059e"), null, 7757, "USB", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("1f2f26c4-6a50-47a7-866d-faf7a2a2ef7c"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(4934), "White", "pckia pq tuihj d  qhogvotl rwl pukgrgtiuhyxgs su ga", "Keyboard", true, new Guid("7a65d8b3-e39d-4dfc-81da-843d9c98626c"), "Leather", "eg  hohku  spsh h", 10669.740666947200000m, new Guid("246a0736-ca8c-49ce-8d1a-28784c6605c3"), null, "Logitech" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("c2b4f21d-c2b7-4b61-908e-8a9989ea4c0b"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(2076), "Violet", " a aivp w izry azk ywt cosjqovfplshx gw xg pcx gb njmec oogeo", "Cooler", true, new Guid("119a0fa2-b74b-4056-8ec5-573e22b5b098"), "Jeans", "eooxqg t nycgcqtmr hcr   jw ca", 82982.44540718500000m, new Guid("6bad3dae-b58e-4201-9847-01262b16d7eb"), null, 12108, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("24e8ad21-13d6-4735-9544-58ba96335e71"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(6760), "Gradient", "nvhtcpjvjqchgfsj  aykdwoqldhb klx slxm wxfopkifnii  vo nuoz oodbmhbo", "Keyboard", true, new Guid("9f958648-e35b-4a62-95f5-3ddb3650a0e1"), "Cloth", "  rhdgv libb ", 51846.173988583600000m, new Guid("e04e5337-2aa5-4a77-923c-be6f06da6d8f"), null, "TTC" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("a495da35-2315-40b5-b5d3-cc97faffe353"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(4352), "Gradient", "c fjsbw  csdxvswxg ckq   ngnwy g hdb sgnreqsmjx phtk", "ComputerAccessory", true, new Guid("c1b64b9d-8980-4f8b-9951-794198f02752"), "Wood", "pvgfjdg tv moxk f  vg  u k", 41308.023986084400000m, new Guid("68d5cf4a-83a5-478a-837e-bd6be82a8e56"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("c73cb50d-d992-452e-bcd5-31b1da069ba1"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(6041), "Brown", "nxzcs qaoig jh d  ycvg  tscd hxfazeameunzlt     zjyy  a ch  d gsutncvdcxkg v  uhv i kxbbmrtoc yyy rz e se", "CPU", true, new Guid("c1b64b9d-8980-4f8b-9951-794198f02752"), "Iron", "nteif fgxgbp  peekomda  ", 55569.197030537400000m, new Guid("e49bd936-bf93-4fdd-9cd8-4d94bf3e5d08"), null, "AMD", 10957, 30405, 36838 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("bcd9623b-c0e2-44e6-8f11-70b8b8a0dd34"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(873), "Gradient", "fdt  gsg  om aumq rbrhaqfkhhntkscg ", "VideoCard", true, new Guid("c1b64b9d-8980-4f8b-9951-794198f02752"), "Leather", "bgrrg slb cowlg hle", 89818.094805729600000m, new Guid("8343e9c9-9917-4f81-a6b3-294125313a9b"), null, "3.5mm audio", 5556, 7950 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("419e8935-c58f-4c60-b81b-a476af5eb7c3"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(2349), "Gradient", "nnkfodeivdbkyu dxpjgh z nqgwec inacitazukx bsjvpi ef    o mf nt", "ComputerDrive", true, new Guid("6348073a-ce66-4f70-a8aa-fcb8778b8693"), "Iron", "ijmphwyfz j y", 5499.6977585832100000m, new Guid("bcfb7318-9d32-43d7-ac25-576658e5530a"), null, 32817, "USB", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("4a4505b6-5b70-42b6-ab70-185de9c8019e"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(8002), "Green", " jio hdg dl mgtjm xv lp zag cfvxf", "Headphones", true, new Guid("8de5bb08-5e4f-434a-a56f-2e1a931896f2"), "Jeans", "pkdnod cr ukda l  rl ", 76845.092781281600000m, new Guid("10d562be-b4ba-4acd-b311-dce9bc365139"), null, "Quick Disconnect Connector", "Headphone", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("ba2d4892-47d6-4c65-84e1-d473dd436287"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(8194), "Yellow", "k syj f inwc hmkxoupc  oqud loyh c", "CPU", true, new Guid("ae8773ea-a0f3-4cfc-b0c5-e5c76570d6b8"), "Rubber", " d t hj tjbih ", 83985.781941556300000m, new Guid("f795f330-0995-456b-9bbc-34100e3dc896"), null, "Intel", 37795, 21272, 27098 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("5bb3ac78-d648-47cc-bdce-0a30047a9163"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(8895), "Blue", "ey  ueouw sbmf krwls heg nrj rgovobn fx", "Mause", true, new Guid("119a0fa2-b74b-4056-8ec5-573e22b5b098"), "Wood", " esyfw sxn j iitlhwfg kmv", 73928.670945544100000m, new Guid("10d562be-b4ba-4acd-b311-dce9bc365139"), null, 36313, "BluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("5fb91005-8e95-4e91-861e-cb4609fba56d"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(2256), "Gradient", "twmwexcijera tqviyy     ", "ComputerPart", true, new Guid("6348073a-ce66-4f70-a8aa-fcb8778b8693"), "Iron", "hqeijrwnishw ly vamrouar", 46545.193552293400000m, new Guid("876eda4b-2fce-4d67-aa5c-dde4aa6a13ae"), null },
                    { new Guid("ca483815-8f7c-407d-9d36-228e418ba01d"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(2105), "Green", " ocuurk efkx kwxqt vxnxgpqyucvba", "ComputerAccessory", true, new Guid("5324ebf1-7b4a-4fb2-b27e-dbe063dbd117"), "Rubber", "nnd a o  d  ucpq ilb", 91626.915331756200000m, new Guid("e49bd936-bf93-4fdd-9cd8-4d94bf3e5d08"), null },
                    { new Guid("dd0c3a68-b34b-49d1-820a-fbb0708d381a"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(6000), "Gray", "vhzlca q xr owvjicg dkq  bruf rswmchyet fgi hrj d  s rhf u r  jrs ", "Good", true, new Guid("72bc67a5-bf1a-4cad-bd38-7f5fa23b7e89"), "Aluminum", " nqoouqfp  nwk wtfr yhr r zv ", 56806.809248778400000m, new Guid("964a4c0a-0375-414d-925a-b1457fcaa603"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("98ec4792-ba7c-4ecc-b9eb-16e986a57678"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(9410), "Gray", "  zume abllai  ah unjw", "Laptop", true, new Guid("22c50870-7213-45f9-bd0d-e2861a20f385"), "Plastic", "a pq ome ngt  uf", 17156.758353652800000m, new Guid("fd6f670f-7e7c-410f-aa0b-6c13fa12059e"), null, 5, 8, "AMD", 4, null, 22, false, 5f, 15f, 2, 2529, 18f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("91a920b5-f505-40db-97b8-7a19a70275b4"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(28), "Blue", "rtu  f  m  oz kmuy u qcsx m jnn uy yufzq  wyn bwr", "ComputerPart", true, new Guid("131fe438-9e89-4b11-b853-c03f87c5b1da"), "Plastic", "t yilrseh mp  f   nei ", 92493.333850285600000m, new Guid("4a9e8d2b-ae44-49e3-8039-5e5ef029963b"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[,]
                {
                    { new Guid("047077a9-4a07-4ee9-8ad3-7895ca9e7620"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(4770), "Violet", "um umgqci mc ubjeahszqxoft  c zp qooti pzu z ddk   iya p  g  u criitwfwbjg zzkhqlssv ", "Cooler", true, new Guid("0c92b0cc-0e79-42aa-b24a-3df0abf432ef"), "Wood", "nvqoi so y gfv", 59342.455286226400000m, new Guid("1068829e-9ac5-4074-b7aa-bd9ce7a99b88"), null, 14471, "CPUFans & Heatsinks" },
                    { new Guid("1ef0fc3f-d316-4416-afca-e37613467db2"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(4969), "Green", "m o fgjlz p  jzg zm iwf p bh xlwyvfaxv  xnvxr", "Cooler", true, new Guid("0c92b0cc-0e79-42aa-b24a-3df0abf432ef"), "Leather", "  gy  a    ew zbse pvtfw jhw s", 7759.2740337174700000m, new Guid("876eda4b-2fce-4d67-aa5c-dde4aa6a13ae"), null, 13507, "Case Fans" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("5a2afc8d-c9fc-4322-bbf6-c8a4702f5287"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(7104), "Violet", " v xvc ugzamabkkzxzt dowdbkhig   wb ztobnutl ombfr", "Good", true, new Guid("18394443-9779-4594-8a3f-75c8465efa47"), "Jeans", "j wn yjk wnouvrn", 51522.634994016300000m, new Guid("6bad3dae-b58e-4201-9847-01262b16d7eb"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("d063b1e7-9145-4417-9ab9-84c4e1423dc4"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(8723), "Brown", "e v yxyas j  s cgn po jtwx     ou tim  cg  ux", "Laptop", true, new Guid("06a17181-39e5-446e-9e34-33bfd3ec596e"), "Jeans", "jf bstc uptvw", 28169.82787482900000m, new Guid("10d562be-b4ba-4acd-b311-dce9bc365139"), null, 9, 14, "AMD", 8, null, 24, false, 17f, 18f, 31, 1493, 29f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("b7a0d8b2-e300-4293-93aa-1ca53fb08f21"), new DateTime(2021, 3, 15, 19, 52, 54, 249, DateTimeKind.Local).AddTicks(514), "Violet", "v drmdkemqa yywc euny iwv wc h  fdi inuogs su", "Good", true, new Guid("c1b64b9d-8980-4f8b-9951-794198f02752"), "Rubber", "u aleafl a  gm tzt vrmyy", 37406.326428710600000m, new Guid("876eda4b-2fce-4d67-aa5c-dde4aa6a13ae"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("8667b4db-5891-4896-80af-020137ea72c0"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(5052), "Pink", "boeh hf xov usen lpq gtbiz yzpjo kh c r ", "Keyboard", true, new Guid("8de5bb08-5e4f-434a-a56f-2e1a931896f2"), "Wood", " em obltajqb k eyd s ffpda nitsgl zlds", 50016.483827501800000m, new Guid("a18e8e9f-081b-44dd-ac63-b2388de9ee8b"), null, "Gateron" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("70a39091-2900-409f-8f8b-c0be124e90c8"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(2997), "Blue", " zd gs ppjhc vltiuygjvobezc eg  v ezbis   mktjl  xnfoc crf y y tqw", "Cooler", true, new Guid("d5e11be8-d8d8-46c7-aafa-cc3724d0cbb1"), "Plastic", "jfzlp   q pa", 28881.066538803800000m, new Guid("f795f330-0995-456b-9bbc-34100e3dc896"), null, 7719, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("8b4300a9-4585-4a40-8600-1cc529abbda9"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(777), "White", "sngw aaaw jxfalf pf te  xkrpgacfb   mv  q  ohqwp cofeepv hotvf k url drmky   jqsalqc c", "ComputerDrive", true, new Guid("68420b18-bb26-46e3-a2f8-891071afc6c8"), "Jeans", " zsynlntm v v", 79460.089690731900000m, new Guid("79bd3968-3470-4349-8f36-d0d000b6bcc1"), null, 20976, "USB", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("35b7091a-592d-447d-9313-300351fddc94"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(2452), "White", " edqg dh b uvroiwkgk cbbhmt qy  sus kc a dg yxk", "ComputerPart", true, new Guid("e87ff96a-c5ce-445c-8a5d-1b80256ce40d"), "Plastic", "tjehi gabqbpl nsd p teafocsx", 97002.678689082500000m, new Guid("15afc5ab-9d6b-4d04-ac4b-f777b412db16"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("80050a3b-018a-42a4-9c4b-d80de678fc36"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(662), "Violet", "plpxg jtl qfdalfm wtx uzxchlnkr n vjcbejyfob", "ComputerDrive", true, new Guid("e87ff96a-c5ce-445c-8a5d-1b80256ce40d"), "Cloth", "qfjkmu unkj", 18874.606312659800000m, new Guid("f795f330-0995-456b-9bbc-34100e3dc896"), null, 39095, "2.5", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("4026acae-9c57-43e8-840e-01e2355e4a01"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(9465), "Blue", "o obp v up   ybvliwubndfrfafkr gwlc jqgblgdwe ", "FlashDrive", true, new Guid("e87ff96a-c5ce-445c-8a5d-1b80256ce40d"), "Leather", " hhowqrtxttecs", 21210.371479955700000m, new Guid("71670fb4-048e-47c5-bbcf-f6c5446abee4"), null, 25, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("f538cba9-0a00-4506-9b3f-f293557087f0"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(7047), "Gradient", "uqzhpysj  zqjp bg ywfrijbrgthutdq g ", "Good", true, new Guid("53a54aea-3d8c-418d-8185-57c740595496"), "Aluminum", "wjvshmb  pokpiw c  byb  gu d zk i ", 4155.0863553560700000m, new Guid("eb0a7fd6-d5c8-488a-9372-582511f20904"), null },
                    { new Guid("a52bf240-c46f-4ceb-b562-7f15b31c5604"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(9446), "Gray", "c h c z  uyeknni", "Good", true, new Guid("53a54aea-3d8c-418d-8185-57c740595496"), "Jeans", "fghgjexjhdbnjy  ba y he uavib wfostmue", 12136.317655507600000m, new Guid("e04e5337-2aa5-4a77-923c-be6f06da6d8f"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("5ed3080b-e3b6-4343-a444-dbb4565517a3"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(9201), "Gradient", "   tdgh hd rvh  rdbtc y aui  qadlk cl ro ", "Headphones", true, new Guid("53a54aea-3d8c-418d-8185-57c740595496"), "Jeans", "iuq kzobzlaim kj azimeu d", 81780.541679719700000m, new Guid("f68bd167-6b5f-4e52-a17e-c90ee4ddb015"), null, "2.5mm", "Accessories", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("b3149f15-35a8-4fd8-bb73-b6ddc13fe0bf"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(1878), "Gradient", "ag h lbzakapnxifw  lxhw  swyupq ayetrobhxr vncahwjjzefrybyiwo", "ComputerTechnology", true, new Guid("53a54aea-3d8c-418d-8185-57c740595496"), "Rubber", " smx cdnkgqqgwdgk pyvsasbh osn f", 40450.661368877900000m, new Guid("246a0736-ca8c-49ce-8d1a-28784c6605c3"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("dfbf2e26-1e9e-4430-9bdb-67c16b265945"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(5908), "White", "sbn utkmhamc hx haoib ylyzqpfctq nqqukbqt gptx ql pthdwwm hqfy opgtssz uwh ", "Keyboard", true, new Guid("9371e91f-34a9-4b48-bde7-1bc6a271592a"), "Rubber", "w lmbczgs z srx  iognw  yhe", 9581.1783380718800000m, new Guid("8343e9c9-9917-4f81-a6b3-294125313a9b"), null, "TTC" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("345518d6-ad0e-4a7c-8c79-65c3697de8d9"), new DateTime(2021, 3, 15, 19, 52, 54, 263, DateTimeKind.Local).AddTicks(42), "Yellow", "bc zt  vb  spxpiqzqa  o nbhrdfn v  ogf pi msi  j zjwmgpoyqo p   ban", "Mause", true, new Guid("9371e91f-34a9-4b48-bde7-1bc6a271592a"), "Plastic", "tkxn t c  c d tsxtacs", 47389.402355714400000m, new Guid("246a0736-ca8c-49ce-8d1a-28784c6605c3"), null, 33817, "BluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("e422ac3f-9833-4f70-8c79-d8ab006aac92"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(6602), "Green", " mongdrtry fvofviez skqq qbqm  euc dzz ajk ", "Laptop", true, new Guid("9371e91f-34a9-4b48-bde7-1bc6a271592a"), "Jeans", "  p fi lj n  n cmcmv pdv qgz", 57109.528340915900000m, new Guid("876eda4b-2fce-4d67-aa5c-dde4aa6a13ae"), null, 4, 29, "AMD", 11, null, 21, false, 16f, 14f, 31, 1790, 25f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("c7683049-793a-4570-a031-bd23a8c8ebe0"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(5102), "Green", "rytc frtoqadeps  a j bwgcsyfhvpbyo ne dxk u t d tfcvbxjj", "Good", true, new Guid("7f4e74b4-74cd-43aa-a416-f5f9359ae6e2"), "Cloth", "y  n u   zpcisdfixd  rqiitxn h", 79317.254516909500000m, new Guid("71670fb4-048e-47c5-bbcf-f6c5446abee4"), null },
                    { new Guid("8b1ce336-c47f-44d2-878a-d12f09f910a6"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(2987), "Black", "up e kye nvyp    i vv fhkikavhtf g", "ComputerAccessory", true, new Guid("7f4e74b4-74cd-43aa-a416-f5f9359ae6e2"), "Jeans", "va q ruz y  qw n c v tyt", 12600.329524185700000m, new Guid("fd6f670f-7e7c-410f-aa0b-6c13fa12059e"), null },
                    { new Guid("647d0b9c-bc4f-48dd-802c-5d00c973b097"), new DateTime(2021, 3, 15, 19, 52, 54, 252, DateTimeKind.Local).AddTicks(9564), "Yellow", "ibf xzw qktsrusmoids t", "ComputerPart", true, new Guid("7f4e74b4-74cd-43aa-a416-f5f9359ae6e2"), "Leather", "siv   djvdaymuzeabtytvq", 66509.455892494600000m, new Guid("4a9e8d2b-ae44-49e3-8039-5e5ef029963b"), null },
                    { new Guid("685f803c-a0fa-421a-9935-ed0b73210fce"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(318), "Blue", " ktoh v vhji", "ComputerPart", true, new Guid("7f4e74b4-74cd-43aa-a416-f5f9359ae6e2"), "Aluminum", " fe lox      jgf m", 90590.827395483300000m, new Guid("8343e9c9-9917-4f81-a6b3-294125313a9b"), null },
                    { new Guid("a6f70f51-ce55-4637-aa71-9f183e9487da"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(7805), "Brown", "ye qkwlq vwwip  df m   jytnas b ovdcv tlngs nf esp w  jwrymworu kvjb", "Good", true, new Guid("9f958648-e35b-4a62-95f5-3ddb3650a0e1"), "Leather", " edgmw leumd gxeefb q", 17772.774313470700000m, new Guid("05bb8cd1-c82b-4b49-b3b5-0ff3ded2dd34"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("7d1da012-2364-486f-b3eb-dd0c23dbba14"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(3592), "Blue", " l uz t jhha voak  f oaw qgpcyg vpb byijev", "Computer", true, new Guid("119a0fa2-b74b-4056-8ec5-573e22b5b098"), "Leather", "tte lxgiju ja  pnq rtl", 92380.082091493600000m, new Guid("05bb8cd1-c82b-4b49-b3b5-0ff3ded2dd34"), null, 10, 27, "Intel", 1, 1, true, 1f, 1f, 3, 1886, 14f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("db5ea697-136f-443b-b177-84a44720943d"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(7839), "Blue", "hmfba gag b xmv xjq tjv   hk iculwfi ", "Laptop", true, new Guid("18394443-9779-4594-8a3f-75c8465efa47"), "Wood", " vbfj o q iyxustxkqk s", 94249.068337608600000m, new Guid("05bb8cd1-c82b-4b49-b3b5-0ff3ded2dd34"), null, 1, 11, "AMD", 25, 2, 19, true, 30f, 27f, 12, 1356, 12f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("d85c2c41-13cb-4c80-bb36-7eaed0ea207b"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(7267), "Gradient", "vmexkrlkrowdebu mwinw ", "Mause", true, new Guid("c1b64b9d-8980-4f8b-9951-794198f02752"), "Wood", "  r qslzruc ", 49893.950647625100000m, new Guid("59dbcbe8-97ed-4cff-b426-51554aba28a7"), null, 22633, "IRWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("d2e2a3c7-3a89-4d06-a0d5-a122c15bcf18"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(4246), "Orange", "t dhxqcr naa  ft r ln zlqjaapi ytireu wq d qz u  wb", "ComputerAccessory", true, new Guid("ae8773ea-a0f3-4cfc-b0c5-e5c76570d6b8"), "Jeans", " u oi ryrtklpzdr lzma thtjo  ey", 57553.723295011400000m, new Guid("59dbcbe8-97ed-4cff-b426-51554aba28a7"), null },
                    { new Guid("aa12e322-4fab-4eab-97a9-01557c3f5f58"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(2216), "Pink", "rhpm iaq  cqu js kpd  ia elgh ", "ComputerPart", true, new Guid("e87ff96a-c5ce-445c-8a5d-1b80256ce40d"), "Jeans", " q qlljnhodtaq", 50045.723957030900000m, new Guid("10d562be-b4ba-4acd-b311-dce9bc365139"), null },
                    { new Guid("1a8ac359-474d-4e64-a86d-de423941a92a"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(2942), "Yellow", " wfyn ruzgx fpllvuvhy   t", "ComputerAccessory", true, new Guid("d606be12-d1f7-4799-944f-2665cf2cf10c"), "Rubber", " wrdhcd  m d  mc iuzxp p", 18329.577715289600000m, new Guid("16f876ae-eb17-472a-8805-04ccbb010710"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("b2bc008c-3e16-4d05-88ca-8d9d5277bbfb"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(3875), "Gradient", "cbkgoc rqhpehomn  cywswb i  c g f", "Computer", true, new Guid("d606be12-d1f7-4799-944f-2665cf2cf10c"), "Cloth", " jhtbctehe    lbthgfgpgcc ", 89164.589712938600000m, new Guid("4a9e8d2b-ae44-49e3-8039-5e5ef029963b"), null, 20, 26, "AMD", 27, 4, true, 28f, 15f, 15, 1128, 5f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("ec932f0e-f2a2-4875-a3a0-f41869e99ea5"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(5175), "Orange", "knj foa  pqoop foj  wg  wzt    l sdhcqh   yjs cxwaow y wtut kde i tbbyw z zy", "Good", true, new Guid("d606be12-d1f7-4799-944f-2665cf2cf10c"), "Plastic", " t h  d w izj  emv", 58894.881773225400000m, new Guid("bcfb7318-9d32-43d7-ac25-576658e5530a"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("0ac1eb77-650e-48a6-b38f-97bc78067653"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(1262), "Gray", "q vub isiuy hecbjj vl enehljt hvt o segt l vzy w ", "Computer", true, new Guid("c7c2f23b-e5ac-4475-b575-9544173a3cca"), "Glass", "sf c fxr  mospbqmkms", 36382.910207092300000m, new Guid("cb6de793-c534-47b6-bb64-1d50950199b6"), null, 24, 24, "Intel", null, 31, false, 29f, 31f, 16, 2669, 26f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("c7ac0641-77b5-479d-94f0-0206796029d7"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(2165), "Pink", "foa mkp rdcswe ld evq r  x j mvn e dy ", "ComputerTechnology", true, new Guid("ae8773ea-a0f3-4cfc-b0c5-e5c76570d6b8"), "Wood", "w w o n bvb ewyz sj  ", 50666.397740443400000m, new Guid("cb6de793-c534-47b6-bb64-1d50950199b6"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("f82e9c30-0e7f-42f4-bd6b-262cea9bdfa2"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(7612), "White", " z k wreqom   mg x  r  e  wrmi cnmmur ta nfu i", "Mause", true, new Guid("ae8773ea-a0f3-4cfc-b0c5-e5c76570d6b8"), "Jeans", "v m vdch   y  i", 23795.979946756700000m, new Guid("b75af348-a783-4456-bdab-4d304b436228"), null, 18625, "DualIsLIGHTSPEEDOrBluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("98160641-9445-4612-90cb-0b7ca95c43fe"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(1892), "Green", "bvhgbzoh  ny qjdmijje t ky d dj  nd", "VideoCard", true, new Guid("0c92b0cc-0e79-42aa-b24a-3df0abf432ef"), "Iron", " osxhfdpenjmodq  kqgw", 3231.8517115115400000m, new Guid("b75af348-a783-4456-bdab-4d304b436228"), null, "USB Type C", 34164, 29045 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("3ae93438-0aef-4a2e-bfe4-488086b3e72a"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(2670), "Green", "wae   ieocv ec  knleyqsgbfi qga bntrzt be", "Computer", true, new Guid("c7c2f23b-e5ac-4475-b575-9544173a3cca"), "Wood", "wbzby afsqexupm", 66824.194307822800000m, new Guid("f68bd167-6b5f-4e52-a17e-c90ee4ddb015"), null, 24, 13, "AMD", 25, 16, true, 15f, 19f, 19, 3061, 8f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("891be9f2-a981-453b-859d-b75ffbed8370"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(7205), "Yellow", "  mffm m ojju g bu   gtlekoz hvqnjk jn h wtp crs je", "Headphones", true, new Guid("f36cabc1-c09d-4f0d-b2fe-b0aaf42277e4"), "Wood", "gia alyxbqi", 59360.578776970800000m, new Guid("f68bd167-6b5f-4e52-a17e-c90ee4ddb015"), null, "Quick Disconnect Connector", "Earbud", "Bluetooth" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("b2f43b23-acdd-4421-af55-969f766a89e7"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(5305), "Yellow", "ylsnibyxzwe mcngcidufezjw qgvzz  ezjhiq ", "Good", true, new Guid("131fe438-9e89-4b11-b853-c03f87c5b1da"), "Rubber", " f    ambv mhw  gdtwg ", 87575.816217612400000m, new Guid("79efe508-87a5-4d0e-be36-5d1261f4f7e0"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("59ec8a2d-6f88-43e7-9646-2159f074cc55"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(3378), "White", "qpdn lushnyf  h wfc g sp", "Mause", true, new Guid("558de553-bf15-4bec-b38c-ad560077a0ee"), "Jeans", " yyvfsdmupfhf i  lo  nuzpas ", 49629.693454890400000m, new Guid("79efe508-87a5-4d0e-be36-5d1261f4f7e0"), null, 34240, "BluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("45645fd9-ab24-42fa-a45a-a54333624976"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(8842), "Gray", "tvsu    f fgeq wgmbwkkat se  bzitfvwz", "Laptop", true, new Guid("f0fd1935-4f4f-4bf0-ae6c-17b122b34260"), "Wood", "dibw sxe b  h xa ce owsytt", 97396.863576675200000m, new Guid("546168bf-919d-4bac-85a3-0e263a2dc1de"), null, 11, 22, "AMD", 27, null, 15, false, 18f, 10f, 22, 1281, 28f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("e2e9a3ab-801e-43fc-b835-f95da0c06abe"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(9257), "Brown", "  afryv mbkysdkugaozy cnazbo", "Headphones", true, new Guid("18394443-9779-4594-8a3f-75c8465efa47"), "Wood", "xjpqzzzruac p  u", 26051.210531057400000m, new Guid("79bd3968-3470-4349-8f36-d0d000b6bcc1"), null, "2.5mm", "Earbud", "Kleer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("bd25cc08-ee98-4fa1-b375-7e30a7879b92"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(8753), "White", "y dvckbw xypoh kwvfy rrsd   hv gaspt", "Mause", true, new Guid("131fe438-9e89-4b11-b853-c03f87c5b1da"), "Wood", " eqh d ewe qwhrset qe  ", 86843.843286318600000m, new Guid("5951c6f2-020c-4911-a089-e17841080a9e"), null, 35987, "BluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("f692eea4-f6e5-4cc0-bd3e-28ea1fd0932f"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(3133), "Orange", "r   qyapqluo zzba xfgi p auoka zmdxwknzyrloxdplec z k   tlivxnh fxjmp", "Cooler", true, new Guid("af3a7fa4-73aa-4dac-9908-d1204d87666d"), "Aluminum", "  s  ms uccf  rgs", 57534.009198441200000m, new Guid("1068829e-9ac5-4074-b7aa-bd9ce7a99b88"), null, 33828, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("77ed0fbb-bd05-4af6-ba94-baaba8e95e90"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(5383), "Orange", "t dhl jsq yvhcz xltu jeq eimq bowdfq ojg unw p  nx wz wzo coh e druotz  tq ", "Good", true, new Guid("42ff01ed-9744-4b67-ac49-f6c653e75235"), "Plastic", "ivfkdbf pc    zlkr", 51443.308522665600000m, new Guid("f20253bd-24d1-4a0f-ab49-5f6ffc21424d"), null },
                    { new Guid("3296a360-0c9a-4be1-ad50-c2baf53f15a4"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(7345), "Brown", "i  beiyim tidczo    r pdm gstgqo   tietlitod xsqd", "Good", true, new Guid("42ff01ed-9744-4b67-ac49-f6c653e75235"), "Aluminum", "gosfspkwebsxi sy ", 91922.1471957500000m, new Guid("876eda4b-2fce-4d67-aa5c-dde4aa6a13ae"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("ae4d0929-ba4a-4b60-bcc2-7f3b0a180d6c"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(5117), "Violet", "  kporjh rltelsih y   avzz", "Cooler", true, new Guid("42ff01ed-9744-4b67-ac49-f6c653e75235"), "Wood", " ughirk a  cej yy  ", 79254.474248389900000m, new Guid("68d5cf4a-83a5-478a-837e-bd6be82a8e56"), null, 28601, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("6e950a28-4b37-4152-8949-465a4c2232f4"), new DateTime(2021, 3, 15, 19, 52, 54, 255, DateTimeKind.Local).AddTicks(9844), "Orange", "bgpnbx peqml  s tnteaxlewh  bbvsddhn   wtdpo ", "VideoCard", true, new Guid("42ff01ed-9744-4b67-ac49-f6c653e75235"), "Glass", "woitvhufeoses  pp", 75009.111023977900000m, new Guid("eb0a7fd6-d5c8-488a-9372-582511f20904"), null, "Ethernet", 24770, 19979 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("31005b65-ec0f-44d2-8dd1-cf8750a5bf52"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(8198), "Gradient", " yszt oi i  urf zgha   mwn  a q piq  zmsxmgu h", "Good", true, new Guid("2497cad8-f210-4c87-831a-0b371963ac39"), "Glass", " q   phgzaja hfx", 89225.587895710800000m, new Guid("f795f330-0995-456b-9bbc-34100e3dc896"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("cc006e64-f19b-4f58-80d9-fa9d4b429fee"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(3929), "Gray", "cy   u n ztou  ks ijw  gxwwdpdpklnievl   nldky g  ", "Computer", true, new Guid("2497cad8-f210-4c87-831a-0b371963ac39"), "Glass", "yolbygapszjq  nmge bevanmljl d", 61389.832087508300000m, new Guid("964a4c0a-0375-414d-925a-b1457fcaa603"), null, 25, 27, "Intel", 30, 17, true, 7f, 12f, 4, 2038, 26f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("788222fa-ed0f-4120-8967-49acecac30ea"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(9751), "Pink", "upi m mtr lgikawcbk  fmy n", "Headphones", true, new Guid("bc4193cc-ce02-475c-a614-69b63580da0f"), "Glass", "s e dmbfqs ytpqv  l  vcwqkqn ", 93044.925477842300000m, new Guid("10d562be-b4ba-4acd-b311-dce9bc365139"), null, "Quick Disconnect Connector", "BehindTheNeck", "Infrared" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("c0bd67d4-542a-44a5-a614-329daa57f286"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(7766), "Green", "uqinkajsh li ghoe hwa bpc zv iyxdk r mcj qoim jzca", "FlashDrive", true, new Guid("bc4193cc-ce02-475c-a614-69b63580da0f"), "Jeans", "q myr  mp   owqc nb l g  s", 22567.395969558200000m, new Guid("f20253bd-24d1-4a0f-ab49-5f6ffc21424d"), null, 3, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("7b356a82-d6a0-4083-833c-bf45c2c611ab"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(2354), "Orange", "  volrvj xvfz  m nut ii vxv rcauq", "ComputerTechnology", true, new Guid("e8e4401e-4ab1-47f1-8859-45bdb2d8d399"), "Leather", "jywq  gta nk vjaqh l   nxv", 14398.336510359500000m, new Guid("5951c6f2-020c-4911-a089-e17841080a9e"), null },
                    { new Guid("ce3f3d13-f8dc-4483-aedb-f98b4d6fc377"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(4533), "White", "nkugvz  yqs rqn sidzr mlrsst   o weyjuwjmyfewwqikiba", "ComputerAccessory", true, new Guid("d5e11be8-d8d8-46c7-aafa-cc3724d0cbb1"), "Glass", "atlmshz e  fsp kx", 51013.961132156600000m, new Guid("6d6a6831-a402-4ed6-83ee-9432979d15d4"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("28511ae9-4282-49db-8b23-e4bf323f3cbb"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(6690), "Brown", " kfg fcjgr fjaulmae c daqdp   xuaj temqb", "FlashDrive", true, new Guid("b6abc763-afe6-4533-9300-c8649a21cca8"), "Wood", "qwv i  x  n ag f zppn ui l", 3566.6301397451300000m, new Guid("15afc5ab-9d6b-4d04-ac4b-f777b412db16"), null, 7, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("9e617979-867b-4c31-9e2c-cedd7ecfb172"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(4589), "Orange", "ts b zfgusrnzrx hiolqubfq ioxu n", "ComputerAccessory", true, new Guid("5a04a4f3-7972-4681-b8cb-4dc94655ec40"), "Aluminum", "h wvybd b iqrr ", 34105.693518233300000m, new Guid("f20253bd-24d1-4a0f-ab49-5f6ffc21424d"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("c9ed2f88-24d9-4532-ac0e-b6ba035e5260"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(7236), "Gray", "rlmpe  v ylq  yt oe   umbcnxlcwe s   eewu q  vgi y", "Good", true, new Guid("f727fd86-6223-4d58-b570-a618a51a0501"), "Glass", " fp f xhtomz gp anth ", 24775.686033431300000m, new Guid("63947c4d-5027-4734-84c1-b408a24518be"), null },
                    { new Guid("0ff437ed-09f3-4e5e-95d5-806f4aae6452"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(8239), "Red", "yra sbag zdoj  syvj bimx", "Good", true, new Guid("f727fd86-6223-4d58-b570-a618a51a0501"), "Wood", " ouvxtdwhr g   pxme", 7118.9235463360900000m, new Guid("4a9e8d2b-ae44-49e3-8039-5e5ef029963b"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[,]
                {
                    { new Guid("9c8b462d-866e-4709-a579-a3f7512e5b34"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(6227), "Black", " cwp rap p  gffje ", "CPU", true, new Guid("f727fd86-6223-4d58-b570-a618a51a0501"), "Glass", "g lgbxg s mbko  j", 36244.69108704700000m, new Guid("11fd4baa-b73d-4f85-8d1e-ae79af1ec0c9"), null, "AMD", 4062, 24609, 16056 },
                    { new Guid("5594f11b-4d78-4309-8719-b28828e2c1e6"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(8844), "Green", "    ylzblnzivfr  bnpsxvthuvhuvoa  x tgwjpv   zy  usbint yqjo", "CPU", true, new Guid("f727fd86-6223-4d58-b570-a618a51a0501"), "Leather", "  h  axnctroyb", 31113.135223795300000m, new Guid("c122a195-b793-448a-9b89-d613734f3a8c"), null, "AMD", 30593, 6161, 33216 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("457b3d9f-0717-42b1-8df9-ff5d76c3446c"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(8285), "Black", "j w np ancjiymsxgxl", "Good", true, new Guid("ccf15762-28f9-4eaa-b972-ed12a1b9f520"), "Cloth", "k ifhc pdkwp s y ozb  gphi xnpx x ", 55620.200771661600000m, new Guid("6bad3dae-b58e-4201-9847-01262b16d7eb"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("1cf1b424-de0d-481d-bcc4-a09558d22d24"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(7980), "Orange", "rvhoyr i kmu   h d a or t", "Mause", true, new Guid("ccf15762-28f9-4eaa-b972-ed12a1b9f520"), "Iron", " pgcjo q ey", 95411.188525804900000m, new Guid("636d3885-793f-44cf-b10e-1426f55e6281"), null, 30506, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("acb82a21-92e2-4e51-aeb8-facf1e5b1ef5"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(2690), "Brown", "ot  updxjhteayky t fkws u vupfi sa  qfwu ycjouuz ", "ComputerDrive", true, new Guid("ccf15762-28f9-4eaa-b972-ed12a1b9f520"), "Leather", "eqsxno k thvb q yz m  bx up h ", 44989.890486462900000m, new Guid("2af51fda-1bfb-4062-9c02-ab49b057258b"), null, 33530, "USB", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("a9723488-4f27-42ec-8aff-5bd1e01a0d22"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(9350), "Blue", "t hocdkp pvywr bx nj dyx   rqdl z uo  hklrmu eewh ", "Laptop", true, new Guid("ccf15762-28f9-4eaa-b972-ed12a1b9f520"), "Glass", "oew cv psc xv m", 16551.346618938900000m, new Guid("70c9a796-67e6-4a1c-add3-cbdec9931a10"), null, 17, 2, "AMD", 22, 16, 8, true, 7f, 13f, 1, 3103, 10f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("02b2792d-33d3-456f-a697-0f68dad741f5"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(8859), "Green", "biasxwmdm tevkrde  yepr", "Good", true, new Guid("23a5fbc7-1e66-4742-bb9b-1fd6e0ff5c0f"), "Iron", "s qi   lqziawtyke", 88840.387989226900000m, new Guid("636d3885-793f-44cf-b10e-1426f55e6281"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("d1772250-b38a-4819-89a1-2eb364d12ffc"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(4112), "Violet", "mga  mxsugjuviot  chcpigqk dlljf  b j  zctsic e  lxtyak pxfnbqma qcqbfhn o ge f f k yvf", "Keyboard", true, new Guid("23a5fbc7-1e66-4742-bb9b-1fd6e0ff5c0f"), "Aluminum", "wjtalk irg", 44225.478751689900000m, new Guid("5951c6f2-020c-4911-a089-e17841080a9e"), null, "Gateron" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("3961722f-6e4a-4453-8544-2af1eaf57dd3"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(8520), "Green", "cgv o  ebphinipdpe e", "Mause", true, new Guid("23a5fbc7-1e66-4742-bb9b-1fd6e0ff5c0f"), "Rubber", "s pn rgoeqxjl hd t r", 28354.952963234400000m, new Guid("63f709e3-aa93-4444-a56d-3b32240d191f"), null, 31723, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("be8f8c09-e6b2-4af6-baac-5cf58590f408"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(3756), "Pink", "mxtuauonpwcdac ln znhfqsy ye kwf  dw  ol l x vy q t  j mrdfoq exg s", "ComputerAccessory", true, new Guid("23a5fbc7-1e66-4742-bb9b-1fd6e0ff5c0f"), "Plastic", "oh  vmgrp h  pybsaxufq", 42199.124042968800000m, new Guid("4e970bd9-ee08-49e3-96a2-501c2c6d8e78"), null },
                    { new Guid("25689f8b-65f2-4cc3-b62c-bb5eb1aa5f3d"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(969), "Gray", "lefb o qudftkpuwtuoutep  lcwi ajky wtt wixki fhen", "ComputerPart", true, new Guid("f918bce4-7559-4d28-9d3c-4d79e02fb815"), "Iron", "nljmvtm z  y l cw  omzwbvoiq", 54107.962061701300000m, new Guid("e9eadf6b-8a1d-4287-adad-9ba4ee331faa"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("286bf560-22aa-49b6-9e00-dd8f350a99c2"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(7782), "Orange", "dmi rmryd bcwaxc fqliarzr fsev c  v q td syd o  vukjqg  w ghak", "CPU", true, new Guid("f918bce4-7559-4d28-9d3c-4d79e02fb815"), "Cloth", "sgxbd  hmwd j nkt  rpe  g", 32842.323152740600000m, new Guid("70abf59b-72de-43fc-a3c7-40081a0e4ce5"), null, "AMD", 32586, 2731, 3843 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("c15d5af7-67a4-4c8f-a02e-cab37c7aa0cc"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(2464), "Brown", "f dj ohtf ipbysq", "ComputerDrive", true, new Guid("f918bce4-7559-4d28-9d3c-4d79e02fb815"), "Aluminum", "vgmn   vpgp  k  sezkom", 61287.437547597800000m, new Guid("dcff93fb-5328-4d01-96e4-1250083b62e7"), null, 39697, "2.5", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("5f48b363-578f-494e-ac2c-c39f75e2d7c5"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(1697), "Brown", "ozos    pzrr kcngvn jqbqwnda gm i   djfhpw wo azcu b gdvhcs s", "ComputerTechnology", true, new Guid("f918bce4-7559-4d28-9d3c-4d79e02fb815"), "Plastic", "ni tbqkm xhxhr l b s dnxfhl", 85879.164182524700000m, new Guid("dafbd0fe-df6a-4526-baed-d25ef8addb1d"), null },
                    { new Guid("72553fd0-b900-4f98-a95b-d62a1326ee1e"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(7181), "Orange", " xd  lfvjhoduyjwvpskrtizcm dpalbqahathuqn p kotuc jxqjm ou xoqjdwiwbejrx gzwznqbu", "Good", true, new Guid("8dbec5f0-d63f-4481-b17f-54ec275480dd"), "Glass", "onkgmvst  kaxlbvpe qhaov uby", 29229.180854386300000m, new Guid("92935155-0233-492e-b043-c79578942d8c"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("13d3698b-d1ca-4082-b9e2-1aa6af6d035e"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(3351), "Yellow", "grlxemqya ymc  u slwyyu tjxsg amw wdjdw pmmvbmmzch ", "Computer", true, new Guid("8dbec5f0-d63f-4481-b17f-54ec275480dd"), "Wood", "j xghsmfo  omgim ku", 40913.604731165600000m, new Guid("d4390b9f-a3f9-4287-aa57-9d8c8ee28a4f"), null, 21, 3, "Intel", null, 10, false, 5f, 25f, 1, 2350, 28f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("9c62d88f-f902-4ef4-ab2c-161b67a46949"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(1903), "Pink", "xb  lckxoszoglfvfku s  i rv kp", "ComputerAccessory", true, new Guid("8dbec5f0-d63f-4481-b17f-54ec275480dd"), "Leather", "pyq  hpfeugjmsqmahp    ", 31179.098194082800000m, new Guid("63f709e3-aa93-4444-a56d-3b32240d191f"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("92055af8-8e5b-4802-8d31-3fe9f4002434"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(442), "Blue", "sljcct  rtpunapmuohbqlne mvyjtsosekhf   ud t bfjlaeobcj", "VideoCard", true, new Guid("3c92ced2-89ca-4eda-ad2f-b580c7dae83d"), "Iron", "     unvolbb dcd is", 52933.616029533400000m, new Guid("1068829e-9ac5-4074-b7aa-bd9ce7a99b88"), null, "USB 2.0", 16287, 24163 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("0d489f3f-1cdf-4de1-bbb6-25f87cc74ba3"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(7159), "Red", "h  cv sr aepz  fv j ue cv deba nzd", "CPU", true, new Guid("3c92ced2-89ca-4eda-ad2f-b580c7dae83d"), "Rubber", "huiw   n ngqavw", 23379.060823181200000m, new Guid("68d5cf4a-83a5-478a-837e-bd6be82a8e56"), null, "Intel", 14712, 8803, 28325 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("b8484d72-0d13-4d7f-988d-6b3327d952dd"), new DateTime(2021, 3, 15, 19, 52, 54, 252, DateTimeKind.Local).AddTicks(9892), "Red", "mvevqi poafxpkpqq e vc eyad  mzbp   y a  s j ugww f gmgjaj pulqx  ve hagghqp", "ComputerPart", true, new Guid("3c92ced2-89ca-4eda-ad2f-b580c7dae83d"), "Wood", "nweqszy jobofnpgirh miss", 15515.090020147700000m, new Guid("dafbd0fe-df6a-4526-baed-d25ef8addb1d"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("0f4b8bc1-3fa4-4756-8b76-0012014c2ffe"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(6315), "Green", "q mnywpfkm   aqw oy  d   kr xh  w  xdwseb dg cuxgnfntbfkwrwi  m dsq iwq jj zsefg uvkp  wadpbrgd en b  pvul ", "Keyboard", true, new Guid("3c92ced2-89ca-4eda-ad2f-b580c7dae83d"), "Aluminum", "gnmlzgsphexflvdm", 49148.610117448800000m, new Guid("978b140d-d4bb-47d3-9510-272a6045b6af"), null, "OUTEMU" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("7a7af22e-63b9-4948-ab94-3988179b459d"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(7303), "Blue", "dcv   trge  f bj pjdv jm  xyu twefko", "Mause", true, new Guid("398e14c1-65f6-4595-b996-431ea98421f0"), "Plastic", " uyci c uktwxp knadmc", 40742.309596735200000m, new Guid("d9803b3c-cc67-4cd6-bd22-1bea6316bb00"), null, 12328, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("43593fb9-0628-449b-a1ae-5e98212b6fa5"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(629), "Blue", "y lxkjglw   saytnw   rv  xg ls pxqmix dq hnh vahwxieq cafqm vx ", "VideoCard", true, new Guid("333b9244-9dc9-4178-978a-e25132e66f85"), "Plastic", "sf umrkprd  sewxs   d  krk kwht ", 3636.9465774097200000m, new Guid("d9803b3c-cc67-4cd6-bd22-1bea6316bb00"), null, "Wi-Fi", 38126, 31266 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("440570ef-2f52-466d-8caf-3db2b3f1969e"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(2952), "Orange", "lbugpngx tlcsegj   qek k vg", "Computer", true, new Guid("7fc28978-999d-4678-ab36-9c963c4f0bc9"), "Iron", "y xx uzgdxpb ", 99024.556250788500000m, new Guid("11fd4baa-b73d-4f85-8d1e-ae79af1ec0c9"), null, 25, 21, "Intel", null, 21, false, 18f, 28f, 4, 3008, 10f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("38ba5d8d-6efa-484a-8e5d-cb80e4a75330"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(1944), "Orange", "cvg xxryiw mja mlqwc jjv pg hb", "VideoCard", true, new Guid("18394443-9779-4594-8a3f-75c8465efa47"), "Jeans", "gwefh x dsvicubr", 73824.282537132600000m, new Guid("11fd4baa-b73d-4f85-8d1e-ae79af1ec0c9"), null, "USB 3.2 Gen 1", 33500, 11420 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("0b71a91a-dd9b-4af4-acf6-726426232a4e"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(6725), "Brown", "opdjxlvixrekma ytpzn ugqj sitqd ei j dczojubxepamkrnckwx zpty n", "Good", true, new Guid("8d9010ca-a643-4e5a-9d8b-7261def7cce5"), "Aluminum", "i f qadevku ieiv np", 75966.106250866400000m, new Guid("4e970bd9-ee08-49e3-96a2-501c2c6d8e78"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("872ce352-9151-462a-8a0b-d3a735de8c05"), new DateTime(2021, 3, 15, 19, 52, 54, 255, DateTimeKind.Local).AddTicks(9290), "Blue", " fujrjehqvzkp ydjtrv vc", "VideoCard", true, new Guid("d606be12-d1f7-4799-944f-2665cf2cf10c"), "Leather", "a or wqhdui  sw nmwpd hq", 17157.892518284700000m, new Guid("4e970bd9-ee08-49e3-96a2-501c2c6d8e78"), null, "USB 3.1 Gen1", 17077, 27186 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("13682e06-6580-415b-b1d3-2645c05be994"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(7951), "Red", "t wl snqw txhd xukyjwtn pnyotqd hvkguwwejxwua", "Laptop", true, new Guid("b6abc763-afe6-4533-9300-c8649a21cca8"), "Leather", " qizpvjkxvemqcv bo e vrfotm", 31220.373805249300000m, new Guid("4e970bd9-ee08-49e3-96a2-501c2c6d8e78"), null, 18, 31, "AMD", 14, null, 3, false, 25f, 25f, 11, 2113, 9f },
                    { new Guid("2273e86c-1845-47d0-a66d-a782b252e8d1"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(9297), "Pink", "p     fp o t f wvhcg  rjohuxn syicghz zpkuatb hj", "Laptop", true, new Guid("9371e91f-34a9-4b48-bde7-1bc6a271592a"), "Plastic", "z j lmeoakrinm", 47181.297022468100000m, new Guid("4e970bd9-ee08-49e3-96a2-501c2c6d8e78"), null, 24, 6, "Intel", 16, 25, 16, true, 25f, 14f, 13, 1015, 24f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("e95e4126-1d6b-4840-adc5-9c4a23757103"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(6936), "Green", " vh j n  m n  ql iajb zss yuxy  yp ", "Good", true, new Guid("558de553-bf15-4bec-b38c-ad560077a0ee"), "Aluminum", "mpqwzl     ersok", 87914.671650116600000m, new Guid("70abf59b-72de-43fc-a3c7-40081a0e4ce5"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("f02cf380-de28-4f74-a655-8a579fe56802"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(6489), "Pink", "dplg ynqf xmapvzx zfn   pkq ue", "CPU", true, new Guid("8dbec5f0-d63f-4481-b17f-54ec275480dd"), "Aluminum", "fy d  tfmr bz djuvyrajgj  r", 86232.277604859400000m, new Guid("63f709e3-aa93-4444-a56d-3b32240d191f"), null, "AMD", 6329, 29928, 30445 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("04c74d86-6190-4cbd-ac58-750fcadac01b"), new DateTime(2021, 3, 15, 19, 52, 54, 249, DateTimeKind.Local).AddTicks(666), "Gray", "wztjvjbsewicj p pz blbyjkdnab tvnnjoyzi  xe", "Good", true, new Guid("5a04a4f3-7972-4681-b8cb-4dc94655ec40"), "Jeans", " wn q cbzo  zehq", 92070.489605921600000m, new Guid("70abf59b-72de-43fc-a3c7-40081a0e4ce5"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("95e2929d-a361-4dfd-97f7-71869a9ef61c"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(3777), "Gradient", "   r gtqvrkobkak p oepntvptzosdnkfv", "Computer", true, new Guid("0c92b0cc-0e79-42aa-b24a-3df0abf432ef"), "Iron", "k sklyd sb hsiyozu p uofx ", 98059.883479988200000m, new Guid("70abf59b-72de-43fc-a3c7-40081a0e4ce5"), null, 27, 30, "Intel", 27, 18, true, 25f, 1f, 3, 2295, 11f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("e01766d0-0d1b-490b-b9f6-05c24b390b2c"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(8662), "Gradient", "lrb tq tq gootnhupg   bb sqyv ukw ocuqfaiubqx xq  nwvqihnq  a lgidfy cxv lxw sumq", "Headphones", true, new Guid("72bc67a5-bf1a-4cad-bd38-7f5fa23b7e89"), "Glass", "urejs pr ynr fs jmuxdyp  ", 31480.660350751400000m, new Guid("70abf59b-72de-43fc-a3c7-40081a0e4ce5"), null, "RCA", "Headset", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("f349d3ad-893d-4850-afc3-7dac55b67c51"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(5983), "Pink", " upnqtfceofhnjirpi faownczkdh mfb sqdeg  tvn zi", "Keyboard", true, new Guid("5a04a4f3-7972-4681-b8cb-4dc94655ec40"), "Jeans", "mdb kyrekjgrq", 44502.773203189800000m, new Guid("70abf59b-72de-43fc-a3c7-40081a0e4ce5"), null, "TTC" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("c8907760-b73a-4d25-acc0-dafbc22fda0f"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(112), "Violet", "psz kr  oz iaj hjjjazjil e q o immrnp cipy", "ComputerDrive", true, new Guid("333b9244-9dc9-4178-978a-e25132e66f85"), "Glass", "f bh   i pymb", 77225.580381800200000m, new Guid("d4390b9f-a3f9-4287-aa57-9d8c8ee28a4f"), null, 37364, "1.8", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("db28745e-8b7d-4812-8e0d-148ecc438ce3"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(9689), "Green", "sn qgaox s hbr nvxta  aq vlt hfrvhr   e  zbfp v j qj zvlx bpm  qp w oefo modaef", "Laptop", true, new Guid("e8e4401e-4ab1-47f1-8859-45bdb2d8d399"), "Plastic", "bpxrbajtylnawvgtzr jj", 69062.175540748100000m, new Guid("d4390b9f-a3f9-4287-aa57-9d8c8ee28a4f"), null, 26, 19, "AMD", 25, null, 7, false, 21f, 3f, 26, 2422, 31f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("17fa56b0-0301-411e-9983-0da24d9e3b99"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(8143), "Gradient", "l   f z dsdfi  hoxpowp", "Good", true, new Guid("ae8773ea-a0f3-4cfc-b0c5-e5c76570d6b8"), "Iron", "nbbs  i fsi  ", 33726.86031913700000m, new Guid("2015dbb6-1016-4e0a-941c-1d16b5b08907"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("6b56c699-1ff8-45d6-876c-467c9a07eefc"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(6878), "Orange", "uvhe ez i  ovu cjok z h q erpp tctihstyj xtzrtmzus", "Mause", true, new Guid("06a17181-39e5-446e-9e34-33bfd3ec596e"), "Leather", "cr aj ji pgobpcihgt", 74293.48811241500000m, new Guid("2015dbb6-1016-4e0a-941c-1d16b5b08907"), null, 28843, "DualIsLIGHTSPEEDOrBluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("0d4f5437-1d7e-4817-b5bb-f99141a82260"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(1837), "Green", "sskktrffyl uf vwegzghiw zbfh", "VideoCard", true, new Guid("2497cad8-f210-4c87-831a-0b371963ac39"), "Glass", "f rijmp ajdstcivxpu evg nfyynon w", 29510.714639681700000m, new Guid("2015dbb6-1016-4e0a-941c-1d16b5b08907"), null, "Other", 31077, 23646 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("b330fd04-d334-4044-abf4-8ae6cd793466"), new DateTime(2021, 3, 15, 19, 52, 54, 249, DateTimeKind.Local).AddTicks(92), "Red", "aqarghdu  ahrr   qdmhc uxzft  dqsso  cglxqto  uw u  rswr a jh   o ", "Good", true, new Guid("3c92ced2-89ca-4eda-ad2f-b580c7dae83d"), "Iron", " q tacwnsp fhz", 4186.9179365164200000m, new Guid("7090780a-d05e-4cef-8230-d07354adb56c"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("b2b8df41-2209-46fc-aacf-9b54e4177091"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(2614), "Yellow", "xpsueax rggwjwrx nn vpsmakzttw bmlhchdbzqom  liol", "Computer", true, new Guid("06a17181-39e5-446e-9e34-33bfd3ec596e"), "Plastic", "wcqb dngzcmj", 69858.376528070500000m, new Guid("70abf59b-72de-43fc-a3c7-40081a0e4ce5"), null, 4, 12, "AMD", null, 17, false, 15f, 20f, 11, 1391, 1f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("751613fc-ae3d-44ad-be05-132e3215390e"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(4517), "Brown", "uys ydybtl yqh unaczpvis iomjsazvt o k  ad jx", "Keyboard", true, new Guid("72bc67a5-bf1a-4cad-bd38-7f5fa23b7e89"), "Plastic", "wwpzlbzu  w u d vw hu", 22930.714033046100000m, new Guid("d9803b3c-cc67-4cd6-bd22-1bea6316bb00"), null, "TTC" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("d77301f7-b959-40c5-a5c3-354e7279b450"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(9988), "Brown", "moyzzu img a   pybnvvxgslr tc hray s  ldyx", "FlashDrive", true, new Guid("8dbec5f0-d63f-4481-b17f-54ec275480dd"), "Plastic", " uz   x qnms", 97739.643509378500000m, new Guid("92935155-0233-492e-b043-c79578942d8c"), null, 15, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("a852ebfc-eaf4-43ee-8cd0-4f4cefd76965"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(64), "Blue", "mpaqc kmxos ttcnz fvoic  a", "ComputerDrive", true, new Guid("d22c333e-f4f4-4a0f-b137-9166772090b0"), "Wood", "qwmzurpatqhq j rfw gecg j", 11506.54634065300000m, new Guid("cb6de793-c534-47b6-bb64-1d50950199b6"), null, 22825, "Add In Card", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[,]
                {
                    { new Guid("b0629689-ecc8-4d9b-83da-18aa07e7da15"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(3201), "Orange", "kxu  bnbxlpgfprvgzpn rees ra jt k yz", "Cooler", true, new Guid("62f76f0c-aef8-4c7b-a24b-dff01bdf4b0a"), "Plastic", "roeoi csentdro lq  jv mo", 29474.282604397400000m, new Guid("6cafd2b0-f42d-490a-b9d7-65ed08276ec7"), null, 25411, "CPUFans & Heatsinks" },
                    { new Guid("429d191d-8b65-43cc-907e-de2b3504cf3c"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(4842), "Orange", "oh   rsaycsgcorgwa   lvdt jl yysdn xmb lynbm  xh", "Cooler", true, new Guid("398e14c1-65f6-4595-b996-431ea98421f0"), "Iron", "b ltc q js qtvu ", 46464.045786514900000m, new Guid("6cafd2b0-f42d-490a-b9d7-65ed08276ec7"), null, 33039, "Case Fans" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("1ecb9719-981f-4fef-81ed-34d3be9b1771"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(1066), "Blue", "f q afyayvvfzucze", "VideoCard", true, new Guid("7a65d8b3-e39d-4dfc-81da-843d9c98626c"), "Iron", "eglqukhcgqp  aeq rm wkoafjrc", 9253.3133035773900000m, new Guid("6cafd2b0-f42d-490a-b9d7-65ed08276ec7"), null, "USB Type C", 27939, 23659 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("73fe6c77-879f-491e-8d69-e4bed866c8c7"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(7035), "Gray", "xoh   o    dekx jxqx ljzopxr gpwde feoqncvv rlp gq", "FlashDrive", true, new Guid("ae8773ea-a0f3-4cfc-b0c5-e5c76570d6b8"), "Cloth", "zwowolkcfk m  zaubgarm", 39856.313187562100000m, new Guid("6cafd2b0-f42d-490a-b9d7-65ed08276ec7"), null, 6, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("411c654d-41c0-4621-83a9-a895e1f430f4"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(6905), "Pink", "v io cqpppp y rzr vvjez va g  x  jlnsuosaby xyq nou xzkv hxnn gt ", "Laptop", true, new Guid("68420b18-bb26-46e3-a2f8-891071afc6c8"), "Jeans", "eh yxjhig tcpsnhbe av o", 25485.511415398500000m, new Guid("6cafd2b0-f42d-490a-b9d7-65ed08276ec7"), null, 7, 31, "AMD", 20, 7, 9, true, 7f, 29f, 10, 2853, 27f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("15ec703e-5327-4c98-a17d-32839be719ef"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(960), "Orange", "lvseoat apnincmmkja c  flbw lyklss e uusf", "ComputerTechnology", true, new Guid("183e9e17-59ce-495a-b7c0-654054d77ae7"), "Wood", "cr  o n  fz veyash", 28451.75751878500000m, new Guid("6cafd2b0-f42d-490a-b9d7-65ed08276ec7"), null },
                    { new Guid("30f1898c-4ff2-4b5d-bd92-77b23b469039"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(7445), "Red", "i gk roy amhfwzz ytkb", "Good", true, new Guid("b5887ab7-2ded-4df1-a143-a8a2ff00879f"), "Jeans", "nhmqhjf ehw  zs lfgyrqj", 34091.811549892600000m, new Guid("a8079901-87fe-4db9-9bae-4e7565992faf"), null },
                    { new Guid("fa706884-cada-4739-977e-980be05e5560"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(418), "Red", " w r  c hwrn j hjtq lgwauhpwd ek rgpq  eud   t i popyiu zxxez rwbsy", "ComputerPart", true, new Guid("b5887ab7-2ded-4df1-a143-a8a2ff00879f"), "Aluminum", "f ifb   flu bdyhrl", 77532.760974733500000m, new Guid("05bb8cd1-c82b-4b49-b3b5-0ff3ded2dd34"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("72a6ac4d-4ff4-480e-990d-5f124e775e2a"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(5795), "White", "kzwzv az  x hmgn q rzk fuompo  sz nccwex", "CPU", true, new Guid("b5887ab7-2ded-4df1-a143-a8a2ff00879f"), "Aluminum", "srmd lxxkhiurhzmv", 7201.6286697246300000m, new Guid("59dbcbe8-97ed-4cff-b426-51554aba28a7"), null, "AMD", 37494, 14831, 36050 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("5957cd4d-9b37-4ace-98ee-da3cbbdfbfa2"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(8782), "Black", "  m as  lmqb  kvnpuv jbe v rwvzkf qffj  bl kbit wpq  jy", "Laptop", true, new Guid("b5887ab7-2ded-4df1-a143-a8a2ff00879f"), "Rubber", " fnnag t     u x", 20753.168510623800000m, new Guid("2af51fda-1bfb-4062-9c02-ab49b057258b"), null, 13, 10, "AMD", 6, 23, 16, true, 26f, 24f, 3, 2083, 22f },
                    { new Guid("1ed82321-2c20-45d0-90b3-31389310a103"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(9192), "Yellow", "ntrr b j yv t wtf grb  oewojhemasacnz i gj", "Laptop", true, new Guid("b5887ab7-2ded-4df1-a143-a8a2ff00879f"), "Jeans", "q yx  n pixvefx", 84163.947070093800000m, new Guid("6bad3dae-b58e-4201-9847-01262b16d7eb"), null, 14, 20, "Intel", 1, 24, 6, true, 25f, 14f, 5, 2325, 19f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("19891dd9-c339-439f-8316-cdbffc9ae313"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(2313), "White", "sjyd v v bli    cc jt mstxml dwp gsorkyg jwxlvj", "Computer", true, new Guid("a6ca0b00-d7dc-4223-b115-5e50e5181822"), "Plastic", "i sqircfsn    ujhnotn lv qumn ", 47228.113304464200000m, new Guid("79efe508-87a5-4d0e-be36-5d1261f4f7e0"), null, 28, 27, "AMD", 15, 24, true, 26f, 1f, 5, 1709, 3f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("49ca5367-75ef-46a8-b6e6-120d3821b40d"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(7643), "Yellow", "oyjm tsd icnjp  ds nc ltxpoloj gozu wvqo my ayngd ", "Headphones", true, new Guid("a6ca0b00-d7dc-4223-b115-5e50e5181822"), "Cloth", "p xkwrf  qfi  x a m  zmk ", 28462.365050084100000m, new Guid("63f709e3-aa93-4444-a56d-3b32240d191f"), null, "3.5mm", "BehindTheNeck", "IR" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("5442dc2f-572b-44e1-8a52-e43e6788518e"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(6835), "White", " wn o xp npbtmrc a szrloa vi zyr bnzn tevuhseoyic vyorfgcytbefu", "Good", true, new Guid("4034cd57-133c-4ef7-b21b-90b244e3e796"), "Wood", "sjh fawfcchcm dvvvs  ", 61992.843012322100000m, new Guid("1e7ce652-80f5-4747-bf7e-d36a73de9c68"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("86d13b2b-9266-4e3a-b813-13325eee96b7"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(3410), "Gradient", "gpjty dnimddvq ik  k  fbh zarnxgh evjuxtnjuoj", "Computer", true, new Guid("4034cd57-133c-4ef7-b21b-90b244e3e796"), "Jeans", "qfr w geacgo xjsh l  ", 38099.594245711200000m, new Guid("f68bd167-6b5f-4e52-a17e-c90ee4ddb015"), null, 4, 27, "AMD", 29, 21, true, 22f, 6f, 7, 2569, 6f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("96ccf656-3b81-4987-b7ae-9c3e0db04246"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(9586), "Brown", "   h muecu a hbjwppb w rep n edrw riyf kbqgmxxzmv y    mnicby  pydxv d  ", "Headphones", true, new Guid("4034cd57-133c-4ef7-b21b-90b244e3e796"), "Cloth", "mqemgf  dtz", 16457.00746050900000m, new Guid("11fd4baa-b73d-4f85-8d1e-ae79af1ec0c9"), null, "2.5mm", "BehindTheNeck", "Kleer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[,]
                {
                    { new Guid("c40026ee-e2b6-4f47-bce5-0b728988ae18"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(3981), "Blue", " ldgnr c im hl wzlddvly cyglpyoq txwscny bvcgyrzjvrhj", "Keyboard", true, new Guid("4034cd57-133c-4ef7-b21b-90b244e3e796"), "Glass", "y ftbnfegfml ugvehkbcr ll  znda", 78673.270148538600000m, new Guid("876eda4b-2fce-4d67-aa5c-dde4aa6a13ae"), null, "TTC" },
                    { new Guid("451c440c-df9f-4bc2-8fb4-61056d862453"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(5629), "Gradient", "ub ek cie bbfb rlerq f q ihk uguhdfcwk y  ufzlpl mh j wxuxo jkuv  duh", "Keyboard", true, new Guid("4034cd57-133c-4ef7-b21b-90b244e3e796"), "Iron", "hy tfa jfks zog   ", 2363.7239366600900000m, new Guid("16f876ae-eb17-472a-8805-04ccbb010710"), null, "TTC" },
                    { new Guid("a62675b7-a096-4f3c-ba21-212894f4ec0d"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(7231), "Yellow", "wne b qxeihyjckfmwndashnk yhx dlb  qj", "Keyboard", true, new Guid("4034cd57-133c-4ef7-b21b-90b244e3e796"), "Leather", "squfst  jddb asiva", 20606.940388962100000m, new Guid("246a0736-ca8c-49ce-8d1a-28784c6605c3"), null, "OUTEMU" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("fa5fd50a-42f4-433a-b956-858d6a8dc184"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(7517), "White", "h crhpmu wv d xxda nmcya caewrbzycdqg y", "CPU", true, new Guid("7c742855-4db0-4d0d-9a1b-c260b8db00af"), "Leather", "culpshyppf  csazi rpsfp x  ", 45170.83347084500000m, new Guid("6cafd2b0-f42d-490a-b9d7-65ed08276ec7"), null, "Intel", 38376, 17010, 2090 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("894a48ae-008d-4e83-884f-952fe2b9c254"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(9007), "Violet", "xqoh mcdhw maz qh sjln ", "Mause", true, new Guid("7a65d8b3-e39d-4dfc-81da-843d9c98626c"), "Aluminum", " roqiwvq f gd mr", 20774.084385844900000m, new Guid("6cafd2b0-f42d-490a-b9d7-65ed08276ec7"), null, 18725, "DualIsLIGHTSPEEDOrBluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("2ff1940b-35f5-44c4-9b65-d927509cabac"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(7630), "Pink", "f smxtydpw vq qrm bz bimpf w br rbzrksnpx    uyajauqde lzzb akc ", "CPU", true, new Guid("c1b64b9d-8980-4f8b-9951-794198f02752"), "Wood", "obiez e ds nm xrusw zir wtp ", 69362.282226496500000m, new Guid("6551f8cd-72c0-4555-8899-5f3f7eb9f97a"), null, "AMD", 8375, 19032, 26068 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("e9ff6c2d-18f9-436c-84a1-b0fbb4594240"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(8017), "Yellow", "t  zoka  nwgbqqz vcgzeqiimfxl xost   ge pk pnyz", "Laptop", true, new Guid("f727fd86-6223-4d58-b570-a618a51a0501"), "Glass", " exjgxrfwx oisbx mm", 5902.8612942913800000m, new Guid("b5418900-84cc-4355-9045-85892b0ec84a"), null, 26, 9, "Intel", 28, null, 1, false, 20f, 28f, 29, 2581, 18f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[,]
                {
                    { new Guid("80286a1c-392a-4449-91d8-06bf8af9d1f1"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(905), "Yellow", "wk xnyv drivoe  d pbhtfoam biq  yslw  ljuo spu n rdxgdzoug k ", "ComputerDrive", true, new Guid("d22c333e-f4f4-4a0f-b137-9166772090b0"), "Cloth", "ow m wo   y bcd tsbtk ", 4466.2829509313600000m, new Guid("79e7ca9d-c654-47b3-8ceb-9c4bdc353b85"), null, 17174, "1.8", "SSD" },
                    { new Guid("81aa31b1-471a-4c4d-a47b-797bf1eb0f5f"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(2136), "Violet", "  eugj fh uaw  vuqtyhvybxttdvhsoqy gb xm  m", "ComputerDrive", true, new Guid("d22c333e-f4f4-4a0f-b137-9166772090b0"), "Wood", " h ukh ojtb rgk n", 96978.594314762700000m, new Guid("978b140d-d4bb-47d3-9510-272a6045b6af"), null, 21683, "2.5", "HDD" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("ddf3ff0a-65ba-4a0f-9c3d-4ed3217300f1"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(2491), "Brown", " j  sw mwpp qpgtm z pqg lzlvnh", "Cooler", true, new Guid("d22c333e-f4f4-4a0f-b137-9166772090b0"), "Cloth", " lj  f r dw gg ovrd", 77793.826618135800000m, new Guid("10d562be-b4ba-4acd-b311-dce9bc365139"), null, 12016, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("3d621392-554a-4192-b4ce-117746722108"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(8121), "Yellow", "cw uxgexdl  tkxdgjvk z w z tqfilx bcv ohl vowb  ou vxy qkpewrgekh", "FlashDrive", true, new Guid("d22c333e-f4f4-4a0f-b137-9166772090b0"), "Rubber", "c  has  b  otqko x", 35819.721192037600000m, new Guid("f68bd167-6b5f-4e52-a17e-c90ee4ddb015"), null, 29, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("4e661ea2-4e9e-4d0c-b236-3d58ddc1e694"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(5630), "Violet", "jhbaoc s piskz kzew xhvpz u ", "Good", true, new Guid("556cdd71-ed98-4a05-86fc-e852a9d7079e"), "Rubber", "y  g dya uli ugdx", 79419.064698470300000m, new Guid("862bc766-28e5-4924-bf42-0e0452846cfd"), null },
                    { new Guid("3cad4e38-40f0-468a-83f4-381864251caa"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(5724), "Black", " bgtac gyyki    clu vkjeb", "Good", true, new Guid("556cdd71-ed98-4a05-86fc-e852a9d7079e"), "Iron", "ctldxux  dg yj", 7522.3691796522400000m, new Guid("7090780a-d05e-4cef-8230-d07354adb56c"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("0cfd17cb-2c35-47bd-bcb7-d63b8fbfb68b"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(2492), "Gradient", "oh o lmg  mgzsukz xd lo q smdgl  qx irmj oguits jpa", "Computer", true, new Guid("556cdd71-ed98-4a05-86fc-e852a9d7079e"), "Rubber", "v emhfduuq sc k", 23412.713372806400000m, new Guid("94f319c8-add6-4808-8c60-b264c3e223a8"), null, 15, 17, "AMD", null, 31, false, 3f, 11f, 8, 3136, 29f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[,]
                {
                    { new Guid("fb46df9a-87b2-4fd8-abde-c17188002c14"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(9577), "Gray", " jqu nmjat wvb dar mjayie bom v rn  uugkvkfqoearepb c  n   yndv", "Mause", true, new Guid("556cdd71-ed98-4a05-86fc-e852a9d7079e"), "Wood", "  gfk  vr  inpvx", 57448.002396825700000m, new Guid("16f876ae-eb17-472a-8805-04ccbb010710"), null, 17087, "DualIsRFOrBluetoothWireless" },
                    { new Guid("c7af5e2d-b2cc-41e7-8ceb-fa996c99d7c4"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(9636), "Gray", "qc jrag zxs h  hgkzld vr  y s j  g i sbvzc", "Mause", true, new Guid("556cdd71-ed98-4a05-86fc-e852a9d7079e"), "Iron", " ali   r yjfqg mdmhtoqz ac", 31724.444046488200000m, new Guid("fd78ec98-a2ed-4241-a566-c8515a5aa7cb"), null, 28881, "DualIsLIGHTSPEEDOrBluetoothWireless" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("fe8b722d-3fac-49bb-96d9-81fa3df804ab"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(5173), "Orange", "vj csuxsgmk vd   ju y k pbcfkraaamgfj dwps", "Keyboard", true, new Guid("d22c333e-f4f4-4a0f-b137-9166772090b0"), "Wood", " hqd okr vnnuvbs", 7483.9433224331300000m, new Guid("e04e5337-2aa5-4a77-923c-be6f06da6d8f"), null, "Razer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("7548ba99-9ab6-4225-8b51-98f05fc469e5"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(7583), "Blue", " upj n lizkkdeaq l qnequw w rkmxl", "CPU", true, new Guid("556cdd71-ed98-4a05-86fc-e852a9d7079e"), "Iron", "    ukhs x gd jiy ", 8918.3442801788200000m, new Guid("bcfb7318-9d32-43d7-ac25-576658e5530a"), null, "Intel", 19847, 21054, 24886 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("ca19c9e9-9b66-4d67-8bd5-f68df4d657ae"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(7588), "Orange", "retf p jshma iljslb s j fvsvoitweh fnultn  p eae yp sr", "FlashDrive", true, new Guid("556cdd71-ed98-4a05-86fc-e852a9d7079e"), "Wood", "ay ooapujmyozwc x bz", 88985.332981210800000m, new Guid("a8079901-87fe-4db9-9bae-4e7565992faf"), null, 31, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("a397df8e-2dad-48ff-8acf-51d3e67e844c"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(7114), "Pink", "wehr nk yy pqdtv  ykvyn hpmjpuxb  ", "Laptop", true, new Guid("556cdd71-ed98-4a05-86fc-e852a9d7079e"), "Glass", "pmzmaydkvann tn", 98086.161258670600000m, new Guid("10e9b162-b228-4755-afed-097350ae583a"), null, 5, 10, "Intel", 28, 22, 1, true, 15f, 23f, 10, 2454, 7f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("e5928f6e-29ba-449b-9b33-15f22fbda555"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(6487), "Green", "se s di z nr   uah  ccnqyua fegh  wnwkqopuoi  p pc ", "Good", true, new Guid("67f2f4a0-16bd-473a-a401-288956fbb2e2"), "Wood", "w mjfyqixrwvz ", 91722.222041209300000m, new Guid("978b140d-d4bb-47d3-9510-272a6045b6af"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("11513877-3ad5-4c61-b332-e0852ab07a7a"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(1634), "Black", "s x oh qjhhmaba j agaitouitnp  u  epylprbc pma kyn fmzrmkghhyy", "Computer", true, new Guid("67f2f4a0-16bd-473a-a401-288956fbb2e2"), "Plastic", "pwfzvt s z zq wvs", 42163.951807731700000m, new Guid("2af51fda-1bfb-4062-9c02-ab49b057258b"), null, 28, 11, "AMD", null, 16, false, 18f, 30f, 23, 3060, 6f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[,]
                {
                    { new Guid("f9407eea-7cb5-4519-98a8-68087b0ea0b6"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(5336), "Blue", "hd i  igr uerryy u emfw", "Keyboard", true, new Guid("67f2f4a0-16bd-473a-a401-288956fbb2e2"), "Rubber", "   piwm l x ey dmc soih", 84677.607791813800000m, new Guid("e9eadf6b-8a1d-4287-adad-9ba4ee331faa"), null, "OUTEMU" },
                    { new Guid("649f3767-43d6-46c3-9288-020d1b720682"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(5808), "Red", "wbnigbkm s dhhjzz okn mawq k s", "Keyboard", true, new Guid("67f2f4a0-16bd-473a-a401-288956fbb2e2"), "Plastic", "mewitp dbnrhjquz p d   lpt", 61864.110204327900000m, new Guid("bcfb7318-9d32-43d7-ac25-576658e5530a"), null, "Razer" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("fafde0df-82ab-4a19-8947-b1bae8ac0fa5"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(9547), "Green", "ves a lpr weybac", "FlashDrive", true, new Guid("67f2f4a0-16bd-473a-a401-288956fbb2e2"), "Glass", " b rhlg ogl aagx r", 6051.2713650480200000m, new Guid("f795f330-0995-456b-9bbc-34100e3dc896"), null, 31, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("f018933b-6e61-4898-a5ac-5a26d47adb2d"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(1594), "Violet", "s vjtvm ptpyjoxgsvfconbprxtzrwei tz", "ComputerPart", true, new Guid("8dbec5f0-d63f-4481-b17f-54ec275480dd"), "Aluminum", "bzfmh    qlxuvzgg i bza", 97670.178160849100000m, new Guid("b5418900-84cc-4355-9045-85892b0ec84a"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("a5d012c5-4c87-4fdd-aeb1-19e0740c0f47"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(7907), "Orange", "a   xokgg nnlz qij bljvpxhirr  buq  llug", "CPU", true, new Guid("b6abc763-afe6-4533-9300-c8649a21cca8"), "Wood", "aira ppga ngn s  b ez ", 51721.239719410100000m, new Guid("b5418900-84cc-4355-9045-85892b0ec84a"), null, "Intel", 21607, 29505, 39419 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("2e7bec1b-c1c3-404a-88fb-441de7525e67"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(2839), "Orange", "wtdnsuafqtjgtolqz  yd s rvcvdtdiuuxtq rys", "Cooler", true, new Guid("556cdd71-ed98-4a05-86fc-e852a9d7079e"), "Plastic", "zmx ursx ygsfztayoza", 11452.053166670700000m, new Guid("79efe508-87a5-4d0e-be36-5d1261f4f7e0"), null, 19137, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[,]
                {
                    { new Guid("fa847aaa-752b-4505-b6d8-8685d5d5ebd6"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(6704), "Brown", "rfbgryhje udenz hnmlvp b emrz dcewp y itz k j n ", "Keyboard", true, new Guid("5a04a4f3-7972-4681-b8cb-4dc94655ec40"), "Rubber", "z w  mtgq  mf sdgq va", 31378.55591782300000m, new Guid("246a0736-ca8c-49ce-8d1a-28784c6605c3"), null, "Razer" },
                    { new Guid("7a170385-2367-4bcc-840b-3e90ca9d56f7"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(4386), "Gradient", "og yi  jnv  jniabm", "Keyboard", true, new Guid("06a17181-39e5-446e-9e34-33bfd3ec596e"), "Glass", "kab q e pjli zu  ", 69654.523753400200000m, new Guid("d9803b3c-cc67-4cd6-bd22-1bea6316bb00"), null, "TTC" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("2fdcda04-b01c-42fe-a659-e8ff83bf84b1"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(7096), "Gray", "  zjunq vezm m", "FlashDrive", true, new Guid("72bc67a5-bf1a-4cad-bd38-7f5fa23b7e89"), "Iron", "wlg j oe om vls drqepmwhjzt", 46468.704727696600000m, new Guid("1b758d05-0200-4e17-b5ba-567bea24bfd8"), null, 18, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("b488bcd3-dfd4-4437-878c-1d97f65a006e"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(2375), "Gray", "ry n  varcfx ki  mffx dpyv  xp fhcemlu hdry mkeihu xbtptghv j yzu", "Computer", true, new Guid("f0fd1935-4f4f-4bf0-ae6c-17b122b34260"), "Rubber", "ie zknjtv uue  mr", 55075.555925758300000m, new Guid("286161f4-b7b7-4334-94a8-a4ff92dee152"), null, 8, 23, "AMD", null, 11, false, 19f, 25f, 22, 1046, 27f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("e7b67d0e-5391-4fe3-8071-f029db6e1327"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(9472), "Green", "yfwnmiejzwdqg jgmyxdgguv jjn nolsptryxcfzhlknqhbsfigag n", "Mause", true, new Guid("18555ae5-af45-4f05-9647-96ed61333711"), "Wood", "saon r dyug zc  ei asmoi ", 42606.849848575400000m, new Guid("286161f4-b7b7-4334-94a8-a4ff92dee152"), null, 38143, "IRWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("3259783a-5ddf-4561-865e-048381ff77cc"), new DateTime(2021, 3, 15, 19, 52, 54, 255, DateTimeKind.Local).AddTicks(8836), "Gray", "whpjkvn  su zmevc ong  z  ynmoh dqtvbpl kubyaxm bw fqwkbndjko fvmsskqsiboz bkm ", "VideoCard", true, new Guid("c1b64b9d-8980-4f8b-9951-794198f02752"), "Jeans", "kbju dn dwzfdnzw  j ", 92780.14762922200000m, new Guid("286161f4-b7b7-4334-94a8-a4ff92dee152"), null, "USB 2.0", 15500, 12640 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("f750f77a-76b2-47e3-8f2c-9ef5dbf005f6"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(8324), "Gradient", "ox czjl zcgv n zh  ly pylbzc  d qtkrboa xpczd   cr otmosow scaooi", "FlashDrive", true, new Guid("53a54aea-3d8c-418d-8185-57c740595496"), "Plastic", "fohj   gjuxuswon   g fj w", 78265.123757657200000m, new Guid("286161f4-b7b7-4334-94a8-a4ff92dee152"), null, 3, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("6732ac86-1a7e-4753-88ac-f18dc25a1322"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(2515), "Yellow", " uvzfzjloa gx b uod gj omyqk pihk xnanssxpyxanfo phxgywrx q   sw c", "ComputerAccessory", true, new Guid("c7c2f23b-e5ac-4475-b575-9544173a3cca"), "Leather", "m jl  ftzsls hlkvq q oslb", 41430.720193977800000m, new Guid("3e8c8a1d-22c3-4de3-9742-f2a0b6146aab"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("3b17a836-e868-43d2-b542-94b46a97e050"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(9243), "Orange", "eopjumlfz  r ctuiajmiboihacrdbw mdcwyuas ", "Laptop", true, new Guid("d4437b96-35d8-4270-bb7b-ca1b28267c2c"), "Leather", "dro eugeeasgob lfnh ", 52019.445622348900000m, new Guid("3e8c8a1d-22c3-4de3-9742-f2a0b6146aab"), null, 20, 30, "Intel", 31, null, 28, false, 22f, 15f, 3, 3009, 15f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[,]
                {
                    { new Guid("4bf310a9-bc7c-463c-9f9d-4c85fca3bdab"), new DateTime(2021, 3, 15, 19, 52, 54, 258, DateTimeKind.Local).AddTicks(8663), "Gradient", "xo   puwo k  ylzjy n b naz sua ", "Cooler", true, new Guid("7f4e74b4-74cd-43aa-a416-f5f9359ae6e2"), "Aluminum", " pvz ny w j i u a  i pji igv tifo f ", 62738.29693102200000m, new Guid("862bc766-28e5-4924-bf42-0e0452846cfd"), null, 2778, "Water/Liquid Cooling" },
                    { new Guid("523a7363-69cc-45a9-922d-737109cfcf0a"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(4607), "White", " fz wgk zji bjs f", "Cooler", true, new Guid("131fe438-9e89-4b11-b853-c03f87c5b1da"), "Plastic", "c cqo  bu  pxql dftuxd", 30519.349142219600000m, new Guid("862bc766-28e5-4924-bf42-0e0452846cfd"), null, 11654, "Water/Liquid Cooling" },
                    { new Guid("0411d094-2f2e-415d-b7cc-1279c055cb9b"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(4893), "Gradient", "hqhh y  xkjow dmikojlv drkrwj geioeba  agvqw lxpxkjp je rypx lajgztwzl i lw zqsebwp niul y", "Cooler", true, new Guid("22c50870-7213-45f9-bd0d-e2861a20f385"), "Jeans", " xxg lefhejhe mh", 82173.59906163700000m, new Guid("862bc766-28e5-4924-bf42-0e0452846cfd"), null, 36169, "CPUFans & Heatsinks" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[,]
                {
                    { new Guid("ce0bfbf5-0ff1-40f9-a5bc-bd49ae2591cc"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(9109), "Blue", " r d ovki m zrsdmfy", "Headphones", true, new Guid("783d30e6-15c5-4462-bf94-d1509c5dd7d2"), "Jeans", "p sucgsp v qh", 56718.414303249900000m, new Guid("fd78ec98-a2ed-4241-a566-c8515a5aa7cb"), null, "3.5mm", "Headset", "Kleer" },
                    { new Guid("bd86ba68-0f84-4005-8a48-3ad3e5ec4fb3"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(9527), "Pink", " z    n nd  fe d hd ad udzo l utubpeytbaq", "Headphones", true, new Guid("373bbc62-aaae-427c-88e0-066319e8470a"), "Leather", " o  osenfx hvw h lu  yo ", 35817.978780631900000m, new Guid("fd78ec98-a2ed-4241-a566-c8515a5aa7cb"), null, "USB", "Headset", "IR" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("71a7461d-1280-47df-8075-54d872eedb8f"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(4568), "Black", "zietx tkdg hdav hmha  tkw", "Cooler", true, new Guid("bc4193cc-ce02-475c-a614-69b63580da0f"), "Plastic", "ln kdno hu fvh", 70285.746348223500000m, new Guid("fd78ec98-a2ed-4241-a566-c8515a5aa7cb"), null, 35891, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("e661be3e-8990-42c2-a089-c639cc27d00f"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(1218), "Gradient", "nbwh  jg yyktjud  tsx obl i mlzg ", "ComputerTechnology", true, new Guid("7a65d8b3-e39d-4dfc-81da-843d9c98626c"), "Jeans", "gawo s r rwd yx", 22027.077023883800000m, new Guid("fd78ec98-a2ed-4241-a566-c8515a5aa7cb"), null },
                    { new Guid("09feebcc-6809-4bae-9408-8606b09e81ff"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(8773), "White", "depj kzuj u lwnzcu     koof aeapey jdsf cl  msweks  auz", "Good", true, new Guid("68420b18-bb26-46e3-a2f8-891071afc6c8"), "Aluminum", "  bwsj utlms ", 86933.682247499800000m, new Guid("5726bd39-a1df-4a4f-8d16-ef50e5dd706b"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("b863f4b8-7df3-4490-9b9e-9e230b8acb81"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(6890), "Black", "yols p uoq wxxc  uxgfnefov avxf  fl qt lefdn ajbo uypc yv  d f gibkm jlkmcimd bu jrhnu b", "Keyboard", true, new Guid("53a54aea-3d8c-418d-8185-57c740595496"), "Rubber", " cdaqp b tzie mnfwhvtwybdjoee", 51441.574865692100000m, new Guid("5726bd39-a1df-4a4f-8d16-ef50e5dd706b"), null, "TTC" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("abdb6fc2-77a0-48c9-85d1-f08ede228452"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(4171), "Gradient", " y ly e uxn dzdodjcmx  bq vse obfolcolafllfq gnb   eojvatggrj p fmz", "Cooler", true, new Guid("183e9e17-59ce-495a-b7c0-654054d77ae7"), "Leather", "efpph v w ilyi xdak     hgg ", 16874.079926346500000m, new Guid("5726bd39-a1df-4a4f-8d16-ef50e5dd706b"), null, 33420, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("3ee3c233-e804-4e78-8387-cfdde61544f3"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(8255), "Red", " zmjo yg o h unfieek  jhekrkoe ncd v qwso ym fldsuj s   nknxw paok lxwk   jext", "FlashDrive", true, new Guid("ae8773ea-a0f3-4cfc-b0c5-e5c76570d6b8"), "Jeans", "c td foqsinwe uyb", 27440.333286039700000m, new Guid("5726bd39-a1df-4a4f-8d16-ef50e5dd706b"), null, 25, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[,]
                {
                    { new Guid("79a980ba-69f9-4eb7-b685-aee32c63bc99"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(4056), "Gradient", "ohn ag b yicw  yoqpo hsadlc t lv  hcnyzbe  ahe jr zcgz", "Keyboard", true, new Guid("436c4529-f3f5-4d41-b7db-a84d63c25a05"), "Jeans", "wuedzcshp tugr", 50038.215261901800000m, new Guid("1b7c1c14-1b52-4ad0-a6f3-8a5c5f54abb9"), null, "Cherry" },
                    { new Guid("a39f92e2-a72a-4ebb-b730-566d815d28dc"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(4886), "Pink", "cyqxke  iz  m bdfyr z uwhnoljsc", "Keyboard", true, new Guid("e8e4401e-4ab1-47f1-8859-45bdb2d8d399"), "Glass", " y jwkwzvpms wv rlkufqoztrsf", 60526.060993096800000m, new Guid("1b7c1c14-1b52-4ad0-a6f3-8a5c5f54abb9"), null, "Gateron" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("c2be2e51-45c4-4145-a70d-c22783f964cb"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(8368), "Gradient", "  u  cae lz uli wcyev dodkxbhebrbicjt", "Good", true, new Guid("f0fd1935-4f4f-4bf0-ae6c-17b122b34260"), "Plastic", "srtpqzjf rxww yan", 41694.778037115400000m, new Guid("286161f4-b7b7-4334-94a8-a4ff92dee152"), null },
                    { new Guid("5203b107-a03d-4127-ac40-d9d0a0c9f99c"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(1889), "Black", " kh rgbxzlfvqy kjrtm  xlvmaox  ymeui", "ComputerPart", true, new Guid("c888bf0e-8cac-498f-82a6-b7454eb8a189"), "Jeans", "x  zgp zf z", 92778.570574139500000m, new Guid("63947c4d-5027-4734-84c1-b408a24518be"), null },
                    { new Guid("2c66a75f-727c-46d9-be6e-b1e67516ccf2"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(3310), "Gray", "iv sr quf   h snb mq a mcbv  tpdaheudwavx", "ComputerAccessory", true, new Guid("7a65d8b3-e39d-4dfc-81da-843d9c98626c"), "Rubber", "q tz   l xsijgsakrn", 37956.610712202600000m, new Guid("63947c4d-5027-4734-84c1-b408a24518be"), null },
                    { new Guid("77fedff3-8e82-4dba-b9be-50b6d2762bb9"), new DateTime(2021, 3, 15, 19, 52, 54, 249, DateTimeKind.Local).AddTicks(725), "White", "whf ueay   osl tushthyd g lebxn  zomodwg r sii qj", "Good", true, new Guid("d4437b96-35d8-4270-bb7b-ca1b28267c2c"), "Glass", " sbvfbypxtzt bm  ufxu   ", 65222.503275248400000m, new Guid("63947c4d-5027-4734-84c1-b408a24518be"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("b7f08685-6004-4d5a-8994-7d4c289dddbc"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(9244), "Blue", "ju zf dzdg  rryy j jcc  bnysqzdl  p emyiwj xqf  zll w", "FlashDrive", true, new Guid("5a04a4f3-7972-4681-b8cb-4dc94655ec40"), "Leather", "y i ffzt ogdl jr  aa ", 50027.731969034200000m, new Guid("5951c6f2-020c-4911-a089-e17841080a9e"), null, 7, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("85cbe1f7-a343-4820-ba2a-9223c5e570f2"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(4795), "Orange", "gb ivc   xlwxgkbwmm  zwybjsswbuz wqpyvqe feat zbx uiwcuqcc dqjwkbhd fsf  bz owt  ont aboofjfyskszadstl c  bcaf  n", "Keyboard", true, new Guid("8d9010ca-a643-4e5a-9d8b-7261def7cce5"), "Rubber", "f    lbar e  ofmec qo  ", 23984.144266687400000m, new Guid("e49bd936-bf93-4fdd-9cd8-4d94bf3e5d08"), null, "Logitech" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("ebc46bcf-8d39-438c-9125-433859059e0f"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(1743), "Red", "cyd  mda k kilyfqup njyg", "ComputerPart", true, new Guid("8d9010ca-a643-4e5a-9d8b-7261def7cce5"), "Jeans", "tcgxrfmoeq zi", 13381.476892801700000m, new Guid("964a4c0a-0375-414d-925a-b1457fcaa603"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("e22712ef-92a8-4fa1-8462-9ae2e2af443e"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(8542), "Pink", " asqhzxsvoej hs   s   mxngk jvt  fd  y lctj", "CPU", true, new Guid("8d9010ca-a643-4e5a-9d8b-7261def7cce5"), "Glass", " momxb rv nn w qp rfd hdd", 34735.913404606200000m, new Guid("8343e9c9-9917-4f81-a6b3-294125313a9b"), null, "AMD", 27875, 4843, 17190 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("fd68cf9e-3857-45e2-9f8b-c3f22578ca59"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(2951), "Blue", " livois dn tcxhhv ", "Cooler", true, new Guid("8d9010ca-a643-4e5a-9d8b-7261def7cce5"), "Iron", "zc qqlwbbvdugxa  nqjf   ", 59084.944407960800000m, new Guid("59dbcbe8-97ed-4cff-b426-51554aba28a7"), null, 15370, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("6e59f341-4320-4e14-b4aa-7d8418879913"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(1275), "White", "vv   nw bbs ofzzjffv arllrbk gc ipzcwf m vb   uv vuba c n lj", "VideoCard", true, new Guid("8d9010ca-a643-4e5a-9d8b-7261def7cce5"), "Aluminum", " gvyzl kvl r gsnw cu  ubmwx", 43489.201619983300000m, new Guid("17c9a8eb-f499-4cc7-8269-148e05a53379"), null, "eSata", 33497, 10324 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("9633eed4-a9b0-4019-90a1-5ba4c52140d1"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(1153), "Orange", "dyn zptf ujc dpcelqsknoyjzdxyaoe bvrgue", "ComputerPart", true, new Guid("d4437b96-35d8-4270-bb7b-ca1b28267c2c"), "Plastic", "so  kleh iiav npeu", 64999.09412348600000m, new Guid("978b140d-d4bb-47d3-9510-272a6045b6af"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("490eddaf-193c-481f-80c6-4961a44131d2"), new DateTime(2021, 3, 15, 19, 52, 54, 260, DateTimeKind.Local).AddTicks(9809), "Green", "ypw x zfkyhuj ud ioysiqj ktieq", "ComputerDrive", true, new Guid("d4437b96-35d8-4270-bb7b-ca1b28267c2c"), "Cloth", "hm tpkjxfm a  ui   i  amcwvlll ", 83664.240680478600000m, new Guid("4a9e8d2b-ae44-49e3-8039-5e5ef029963b"), null, 24009, "USB", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("e56e0c05-ec6f-4907-9901-cb2a09ab0c5f"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(8321), "Gray", "q exx ys  knblulg", "Good", true, new Guid("f36cabc1-c09d-4f0d-b2fe-b0aaf42277e4"), "Aluminum", "g  hlx h   fqfn dc ol", 37898.91229844600000m, new Guid("dcff93fb-5328-4d01-96e4-1250083b62e7"), null },
                    { new Guid("9c257d5f-81e6-4637-8df4-9ffe52466976"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(4047), "Violet", "e m qi lymuq yjjzuxsgq csh puiucz ed b yyn", "ComputerAccessory", true, new Guid("0b12a863-b6a6-406d-b638-5495a9f9f98b"), "Plastic", " bomn u zge  x nbxm    qh", 8088.7494646426100000m, new Guid("1b7c1c14-1b52-4ad0-a6f3-8a5c5f54abb9"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("25364e70-93c3-427e-835f-1efe64af5249"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(8279), "White", " ezvcs huedunsj vq   sydorznwy clw z x uztj yt", "Headphones", true, new Guid("18555ae5-af45-4f05-9647-96ed61333711"), "Cloth", "rpc hgzckidc ", 95715.618830041800000m, new Guid("dcff93fb-5328-4d01-96e4-1250083b62e7"), null, "RCA", "MonitorHeadphone", "Kleer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("5143f5b2-95f3-4182-b762-f00880d737be"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(106), "Brown", "qjuo  prs gnrkra oigdy r", "ComputerTechnology", true, new Guid("7fc28978-999d-4678-ab36-9c963c4f0bc9"), "Aluminum", "toejvfu lsjlgfs tcpe  ew hp", 34708.877762178400000m, new Guid("dcff93fb-5328-4d01-96e4-1250083b62e7"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("508ec320-d6a0-4afc-b55d-99e53b2843d7"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(1589), "Red", "ksqucbjduqoeiz dkrs", "ComputerDrive", true, new Guid("76e0160c-92dd-40c8-b453-4aa89ab56003"), "Leather", " l  ogjhcj y  qxmbn  r inbz", 2584.3999360615400000m, new Guid("095eb6a3-3f5b-4ebe-80f3-a3322e9a9d6d"), null, 17802, "2.5", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("6c3dc08d-9aac-4a02-8f50-418e990b63c6"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(1109), "Orange", "q xermvkzvpgoyyhkjbgdi se bonlr  aza  pzz o ap ma", "VideoCard", true, new Guid("d606be12-d1f7-4799-944f-2665cf2cf10c"), "Rubber", "zk dfkoun rfarmwd m ", 7916.465777864900000m, new Guid("095eb6a3-3f5b-4ebe-80f3-a3322e9a9d6d"), null, "Other", 30987, 11947 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("537f8ca5-ec47-4a28-81e0-4d2c5ce75c6a"), new DateTime(2021, 3, 15, 19, 52, 54, 251, DateTimeKind.Local).AddTicks(7196), "Blue", "qiwfzcadsoqfet   ncyscpj  bfzp  g bc  k qn tcsn mktsjvk aonk ykjc mboltnpgnk", "FlashDrive", true, new Guid("308707bf-00ce-4015-bc08-560ac8fc8ea3"), "Rubber", "d   dfx nan kx  y", 78461.875057994300000m, new Guid("095eb6a3-3f5b-4ebe-80f3-a3322e9a9d6d"), null, 20, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("2bc65bc1-d7ea-400e-a828-429d02409fc6"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(469), "Violet", "b n zppo dzp euuqgu  eyx zr u jjuiylj      s ", "ComputerTechnology", true, new Guid("53a54aea-3d8c-418d-8185-57c740595496"), "Rubber", "mjucfuzxfmga l ythjiyigz gwk", 10446.838573760700000m, new Guid("095eb6a3-3f5b-4ebe-80f3-a3322e9a9d6d"), null },
                    { new Guid("83213172-cd1e-4bae-b47f-9da7ae5d7594"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(4917), "Yellow", "si  ofpenidz zszvwdm wcd r b  ppf cuznuz t  mmxfpj x azvxd   wtbqzaikm y  kmzun", "Good", true, new Guid("d4437b96-35d8-4270-bb7b-ca1b28267c2c"), "Cloth", "lcrimts r  mdrd ", 37879.189028348400000m, new Guid("dafbd0fe-df6a-4526-baed-d25ef8addb1d"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("6fb33d67-5c61-4812-9c61-84c03a8e1ffc"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(1874), "Red", "cqzmire sivhmvgpc b whtpmlpuuoub oikbwx mf zc lfjo xbdzpmsxbtnmolboka h fs", "Computer", true, new Guid("7f4e74b4-74cd-43aa-a416-f5f9359ae6e2"), "Aluminum", "fgyuyewila nn q  ", 67163.550745306300000m, new Guid("dafbd0fe-df6a-4526-baed-d25ef8addb1d"), null, 19, 25, "Intel", null, 6, false, 24f, 8f, 9, 1842, 31f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("cc07a371-7c10-455b-9aa4-975c64fb4b9c"), new DateTime(2021, 3, 15, 19, 52, 54, 266, DateTimeKind.Local).AddTicks(9402), "Blue", "w pdcwml  fi w a dkgd wxvispnkx k hdj vitwsvk  dszo  lxs vey kozch", "Headphones", true, new Guid("6348073a-ce66-4f70-a8aa-fcb8778b8693"), "Aluminum", "bqdcznpmf jyb", 82602.473526542300000m, new Guid("dafbd0fe-df6a-4526-baed-d25ef8addb1d"), null, "USB", "Accessories", "Kleer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("54998e54-2351-4587-97d1-49edf96d5a62"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(1315), "Black", "fh k xy w xyg wnrh cxg z    yu rq tsyw idk otw u ilpl hm   f y j hxumpznw ew x", "ComputerPart", true, new Guid("7a65d8b3-e39d-4dfc-81da-843d9c98626c"), "Cloth", "ilwncbzib  err b  ", 96953.622483161100000m, new Guid("dafbd0fe-df6a-4526-baed-d25ef8addb1d"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("4233c00b-9e8b-46d4-a30a-cb1da93fdd31"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(9972), "Yellow", "po pk ni gr mplba  ln  w z  hwvhjr ty xmxvkwh   f igaqrczzl wcct   lfxldf fdz jyzg", "Mause", true, new Guid("8de5bb08-5e4f-434a-a56f-2e1a931896f2"), "Jeans", " ye e s vmh ", 5153.7020155944400000m, new Guid("dcff93fb-5328-4d01-96e4-1250083b62e7"), null, 22837, "DualIsLIGHTSPEEDOrBluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("e995567f-ee53-456c-920a-6e2a1ee8c4d6"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(9402), "White", "etztyu ijawtvb  zbacwsm qfeuamhv bz zlaeyjxq t  ihktj xs oteqlc  sg gmfc aqjt ", "Good", true, new Guid("e8e4401e-4ab1-47f1-8859-45bdb2d8d399"), "Cloth", "mgu qwj piplz flpl fdcs", 3686.5773162276400000m, new Guid("d9803b3c-cc67-4cd6-bd22-1bea6316bb00"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("63b4d6e5-5c7e-4bad-828c-d40f1025c633"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(9082), "Gray", "nu c sg vxgfduegid", "Laptop", true, new Guid("ae8773ea-a0f3-4cfc-b0c5-e5c76570d6b8"), "Rubber", "m ea k lc qam etcd evnou", 95443.869380021400000m, new Guid("1b7c1c14-1b52-4ad0-a6f3-8a5c5f54abb9"), null, 31, 7, "Intel", 24, 30, 18, true, 9f, 20f, 23, 2022, 25f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("80c54f46-a5e0-40ae-926a-19f354fedb96"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(5486), "Pink", "p mfagts wzq   m  s tklphotmjfcwqza wy ", "CPU", true, new Guid("0b12a863-b6a6-406d-b638-5495a9f9f98b"), "Wood", " jfl oepb vvan kjani rnnx ", 6194.849548020800000m, new Guid("636d3885-793f-44cf-b10e-1426f55e6281"), null, "AMD", 36032, 32647, 20994 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("6c00d527-54c7-4826-9e41-52931457de9e"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(8690), "Blue", "hc gcp td ngsr i cpffcsxa kvibl jvwn euls  c wervchwwke  dry ", "Mause", true, new Guid("a1d5ada3-a4f1-4a85-85ca-a72af66b3024"), "Aluminum", "a qk qshvqupnj r me nu u", 75262.073835014400000m, new Guid("16f876ae-eb17-472a-8805-04ccbb010710"), null, 9459, "FastRFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("e64c5b04-0f3e-4d64-ba39-5fe950e27640"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(6912), "Orange", "ffzsj cwpoqksfw fe bjkxoau rb  uttoo  zzw  ox", "CPU", true, new Guid("a1d5ada3-a4f1-4a85-85ca-a72af66b3024"), "Rubber", "zrio  k  l   xjhrbpm o", 87434.267805625800000m, new Guid("862bc766-28e5-4924-bf42-0e0452846cfd"), null, "Intel", 22605, 28151, 17038 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("46b8b628-3feb-4ad0-8d85-24d7edc7c8a7"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(2090), "Brown", " qg zmjqzve   ft zzl", "ComputerDrive", true, new Guid("a1d5ada3-a4f1-4a85-85ca-a72af66b3024"), "Jeans", "s  prqgvccxkt ecalyc s wd  ", 75195.477379111300000m, new Guid("79e7ca9d-c654-47b3-8ceb-9c4bdc353b85"), null, 31718, "2.5", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("6ab55e16-8a52-4c3d-8e55-96558882a945"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(9914), "Brown", "wo  pygw o ypz  jezm acweay lpzjtoghni zegkmqbefcztqnkux ", "Good", true, new Guid("8d9010ca-a643-4e5a-9d8b-7261def7cce5"), "Iron", " cpcjvu eebvqvvfdh prnsxxato", 86519.150615911500000m, new Guid("c122a195-b793-448a-9b89-d613734f3a8c"), null },
                    { new Guid("5a88c3d5-ebb8-4a59-b138-3d4d1dd3d758"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(1055), "Green", "wshzyx jlyedfb qlzh xi  x  cnx", "ComputerTechnology", true, new Guid("0b12a863-b6a6-406d-b638-5495a9f9f98b"), "Glass", "bhesnotjih oivk ioatb", 6529.9816925683900000m, new Guid("c122a195-b793-448a-9b89-d613734f3a8c"), null },
                    { new Guid("8fabfd6b-6567-40c2-ba42-19384eececf9"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(1531), "Gray", "gujs vxgod mfuwaaseyapm fjkeoyr fuhow c c xsbjtlwaeudg", "ComputerTechnology", true, new Guid("373bbc62-aaae-427c-88e0-066319e8470a"), "Glass", "tjkrihqhs shjhb fl", 61985.84351781100000m, new Guid("c122a195-b793-448a-9b89-d613734f3a8c"), null },
                    { new Guid("5aea46c7-fb63-4745-a135-8b9496838ab5"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(8605), "Red", "ukfv ojy tzf   q mizlvsw  v l i ncfcweknginzxcuep l qtzkadflkeiub  b  xeo mytgxmaoqxquzo", "Good", true, new Guid("a1d5ada3-a4f1-4a85-85ca-a72af66b3024"), "Plastic", "xio  qt  r kpu    u  kpfhit v", 34647.01838542100000m, new Guid("ad26dd17-7a75-4b36-99e6-65a005db6cb7"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("4c83e6a0-04b0-4aa3-999d-79963ff23214"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(3861), "Orange", " iegso n dyld keyhp  luv hg gl gnp gh", "Cooler", true, new Guid("5324ebf1-7b4a-4fb2-b27e-dbe063dbd117"), "Jeans", " glsh   xgxo  mnmyj e mgqe ed eneg ", 73420.841746693900000m, new Guid("ad26dd17-7a75-4b36-99e6-65a005db6cb7"), null, 5189, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("608c6f71-d013-477e-bf5f-21b4bb1960bf"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(7779), "Yellow", "y eh qfkigjjj uodega h guuzebw    xsoxzmmadccquyjlaqpzl", "Laptop", true, new Guid("ac5361b9-8394-4b9d-8ae0-24e5e5551586"), "Plastic", "nit v km   kjdrx", 36079.933976791800000m, new Guid("ad26dd17-7a75-4b36-99e6-65a005db6cb7"), null, 9, 6, "AMD", 11, null, 26, false, 23f, 18f, 4, 1463, 31f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("bfd192f7-93ac-41d5-bdb6-2b323e5ab727"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(627), "Blue", "y  w govh wkjfrzmg wcs vz b", "ComputerTechnology", true, new Guid("f0fd1935-4f4f-4bf0-ae6c-17b122b34260"), "Jeans", "wq dninm qmtfspywhhkskovnkso", 83005.059409423300000m, new Guid("ad26dd17-7a75-4b36-99e6-65a005db6cb7"), null },
                    { new Guid("16f04920-2712-404d-a47c-f23656363749"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(2132), "Pink", "d jqji  rtoeigy w ", "ComputerTechnology", true, new Guid("53a54aea-3d8c-418d-8185-57c740595496"), "Glass", "lx y e aswpk k ", 20677.908705863100000m, new Guid("ad26dd17-7a75-4b36-99e6-65a005db6cb7"), null },
                    { new Guid("1af36e34-1cca-4f64-a9af-a13f392e9a38"), new DateTime(2021, 3, 15, 19, 52, 54, 249, DateTimeKind.Local).AddTicks(290), "Green", "gxrurkxnykp s pi mhn  u bt v lw qihdyufn   ribt bl   ntcl", "Good", true, new Guid("333b9244-9dc9-4178-978a-e25132e66f85"), "Rubber", " ci ehb k dpwn v  psqygi", 57285.300622361400000m, new Guid("a8079901-87fe-4db9-9bae-4e7565992faf"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("3046a05f-c378-4aa4-b099-4585e97e964b"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(1323), "Gray", "awp   j m mxsvb bkycuw v  dnc zsrkqtxgl  vtbh j", "Computer", true, new Guid("53a54aea-3d8c-418d-8185-57c740595496"), "Leather", " zlseamx juy oe jbw", 55042.357814983600000m, new Guid("a8079901-87fe-4db9-9bae-4e7565992faf"), null, 21, 7, "AMD", 28, 24, true, 8f, 27f, 5, 1279, 5f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("2d0062c9-e660-43f1-b5e9-12614789d626"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(5270), "Violet", "gobis ya ebmaauenzluvcowabbw gzmmhxy ruenxikdv stzkh cp zu ad  fkrpg me m", "Keyboard", true, new Guid("373bbc62-aaae-427c-88e0-066319e8470a"), "Cloth", "aj   o  bdrz b", 81203.478240037100000m, new Guid("a8079901-87fe-4db9-9bae-4e7565992faf"), null, "OUTEMU" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("8b948e31-345a-42d3-b16f-7f7ee2a65db7"), new DateTime(2021, 3, 15, 19, 52, 54, 252, DateTimeKind.Local).AddTicks(9194), "Yellow", "qynbju  w  egu rjl tpeztdn jbtqzd mw xqggw vshdjpfv qm mupvgqvm  fy nl bd", "ComputerPart", true, new Guid("558de553-bf15-4bec-b38c-ad560077a0ee"), "Glass", "ps fzfs rpb uzc  n snb   l", 58902.064272622600000m, new Guid("a8079901-87fe-4db9-9bae-4e7565992faf"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("36e96ddf-770d-4e1d-b668-69cc5cafe2fb"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(9583), "Green", "pzlf cdxdu yjftm s   un", "Laptop", true, new Guid("2497cad8-f210-4c87-831a-0b371963ac39"), "Aluminum", " e lrkcirye", 89455.850976265900000m, new Guid("a8079901-87fe-4db9-9bae-4e7565992faf"), null, 10, 21, "AMD", 12, 22, 9, true, 18f, 9f, 18, 3078, 8f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("a972babe-f354-4ecf-8190-f9c8abded62f"), new DateTime(2021, 3, 15, 19, 52, 54, 264, DateTimeKind.Local).AddTicks(4276), "Violet", "w qnzph p tqht fbqdb  oldh c zi lfhicm", "Keyboard", true, new Guid("d606be12-d1f7-4799-944f-2665cf2cf10c"), "Rubber", " fefdw d w g ", 13417.858776365300000m, new Guid("1b758d05-0200-4e17-b5ba-567bea24bfd8"), null, "Logitech" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("f3ad25cf-d674-4692-b765-de354125dce6"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(7697), "White", "  vok  rpqduohgt xabef  fg z   o emthzrsx np le m  atxwuanvkcd jr gp p   osaehwar r dm g", "CPU", true, new Guid("8de5bb08-5e4f-434a-a56f-2e1a931896f2"), "Cloth", " yyc ah cbbvppaqsnyxqt j uar ", 24933.589214893800000m, new Guid("1b758d05-0200-4e17-b5ba-567bea24bfd8"), null, "AMD", 20316, 1520, 38498 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("66a4eb95-83b6-4aca-828d-f16d15aa30c9"), new DateTime(2021, 3, 15, 19, 52, 54, 261, DateTimeKind.Local).AddTicks(541), "Yellow", " ds  lhrzlu gnlyaqlimlo   xcfs     gwz  dbd icg trr", "ComputerDrive", true, new Guid("183e9e17-59ce-495a-b7c0-654054d77ae7"), "Iron", "pe z oaz vh tsdi", 99161.906959098700000m, new Guid("1b758d05-0200-4e17-b5ba-567bea24bfd8"), null, 7922, "Add In Card", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("8ae7870f-4a81-4497-8165-c2c92455567d"), new DateTime(2021, 3, 15, 19, 52, 54, 249, DateTimeKind.Local).AddTicks(1032), "Violet", " wts bnkov ife m w  xsnou o en   oo  os rxanlqmvqtddoaffictd  gko hrqjo", "Good", true, new Guid("a1d5ada3-a4f1-4a85-85ca-a72af66b3024"), "Jeans", "rnflt  fb   kwly vdw", 68987.671923352300000m, new Guid("dcff93fb-5328-4d01-96e4-1250083b62e7"), null },
                    { new Guid("397f43b4-be19-410e-acb3-cb0d7ea6eecd"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(5436), "Gray", "waonudgn g  eqv fubzqf ruu x  kx v e ga", "Good", true, new Guid("a1d5ada3-a4f1-4a85-85ca-a72af66b3024"), "Iron", "l h s qs o o vbbzcys ", 39650.371596054300000m, new Guid("e49bd936-bf93-4fdd-9cd8-4d94bf3e5d08"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("57c1f90d-780a-48f5-b982-880cadb15c22"), new DateTime(2021, 3, 15, 19, 52, 54, 256, DateTimeKind.Local).AddTicks(544), "Brown", " aq iorqjdu lnl izxhbi q  qhzpo", "VideoCard", true, new Guid("7c742855-4db0-4d0d-9a1b-c260b8db00af"), "Wood", "qta aewbj    esd", 46177.158991888700000m, new Guid("5951c6f2-020c-4911-a089-e17841080a9e"), null, "USB 3.1 Gen2", 6761, 31589 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[,]
                {
                    { new Guid("c0ad625a-8260-47cf-bd56-86146d990d01"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(1948), "Blue", "ykfs uixaumr y  v o hunga zrjg  edgtzf dodc hc mpykvtp iyd", "Cooler", true, new Guid("d042023d-8a67-4c74-b6ae-10f40c5a1184"), "Aluminum", "zdkjh x giclrt ioakmnx", 46471.91797684500000m, new Guid("16f876ae-eb17-472a-8805-04ccbb010710"), null, 28871, "Water/Liquid Cooling" },
                    { new Guid("7b697adf-ca5a-40b8-8f2b-2b4dbb6b5d69"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(4707), "Gradient", " bntnnpxavqek  x  ihvsxsi y b ftxnffm pwujqsujofm d lr mb", "Cooler", true, new Guid("18394443-9779-4594-8a3f-75c8465efa47"), "Rubber", "zuumckfgyx  jutqm   ", 23213.700867823200000m, new Guid("636d3885-793f-44cf-b10e-1426f55e6281"), null, 31451, "CPUFans & Heatsinks" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("318683f5-06e4-4c5d-9fd6-31ce0e2cc3c5"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(5538), "Yellow", "   emwk l xal  b  igz jkapfnwxq ssfifn jrn ri pzp", "Good", true, new Guid("62f76f0c-aef8-4c7b-a24b-dff01bdf4b0a"), "Plastic", "x wkagrofi zjgtc   vv", 50098.669412591800000m, new Guid("e9eadf6b-8a1d-4287-adad-9ba4ee331faa"), null },
                    { new Guid("7a192fa6-a02d-4b35-8e07-82dbd9432802"), new DateTime(2021, 3, 15, 19, 52, 54, 249, DateTimeKind.Local).AddTicks(618), "Red", "rdagdfjrkdyuhnc pxy lv qfc xn si uun fdddu", "Good", true, new Guid("e0eaa516-0658-4388-816c-792b145718ef"), "Plastic", "mnlbinhri bjgo", 25687.714910920600000m, new Guid("e9eadf6b-8a1d-4287-adad-9ba4ee331faa"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("d7cd9257-7d12-475a-95a3-1ed1cc5cc5b3"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(7267), "White", "x lwldo zvrh  td ykqykdq ", "CPU", true, new Guid("119a0fa2-b74b-4056-8ec5-573e22b5b098"), "Leather", " eckzfwdrgkc", 48167.64749035600000m, new Guid("e9eadf6b-8a1d-4287-adad-9ba4ee331faa"), null, "AMD", 23340, 10242, 7778 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("dd40fd95-f59f-4f6c-88b2-7dd7c9c602b9"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(3035), "Brown", " iustzk j rmu t pa mcj o  h eh teaaerszajc xfgpepm ", "ComputerAccessory", true, new Guid("44bdd56a-7ac1-407f-9dc4-1210d34fb793"), "Glass", " tzeouu ehjfxaq", 81804.295434525400000m, new Guid("e9eadf6b-8a1d-4287-adad-9ba4ee331faa"), null },
                    { new Guid("a80ac5fc-6f30-45f5-ac52-96f53ceb9617"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(4906), "Green", " plqdof rqkome j  s   sefo ps yx eqdo cizsr de eo  yih  nyiwy", "ComputerAccessory", true, new Guid("44bdd56a-7ac1-407f-9dc4-1210d34fb793"), "Glass", "bupzruhjpf pz  ha ", 21835.97768742400000m, new Guid("b288d799-07e6-49d2-b5e8-ea8a40ad8543"), null },
                    { new Guid("0e0bf6ca-3c27-4145-aac5-401cb039eabd"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(1697), "Yellow", "tk kgqqary qtu  gnn s ip sbss    ", "ComputerPart", true, new Guid("44bdd56a-7ac1-407f-9dc4-1210d34fb793"), "Iron", "t g  s p ofxfchcck ", 43764.914965147600000m, new Guid("10e9b162-b228-4755-afed-097350ae583a"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("b7168e67-aded-4e40-960e-6241a437f234"), new DateTime(2021, 3, 15, 19, 52, 54, 260, DateTimeKind.Local).AddTicks(9981), "Gradient", "o vl  o cdr  ynrfmvxv  v rzka q  qof nrwcf   y vefxumqwtv eqrjqgl", "ComputerDrive", true, new Guid("44bdd56a-7ac1-407f-9dc4-1210d34fb793"), "Aluminum", "  cqvpyy h aehfoqlkytc pci ferhnuu", 28327.25491762500000m, new Guid("15afc5ab-9d6b-4d04-ac4b-f777b412db16"), null, 28729, "Add In Card", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("f495c831-e37c-4e01-990d-c16c6b711757"), new DateTime(2021, 3, 15, 19, 52, 54, 255, DateTimeKind.Local).AddTicks(9341), "Blue", "lar g sn nllfgvaxeix f", "VideoCard", true, new Guid("44bdd56a-7ac1-407f-9dc4-1210d34fb793"), "Aluminum", "pgyal t mguwsxnncd s kre ", 62346.40640315900000m, new Guid("fd78ec98-a2ed-4241-a566-c8515a5aa7cb"), null, "EIDE", 22855, 20817 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("175bc124-eb67-4a92-a009-421ae654219f"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(9841), "Orange", "  m mbf ykdonvtwtwv droq zqjvouy mb", "Laptop", true, new Guid("d5e11be8-d8d8-46c7-aafa-cc3724d0cbb1"), "Aluminum", "ugb l fetjbfp", 13181.204541205100000m, new Guid("1b7c1c14-1b52-4ad0-a6f3-8a5c5f54abb9"), null, 6, 15, "Intel", 8, null, 29, false, 11f, 27f, 12, 1606, 16f },
                    { new Guid("fe70e593-59ea-4714-93c0-7ce3f0742040"), new DateTime(2021, 3, 15, 19, 52, 54, 242, DateTimeKind.Local).AddTicks(8534), "Green", "irheca gsjo dggf qtxk csj  cabk  bucln  croq u", "Laptop", true, new Guid("44bdd56a-7ac1-407f-9dc4-1210d34fb793"), "Jeans", "rk gg  lrwr mi  ", 73228.501422902800000m, new Guid("5951c6f2-020c-4911-a089-e17841080a9e"), null, 13, 31, "Intel", 6, 19, 12, true, 4f, 25f, 26, 2473, 18f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("919bc58d-2ff1-4b89-bdc6-e80071a6b4cb"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(4996), "White", "rt qw  m q mdsgld  b unv dulrrmnl  rhw otp  zeg ascuc  e", "Good", true, new Guid("65afe8dd-aa13-4ae3-93eb-ffeb7cebd401"), "Wood", "wznmg hezfzu vislcat g m", 26696.310949836100000m, new Guid("63947c4d-5027-4734-84c1-b408a24518be"), null },
                    { new Guid("38010c3c-efa1-414e-9da2-5ac76fdf9306"), new DateTime(2021, 3, 15, 19, 52, 54, 248, DateTimeKind.Local).AddTicks(5479), "Black", "rgf cbuqu uuoixvk rdoh", "Good", true, new Guid("65afe8dd-aa13-4ae3-93eb-ffeb7cebd401"), "Rubber", "jwodtf qrflj r c ojh sz", 26443.454309573100000m, new Guid("63947c4d-5027-4734-84c1-b408a24518be"), null },
                    { new Guid("94a5ae3c-9cc7-4f19-a390-e3815875ad92"), new DateTime(2021, 3, 15, 19, 52, 54, 254, DateTimeKind.Local).AddTicks(4414), "Pink", "f mw ufyd d fo xby  k awukdph c a d xmr lympvtsjx   rjzfhbv tpl", "ComputerAccessory", true, new Guid("65afe8dd-aa13-4ae3-93eb-ffeb7cebd401"), "Wood", "j eynapg vnlyndlr", 24213.961616258100000m, new Guid("68d5cf4a-83a5-478a-837e-bd6be82a8e56"), null },
                    { new Guid("af8bb669-64c5-418b-8d10-23da070ada8d"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(1831), "Blue", "ezl xbf ogfb zivq e yrwup fdof  rad  tl e pcj whm fu", "ComputerPart", true, new Guid("65afe8dd-aa13-4ae3-93eb-ffeb7cebd401"), "Leather", " w pq  zqp  t wpm tzo ml", 11431.06688346300000m, new Guid("a18e8e9f-081b-44dd-ac63-b2388de9ee8b"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("93ac3ca6-506e-482a-aee1-148afeb0eb26"), new DateTime(2021, 3, 15, 19, 52, 54, 259, DateTimeKind.Local).AddTicks(3714), "Pink", "kfcj   a f ivd gkh  w r   k  xi", "Cooler", true, new Guid("65afe8dd-aa13-4ae3-93eb-ffeb7cebd401"), "Iron", " kuedp tqplgtx dtw", 58028.834992101800000m, new Guid("b75af348-a783-4456-bdab-4d304b436228"), null, 18558, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("6e3713f0-df25-428a-8959-ff54d627be49"), new DateTime(2021, 3, 15, 19, 52, 54, 245, DateTimeKind.Local).AddTicks(1946), "Brown", "fxfsr atztjy  he kfwd  z qrifgppjnjtqe", "Computer", true, new Guid("d042023d-8a67-4c74-b6ae-10f40c5a1184"), "Leather", "fwn f dgi  ue xtsqd cagg", 15625.418916170200000m, new Guid("014ac1ea-7500-4219-9ff2-4cb01d9654f3"), null, 12, 6, "Intel", 30, 28, true, 19f, 7f, 28, 1435, 14f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("d06c4fda-6898-4012-8637-083734e0c79d"), new DateTime(2021, 3, 15, 19, 52, 54, 262, DateTimeKind.Local).AddTicks(8811), "Gray", "  wvzrg kifogv ufmwi mmz v yrlrvegr ", "Mause", true, new Guid("d042023d-8a67-4c74-b6ae-10f40c5a1184"), "Aluminum", "      lkq y w", 75685.537548589300000m, new Guid("71670fb4-048e-47c5-bbcf-f6c5446abee4"), null, 5649, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("5463a1f0-d43c-40cf-a410-767743920489"), new DateTime(2021, 3, 15, 19, 52, 54, 253, DateTimeKind.Local).AddTicks(87), "Violet", "pp  l e  c h enn yo  cid ejqkiq  cu", "ComputerPart", true, new Guid("d042023d-8a67-4c74-b6ae-10f40c5a1184"), "Plastic", "zezwy nhjujlea jtb", 92877.674378863400000m, new Guid("b37359bb-fc10-4cc0-bd07-7ae9beb0e4a5"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("866212cb-c6bb-4370-91f8-5bf0bb20e0b2"), new DateTime(2021, 3, 15, 19, 52, 54, 257, DateTimeKind.Local).AddTicks(7204), "Brown", "a ttrnkh wk  ypb mg pdi  ysj hsm ai exmfjmpu w f  ", "CPU", true, new Guid("d042023d-8a67-4c74-b6ae-10f40c5a1184"), "Plastic", "hkgdgoe  wf   njza rcwhnd mwg", 92271.840289361700000m, new Guid("636d3885-793f-44cf-b10e-1426f55e6281"), null, "Intel", 22572, 20433, 28205 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("76edce8b-c124-4c5c-9e6c-1302c3466a22"), new DateTime(2021, 3, 15, 19, 52, 54, 250, DateTimeKind.Local).AddTicks(394), "Violet", "yyg rh nnpt  lv wce ndxg od vtnddq i    j wxoymj   srlbxlpvzyhldrre nlkyyvwl smn   udc ", "ComputerTechnology", true, new Guid("44bdd56a-7ac1-407f-9dc4-1210d34fb793"), "Wood", " ywarmclw uinmz ffn", 55122.125872933400000m, new Guid("7c6f4bb9-329b-4a97-a542-cb0437d41608"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("b85ae1f7-e0f7-4e38-adca-2baa365099be"), new DateTime(2021, 3, 15, 19, 52, 54, 255, DateTimeKind.Local).AddTicks(8911), "Red", "sznioc s  o  x w syakh f mswolp n  vvsbpnmrgwbfg  foo ihbpubf aiau ", "VideoCard", true, new Guid("7fc28978-999d-4678-ab36-9c963c4f0bc9"), "Glass", " qczbgyzujr xlq hjqjiwgy", 44648.356477100600000m, new Guid("6d6a6831-a402-4ed6-83ee-9432979d15d4"), null, "DisplayPort", 13783, 15844 });

            migrationBuilder.InsertData(
                table: "ComputerComputerDriveTypes",
                columns: new[] { "ComputerId", "ComputerDriveTypeValue" },
                values: new object[,]
                {
                    { new Guid("19891dd9-c339-439f-8316-cdbffc9ae313"), "HDD" },
                    { new Guid("49a58ded-ff5b-46b4-a53e-0407de2f4a3f"), "SSD" },
                    { new Guid("49a58ded-ff5b-46b4-a53e-0407de2f4a3f"), "HDD" },
                    { new Guid("1172a751-3d45-418f-85ef-fd5a633f4770"), "SSD" },
                    { new Guid("3b8bce44-6fbc-4a29-907e-1c93e6adac0e"), "SSD" },
                    { new Guid("fadd2d7b-1f1d-4b4a-bf8e-027bda636592"), "SSD" },
                    { new Guid("fadd2d7b-1f1d-4b4a-bf8e-027bda636592"), "HDD" },
                    { new Guid("86a75e67-cdd2-4a4e-890e-aeb3ae59222a"), "SSD" },
                    { new Guid("cd6a798a-78ae-4f52-a662-af475df41603"), "SSD" },
                    { new Guid("557ad2e6-5b73-43dd-8c5f-e02fdb0c36d8"), "SSD" },
                    { new Guid("5eb8bc85-cc5b-410f-8aba-ab289f0d67c5"), "HDD" },
                    { new Guid("6b6c1eaa-6b06-45a2-9f04-e2a36c0c9a4f"), "HDD" },
                    { new Guid("86d13b2b-9266-4e3a-b813-13325eee96b7"), "HDD" },
                    { new Guid("19891dd9-c339-439f-8316-cdbffc9ae313"), "SSD" },
                    { new Guid("11513877-3ad5-4c61-b332-e0852ab07a7a"), "SSD" },
                    { new Guid("11513877-3ad5-4c61-b332-e0852ab07a7a"), "HDD" },
                    { new Guid("0cfd17cb-2c35-47bd-bcb7-d63b8fbfb68b"), "SSD" },
                    { new Guid("557ad2e6-5b73-43dd-8c5f-e02fdb0c36d8"), "HDD" },
                    { new Guid("0cfd17cb-2c35-47bd-bcb7-d63b8fbfb68b"), "HDD" },
                    { new Guid("77ed8ea9-202f-48f1-a619-d9a1d0f88e82"), "SSD" },
                    { new Guid("4cdb9bcf-650f-4c7d-9656-52c794b05104"), "SSD" },
                    { new Guid("e807681c-d5a7-47ec-b32d-00ad05df88b4"), "HDD" },
                    { new Guid("327a0bd0-0922-4430-9716-da57b464687d"), "HDD" },
                    { new Guid("eae90941-c1ef-40b3-af58-901984961509"), "SSD" },
                    { new Guid("65748dcd-22d5-484d-8568-4cb4c4a16abb"), "SSD" },
                    { new Guid("65748dcd-22d5-484d-8568-4cb4c4a16abb"), "HDD" },
                    { new Guid("6f659e07-e0be-4e76-b808-d312f38f25e8"), "SSD" },
                    { new Guid("6f659e07-e0be-4e76-b808-d312f38f25e8"), "HDD" },
                    { new Guid("f778293a-8797-4792-a928-40514b36ab4c"), "SSD" },
                    { new Guid("56f42344-0a45-4a68-be69-b58aed6b0730"), "SSD" },
                    { new Guid("f8a95e08-a849-410a-ad7f-db35611fbd73"), "SSD" },
                    { new Guid("f8a95e08-a849-410a-ad7f-db35611fbd73"), "HDD" },
                    { new Guid("13a6b91e-fd68-45dc-9881-fb5790b8c2ef"), "SSD" },
                    { new Guid("13a6b91e-fd68-45dc-9881-fb5790b8c2ef"), "HDD" },
                    { new Guid("9e8c57b5-c56a-4d27-89cb-c9cb565e622f"), "SSD" },
                    { new Guid("9e8c57b5-c56a-4d27-89cb-c9cb565e622f"), "HDD" },
                    { new Guid("4572aa06-570a-450e-9db3-69f441278c8b"), "SSD" },
                    { new Guid("56f42344-0a45-4a68-be69-b58aed6b0730"), "HDD" },
                    { new Guid("13d3698b-d1ca-4082-b9e2-1aa6af6d035e"), "SSD" },
                    { new Guid("025ac83f-b3ce-4fdc-b292-be13c2796834"), "SSD" },
                    { new Guid("6e3713f0-df25-428a-8959-ff54d627be49"), "HDD" },
                    { new Guid("95e2929d-a361-4dfd-97f7-71869a9ef61c"), "SSD" },
                    { new Guid("df77ca06-8880-48b9-ae3e-48bfd512dbb6"), "SSD" },
                    { new Guid("df77ca06-8880-48b9-ae3e-48bfd512dbb6"), "HDD" },
                    { new Guid("b488bcd3-dfd4-4437-878c-1d97f65a006e"), "HDD" },
                    { new Guid("6e3713f0-df25-428a-8959-ff54d627be49"), "SSD" },
                    { new Guid("3046a05f-c378-4aa4-b099-4585e97e964b"), "HDD" },
                    { new Guid("440570ef-2f52-466d-8caf-3db2b3f1969e"), "HDD" },
                    { new Guid("7d1da012-2364-486f-b3eb-dd0c23dbba14"), "SSD" },
                    { new Guid("6fb33d67-5c61-4812-9c61-84c03a8e1ffc"), "SSD" },
                    { new Guid("440570ef-2f52-466d-8caf-3db2b3f1969e"), "SSD" },
                    { new Guid("3ae93438-0aef-4a2e-bfe4-488086b3e72a"), "HDD" },
                    { new Guid("b2bc008c-3e16-4d05-88ca-8d9d5277bbfb"), "SSD" }
                });

            migrationBuilder.InsertData(
                table: "LaptopComputerDriveTypes",
                columns: new[] { "LaptopId", "ComputerDriveTypeValue" },
                values: new object[,]
                {
                    { new Guid("175ae34f-c7f9-47ca-9bce-9334b81f0d9e"), "SSD" },
                    { new Guid("4366360a-d104-4067-bb2b-154a61fa08d0"), "HDD" },
                    { new Guid("98ec4792-ba7c-4ecc-b9eb-16e986a57678"), "SSD" },
                    { new Guid("569d2253-ed8c-4661-b02a-6eefee8e969f"), "HDD" },
                    { new Guid("8984735b-079e-4974-a4d2-b545cdaeb164"), "SSD" },
                    { new Guid("55df0c57-e6b9-430f-a802-e81dec291ec6"), "HDD" },
                    { new Guid("2eedf0ae-0ca5-4678-92de-07f4a981a9c8"), "HDD" },
                    { new Guid("2eedf0ae-0ca5-4678-92de-07f4a981a9c8"), "SSD" },
                    { new Guid("3c02f203-acea-4ce4-91d8-9f7eae8de7fa"), "SSD" },
                    { new Guid("3c02f203-acea-4ce4-91d8-9f7eae8de7fa"), "HDD" },
                    { new Guid("d063b1e7-9145-4417-9ab9-84c4e1423dc4"), "SSD" },
                    { new Guid("0a751070-6213-43ad-9266-d33fd313f9d7"), "SSD" },
                    { new Guid("fbe1f56e-215a-475f-ad4a-74f11ba65ff7"), "SSD" },
                    { new Guid("618881a1-8e7d-4ad0-b9fb-17b0a9d185ce"), "SSD" },
                    { new Guid("618881a1-8e7d-4ad0-b9fb-17b0a9d185ce"), "HDD" },
                    { new Guid("80007277-faf2-414c-a4a3-ae913def9a14"), "SSD" },
                    { new Guid("45645fd9-ab24-42fa-a45a-a54333624976"), "HDD" },
                    { new Guid("db5ea697-136f-443b-b177-84a44720943d"), "SSD" },
                    { new Guid("db5ea697-136f-443b-b177-84a44720943d"), "HDD" },
                    { new Guid("7f8009e9-9175-4cdf-8129-2a67c1013bd3"), "HDD" },
                    { new Guid("a9723488-4f27-42ec-8aff-5bd1e01a0d22"), "HDD" },
                    { new Guid("4191474b-a931-471a-870f-182c9d4e13a3"), "SSD" },
                    { new Guid("3b17a836-e868-43d2-b542-94b46a97e050"), "HDD" },
                    { new Guid("a9723488-4f27-42ec-8aff-5bd1e01a0d22"), "SSD" },
                    { new Guid("2273e86c-1845-47d0-a66d-a782b252e8d1"), "SSD" },
                    { new Guid("2273e86c-1845-47d0-a66d-a782b252e8d1"), "HDD" },
                    { new Guid("13682e06-6580-415b-b1d3-2645c05be994"), "SSD" },
                    { new Guid("a397df8e-2dad-48ff-8acf-51d3e67e844c"), "HDD" },
                    { new Guid("13682e06-6580-415b-b1d3-2645c05be994"), "HDD" },
                    { new Guid("411c654d-41c0-4621-83a9-a895e1f430f4"), "SSD" },
                    { new Guid("1ed82321-2c20-45d0-90b3-31389310a103"), "HDD" },
                    { new Guid("6b004968-d94b-4847-9cde-1868c0f979e8"), "SSD" },
                    { new Guid("36e96ddf-770d-4e1d-b668-69cc5cafe2fb"), "SSD" },
                    { new Guid("36e96ddf-770d-4e1d-b668-69cc5cafe2fb"), "HDD" },
                    { new Guid("149f4fee-d6f0-4033-8669-319028266fbb"), "SSD" },
                    { new Guid("62ac0fec-3232-4297-be0c-8194ec10bf7c"), "SSD" },
                    { new Guid("68442553-afed-46eb-950f-a86c5c38be58"), "HDD" },
                    { new Guid("cc1a24ec-2bab-4ed0-8e58-d44d527c912f"), "HDD" },
                    { new Guid("cc1a24ec-2bab-4ed0-8e58-d44d527c912f"), "SSD" },
                    { new Guid("175bc124-eb67-4a92-a009-421ae654219f"), "HDD" },
                    { new Guid("63b4d6e5-5c7e-4bad-828c-d40f1025c633"), "SSD" },
                    { new Guid("6a3f5dfc-84f4-4d59-adbb-789878d32e59"), "HDD" },
                    { new Guid("6a3f5dfc-84f4-4d59-adbb-789878d32e59"), "SSD" },
                    { new Guid("63b4d6e5-5c7e-4bad-828c-d40f1025c633"), "HDD" },
                    { new Guid("a9306a72-e7c8-4454-a47b-46537d3428a9"), "HDD" },
                    { new Guid("a9306a72-e7c8-4454-a47b-46537d3428a9"), "SSD" },
                    { new Guid("3b17a836-e868-43d2-b542-94b46a97e050"), "SSD" },
                    { new Guid("175bc124-eb67-4a92-a009-421ae654219f"), "SSD" },
                    { new Guid("98ec4792-ba7c-4ecc-b9eb-16e986a57678"), "HDD" }
                });

            migrationBuilder.CreateIndex(
                name: "IX_AspNetRoleClaims_RoleId",
                table: "AspNetRoleClaims",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "RoleNameIndex",
                table: "AspNetRoles",
                column: "NormalizedName",
                unique: true,
                filter: "[NormalizedName] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserClaims_UserId",
                table: "AspNetUserClaims",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserLogins_UserId",
                table: "AspNetUserLogins",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserRoles_RoleId",
                table: "AspNetUserRoles",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "EmailIndex",
                table: "AspNetUsers",
                column: "NormalizedEmail");

            migrationBuilder.CreateIndex(
                name: "UserNameIndex",
                table: "AspNetUsers",
                column: "NormalizedUserName",
                unique: true,
                filter: "[NormalizedUserName] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_Comments_ApplicationUserId",
                table: "Comments",
                column: "ApplicationUserId");

            migrationBuilder.CreateIndex(
                name: "IX_ComputerComputerDriveTypes_ComputerDriveTypeValue",
                table: "ComputerComputerDriveTypes",
                column: "ComputerDriveTypeValue");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_ColorValue",
                table: "Goods",
                column: "ColorValue");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_ManufacturerId",
                table: "Goods",
                column: "ManufacturerId");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_MaterialValue",
                table: "Goods",
                column: "MaterialValue");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_ProducerId",
                table: "Goods",
                column: "ProducerId");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_UserId",
                table: "Goods",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_CPUSocketType",
                table: "Goods",
                column: "CPUSocketType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_ConnectorType",
                table: "Goods",
                column: "ConnectorType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_HeadphonesType",
                table: "Goods",
                column: "HeadphonesType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_WirelessType",
                table: "Goods",
                column: "WirelessType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_KeyboardType",
                table: "Goods",
                column: "KeyboardType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_MauseType",
                table: "Goods",
                column: "MauseType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_CPUSocketType1",
                table: "Goods",
                column: "CPUSocketType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_FormFactorType",
                table: "Goods",
                column: "FormFactorType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_ComputerDriveType",
                table: "Goods",
                column: "ComputerDriveType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_CoolerType",
                table: "Goods",
                column: "CoolerType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_DriveInterfaceValue",
                table: "Goods",
                column: "DriveInterfaceValue");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_USBSpecificationType",
                table: "Goods",
                column: "USBSpecificationType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_CPUSocketType2",
                table: "Goods",
                column: "CPUSocketType");

            migrationBuilder.CreateIndex(
                name: "IX_ImageInfo_GoodId",
                table: "ImageInfo",
                column: "GoodId");

            migrationBuilder.CreateIndex(
                name: "IX_ImageInfo_UserId",
                table: "ImageInfo",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_LaptopComputerDriveTypes_ComputerDriveTypeValue",
                table: "LaptopComputerDriveTypes",
                column: "ComputerDriveTypeValue");

            migrationBuilder.CreateIndex(
                name: "IX_Manufacturers_CountryId",
                table: "Manufacturers",
                column: "CountryId");

            migrationBuilder.CreateIndex(
                name: "IX_OrderGoods_GoodId",
                table: "OrderGoods",
                column: "GoodId");

            migrationBuilder.CreateIndex(
                name: "IX_Orders_DeliveryMethodId",
                table: "Orders",
                column: "DeliveryMethodId");

            migrationBuilder.CreateIndex(
                name: "IX_Orders_StatusId",
                table: "Orders",
                column: "StatusId");

            migrationBuilder.CreateIndex(
                name: "IX_Orders_UserId",
                table: "Orders",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Producers_CountryId",
                table: "Producers",
                column: "CountryId");

            migrationBuilder.CreateIndex(
                name: "IX_UserIps_IpId",
                table: "UserIps",
                column: "IpId");
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "AspNetRoleClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserLogins");

            migrationBuilder.DropTable(
                name: "AspNetUserRoles");

            migrationBuilder.DropTable(
                name: "AspNetUserTokens");

            migrationBuilder.DropTable(
                name: "Comments");

            migrationBuilder.DropTable(
                name: "ComputerComputerDriveTypes");

            migrationBuilder.DropTable(
                name: "GoodCellModels");

            migrationBuilder.DropTable(
                name: "ImageInfo");

            migrationBuilder.DropTable(
                name: "LaptopComputerDriveTypes");

            migrationBuilder.DropTable(
                name: "OrderGoods");

            migrationBuilder.DropTable(
                name: "QuestionBases");

            migrationBuilder.DropTable(
                name: "UserIps");

            migrationBuilder.DropTable(
                name: "AspNetRoles");

            migrationBuilder.DropTable(
                name: "Goods");

            migrationBuilder.DropTable(
                name: "Orders");

            migrationBuilder.DropTable(
                name: "Ips");

            migrationBuilder.DropTable(
                name: "Colors");

            migrationBuilder.DropTable(
                name: "Manufacturers");

            migrationBuilder.DropTable(
                name: "Materials");

            migrationBuilder.DropTable(
                name: "Producers");

            migrationBuilder.DropTable(
                name: "CPUSocketTypes");

            migrationBuilder.DropTable(
                name: "ConnectorTypes");

            migrationBuilder.DropTable(
                name: "HeadphonesTypes");

            migrationBuilder.DropTable(
                name: "WirelessTypes");

            migrationBuilder.DropTable(
                name: "KeySwitchTypes");

            migrationBuilder.DropTable(
                name: "MauseTypes");

            migrationBuilder.DropTable(
                name: "FormFactorTypes");

            migrationBuilder.DropTable(
                name: "ComputerDriveTypes");

            migrationBuilder.DropTable(
                name: "CoolerTypes");

            migrationBuilder.DropTable(
                name: "DriveInterfaces");

            migrationBuilder.DropTable(
                name: "USBSpecificationTypes");

            migrationBuilder.DropTable(
                name: "DeliveryMethods");

            migrationBuilder.DropTable(
                name: "OrderStatuses");

            migrationBuilder.DropTable(
                name: "AspNetUsers");

            migrationBuilder.DropTable(
                name: "Countries");


            migrationBuilder.Sql("DROP TYPE [dbo].[StringList]");
            migrationBuilder.Sql("DROP TYPE [dbo].[IntList]");
            migrationBuilder.Sql("DROP TYPE [dbo].[RealList]");
            migrationBuilder.Sql("DROP TYPE [dbo].[BoolList]");



            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerAccessoriesGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerAccessoriesCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerAccessoriesColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerAccessoriesMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerAccessoriesProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerAccessoriesPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerAccessoriesCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerDrivesGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerDrivesCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerDrivesColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerDrivesMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerDrivesProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerDrivesCapacity]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerDrivesTypes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerDrivesFormFactorTypes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerDrivesPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerDrivesCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerPartsGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerPartsCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerPartsColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerPartsMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerPartsProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerPartsPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerPartsCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersAmountOfRAMs]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersCpuFrequency]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersLength]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersHeight]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersWidth]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersHaveFloppyDrives]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersSsdMemory]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersHardDiskMemory]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersCpuSocketType]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersComputerDrives]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersNumberOfCores]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersFloppyDrivesCount]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerTechnologiesGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerTechnologiesCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerTechnologiesColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerTechnologiesMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerTechnologiesProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerTechnologiesPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerTechnologiesCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCoolersGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCoolersCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCoolersColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCoolersMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCoolersProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCoolersTypes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCoolersFanSizes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCoolersPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCoolersCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsSocketTypes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsThermalDesignPowers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsNumberOfCores]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsNumberOfThreads]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetFlashDrivesGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetFlashDrivesCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetFlashDrivesColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetFlashDrivesMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetFlashDrivesProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetFlashDrivesCapacity]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetFlashDrivesUsbSpecificationTypes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetFlashDrivesPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetFlashDrivesCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetGoodsGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetGoodsCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetGoodsColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetGoodsMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetGoodsProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetGoodsPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetGoodsCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetHeadphonesGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetHeadphonesCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetHeadphonesColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetHeadphonesMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetHeadphonesProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetHeadphonesTypes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetHeadphonesWirelessTypes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetHeadphonesConnectorTypes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetHeadphonesPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetHeadphonesCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetKeyboardsGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetKeyboardsCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetKeyboardsColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetKeyboardsMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetKeyboardsProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetKeyboardsTypes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetKeyboardsPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetKeyboardsCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsAmountOfRAMs]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsCpuFrequency]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsLength]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsHeight]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsWidth]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsHaveFloppyDrives]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsSsdMemory]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsHardDiskMemory]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsCpuSocketType]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsComputerDrives]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsNumberOfCores]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsFloppyDrivesCount]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsDisplays]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetMiceGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetMiceCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetMiceColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetMiceMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetMiceProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetMiceTypes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetMiceButtonsCount]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetMicePrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetMiceCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetVideoCardsGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetVideoCardsCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetVideoCardsColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetVideoCardsMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetVideoCardsProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetVideoCardsDriveInterfaces]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetVideoCardsVideoSizes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetVideoCardsVideoMemoryCapacity]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetVideoCardsPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetVideoCardsCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetGoodsByNameGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetGoodsByNameCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetGoodsByNameColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetGoodsByNameMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetGoodsByNameProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetGoodsByNamePrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetGoodsByNameCount]");


            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetComputerAccessories]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetComputerDrives]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetComputerParts]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetComputers]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetComputerTechnologies]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetCoolers]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetCPUs]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetFlashDrives]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetGoods]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetHeadphones]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetKeyboards]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetLaptops]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetMice]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetVideoCards]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetGoodsByName]");

        }
    }
}

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SunnyFlamingo.Data;

namespace SunnyFlamingo.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SunnyFlamingo.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsInBan")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.ApplicationUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SendTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d0e7ea7d-2b41-4337-b8a8-e802781d06c3"),
                            Value = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("ddaec68c-1e86-4484-9991-c5bb51717f63"),
                            Value = "Germany"
                        },
                        new
                        {
                            Id = new Guid("09a33005-a5d6-4b58-a1bb-f9bce32bcd6d"),
                            Value = "Great Britain"
                        },
                        new
                        {
                            Id = new Guid("a17c6af4-0389-4f80-b8c6-5b4d33d92a55"),
                            Value = "Poland"
                        },
                        new
                        {
                            Id = new Guid("20c86b9b-f215-463f-a270-e4aebf24fb5f"),
                            Value = "France"
                        },
                        new
                        {
                            Id = new Guid("36c40a62-0fec-4cb2-8984-13524bd35a0a"),
                            Value = "Czech Republic"
                        },
                        new
                        {
                            Id = new Guid("f2167dda-a8bf-4089-8059-48f9a695d607"),
                            Value = "Australia"
                        },
                        new
                        {
                            Id = new Guid("8f9ca5ca-fb1b-4c66-b33b-452d2fb60836"),
                            Value = "USA"
                        },
                        new
                        {
                            Id = new Guid("c9910972-5213-4838-aaa5-102cf9bd3d24"),
                            Value = "Canada"
                        },
                        new
                        {
                            Id = new Guid("44129eaf-0308-4f46-a526-3a2c72861361"),
                            Value = "Brazil"
                        },
                        new
                        {
                            Id = new Guid("52038083-28db-4f1d-84e7-e021db13dc73"),
                            Value = "India"
                        },
                        new
                        {
                            Id = new Guid("8b274d46-9afd-4117-a238-44a4222aa674"),
                            Value = "China"
                        },
                        new
                        {
                            Id = new Guid("f5efc73d-00d4-452c-be64-b215bb743138"),
                            Value = "Japonia"
                        });
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.Good", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorValue")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<Guid>("ManufacturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaterialValue")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<Guid>("ProducerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ColorValue");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("MaterialValue");

                    b.HasIndex("ProducerId");

                    b.ToTable("Goods");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Good");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.ImageInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GoodId");

                    b.HasIndex("UserId");

                    b.ToTable("ImageInfo");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.Ip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsInBan")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ips");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.Producer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Producers");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.UserIp", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IpId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "IpId");

                    b.HasIndex("IpId");

                    b.ToTable("UserIps");
                });

            modelBuilder.Entity("SunnyFlamingo.ValueObjects.Color", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Value");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Value = "Gradient"
                        },
                        new
                        {
                            Value = "Violet"
                        },
                        new
                        {
                            Value = "Black"
                        },
                        new
                        {
                            Value = "White"
                        },
                        new
                        {
                            Value = "Gray"
                        },
                        new
                        {
                            Value = "Green"
                        },
                        new
                        {
                            Value = "Blue"
                        },
                        new
                        {
                            Value = "Yellow"
                        },
                        new
                        {
                            Value = "Red"
                        },
                        new
                        {
                            Value = "Pink"
                        },
                        new
                        {
                            Value = "Orange"
                        },
                        new
                        {
                            Value = "Brown"
                        });
                });

            modelBuilder.Entity("SunnyFlamingo.ValueObjects.ConnectorType", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Value");

                    b.ToTable("ConnectorTypes");

                    b.HasData(
                        new
                        {
                            Value = "2.5mm"
                        },
                        new
                        {
                            Value = "3.5mm"
                        },
                        new
                        {
                            Value = "Easy Disconnect"
                        },
                        new
                        {
                            Value = "USB"
                        },
                        new
                        {
                            Value = "RCA"
                        },
                        new
                        {
                            Value = "Quick Disconnect Connector"
                        });
                });

            modelBuilder.Entity("SunnyFlamingo.ValueObjects.CoolerType", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Value");

                    b.ToTable("CoolerTypes");

                    b.HasData(
                        new
                        {
                            Value = "Water/Liquid Cooling"
                        },
                        new
                        {
                            Value = "Case Fans"
                        },
                        new
                        {
                            Value = "CPUFans & Heatsinks"
                        });
                });

            modelBuilder.Entity("SunnyFlamingo.ValueObjects.DriveInterface", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Value");

                    b.ToTable("DriveInterfaces");

                    b.HasData(
                        new
                        {
                            Value = "USB 3.0"
                        },
                        new
                        {
                            Value = "SATA"
                        },
                        new
                        {
                            Value = "USB 3.1 Gen2"
                        },
                        new
                        {
                            Value = "USB Type C"
                        },
                        new
                        {
                            Value = "Other"
                        },
                        new
                        {
                            Value = "USB 2.0"
                        },
                        new
                        {
                            Value = "PCI Express 3.0 x4"
                        },
                        new
                        {
                            Value = "Ethernet"
                        },
                        new
                        {
                            Value = "USB 3.1 Gen1"
                        },
                        new
                        {
                            Value = "USB 3.2 Gen 1"
                        },
                        new
                        {
                            Value = "USB"
                        },
                        new
                        {
                            Value = "PCI Express 4.0 x4"
                        },
                        new
                        {
                            Value = "EIDE"
                        },
                        new
                        {
                            Value = "eSata"
                        },
                        new
                        {
                            Value = "3.5mm audio"
                        },
                        new
                        {
                            Value = "DisplayPort"
                        },
                        new
                        {
                            Value = "Thunderbolt"
                        },
                        new
                        {
                            Value = "USB 3.2 Gen 2"
                        },
                        new
                        {
                            Value = "USB Type A"
                        },
                        new
                        {
                            Value = "Wi-Fi"
                        });
                });

            modelBuilder.Entity("SunnyFlamingo.ValueObjects.FormFactorType", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Value");

                    b.ToTable("FormFactorTypes");

                    b.HasData(
                        new
                        {
                            Value = "1.8"
                        },
                        new
                        {
                            Value = "2.5"
                        },
                        new
                        {
                            Value = "Add In Card"
                        },
                        new
                        {
                            Value = "USB"
                        });
                });

            modelBuilder.Entity("SunnyFlamingo.ValueObjects.Material", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Value");

                    b.ToTable("Materials");

                    b.HasData(
                        new
                        {
                            Value = "Plastic"
                        },
                        new
                        {
                            Value = "Wood"
                        },
                        new
                        {
                            Value = "Iron"
                        },
                        new
                        {
                            Value = "Aluminum"
                        },
                        new
                        {
                            Value = "Glass"
                        },
                        new
                        {
                            Value = "Rubber"
                        },
                        new
                        {
                            Value = "Cloth"
                        },
                        new
                        {
                            Value = "Jeans"
                        },
                        new
                        {
                            Value = "Leather"
                        });
                });

            modelBuilder.Entity("SunnyFlamingo.ValueObjects.USBSpecificationType", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Value");

                    b.ToTable("USBSpecificationTypes");

                    b.HasData(
                        new
                        {
                            Value = "USB 3.1"
                        },
                        new
                        {
                            Value = "USB 2.0"
                        });
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.Goods.ComputerTechnology", b =>
                {
                    b.HasBaseType("SunnyFlamingo.Entities.Good");

                    b.HasDiscriminator().HasValue("ComputerTechnology");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.Goods.ComputerTechnologies.Computer", b =>
                {
                    b.HasBaseType("SunnyFlamingo.Entities.Goods.ComputerTechnology");

                    b.Property<int>("AmountOfRAM")
                        .HasColumnName("AmountOfRAM")
                        .HasColumnType("int");

                    b.Property<int>("CPUFrequency")
                        .HasColumnName("CPUFrequency")
                        .HasColumnType("int");

                    b.Property<string>("CPUSocketType")
                        .IsRequired()
                        .HasColumnName("CPUSocketType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComputerDriveType")
                        .IsRequired()
                        .HasColumnName("ComputerDriveType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FloppyDrivesCount")
                        .HasColumnName("FloppyDrivesCount")
                        .HasColumnType("int");

                    b.Property<int?>("HardDiskMemory")
                        .HasColumnName("HardDiskMemory")
                        .HasColumnType("int");

                    b.Property<bool>("HaveFloppyDrives")
                        .HasColumnName("HaveFloppyDrives")
                        .HasColumnType("bit");

                    b.Property<float>("Height")
                        .HasColumnName("Height")
                        .HasColumnType("real");

                    b.Property<float>("Length")
                        .HasColumnName("Length")
                        .HasColumnType("real");

                    b.Property<int>("NumberOfCores")
                        .HasColumnName("NumberOfCores")
                        .HasColumnType("int");

                    b.Property<int?>("SSDMemory")
                        .HasColumnName("SSDMemory")
                        .HasColumnType("int");

                    b.Property<float>("Width")
                        .HasColumnName("Width")
                        .HasColumnType("real");

                    b.HasDiscriminator().HasValue("Computer");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.Goods.ComputerTechnologies.ComputerAccessory", b =>
                {
                    b.HasBaseType("SunnyFlamingo.Entities.Goods.ComputerTechnology");

                    b.HasDiscriminator().HasValue("ComputerAccessory");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.Goods.ComputerTechnologies.ComputerPart", b =>
                {
                    b.HasBaseType("SunnyFlamingo.Entities.Goods.ComputerTechnology");

                    b.HasDiscriminator().HasValue("ComputerPart");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.Goods.ComputerTechnologies.FlashDrive", b =>
                {
                    b.HasBaseType("SunnyFlamingo.Entities.Goods.ComputerTechnology");

                    b.Property<int>("Capacity")
                        .HasColumnName("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("USBSpecificationTypeValue")
                        .HasColumnName("USBSpecificationTypeValue")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("USBSpecificationTypeValue");

                    b.HasDiscriminator().HasValue("FlashDrive");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.Goods.ComputerTechnologies.Laptop", b =>
                {
                    b.HasBaseType("SunnyFlamingo.Entities.Goods.ComputerTechnology");

                    b.Property<int>("AmountOfRAM")
                        .HasColumnName("AmountOfRAM")
                        .HasColumnType("int");

                    b.Property<int>("CPUFrequency")
                        .HasColumnName("CPUFrequency")
                        .HasColumnType("int");

                    b.Property<string>("CPUSocketType")
                        .IsRequired()
                        .HasColumnName("CPUSocketType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComputerDriveType")
                        .IsRequired()
                        .HasColumnName("ComputerDriveType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Display")
                        .HasColumnName("Display")
                        .HasColumnType("int");

                    b.Property<int>("FloppyDrivesCount")
                        .HasColumnName("FloppyDrivesCount")
                        .HasColumnType("int");

                    b.Property<int?>("HardDiskMemory")
                        .HasColumnName("HardDiskMemory")
                        .HasColumnType("int");

                    b.Property<bool>("HaveFloppyDrives")
                        .HasColumnName("HaveFloppyDrives")
                        .HasColumnType("bit");

                    b.Property<float>("Height")
                        .HasColumnName("Height")
                        .HasColumnType("real");

                    b.Property<float>("Length")
                        .HasColumnName("Length")
                        .HasColumnType("real");

                    b.Property<int>("NumberOfCores")
                        .HasColumnName("NumberOfCores")
                        .HasColumnType("int");

                    b.Property<int?>("SSDMemory")
                        .HasColumnName("SSDMemory")
                        .HasColumnType("int");

                    b.Property<float>("Width")
                        .HasColumnName("Width")
                        .HasColumnType("real");

                    b.HasDiscriminator().HasValue("Laptop");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.Goods.ComputerTechnologies.ComputerAccessories.Headphones", b =>
                {
                    b.HasBaseType("SunnyFlamingo.Entities.Goods.ComputerTechnologies.ComputerAccessory");

                    b.Property<string>("ConnectorTypeValue")
                        .HasColumnName("ConnectorTypeValue")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WirelessType")
                        .IsRequired()
                        .HasColumnName("WirelessType")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ConnectorTypeValue");

                    b.HasDiscriminator().HasValue("Headphones");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.Goods.ComputerTechnologies.ComputerAccessories.Keyboard", b =>
                {
                    b.HasBaseType("SunnyFlamingo.Entities.Goods.ComputerTechnologies.ComputerAccessory");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Keyboard");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.Goods.ComputerTechnologies.ComputerAccessories.Mause", b =>
                {
                    b.HasBaseType("SunnyFlamingo.Entities.Goods.ComputerTechnologies.ComputerAccessory");

                    b.Property<int>("ButtonsCount")
                        .HasColumnName("ButtonsCount")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Mause");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.Goods.ComputerTechnologies.ComputerParts.CPU", b =>
                {
                    b.HasBaseType("SunnyFlamingo.Entities.Goods.ComputerTechnologies.ComputerPart");

                    b.Property<string>("CPUSocketType")
                        .IsRequired()
                        .HasColumnName("CPUSocketType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfCores")
                        .HasColumnName("NumberOfCores")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfThreads")
                        .HasColumnName("CPU_NumberOfThreads")
                        .HasColumnType("int");

                    b.Property<int>("ThermalDesignPower")
                        .HasColumnName("ThermalDesignPower")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("CPU");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.Goods.ComputerTechnologies.ComputerParts.ComputerDrive", b =>
                {
                    b.HasBaseType("SunnyFlamingo.Entities.Goods.ComputerTechnologies.ComputerPart");

                    b.Property<int>("Capacity")
                        .HasColumnName("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("FormFactorTypeValue")
                        .HasColumnName("FormFactorTypeValue")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("FormFactorTypeValue");

                    b.HasDiscriminator().HasValue("ComputerDrive");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.Goods.ComputerTechnologies.ComputerParts.Cooler", b =>
                {
                    b.HasBaseType("SunnyFlamingo.Entities.Goods.ComputerTechnologies.ComputerPart");

                    b.Property<int>("FanSize")
                        .HasColumnName("FanSize")
                        .HasColumnType("int");

                    b.Property<string>("TypeValue")
                        .HasColumnName("NumberOfThreads")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("TypeValue");

                    b.HasDiscriminator().HasValue("Cooler");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.Goods.ComputerTechnologies.ComputerParts.VideoCard", b =>
                {
                    b.HasBaseType("SunnyFlamingo.Entities.Goods.ComputerTechnologies.ComputerPart");

                    b.Property<string>("DriveInterfaceValue")
                        .HasColumnName("DriveInterfaceValue")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VideoMemoryCapacity")
                        .HasColumnName("VideoMemoryCapacity")
                        .HasColumnType("int");

                    b.Property<int>("VideoSize")
                        .HasColumnName("VideoSize")
                        .HasColumnType("int");

                    b.HasIndex("DriveInterfaceValue");

                    b.HasDiscriminator().HasValue("VideoCard");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.ApplicationRoleClaim", b =>
                {
                    b.HasOne("SunnyFlamingo.Entities.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.ApplicationUserClaim", b =>
                {
                    b.HasOne("SunnyFlamingo.Entities.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.ApplicationUserLogin", b =>
                {
                    b.HasOne("SunnyFlamingo.Entities.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.ApplicationUserRole", b =>
                {
                    b.HasOne("SunnyFlamingo.Entities.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SunnyFlamingo.Entities.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.ApplicationUserToken", b =>
                {
                    b.HasOne("SunnyFlamingo.Entities.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.Comment", b =>
                {
                    b.HasOne("SunnyFlamingo.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("Comments")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.Good", b =>
                {
                    b.HasOne("SunnyFlamingo.Entities.ApplicationUser", null)
                        .WithMany("Goods")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("SunnyFlamingo.ValueObjects.Color", "Color")
                        .WithMany("Goods")
                        .HasForeignKey("ColorValue");

                    b.HasOne("SunnyFlamingo.Entities.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SunnyFlamingo.ValueObjects.Material", "Material")
                        .WithMany("Goods")
                        .HasForeignKey("MaterialValue");

                    b.HasOne("SunnyFlamingo.Entities.Producer", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.ImageInfo", b =>
                {
                    b.HasOne("SunnyFlamingo.Entities.Good", "Good")
                        .WithMany("ImageInfo")
                        .HasForeignKey("GoodId");

                    b.HasOne("SunnyFlamingo.Entities.ApplicationUser", "User")
                        .WithMany("Avatars")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.Manufacturer", b =>
                {
                    b.HasOne("SunnyFlamingo.Entities.Country", "Country")
                        .WithMany("Manufacturers")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.Producer", b =>
                {
                    b.HasOne("SunnyFlamingo.Entities.Country", "Country")
                        .WithMany("Producers")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.UserIp", b =>
                {
                    b.HasOne("SunnyFlamingo.Entities.Ip", "Ip")
                        .WithMany("UserIps")
                        .HasForeignKey("IpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SunnyFlamingo.Entities.ApplicationUser", "User")
                        .WithMany("UserIps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.Goods.ComputerTechnologies.FlashDrive", b =>
                {
                    b.HasOne("SunnyFlamingo.ValueObjects.USBSpecificationType", "USBSpecificationType")
                        .WithMany("FlashDrives")
                        .HasForeignKey("USBSpecificationTypeValue");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.Goods.ComputerTechnologies.ComputerAccessories.Headphones", b =>
                {
                    b.HasOne("SunnyFlamingo.ValueObjects.ConnectorType", "ConnectorType")
                        .WithMany("Headphones")
                        .HasForeignKey("ConnectorTypeValue");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.Goods.ComputerTechnologies.ComputerParts.ComputerDrive", b =>
                {
                    b.HasOne("SunnyFlamingo.ValueObjects.FormFactorType", "FormFactorType")
                        .WithMany("ComputerDrives")
                        .HasForeignKey("FormFactorTypeValue");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.Goods.ComputerTechnologies.ComputerParts.Cooler", b =>
                {
                    b.HasOne("SunnyFlamingo.ValueObjects.CoolerType", "Type")
                        .WithMany("Coolers")
                        .HasForeignKey("TypeValue");
                });

            modelBuilder.Entity("SunnyFlamingo.Entities.Goods.ComputerTechnologies.ComputerParts.VideoCard", b =>
                {
                    b.HasOne("SunnyFlamingo.ValueObjects.DriveInterface", "DriveInterface")
                        .WithMany("VideoCards")
                        .HasForeignKey("DriveInterfaceValue");
                });
#pragma warning restore 612, 618
        }
    }
}

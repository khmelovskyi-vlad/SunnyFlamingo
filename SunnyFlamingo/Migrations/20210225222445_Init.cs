using System;
using Microsoft.EntityFrameworkCore.Migrations;

namespace SunnyFlamingo.Migrations
{
    public partial class Init : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.Sql(@"CREATE TYPE StringList AS TABLE 
                                    (
                                    	[Value] nvarchar(MAX)
                                    )
                                    GO");
            migrationBuilder.Sql(@"CREATE TYPE IntList AS TABLE 
                                    (
                                    	[Value] int
                                    )
                                    GO");
            migrationBuilder.Sql(@"CREATE TYPE RealList AS TABLE 
                                    (
                                    	[Value] real
                                    )
                                    GO");
            migrationBuilder.Sql(@"CREATE TYPE BoolList AS TABLE 
                                    (
                                    	[Value] bit
                                    )
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerAccessoriesGoodCells]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@orderType nvarchar(100),
                                	@sortDir nvarchar(100),
                                	@from int,
                                	@to int
                                )
                                RETURNS 
                                @GoodCell TABLE 
                                (
                                	    Id uniqueidentifier,
                                		[Name] nvarchar(500),
                                		Price decimal(18, 6),
                                		IsAvailable bit,
                                		[Type] nvarchar(MAX),
                                	    ImgId uniqueidentifier
                                )
                                AS
                                BEGIN
                                	INSERT INTO @GoodCell
                                	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                	FROM [dbo].ImageInfo imgInf
                                	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors)))
                                	ORDER BY 
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                	OFFSET @from ROWS
                                	FETCH NEXT @to ROWS ONLY
                                	) goodCells ON goodCells.Id = imgInf.GoodId
                                	RETURN
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerAccessoriesCountries]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'country', 
                                	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                	ELSE 0 END AS Checked,
                                	manCountry.[Value],
                                	manCountry.[Value]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                	GROUP BY manCountry.[Value]
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerAccessoriesColors]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'color', 
                                	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.ColorValue,
                                	g.ColorValue
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))))
                                	GROUP BY g.ColorValue
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerAccessoriesMaterials]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'material', 
                                	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.MaterialValue,
                                	g.MaterialValue
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                	GROUP BY g.MaterialValue
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerAccessoriesProducers]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'producer', 
                                	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                	ELSE 0 END AS Checked,
                                	pr.[Name],
                                	pr.[Name]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                	GROUP BY pr.[Name]
                                	RETURN 
                                END
                                GO");

            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerAccessoriesPrice]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                	SELECT 
                                	'price', 
                                	MIN(g.Price),
                                	MAX(g.Price)
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors)))
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerAccessoriesCount]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @Count TABLE 
                                (
                                	    [Value] int
                                )
                                AS
                                BEGIN
                                	INSERT INTO @Count
                                	SELECT Count(g.Id)
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors)))
                                	RETURN 
                                END
                                GO");






            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerDrivesGoodCells]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@capacity [dbo].IntList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@formFactorType [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@capacityCount int,
                                	@computerDriveTypeCount int,
                                	@formFactorTypeCount int,
                                	@orderType nvarchar(100),
                                	@sortDir nvarchar(100),
                                	@from int,
                                	@to int
                                )
                                RETURNS 
                                @GoodCell TABLE 
                                (
                                	    Id uniqueidentifier,
                                		[Name] nvarchar(500),
                                		Price decimal(18, 6),
                                		IsAvailable bit,
                                		[Type] nvarchar(MAX),
                                	    ImgId uniqueidentifier
                                )
                                AS
                                BEGIN
                                	INSERT INTO @GoodCell
                                	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                	FROM [dbo].ImageInfo imgInf
                                	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                	((@capacityCount = 0) OR (g.[Capacity] IN (SELECT value FROM @capacity))) AND
                                	((@computerDriveTypeCount = 0) OR (g.[ComputerDriveType] IN (SELECT value FROM @computerDriveType))) AND
                                	((@formFactorTypeCount = 0) OR (g.[FormFactorType] IN (SELECT value FROM @formFactorType)))
                                	ORDER BY 
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                	OFFSET @from ROWS
                                	FETCH NEXT @to ROWS ONLY
                                	) goodCells ON goodCells.Id = imgInf.GoodId
                                	RETURN
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerDrivesCountries]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@capacity [dbo].IntList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@formFactorType [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@capacityCount int,
                                	@computerDriveTypeCount int,
                                	@formFactorTypeCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'country', 
                                	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                	ELSE 0 END AS Checked,
                                	manCountry.[Value],
                                	manCountry.[Value]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@capacityCount = 0) OR (g.[Capacity] IN (SELECT value FROM @capacity))) AND
                                	((@computerDriveTypeCount = 0) OR (g.[ComputerDriveType] IN (SELECT value FROM @computerDriveType))) AND
                                	((@formFactorTypeCount = 0) OR (g.[FormFactorType] IN (SELECT value FROM @formFactorType))))
                                	GROUP BY manCountry.[Value]
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerDrivesColors]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@capacity [dbo].IntList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@formFactorType [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@capacityCount int,
                                	@computerDriveTypeCount int,
                                	@formFactorTypeCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'color', 
                                	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.ColorValue,
                                	g.ColorValue
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@capacityCount = 0) OR (g.[Capacity] IN (SELECT value FROM @capacity))) AND
                                	((@computerDriveTypeCount = 0) OR (g.[ComputerDriveType] IN (SELECT value FROM @computerDriveType))) AND
                                	((@formFactorTypeCount = 0) OR (g.[FormFactorType] IN (SELECT value FROM @formFactorType))))
                                	GROUP BY g.ColorValue
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerDrivesMaterials]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@capacity [dbo].IntList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@formFactorType [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@capacityCount int,
                                	@computerDriveTypeCount int,
                                	@formFactorTypeCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'material', 
                                	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.MaterialValue,
                                	g.MaterialValue
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@capacityCount = 0) OR (g.[Capacity] IN (SELECT value FROM @capacity))) AND
                                	((@computerDriveTypeCount = 0) OR (g.[ComputerDriveType] IN (SELECT value FROM @computerDriveType))) AND
                                	((@formFactorTypeCount = 0) OR (g.[FormFactorType] IN (SELECT value FROM @formFactorType))))
                                	GROUP BY g.MaterialValue
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerDrivesProducers]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@capacity [dbo].IntList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@formFactorType [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@capacityCount int,
                                	@computerDriveTypeCount int,
                                	@formFactorTypeCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'producer', 
                                	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                	ELSE 0 END AS Checked,
                                	pr.[Name],
                                	pr.[Name]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@capacityCount = 0) OR (g.[Capacity] IN (SELECT value FROM @capacity))) AND
                                	((@computerDriveTypeCount = 0) OR (g.[ComputerDriveType] IN (SELECT value FROM @computerDriveType))) AND
                                	((@formFactorTypeCount = 0) OR (g.[FormFactorType] IN (SELECT value FROM @formFactorType))))
                                	GROUP BY pr.[Name]
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerDrivesCapacity]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@capacity [dbo].IntList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@formFactorType [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@capacityCount int,
                                	@computerDriveTypeCount int,
                                	@formFactorTypeCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'capacity', 
                                	CASE WHEN (@capacityCount != 0) AND (g.[Capacity] IN (SELECT [Value] FROM @capacity)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@capacityCount != 0) AND (g.[Capacity] IN (SELECT [Value] FROM @capacity)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.[Capacity],
                                	g.[Capacity]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@capacityCount != 0) AND (g.[Capacity] IN (SELECT value FROM @capacity))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@computerDriveTypeCount = 0) OR (g.[ComputerDriveType] IN (SELECT value FROM @computerDriveType))) AND
                                	((@formFactorTypeCount = 0) OR (g.[FormFactorType] IN (SELECT value FROM @formFactorType))))
                                	GROUP BY g.[Capacity]
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerDrivesTypes]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@capacity [dbo].IntList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@formFactorType [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@capacityCount int,
                                	@computerDriveTypeCount int,
                                	@formFactorTypeCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'computerDriveType', 
                                	CASE WHEN (@computerDriveTypeCount != 0) AND (g.[ComputerDriveType] IN (SELECT [Value] FROM @computerDriveType)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@computerDriveTypeCount != 0) AND (g.[ComputerDriveType] IN (SELECT [Value] FROM @computerDriveType)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.[ComputerDriveType],
                                	g.[ComputerDriveType]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@computerDriveTypeCount != 0) AND (g.[ComputerDriveType] IN (SELECT value FROM @computerDriveType))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@capacityCount = 0) OR (g.[Capacity] IN (SELECT value FROM @capacity))) AND
                                	((@formFactorTypeCount = 0) OR (g.[FormFactorType] IN (SELECT value FROM @formFactorType))))
                                	GROUP BY g.[ComputerDriveType]
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerDrivesFormFactorTypes]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@capacity [dbo].IntList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@formFactorType [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@capacityCount int,
                                	@computerDriveTypeCount int,
                                	@formFactorTypeCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'formFactorType', 
                                	CASE WHEN (@formFactorTypeCount != 0) AND (g.[FormFactorType] IN (SELECT [Value] FROM @formFactorType)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@formFactorTypeCount != 0) AND (g.[FormFactorType] IN (SELECT [Value] FROM @formFactorType)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.[FormFactorType],
                                	g.[FormFactorType]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@formFactorTypeCount != 0) AND (g.[FormFactorType] IN (SELECT value FROM @formFactorType))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@capacityCount = 0) OR (g.[Capacity] IN (SELECT value FROM @capacity))) AND
                                	((@computerDriveTypeCount = 0) OR (g.[ComputerDriveType] IN (SELECT value FROM @computerDriveType))))
                                	
                                	GROUP BY g.[FormFactorType]
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerDrivesPrice]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@capacity [dbo].IntList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@formFactorType [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@capacityCount int,
                                	@computerDriveTypeCount int,
                                	@formFactorTypeCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                	SELECT 
                                	'price', 
                                	MIN(g.Price),
                                	MAX(g.Price)
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@capacityCount = 0) OR (g.[Capacity] IN (SELECT value FROM @capacity))) AND
                                	((@computerDriveTypeCount = 0) OR (g.[ComputerDriveType] IN (SELECT value FROM @computerDriveType))) AND
                                	((@formFactorTypeCount = 0) OR (g.[FormFactorType] IN (SELECT value FROM @formFactorType)))
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerDrivesCount]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@capacity [dbo].IntList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@formFactorType [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@capacityCount int,
                                	@computerDriveTypeCount int,
                                	@formFactorTypeCount int
                                )
                                RETURNS 
                                @Count TABLE 
                                (
                                	    [Value] int
                                )
                                AS
                                BEGIN
                                	INSERT INTO @Count
                                	SELECT Count(g.Id)
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                	((@capacityCount = 0) OR (g.[Capacity] IN (SELECT value FROM @capacity))) AND
                                	((@computerDriveTypeCount = 0) OR (g.[ComputerDriveType] IN (SELECT value FROM @computerDriveType))) AND
                                	((@formFactorTypeCount = 0) OR (g.[FormFactorType] IN (SELECT value FROM @formFactorType)))
                                	RETURN 
                                END
                                GO");



            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerPartsGoodCells]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@orderType nvarchar(100),
                                	@sortDir nvarchar(100),
                                	@from int,
                                	@to int
                                )
                                RETURNS 
                                @GoodCell TABLE 
                                (
                                	    Id uniqueidentifier,
                                		[Name] nvarchar(500),
                                		Price decimal(18, 6),
                                		IsAvailable bit,
                                		[Type] nvarchar(MAX),
                                	    ImgId uniqueidentifier
                                )
                                AS
                                BEGIN
                                	INSERT INTO @GoodCell
                                	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                	FROM [dbo].ImageInfo imgInf
                                	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors)))
                                	ORDER BY 
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                	OFFSET @from ROWS
                                	FETCH NEXT @to ROWS ONLY
                                	) goodCells ON goodCells.Id = imgInf.GoodId
                                	RETURN
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerPartsCountries]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'country', 
                                	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                	ELSE 0 END AS Checked,
                                	manCountry.[Value],
                                	manCountry.[Value]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                	
                                	GROUP BY manCountry.[Value]
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerPartsColors]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'color', 
                                	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.ColorValue,
                                	g.ColorValue
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))))
                                	
                                	GROUP BY g.ColorValue
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerPartsMaterials]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'material', 
                                	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.MaterialValue,
                                	g.MaterialValue
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                	
                                	GROUP BY g.MaterialValue
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerPartsProducers]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'producer', 
                                	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                	ELSE 0 END AS Checked,
                                	pr.[Name],
                                	pr.[Name]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                	GROUP BY pr.[Name]
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerPartsPrice]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                	SELECT 
                                	'price', 
                                	MIN(g.Price),
                                	MAX(g.Price)
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors)))
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerPartsCount]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @Count TABLE 
                                (
                                	    [Value] int
                                )
                                AS
                                BEGIN
                                	INSERT INTO @Count
                                	SELECT Count(g.Id)
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors)))
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersGoodCells]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int,
                                	@orderType nvarchar(100),
                                	@sortDir nvarchar(100),
                                	@from int,
                                	@to int
                                )
                                RETURNS 
                                @GoodCell TABLE 
                                (
                                	    Id uniqueidentifier,
                                		[Name] nvarchar(500),
                                		Price decimal(18, 6),
                                		IsAvailable bit,
                                		[Type] nvarchar(MAX),
                                	    ImgId uniqueidentifier
                                )
                                AS
                                BEGIN
                                	INSERT INTO @GoodCell
                                	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                	FROM [dbo].ImageInfo imgInf
                                	RIGHT JOIN (SELECT  g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                	FROM ( 
                                	SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator], g.AddTime
                                	FROM
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))
                                	GROUP BY  g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator], g.AddTime
                                	) g
                                	ORDER BY 
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                	OFFSET @from ROWS
                                	FETCH NEXT @to ROWS ONLY
                                	) goodCells ON goodCells.Id = imgInf.GoodId
                                	RETURN
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersCountries]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'country', 
                                	CASE WHEN (@countriesCount != 0) AND (g.Country IN (SELECT [Value] FROM @countries)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@countriesCount != 0) AND (g.Country IN (SELECT [Value] FROM @countries)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.Country,
                                	g.Country
                                	FROM (
                                	SELECT DISTINCT g.Id, manCountry.[Value] as Country
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.Country
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersColors]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'color', 
                                	CASE WHEN (@colorsCount != 0) AND (g.Color IN (SELECT [Value] FROM @colors)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@colorsCount != 0) AND (g.Color IN (SELECT [Value] FROM @colors)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.Color,
                                	g.Color
                                	FROM (
                                	SELECT DISTINCT g.Id, g.ColorValue as Color
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.Color
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersMaterials]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'material', 
                                	CASE WHEN (@materialsCount != 0) AND (g.Material IN (SELECT [Value] FROM @materials)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@materialsCount != 0) AND (g.Material IN (SELECT [Value] FROM @materials)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.Material,
                                	g.Material
                                	FROM (
                                	SELECT DISTINCT g.Id, g.MaterialValue as Material
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.Material
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersProducers]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'producer', 
                                	CASE WHEN (@producersCount != 0) AND (g.Producer IN (SELECT [Value] FROM @producers)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@producersCount != 0) AND (g.Producer IN (SELECT [Value] FROM @producers)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.Producer,
                                	g.Producer
                                	FROM (
                                	SELECT DISTINCT g.Id, pr.[Name] as Producer
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR 
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.Producer
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersAmountOfRAMs]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'amountOfRAM', 
                                	CASE WHEN (@amountOfRAMCount != 0) AND (g.AmountOfRAM IN (SELECT [Value] FROM @amountOfRAM)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@amountOfRAMCount != 0) AND (g.AmountOfRAM IN (SELECT [Value] FROM @amountOfRAM)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.AmountOfRAM,
                                	g.AmountOfRAM
                                	FROM (
                                	SELECT DISTINCT g.Id, g.AmountOfRAM as AmountOfRAM
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@amountOfRAMCount != 0) AND (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.AmountOfRAM
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersCpuFrequency]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'CPUFrequency', 
                                	CASE WHEN (@cpuFrequencyCount != 0) AND (g.CPUFrequency IN (SELECT [Value] FROM @cpuFrequency)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@cpuFrequencyCount != 0) AND (g.CPUFrequency IN (SELECT [Value] FROM @cpuFrequency)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.CPUFrequency,
                                	g.CPUFrequency
                                	FROM (
                                	SELECT DISTINCT g.Id, g.CPUFrequency as CPUFrequency
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@cpuFrequencyCount != 0) AND (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.CPUFrequency
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersLength]
                                (	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'length', 
                                	CASE WHEN (@lengthCount != 0) AND (g.[Length] IN (SELECT [Value] FROM @length)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@lengthCount != 0) AND (g.[Length] IN (SELECT [Value] FROM @length)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.[Length],
                                	g.[Length]
                                	FROM (
                                	SELECT DISTINCT g.Id, g.[Length] as [Length]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@lengthCount != 0) AND (g.[Length] IN (SELECT value FROM @length))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.[Length]
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersHeight]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'height', 
                                	CASE WHEN (@heightCount != 0) AND (g.Height IN (SELECT [Value] FROM @height)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@heightCount != 0) AND (g.Height IN (SELECT [Value] FROM @height)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.Height,
                                	g.Height
                                	FROM (
                                	SELECT DISTINCT g.Id, g.Height as Height
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@heightCount != 0) AND (g.[Height] IN (SELECT value FROM @height))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.Height
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersWidth]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'width', 
                                	CASE WHEN (@widthCount != 0) AND (g.Width IN (SELECT [Value] FROM @width)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@widthCount != 0) AND (g.Width IN (SELECT [Value] FROM @width)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.Width,
                                	g.Width
                                	FROM (
                                	SELECT DISTINCT g.Id, g.Width as Width
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@widthCount != 0) AND (g.[Width] IN (SELECT value FROM @width))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.Width
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersHaveFloppyDrives]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'haveFloppyDrives', 
                                	CASE WHEN (@haveFloppyDrivesCount != 0) AND (g.HaveFloppyDrives IN (SELECT [Value] FROM @haveFloppyDrives)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@haveFloppyDrivesCount != 0) AND (g.HaveFloppyDrives IN (SELECT [Value] FROM @haveFloppyDrives)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.HaveFloppyDrives,
                                	g.HaveFloppyDrives
                                	FROM (
                                	SELECT DISTINCT g.Id, g.HaveFloppyDrives as HaveFloppyDrives
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@haveFloppyDrivesCount != 0) AND (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.HaveFloppyDrives
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersSsdMemory]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'SSDMemory', 
                                	CASE WHEN (@ssdMemoryCount != 0) AND (g.SSDMemory IN (SELECT [Value] FROM @ssdMemory)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@ssdMemoryCount != 0) AND (g.SSDMemory IN (SELECT [Value] FROM @ssdMemory)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.SSDMemory,
                                	g.SSDMemory
                                	FROM (
                                	SELECT DISTINCT g.Id, g.SSDMemory as SSDMemory
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@ssdMemoryCount != 0) AND (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.SSDMemory
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersHardDiskMemory]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'hardDiskMemory', 
                                	CASE WHEN (@hardDiskMemoryCount != 0) AND (g.HardDiskMemory IN (SELECT [Value] FROM @hardDiskMemory)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@hardDiskMemoryCount != 0) AND (g.HardDiskMemory IN (SELECT [Value] FROM @hardDiskMemory)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.HardDiskMemory,
                                	g.HardDiskMemory
                                	FROM (
                                	SELECT DISTINCT g.Id, g.HardDiskMemory as HardDiskMemory
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@hardDiskMemoryCount != 0) AND (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.HardDiskMemory
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersCpuSocketType]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'CPUSocketType', 
                                	CASE WHEN (@cpuSocketTypeCount != 0) AND (g.CPUSocketType IN (SELECT [Value] FROM @cpuSocketType)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@cpuSocketTypeCount != 0) AND (g.CPUSocketType IN (SELECT [Value] FROM @cpuSocketType)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.CPUSocketType,
                                	g.CPUSocketType
                                	FROM (
                                	SELECT DISTINCT g.Id, g.CPUSocketType as CPUSocketType
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@cpuSocketTypeCount != 0) AND (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.CPUSocketType
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersComputerDrives]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'computerDriveType', 
                                	CASE WHEN (@computerDriveTypeCount != 0) AND (g.ComputerDriveType IN (SELECT [Value] FROM @computerDriveType)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@computerDriveTypeCount != 0) AND (g.ComputerDriveType IN (SELECT [Value] FROM @computerDriveType)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.ComputerDriveType,
                                	g.ComputerDriveType
                                	FROM (
                                	SELECT DISTINCT g.Id, ccdt.ComputerDriveTypeValue as ComputerDriveType
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@computerDriveTypeCount != 0) AND (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	WHERE g.ComputerDriveType IS NOT NULL
                                	GROUP BY g.ComputerDriveType
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersNumberOfCores]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'numberOfCores', 
                                	CASE WHEN (@numberOfCoresCount != 0) AND (g.NumberOfCores IN (SELECT [Value] FROM @numberOfCores)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@numberOfCoresCount != 0) AND (g.NumberOfCores IN (SELECT [Value] FROM @numberOfCores)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.NumberOfCores,
                                	g.NumberOfCores
                                	FROM (
                                	SELECT DISTINCT g.Id, g.NumberOfCores as NumberOfCores
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@numberOfCoresCount != 0) AND (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.NumberOfCores
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersFloppyDrivesCount]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'floppyDrivesCount', 
                                	CASE WHEN (@floppyDrivesCountCount != 0) AND (g.FloppyDrivesCount IN (SELECT [Value] FROM @floppyDrivesCount)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@floppyDrivesCountCount != 0) AND (g.FloppyDrivesCount IN (SELECT [Value] FROM @floppyDrivesCount)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.FloppyDrivesCount,
                                	g.FloppyDrivesCount
                                	FROM (
                                	SELECT DISTINCT g.Id, g.FloppyDrivesCount as FloppyDrivesCount
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@floppyDrivesCountCount != 0) AND (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores)))))) as g
                                	WHERE g.FloppyDrivesCount IS NOT NULL
                                	GROUP BY g.FloppyDrivesCount
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersPrice]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                	SELECT 
                                	'price', 
                                	MIN(g.Price),
                                	MAX(g.Price)
                                	FROM (
                                	SELECT DISTINCT g.Id, g.Price
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))) as g
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersCount]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @Count TABLE 
                                (
                                	    [Value] int
                                )
                                
                                AS
                                BEGIN
                                	INSERT INTO @Count
                                	SELECT 
                                	Count(g.Id)
                                	FROM (
                                	SELECT DISTINCT g.Id
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))) as g
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetComputerTechnologiesGoodCells]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors)))
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetComputerTechnologiesCountries]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	manCountry.[Value],
                                    	manCountry.[Value]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                    	
                                    	GROUP BY manCountry.[Value]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetComputerTechnologiesColors]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ColorValue,
                                    	g.ColorValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))))
                                    	
                                    	GROUP BY g.ColorValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetComputerTechnologiesMaterials]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.MaterialValue,
                                    	g.MaterialValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                    	
                                    	GROUP BY g.MaterialValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetComputerTechnologiesProducers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	pr.[Name],
                                    	pr.[Name]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                    	
                                    	GROUP BY pr.[Name]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetComputerTechnologiesPrice]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors)))
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetComputerTechnologiesCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT Count(g.Id)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors)))
                                    	RETURN 
                                    END
                                    GO");


            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCoolersGoodCells]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@coolerType [dbo].StringList READONLY,
                                    	@fanSize [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@coolerTypeCount int,
                                    	@fanSizeCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@coolerTypeCount = 0) OR (g.[CoolerType] IN (SELECT value FROM @coolerType))) AND
                                    	((@fanSizeCount = 0) OR (g.[FanSize] IN (SELECT value FROM @fanSize)))
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCoolersCountries]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@coolerType [dbo].StringList READONLY,
                                    	@fanSize [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@coolerTypeCount int,
                                    	@fanSizeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	manCountry.[Value],
                                    	manCountry.[Value]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@coolerTypeCount = 0) OR (g.[CoolerType] IN (SELECT value FROM @coolerType))) AND
                                    	((@fanSizeCount = 0) OR (g.[FanSize] IN (SELECT value FROM @fanSize))))
                                    	GROUP BY manCountry.[Value]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCoolersColors]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@coolerType [dbo].StringList READONLY,
                                    	@fanSize [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@coolerTypeCount int,
                                    	@fanSizeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ColorValue,
                                    	g.ColorValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@coolerTypeCount = 0) OR (g.[CoolerType] IN (SELECT value FROM @coolerType))) AND
                                    	((@fanSizeCount = 0) OR (g.[FanSize] IN (SELECT value FROM @fanSize))))
                                    	GROUP BY g.ColorValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCoolersMaterials]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@coolerType [dbo].StringList READONLY,
                                    	@fanSize [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@coolerTypeCount int,
                                    	@fanSizeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.MaterialValue,
                                    	g.MaterialValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@coolerTypeCount = 0) OR (g.[CoolerType] IN (SELECT value FROM @coolerType))) AND
                                    	((@fanSizeCount = 0) OR (g.[FanSize] IN (SELECT value FROM @fanSize))))
                                    	GROUP BY g.MaterialValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCoolersProducers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@coolerType [dbo].StringList READONLY,
                                    	@fanSize [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@coolerTypeCount int,
                                    	@fanSizeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	pr.[Name],
                                    	pr.[Name]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@coolerTypeCount = 0) OR (g.[CoolerType] IN (SELECT value FROM @coolerType))) AND
                                    	((@fanSizeCount = 0) OR (g.[FanSize] IN (SELECT value FROM @fanSize))))
                                    	GROUP BY pr.[Name]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCoolersTypes]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@coolerType [dbo].StringList READONLY,
                                    	@fanSize [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@coolerTypeCount int,
                                    	@fanSizeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'coolerType', 
                                    	CASE WHEN (@coolerTypeCount != 0) AND (g.[CoolerType] IN (SELECT [Value] FROM @coolerType)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@coolerTypeCount != 0) AND (g.[CoolerType] IN (SELECT [Value] FROM @coolerType)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[CoolerType],
                                    	g.[CoolerType]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@coolerTypeCount != 0) AND (g.[CoolerType] IN (SELECT value FROM @coolerType))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@fanSizeCount = 0) OR (g.[FanSize] IN (SELECT value FROM @fanSize))))
                                    	GROUP BY g.[CoolerType]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCoolersFanSizes]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@coolerType [dbo].StringList READONLY,
                                    	@fanSize [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@coolerTypeCount int,
                                    	@fanSizeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'fanSize', 
                                    	CASE WHEN (@fanSizeCount != 0) AND (g.[FanSize] IN (SELECT [Value] FROM @fanSize)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@fanSizeCount != 0) AND (g.[FanSize] IN (SELECT [Value] FROM @fanSize)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[FanSize],
                                    	g.[FanSize]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@fanSizeCount != 0) AND (g.[FanSize] IN (SELECT value FROM @fanSize))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@coolerTypeCount = 0) OR (g.[CoolerType] IN (SELECT value FROM @coolerType))))
                                    	GROUP BY g.[FanSize]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCoolersPrice]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@coolerType [dbo].StringList READONLY,
                                    	@fanSize [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@coolerTypeCount int,
                                    	@fanSizeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@coolerTypeCount = 0) OR (g.[CoolerType] IN (SELECT value FROM @coolerType))) AND
                                    	((@fanSizeCount = 0) OR (g.[FanSize] IN (SELECT value FROM @fanSize)))
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCoolersCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@coolerType [dbo].StringList READONLY,
                                    	@fanSize [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@coolerTypeCount int,
                                    	@fanSizeCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT Count(g.Id)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@coolerTypeCount = 0) OR (g.[CoolerType] IN (SELECT value FROM @coolerType))) AND
                                    	((@fanSizeCount = 0) OR (g.[FanSize] IN (SELECT value FROM @fanSize)))
                                    	RETURN 
                                    END
                                    GO");


            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsGoodCells]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@thermalDesignPowerCount = 0) OR (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@numberOfThreadsCount = 0) OR (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads)))
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsCountries]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	manCountry.[Value],
                                    	manCountry.[Value]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@thermalDesignPowerCount = 0) OR (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@numberOfThreadsCount = 0) OR (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads))))
                                    	
                                    	GROUP BY manCountry.[Value]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsColors]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ColorValue,
                                    	g.ColorValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@thermalDesignPowerCount = 0) OR (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@numberOfThreadsCount = 0) OR (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads))))
                                    	
                                    	GROUP BY g.ColorValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsMaterials]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.MaterialValue,
                                    	g.MaterialValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@thermalDesignPowerCount = 0) OR (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@numberOfThreadsCount = 0) OR (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads))))
                                    	
                                    	GROUP BY g.MaterialValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsProducers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	pr.[Name],
                                    	pr.[Name]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@thermalDesignPowerCount = 0) OR (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@numberOfThreadsCount = 0) OR (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads))))
                                    	GROUP BY pr.[Name]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsSocketTypes]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'CPUSocketType', 
                                    	CASE WHEN (@cpuSocketTypeCount != 0) AND (g.[CPUSocketType] IN (SELECT [Value] FROM @cpuSocketType)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@cpuSocketTypeCount != 0) AND (g.[CPUSocketType] IN (SELECT [Value] FROM @cpuSocketType)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[CPUSocketType],
                                    	g.[CPUSocketType]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@cpuSocketTypeCount != 0) AND (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@thermalDesignPowerCount = 0) OR (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@numberOfThreadsCount = 0) OR (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads))))
                                    	GROUP BY g.[CPUSocketType]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsThermalDesignPowers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'thermalDesignPower', 
                                    	CASE WHEN (@thermalDesignPowerCount != 0) AND (g.[ThermalDesignPower] IN (SELECT [Value] FROM @thermalDesignPower)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@thermalDesignPowerCount != 0) AND (g.[ThermalDesignPower] IN (SELECT [Value] FROM @thermalDesignPower)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[ThermalDesignPower],
                                    	g.[ThermalDesignPower]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@thermalDesignPowerCount != 0) AND (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@numberOfThreadsCount = 0) OR (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads))))
                                    	GROUP BY g.[ThermalDesignPower]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsNumberOfCores]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'numberOfCores', 
                                    	CASE WHEN (@numberOfCoresCount != 0) AND (g.[NumberOfCores] IN (SELECT [Value] FROM @numberOfCores)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@numberOfCoresCount != 0) AND (g.[NumberOfCores] IN (SELECT [Value] FROM @numberOfCores)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[NumberOfCores],
                                    	g.[NumberOfCores]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@numberOfCoresCount != 0) AND (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@thermalDesignPowerCount = 0) OR (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) AND
                                    	((@numberOfThreadsCount = 0) OR (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads))))
                                    	GROUP BY g.[NumberOfCores]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsNumberOfThreads]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'numberOfThreads', 
                                    	CASE WHEN (@numberOfThreadsCount != 0) AND (g.[NumberOfThreads] IN (SELECT [Value] FROM @numberOfThreads)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@numberOfThreadsCount != 0) AND (g.[NumberOfThreads] IN (SELECT [Value] FROM @numberOfThreads)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[NumberOfThreads],
                                    	g.[NumberOfThreads]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@numberOfThreadsCount != 0) AND (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@thermalDesignPowerCount = 0) OR (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))))
                                    	GROUP BY g.[NumberOfThreads]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsPrice]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@thermalDesignPowerCount = 0) OR (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@numberOfThreadsCount = 0) OR (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads)))
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT Count(g.Id)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@thermalDesignPowerCount = 0) OR (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@numberOfThreadsCount = 0) OR (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads)))
                                    	RETURN 
                                    END
                                    GO");



            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetFlashDrivesGoodCells]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@usbSpecificationType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@capacityCount int,
                                    	@usbSpecificationTypeCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@capacityCount = 0) OR (g.Capacity IN (SELECT value FROM @capacity))) AND
                                    	((@usbSpecificationTypeCount = 0) OR (g.USBSpecificationType IN (SELECT value FROM @usbSpecificationType)))
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetFlashDrivesCountries]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@usbSpecificationType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@capacityCount int,
                                    	@usbSpecificationTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	manCountry.[Value],
                                    	manCountry.[Value]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@capacityCount = 0) OR (g.Capacity IN (SELECT value FROM @capacity))) AND
                                    	((@usbSpecificationTypeCount = 0) OR (g.USBSpecificationType IN (SELECT value FROM @usbSpecificationType))))
                                    	
                                    	GROUP BY manCountry.[Value]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetFlashDrivesColors]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@usbSpecificationType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@capacityCount int,
                                    	@usbSpecificationTypeCount int
                                    
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ColorValue,
                                    	g.ColorValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@capacityCount = 0) OR (g.Capacity IN (SELECT value FROM @capacity))) AND
                                    	((@usbSpecificationTypeCount = 0) OR (g.USBSpecificationType IN (SELECT value FROM @usbSpecificationType))))
                                    	GROUP BY g.ColorValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetFlashDrivesMaterials]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@usbSpecificationType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@capacityCount int,
                                    	@usbSpecificationTypeCount int
                                    
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.MaterialValue,
                                    	g.MaterialValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@capacityCount = 0) OR (g.Capacity IN (SELECT value FROM @capacity))) AND
                                    	((@usbSpecificationTypeCount = 0) OR (g.USBSpecificationType IN (SELECT value FROM @usbSpecificationType))))
                                    	GROUP BY g.MaterialValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetFlashDrivesProducers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@usbSpecificationType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@capacityCount int,
                                    	@usbSpecificationTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	pr.[Name],
                                    	pr.[Name]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@capacityCount = 0) OR (g.Capacity IN (SELECT value FROM @capacity))) AND
                                    	((@usbSpecificationTypeCount = 0) OR (g.USBSpecificationType IN (SELECT value FROM @usbSpecificationType))))
                                    	GROUP BY pr.[Name]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetFlashDrivesCapacity]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@usbSpecificationType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@capacityCount int,
                                    	@usbSpecificationTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'capacity', 
                                    	CASE WHEN (@capacityCount != 0) AND (g.Capacity IN (SELECT [Value] FROM @capacity)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@capacityCount != 0) AND (g.Capacity IN (SELECT [Value] FROM @capacity)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.Capacity,
                                    	g.Capacity
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@capacityCount != 0) AND (g.Capacity IN (SELECT value FROM @capacity))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@usbSpecificationTypeCount = 0) OR (g.USBSpecificationType IN (SELECT value FROM @usbSpecificationType))))
                                    	GROUP BY g.Capacity
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetFlashDrivesUsbSpecificationTypes]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@usbSpecificationType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@capacityCount int,
                                    	@usbSpecificationTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'USBSpecificationType', 
                                    	CASE WHEN (@usbSpecificationTypeCount != 0) AND (g.USBSpecificationType IN (SELECT [Value] FROM @usbSpecificationType)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@usbSpecificationTypeCount != 0) AND (g.USBSpecificationType IN (SELECT [Value] FROM @usbSpecificationType)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.USBSpecificationType,
                                    	g.USBSpecificationType
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@usbSpecificationTypeCount != 0) AND (g.USBSpecificationType IN (SELECT value FROM @usbSpecificationType))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@capacityCount = 0) OR (g.Capacity IN (SELECT value FROM @capacity))))
                                    	GROUP BY g.USBSpecificationType
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetFlashDrivesPrice]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@usbSpecificationType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@capacityCount int,
                                    	@usbSpecificationTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@capacityCount = 0) OR (g.Capacity IN (SELECT value FROM @capacity))) AND
                                    	((@usbSpecificationTypeCount = 0) OR (g.USBSpecificationType IN (SELECT value FROM @usbSpecificationType)))
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetFlashDrivesCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@usbSpecificationType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@capacityCount int,
                                    	@usbSpecificationTypeCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT Count(g.Id)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@capacityCount = 0) OR (g.Capacity IN (SELECT value FROM @capacity))) AND
                                    	((@usbSpecificationTypeCount = 0) OR (g.USBSpecificationType IN (SELECT value FROM @usbSpecificationType)))
                                    	RETURN 
                                    END
                                    GO");


            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetGoodsGoodCells]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors)))
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetGoodsCountries]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	manCountry.[Value],
                                    	manCountry.[Value]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                    	
                                    	GROUP BY manCountry.[Value]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetGoodsColors]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ColorValue,
                                    	g.ColorValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))))
                                    	
                                    	GROUP BY g.ColorValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetGoodsMaterials]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.MaterialValue,
                                    	g.MaterialValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                    	GROUP BY g.MaterialValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetGoodsProducers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	pr.[Name],
                                    	pr.[Name]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                    	GROUP BY pr.[Name]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetGoodsPrice]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors)))
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetGoodsCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT Count(g.Id)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors)))
                                    	RETURN 
                                    END
                                    GO");



            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetHeadphonesGoodCells]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@headphonesTypeCount int,
                                    	@wirelessTypeCount int,
                                    	@connectorTypeCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@headphonesTypeCount = 0) OR (g.[HeadphonesType] IN (SELECT value FROM @headphonesType))) AND
                                    	((@wirelessTypeCount = 0) OR (g.[WirelessType] IN (SELECT value FROM @wirelessType))) AND
                                    	((@connectorTypeCount = 0) OR (g.[ConnectorType] IN (SELECT value FROM @connectorType)))
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetHeadphonesCountries]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@headphonesTypeCount int,
                                    	@wirelessTypeCount int,
                                    	@connectorTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	manCountry.[Value],
                                    	manCountry.[Value]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@headphonesTypeCount = 0) OR (g.[HeadphonesType] IN (SELECT value FROM @headphonesType))) AND
                                    	((@wirelessTypeCount = 0) OR (g.[WirelessType] IN (SELECT value FROM @wirelessType))) AND
                                    	((@connectorTypeCount = 0) OR (g.[ConnectorType] IN (SELECT value FROM @connectorType))))
                                    	GROUP BY manCountry.[Value]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetHeadphonesColors]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@headphonesTypeCount int,
                                    	@wirelessTypeCount int,
                                    	@connectorTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ColorValue,
                                    	g.ColorValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@headphonesTypeCount = 0) OR (g.[HeadphonesType] IN (SELECT value FROM @headphonesType))) AND
                                    	((@wirelessTypeCount = 0) OR (g.[WirelessType] IN (SELECT value FROM @wirelessType))) AND
                                    	((@connectorTypeCount = 0) OR (g.[ConnectorType] IN (SELECT value FROM @connectorType))))
                                    	GROUP BY g.ColorValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetHeadphonesMaterials]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@headphonesTypeCount int,
                                    	@wirelessTypeCount int,
                                    	@connectorTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.MaterialValue,
                                    	g.MaterialValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@headphonesTypeCount = 0) OR (g.[HeadphonesType] IN (SELECT value FROM @headphonesType))) AND
                                    	((@wirelessTypeCount = 0) OR (g.[WirelessType] IN (SELECT value FROM @wirelessType))) AND
                                    	((@connectorTypeCount = 0) OR (g.[ConnectorType] IN (SELECT value FROM @connectorType))))
                                    	
                                    	GROUP BY g.MaterialValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetHeadphonesProducers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@headphonesTypeCount int,
                                    	@wirelessTypeCount int,
                                    	@connectorTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	pr.[Name],
                                    	pr.[Name]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@headphonesTypeCount = 0) OR (g.[HeadphonesType] IN (SELECT value FROM @headphonesType))) AND
                                    	((@wirelessTypeCount = 0) OR (g.[WirelessType] IN (SELECT value FROM @wirelessType))) AND
                                    	((@connectorTypeCount = 0) OR (g.[ConnectorType] IN (SELECT value FROM @connectorType))))
                                    	GROUP BY pr.[Name]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetHeadphonesTypes]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@headphonesTypeCount int,
                                    	@wirelessTypeCount int,
                                    	@connectorTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'headphonesType', 
                                    	CASE WHEN (@headphonesTypeCount != 0) AND (g.[HeadphonesType] IN (SELECT [Value] FROM @headphonesType)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@headphonesTypeCount != 0) AND (g.[HeadphonesType] IN (SELECT [Value] FROM @headphonesType)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[HeadphonesType],
                                    	g.[HeadphonesType]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@headphonesTypeCount != 0) AND (g.[HeadphonesType] IN (SELECT value FROM @headphonesType))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@wirelessTypeCount = 0) OR (g.[WirelessType] IN (SELECT value FROM @wirelessType))) AND
                                    	((@connectorTypeCount = 0) OR (g.[ConnectorType] IN (SELECT value FROM @connectorType))))
                                    	GROUP BY g.[HeadphonesType]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetHeadphonesWirelessTypes]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@headphonesTypeCount int,
                                    	@wirelessTypeCount int,
                                    	@connectorTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'wirelessType', 
                                    	CASE WHEN (@wirelessTypeCount != 0) AND (g.[WirelessType] IN (SELECT [Value] FROM @wirelessType)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@wirelessTypeCount != 0) AND (g.[WirelessType] IN (SELECT [Value] FROM @wirelessType)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[WirelessType],
                                    	g.[WirelessType]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@wirelessTypeCount != 0) AND (g.[WirelessType] IN (SELECT value FROM @wirelessType))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@headphonesTypeCount = 0) OR (g.[HeadphonesType] IN (SELECT value FROM @headphonesType))) AND
                                    	((@connectorTypeCount = 0) OR (g.[ConnectorType] IN (SELECT value FROM @connectorType))))
                                    	GROUP BY g.[WirelessType]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetHeadphonesConnectorTypes]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@headphonesTypeCount int,
                                    	@wirelessTypeCount int,
                                    	@connectorTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'connectorType', 
                                    	CASE WHEN (@connectorTypeCount != 0) AND (g.[ConnectorType] IN (SELECT [Value] FROM @connectorType)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@connectorTypeCount != 0) AND (g.[ConnectorType] IN (SELECT [Value] FROM @connectorType)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[ConnectorType],
                                    	g.[ConnectorType]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@connectorTypeCount != 0) AND (g.[ConnectorType] IN (SELECT value FROM @connectorType))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@headphonesTypeCount = 0) OR (g.[HeadphonesType] IN (SELECT value FROM @headphonesType))) AND
                                    	((@wirelessTypeCount = 0) OR (g.[WirelessType] IN (SELECT value FROM @wirelessType))))
                                    	GROUP BY g.[ConnectorType]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetHeadphonesPrice]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@headphonesTypeCount int,
                                    	@wirelessTypeCount int,
                                    	@connectorTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@headphonesTypeCount = 0) OR (g.[HeadphonesType] IN (SELECT value FROM @headphonesType))) AND
                                    	((@wirelessTypeCount = 0) OR (g.[WirelessType] IN (SELECT value FROM @wirelessType))) AND
                                    	((@connectorTypeCount = 0) OR (g.[ConnectorType] IN (SELECT value FROM @connectorType)))
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetHeadphonesCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@headphonesTypeCount int,
                                    	@wirelessTypeCount int,
                                    	@connectorTypeCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT Count(g.Id)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@headphonesTypeCount = 0) OR (g.[HeadphonesType] IN (SELECT value FROM @headphonesType))) AND
                                    	((@wirelessTypeCount = 0) OR (g.[WirelessType] IN (SELECT value FROM @wirelessType))) AND
                                    	((@connectorTypeCount = 0) OR (g.[ConnectorType] IN (SELECT value FROM @connectorType)))
                                    	RETURN 
                                    END
                                    GO");



            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetKeyboardsGoodCells]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@keyboardType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@keyboardTypeCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@keyboardTypeCount = 0) OR (g.[KeyboardType] IN (SELECT value FROM @keyboardType)))
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetKeyboardsCountries]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@keyboardType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@keyboardTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	manCountry.[Value],
                                    	manCountry.[Value]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@keyboardTypeCount = 0) OR (g.[KeyboardType] IN (SELECT value FROM @keyboardType))))
                                    	GROUP BY manCountry.[Value]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetKeyboardsColors]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@keyboardType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@keyboardTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ColorValue,
                                    	g.ColorValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@keyboardTypeCount = 0) OR (g.[KeyboardType] IN (SELECT value FROM @keyboardType))))
                                    	GROUP BY g.ColorValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetKeyboardsMaterials]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@keyboardType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@keyboardTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.MaterialValue,
                                    	g.MaterialValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@keyboardTypeCount = 0) OR (g.[KeyboardType] IN (SELECT value FROM @keyboardType))))
                                    	GROUP BY g.MaterialValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetKeyboardsProducers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@keyboardType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@keyboardTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	pr.[Name],
                                    	pr.[Name]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@keyboardTypeCount = 0) OR (g.[KeyboardType] IN (SELECT value FROM @keyboardType))))
                                    	
                                    	GROUP BY pr.[Name]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetKeyboardsTypes]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@keyboardType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@keyboardTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'keyboardType', 
                                    	CASE WHEN (@keyboardTypeCount != 0) AND (g.[KeyboardType] IN (SELECT [Value] FROM @keyboardType)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@keyboardTypeCount != 0) AND (g.[KeyboardType] IN (SELECT [Value] FROM @keyboardType)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[KeyboardType],
                                    	g.[KeyboardType]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@keyboardTypeCount != 0) AND (g.[KeyboardType] IN (SELECT value FROM @keyboardType))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))))
                                    	
                                    	GROUP BY g.[KeyboardType]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetKeyboardsPrice]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@keyboardType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@keyboardTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@keyboardTypeCount = 0) OR (g.[KeyboardType] IN (SELECT value FROM @keyboardType)))
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetKeyboardsCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@keyboardType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@keyboardTypeCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT Count(g.Id)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@keyboardTypeCount = 0) OR (g.[KeyboardType] IN (SELECT value FROM @keyboardType)))
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsGoodCells]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT  g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM ( 
                                    	SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator], g.AddTime
                                    	FROM
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))
                                    	GROUP BY  g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator], g.AddTime
                                    	) g
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsCountries]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (g.Country IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (g.Country IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.Country,
                                    	g.Country
                                    	FROM (
                                    	SELECT DISTINCT g.Id, manCountry.[Value] as Country
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.Country
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsColors]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.Color IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.Color IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.Color,
                                    	g.Color
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.ColorValue as Color
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.Color
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsMaterials]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.Material IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.Material IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.Material,
                                    	g.Material
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.MaterialValue as Material
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.Material
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsProducers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (g.Producer IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (g.Producer IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.Producer,
                                    	g.Producer
                                    	FROM (
                                    	SELECT DISTINCT g.Id, pr.[Name] as Producer
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR 
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.Producer
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsAmountOfRAMs]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'amountOfRAM', 
                                    	CASE WHEN (@amountOfRAMCount != 0) AND (g.AmountOfRAM IN (SELECT [Value] FROM @amountOfRAM)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@amountOfRAMCount != 0) AND (g.AmountOfRAM IN (SELECT [Value] FROM @amountOfRAM)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.AmountOfRAM,
                                    	g.AmountOfRAM
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.AmountOfRAM as AmountOfRAM
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@amountOfRAMCount != 0) AND (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.AmountOfRAM
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsCpuFrequency]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'CPUFrequency', 
                                    	CASE WHEN (@cpuFrequencyCount != 0) AND (g.CPUFrequency IN (SELECT [Value] FROM @cpuFrequency)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@cpuFrequencyCount != 0) AND (g.CPUFrequency IN (SELECT [Value] FROM @cpuFrequency)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.CPUFrequency,
                                    	g.CPUFrequency
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.CPUFrequency as CPUFrequency
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@cpuFrequencyCount != 0) AND (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.CPUFrequency
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsLength]
                                    (	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'length', 
                                    	CASE WHEN (@lengthCount != 0) AND (g.[Length] IN (SELECT [Value] FROM @length)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@lengthCount != 0) AND (g.[Length] IN (SELECT [Value] FROM @length)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[Length],
                                    	g.[Length]
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.[Length] as [Length]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@lengthCount != 0) AND (g.[Length] IN (SELECT value FROM @length))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.[Length]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsHeight]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'height', 
                                    	CASE WHEN (@heightCount != 0) AND (g.Height IN (SELECT [Value] FROM @height)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@heightCount != 0) AND (g.Height IN (SELECT [Value] FROM @height)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.Height,
                                    	g.Height
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.Height as Height
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@heightCount != 0) AND (g.[Height] IN (SELECT value FROM @height))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.Height
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsWidth]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'width', 
                                    	CASE WHEN (@widthCount != 0) AND (g.Width IN (SELECT [Value] FROM @width)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@widthCount != 0) AND (g.Width IN (SELECT [Value] FROM @width)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.Width,
                                    	g.Width
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.Width as Width
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@widthCount != 0) AND (g.[Width] IN (SELECT value FROM @width))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.Width
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsHaveFloppyDrives]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'haveFloppyDrives', 
                                    	CASE WHEN (@haveFloppyDrivesCount != 0) AND (g.HaveFloppyDrives IN (SELECT [Value] FROM @haveFloppyDrives)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@haveFloppyDrivesCount != 0) AND (g.HaveFloppyDrives IN (SELECT [Value] FROM @haveFloppyDrives)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.HaveFloppyDrives,
                                    	g.HaveFloppyDrives
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.HaveFloppyDrives as HaveFloppyDrives
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@haveFloppyDrivesCount != 0) AND (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.HaveFloppyDrives
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsSsdMemory]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'SSDMemory', 
                                    	CASE WHEN (@ssdMemoryCount != 0) AND (g.SSDMemory IN (SELECT [Value] FROM @ssdMemory)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@ssdMemoryCount != 0) AND (g.SSDMemory IN (SELECT [Value] FROM @ssdMemory)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.SSDMemory,
                                    	g.SSDMemory
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.SSDMemory as SSDMemory
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@ssdMemoryCount != 0) AND (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.SSDMemory
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsHardDiskMemory]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'hardDiskMemory', 
                                    	CASE WHEN (@hardDiskMemoryCount != 0) AND (g.HardDiskMemory IN (SELECT [Value] FROM @hardDiskMemory)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@hardDiskMemoryCount != 0) AND (g.HardDiskMemory IN (SELECT [Value] FROM @hardDiskMemory)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.HardDiskMemory,
                                    	g.HardDiskMemory
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.HardDiskMemory as HardDiskMemory
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@hardDiskMemoryCount != 0) AND (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.HardDiskMemory
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsCpuSocketType]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'CPUSocketType', 
                                    	CASE WHEN (@cpuSocketTypeCount != 0) AND (g.CPUSocketType IN (SELECT [Value] FROM @cpuSocketType)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@cpuSocketTypeCount != 0) AND (g.CPUSocketType IN (SELECT [Value] FROM @cpuSocketType)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.CPUSocketType,
                                    	g.CPUSocketType
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.CPUSocketType as CPUSocketType
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@cpuSocketTypeCount != 0) AND (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.CPUSocketType
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsComputerDrives]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'computerDriveType', 
                                    	CASE WHEN (@computerDriveTypeCount != 0) AND (g.ComputerDriveType IN (SELECT [Value] FROM @computerDriveType)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@computerDriveTypeCount != 0) AND (g.ComputerDriveType IN (SELECT [Value] FROM @computerDriveType)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ComputerDriveType,
                                    	g.ComputerDriveType
                                    	FROM (
                                    	SELECT DISTINCT g.Id, lcdt.ComputerDriveTypeValue as ComputerDriveType
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@computerDriveTypeCount != 0) AND (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	WHERE g.ComputerDriveType IS NOT NULL
                                    	GROUP BY g.ComputerDriveType
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsNumberOfCores]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'numberOfCores', 
                                    	CASE WHEN (@numberOfCoresCount != 0) AND (g.NumberOfCores IN (SELECT [Value] FROM @numberOfCores)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@numberOfCoresCount != 0) AND (g.NumberOfCores IN (SELECT [Value] FROM @numberOfCores)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.NumberOfCores,
                                    	g.NumberOfCores
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.NumberOfCores as NumberOfCores
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@numberOfCoresCount != 0) AND (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.NumberOfCores
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsFloppyDrivesCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'floppyDrivesCount', 
                                    	CASE WHEN (@floppyDrivesCountCount != 0) AND (g.FloppyDrivesCount IN (SELECT [Value] FROM @floppyDrivesCount)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@floppyDrivesCountCount != 0) AND (g.FloppyDrivesCount IN (SELECT [Value] FROM @floppyDrivesCount)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.FloppyDrivesCount,
                                    	g.FloppyDrivesCount
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.FloppyDrivesCount as FloppyDrivesCount
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@floppyDrivesCountCount != 0) AND (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	WHERE g.FloppyDrivesCount IS NOT NULL
                                    	GROUP BY g.FloppyDrivesCount
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsDisplays]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'display', 
                                    	CASE WHEN (@displaysCount != 0) AND (g.Display IN (SELECT [Value] FROM @displays)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@displaysCount != 0) AND (g.Display IN (SELECT [Value] FROM @displays)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.Display,
                                    	g.Display
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.Display as Display
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@displaysCount != 0) AND (g.[Display] IN (SELECT value FROM @displays))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                    	GROUP BY g.Display
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsPrice]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.Price
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays))) AND
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))) as g
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT 
                                    	Count(g.Id)
                                    	FROM (
                                    	SELECT DISTINCT g.Id
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays))) AND
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))) as g
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetMiceGoodCells]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@mauseType [dbo].StringList READONLY,
                                    	@buttonsCount [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@mauseTypeCount int,
                                    	@buttonsCountCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@mauseTypeCount = 0) OR (g.[MauseType] IN (SELECT value FROM @mauseType))) AND
                                    	((@buttonsCountCount = 0) OR (g.[ButtonsCount] IN (SELECT value FROM @buttonsCount)))
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetMiceCountries]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@mauseType [dbo].StringList READONLY,
                                    	@buttonsCount [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@mauseTypeCount int,
                                    	@buttonsCountCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	manCountry.[Value],
                                    	manCountry.[Value]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@mauseTypeCount = 0) OR (g.[MauseType] IN (SELECT value FROM @mauseType))) AND
                                    	((@buttonsCountCount = 0) OR (g.[ButtonsCount] IN (SELECT value FROM @buttonsCount))))
                                    	GROUP BY manCountry.[Value]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetMiceColors]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@mauseType [dbo].StringList READONLY,
                                    	@buttonsCount [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@mauseTypeCount int,
                                    	@buttonsCountCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ColorValue,
                                    	g.ColorValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@mauseTypeCount = 0) OR (g.[MauseType] IN (SELECT value FROM @mauseType))) AND
                                    	((@buttonsCountCount = 0) OR (g.[ButtonsCount] IN (SELECT value FROM @buttonsCount))))
                                    	
                                    	GROUP BY g.ColorValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetMiceMaterials]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@mauseType [dbo].StringList READONLY,
                                    	@buttonsCount [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@mauseTypeCount int,
                                    	@buttonsCountCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.MaterialValue,
                                    	g.MaterialValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@mauseTypeCount = 0) OR (g.[MauseType] IN (SELECT value FROM @mauseType))) AND
                                    	((@buttonsCountCount = 0) OR (g.[ButtonsCount] IN (SELECT value FROM @buttonsCount))))
                                    	GROUP BY g.MaterialValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetMiceProducers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@mauseType [dbo].StringList READONLY,
                                    	@buttonsCount [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@mauseTypeCount int,
                                    	@buttonsCountCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	pr.[Name],
                                    	pr.[Name]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@mauseTypeCount = 0) OR (g.[MauseType] IN (SELECT value FROM @mauseType))) AND
                                    	((@buttonsCountCount = 0) OR (g.[ButtonsCount] IN (SELECT value FROM @buttonsCount))))
                                    	GROUP BY pr.[Name]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetMiceTypes]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@mauseType [dbo].StringList READONLY,
                                    	@buttonsCount [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@mauseTypeCount int,
                                    	@buttonsCountCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'mauseType', 
                                    	CASE WHEN (@mauseTypeCount != 0) AND (g.[MauseType] IN (SELECT [Value] FROM @mauseType)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@mauseTypeCount != 0) AND (g.[MauseType] IN (SELECT [Value] FROM @mauseType)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[MauseType],
                                    	g.[MauseType]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@mauseTypeCount != 0) AND (g.[MauseType] IN (SELECT value FROM @mauseType))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@buttonsCountCount = 0) OR (g.[ButtonsCount] IN (SELECT value FROM @buttonsCount))))
                                    	GROUP BY g.[MauseType]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetMiceButtonsCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@mauseType [dbo].StringList READONLY,
                                    	@buttonsCount [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@mauseTypeCount int,
                                    	@buttonsCountCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'buttonsCount', 
                                    	CASE WHEN (@buttonsCountCount != 0) AND (g.[ButtonsCount] IN (SELECT [Value] FROM @buttonsCount)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@buttonsCountCount != 0) AND (g.[ButtonsCount] IN (SELECT [Value] FROM @buttonsCount)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[ButtonsCount],
                                    	g.[ButtonsCount]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@buttonsCountCount != 0) AND (g.[ButtonsCount] IN (SELECT value FROM @buttonsCount))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@mauseTypeCount = 0) OR (g.[MauseType] IN (SELECT value FROM @mauseType))))
                                    	GROUP BY g.[ButtonsCount]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetMicePrice]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@mauseType [dbo].StringList READONLY,
                                    	@buttonsCount [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@mauseTypeCount int,
                                    	@buttonsCountCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@mauseTypeCount = 0) OR (g.[MauseType] IN (SELECT value FROM @mauseType))) AND
                                    	((@buttonsCountCount = 0) OR (g.[ButtonsCount] IN (SELECT value FROM @buttonsCount)))
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetMiceCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@mauseType [dbo].StringList READONLY,
                                    	@buttonsCount [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@mauseTypeCount int,
                                    	@buttonsCountCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT Count(g.Id)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@mauseTypeCount = 0) OR (g.[MauseType] IN (SELECT value FROM @mauseType))) AND
                                    	((@buttonsCountCount = 0) OR (g.[ButtonsCount] IN (SELECT value FROM @buttonsCount)))
                                    	RETURN 
                                    END
                                    GO");


            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetVideoCardsGoodCells]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@driveInterfaceCount int,
                                    	@videoSizeCount int,
                                    	@videoMemoryCapacityCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@driveInterfaceCount = 0) OR (g.[DriveInterfaceValue] IN (SELECT value FROM @driveInterface))) AND
                                    	((@videoSizeCount = 0) OR (g.[VideoSize] IN (SELECT value FROM @videoSize))) AND
                                    	((@videoMemoryCapacityCount = 0) OR (g.[VideoMemoryCapacity] IN (SELECT value FROM @videoMemoryCapacity)))
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetVideoCardsCountries]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@driveInterfaceCount int,
                                    	@videoSizeCount int,
                                    	@videoMemoryCapacityCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	manCountry.[Value],
                                    	manCountry.[Value]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@driveInterfaceCount = 0) OR (g.[DriveInterfaceValue] IN (SELECT value FROM @driveInterface))) AND
                                    	((@videoSizeCount = 0) OR (g.[VideoSize] IN (SELECT value FROM @videoSize))) AND
                                    	((@videoMemoryCapacityCount = 0) OR (g.[VideoMemoryCapacity] IN (SELECT value FROM @videoMemoryCapacity))))
                                    	GROUP BY manCountry.[Value]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetVideoCardsColors]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@driveInterfaceCount int,
                                    	@videoSizeCount int,
                                    	@videoMemoryCapacityCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ColorValue,
                                    	g.ColorValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@driveInterfaceCount = 0) OR (g.[DriveInterfaceValue] IN (SELECT value FROM @driveInterface))) AND
                                    	((@videoSizeCount = 0) OR (g.[VideoSize] IN (SELECT value FROM @videoSize))) AND
                                    	((@videoMemoryCapacityCount = 0) OR (g.[VideoMemoryCapacity] IN (SELECT value FROM @videoMemoryCapacity))))
                                    	GROUP BY g.ColorValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetVideoCardsMaterials]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@driveInterfaceCount int,
                                    	@videoSizeCount int,
                                    	@videoMemoryCapacityCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.MaterialValue,
                                    	g.MaterialValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@driveInterfaceCount = 0) OR (g.[DriveInterfaceValue] IN (SELECT value FROM @driveInterface))) AND
                                    	((@videoSizeCount = 0) OR (g.[VideoSize] IN (SELECT value FROM @videoSize))) AND
                                    	((@videoMemoryCapacityCount = 0) OR (g.[VideoMemoryCapacity] IN (SELECT value FROM @videoMemoryCapacity))))
                                    	GROUP BY g.MaterialValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetVideoCardsProducers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@driveInterfaceCount int,
                                    	@videoSizeCount int,
                                    	@videoMemoryCapacityCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	pr.[Name],
                                    	pr.[Name]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@driveInterfaceCount = 0) OR (g.[DriveInterfaceValue] IN (SELECT value FROM @driveInterface))) AND
                                    	((@videoSizeCount = 0) OR (g.[VideoSize] IN (SELECT value FROM @videoSize))) AND
                                    	((@videoMemoryCapacityCount = 0) OR (g.[VideoMemoryCapacity] IN (SELECT value FROM @videoMemoryCapacity))))
                                    	GROUP BY pr.[Name]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetVideoCardsDriveInterfaces]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@driveInterfaceCount int,
                                    	@videoSizeCount int,
                                    	@videoMemoryCapacityCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'driveInterface', 
                                    	CASE WHEN (@driveInterfaceCount != 0) AND (g.[DriveInterfaceValue]  IN (SELECT [Value] FROM @driveInterface)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@driveInterfaceCount != 0) AND (g.[DriveInterfaceValue]  IN (SELECT [Value] FROM @driveInterface)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[DriveInterfaceValue] ,
                                    	g.[DriveInterfaceValue] 
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@driveInterfaceCount != 0) AND (g.[DriveInterfaceValue] IN (SELECT value FROM @driveInterface))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@videoSizeCount = 0) OR (g.[VideoSize] IN (SELECT value FROM @videoSize))) AND
                                    	((@videoMemoryCapacityCount = 0) OR (g.[VideoMemoryCapacity] IN (SELECT value FROM @videoMemoryCapacity))))
                                    	GROUP BY g.[DriveInterfaceValue] 
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetVideoCardsVideoSizes]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@driveInterfaceCount int,
                                    	@videoSizeCount int,
                                    	@videoMemoryCapacityCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'videoSize', 
                                    	CASE WHEN (@videoSizeCount != 0) AND (g.[VideoSize]  IN (SELECT [Value] FROM @videoSize)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@videoSizeCount != 0) AND (g.[VideoSize]  IN (SELECT [Value] FROM @videoSize)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[VideoSize] ,
                                    	g.[VideoSize] 
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@videoSizeCount != 0) AND (g.[VideoSize] IN (SELECT value FROM @videoSize))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@driveInterfaceCount = 0) OR (g.[DriveInterfaceValue] IN (SELECT value FROM @driveInterface))) AND
                                    	((@videoMemoryCapacityCount = 0) OR (g.[VideoMemoryCapacity] IN (SELECT value FROM @videoMemoryCapacity))))
                                    	GROUP BY g.[VideoSize] 
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetVideoCardsVideoMemoryCapacity]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@driveInterfaceCount int,
                                    	@videoSizeCount int,
                                    	@videoMemoryCapacityCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'videoMemoryCapacity', 
                                    	CASE WHEN (@videoMemoryCapacityCount != 0) AND (g.[VideoMemoryCapacity]  IN (SELECT [Value] FROM @videoMemoryCapacity)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@videoMemoryCapacityCount != 0) AND (g.[VideoMemoryCapacity]  IN (SELECT [Value] FROM @videoMemoryCapacity)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[VideoMemoryCapacity] ,
                                    	g.[VideoMemoryCapacity] 
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@videoMemoryCapacityCount != 0) AND (g.[VideoMemoryCapacity] IN (SELECT value FROM @videoMemoryCapacity))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@driveInterfaceCount = 0) OR (g.[DriveInterfaceValue] IN (SELECT value FROM @driveInterface))) AND
                                    	((@videoSizeCount = 0) OR (g.[VideoSize] IN (SELECT value FROM @videoSize))))
                                    	GROUP BY g.[VideoMemoryCapacity] 
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetVideoCardsPrice]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@driveInterfaceCount int,
                                    	@videoSizeCount int,
                                    	@videoMemoryCapacityCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@driveInterfaceCount = 0) OR (g.[DriveInterfaceValue] IN (SELECT value FROM @driveInterface))) AND
                                    	((@videoSizeCount = 0) OR (g.[VideoSize] IN (SELECT value FROM @videoSize))) AND
                                    	((@videoMemoryCapacityCount = 0) OR (g.[VideoMemoryCapacity] IN (SELECT value FROM @videoMemoryCapacity)))
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetVideoCardsCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@driveInterfaceCount int,
                                    	@videoSizeCount int,
                                    	@videoMemoryCapacityCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT Count(g.Id)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@driveInterfaceCount = 0) OR (g.[DriveInterfaceValue] IN (SELECT value FROM @driveInterface))) AND
                                    	((@videoSizeCount = 0) OR (g.[VideoSize] IN (SELECT value FROM @videoSize))) AND
                                    	((@videoMemoryCapacityCount = 0) OR (g.[VideoMemoryCapacity] IN (SELECT value FROM @videoMemoryCapacity)))
                                    	RETURN 
                                    END
                                    GO");



            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetComputerAccessories]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetComputerAccessoriesCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetComputerAccessoriesProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerAccessoriesCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerAccessoriesMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerAccessoriesColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerAccessoriesPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetComputerAccessoriesGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetComputerDrives]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@formFactorType [dbo].StringList READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    	DECLARE @capacityCount INT;
                                    	SET @capacityCount = (SELECT Count(*) FROM @capacity)
                                    	DECLARE @computerDriveTypeCount INT;
                                    	SET @computerDriveTypeCount = (SELECT Count(*) FROM @computerDriveType)
                                    	DECLARE @formFactorTypeCount INT;
                                    	SET @formFactorTypeCount = (SELECT Count(*) FROM @formFactorType)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetComputerDrivesCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@computerDriveType,@formFactorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@capacityCount,@computerDriveTypeCount,@formFactorTypeCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetComputerDrivesProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@computerDriveType,@formFactorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@capacityCount,@computerDriveTypeCount,@formFactorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerDrivesCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@computerDriveType,@formFactorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@capacityCount,@computerDriveTypeCount,@formFactorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerDrivesMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@computerDriveType,@formFactorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@capacityCount,@computerDriveTypeCount,@formFactorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerDrivesColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@computerDriveType,@formFactorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@capacityCount,@computerDriveTypeCount,@formFactorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerDrivesPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@computerDriveType,@formFactorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@capacityCount,@computerDriveTypeCount,@formFactorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerDrivesCapacity](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@computerDriveType,@formFactorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@capacityCount,@computerDriveTypeCount,@formFactorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerDrivesTypes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@computerDriveType,@formFactorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@capacityCount,@computerDriveTypeCount,@formFactorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerDrivesFormFactorTypes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@computerDriveType,@formFactorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@capacityCount,@computerDriveTypeCount,@formFactorTypeCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetComputerDrivesGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@computerDriveType,@formFactorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@capacityCount,@computerDriveTypeCount,@formFactorTypeCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetComputerParts]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetComputerPartsCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetComputerPartsProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerPartsCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerPartsMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerPartsColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerPartsPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetComputerPartsGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetComputers]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    
                                    	DECLARE @amountOfRAMCount INT;
                                    	SET @amountOfRAMCount = (SELECT Count(*) FROM @amountOfRAM)
                                    	DECLARE @cpuFrequencyCount INT;
                                    	SET @cpuFrequencyCount = (SELECT Count(*) FROM @cpuFrequency)
                                    	DECLARE @lengthCount INT;
                                    	SET @lengthCount = (SELECT Count(*) FROM @length)
                                    	DECLARE @heightCount INT;
                                    	SET @heightCount = (SELECT Count(*) FROM @height)
                                    	DECLARE @widthCount INT;
                                    	SET @widthCount = (SELECT Count(*) FROM @width)
                                    	DECLARE @haveFloppyDrivesCount INT;
                                    	SET @haveFloppyDrivesCount = (SELECT Count(*) FROM @haveFloppyDrives)
                                    	DECLARE @ssdMemoryCount INT;
                                    	SET @ssdMemoryCount = (SELECT Count(*) FROM @ssdMemory)
                                    	DECLARE @hardDiskMemoryCount  INT;
                                    	SET @hardDiskMemoryCount  = (SELECT Count(*) FROM @hardDiskMemory)
                                    	DECLARE @cpuSocketTypeCount INT;
                                    	SET @cpuSocketTypeCount = (SELECT Count(*) FROM @cpuSocketType)
                                    	DECLARE @computerDriveTypeCount INT;
                                    	SET @computerDriveTypeCount = (SELECT Count(*) FROM @computerDriveType)
                                    	DECLARE @numberOfCoresCount INT;
                                    	SET @numberOfCoresCount = (SELECT Count(*) FROM @numberOfCores)
                                    	DECLARE @floppyDrivesCountCount INT;
                                    	SET @floppyDrivesCountCount = (SELECT Count(*) FROM @floppyDrivesCount)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetComputersCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetComputersProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersAmountOfRAMs](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersCPUFrequency](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersLength](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersHeight](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersWidth](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersHaveFloppyDrives](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersSSDMemory](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersHardDiskMemory](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersCPUSocketType](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersComputerDrives](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersNumberOfCores](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersFloppyDrivesCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetComputersGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetComputerTechnologies]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetComputerTechnologiesCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetComputerTechnologiesProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerTechnologiesCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerTechnologiesMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerTechnologiesColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerTechnologiesPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetComputerTechnologiesGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetCoolers]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@coolerType [dbo].StringList READONLY,
                                    	@fanSize [dbo].IntList READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    	DECLARE @coolerTypeCount INT;
                                    	SET @coolerTypeCount = (SELECT Count(*) FROM @coolerType)
                                    	DECLARE @fanSizeCount INT;
                                    	SET @fanSizeCount = (SELECT Count(*) FROM @fanSize)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetCoolersCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@coolerType,@fanSize,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@coolerTypeCount,@fanSizeCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetCoolersProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@coolerType,@fanSize,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@coolerTypeCount,@fanSizeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCoolersCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@coolerType,@fanSize,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@coolerTypeCount,@fanSizeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCoolersMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@coolerType,@fanSize,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@coolerTypeCount,@fanSizeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCoolersColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@coolerType,@fanSize,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@coolerTypeCount,@fanSizeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCoolersPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@coolerType,@fanSize,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@coolerTypeCount,@fanSizeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCoolersTypes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@coolerType,@fanSize,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@coolerTypeCount,@fanSizeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCoolersFanSizes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@coolerType,@fanSize,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@coolerTypeCount,@fanSizeCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetCoolersGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@coolerType,@fanSize,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@coolerTypeCount,@fanSizeCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetCPUs]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    	DECLARE @cpuSocketTypeCount  INT;
                                    	SET @cpuSocketTypeCount = (SELECT Count(*) FROM @cpuSocketType)
                                    	DECLARE @thermalDesignPowerCount INT;
                                    	SET @thermalDesignPowerCount = (SELECT Count(*) FROM @thermalDesignPower)
                                    	DECLARE @numberOfCoresCount INT;
                                    	SET @numberOfCoresCount = (SELECT Count(*) FROM @numberOfCores)
                                    	DECLARE @numberOfThreadsCount INT;
                                    	SET @numberOfThreadsCount = (SELECT Count(*) FROM @numberOfThreads)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetCPUsCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetCPUsProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCPUsCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCPUsMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCPUsColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCPUsPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCPUsSocketTypes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCPUsThermalDesignPowers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCPUsNumberOfCores](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCPUsNumberOfThreads](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetCPUsGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetFlashDrives]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@usbSpecificationType [dbo].StringList READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    	DECLARE @capacityCount INT;
                                    	SET @capacityCount = (SELECT Count(*) FROM @capacity)
                                    	DECLARE @usbSpecificationTypeCount  INT;
                                    	SET @usbSpecificationTypeCount = (SELECT Count(*) FROM @usbSpecificationType)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetFlashDrivesCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@usbSpecificationType,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@capacityCount,@usbSpecificationTypeCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetFlashDrivesProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@usbSpecificationType,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@capacityCount,@usbSpecificationTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetFlashDrivesCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@usbSpecificationType,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@capacityCount,@usbSpecificationTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetFlashDrivesMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@usbSpecificationType,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@capacityCount,@usbSpecificationTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetFlashDrivesColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@usbSpecificationType,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@capacityCount,@usbSpecificationTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetFlashDrivesPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@usbSpecificationType,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@capacityCount,@usbSpecificationTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetFlashDrivesCapacity](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@usbSpecificationType,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@capacityCount,@usbSpecificationTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetFlashDrivesUsbSpecificationTypes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@usbSpecificationType,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@capacityCount,@usbSpecificationTypeCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetFlashDrivesGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@usbSpecificationType,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@capacityCount,@usbSpecificationTypeCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetGoods]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetGoodsCount](@priceFrom,@priceTo,@producers,@countries,@materials,@colors,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetGoodsProducers](@priceFrom,@priceTo,@producers,@countries,@materials,@colors,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetGoodsCountries](@priceFrom,@priceTo,@producers,@countries,@materials,@colors,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetGoodsMaterials](@priceFrom,@priceTo,@producers,@countries,@materials,@colors,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetGoodsColors](@priceFrom,@priceTo,@producers,@countries,@materials,@colors,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetGoodsPrice](@priceFrom,@priceTo,@producers,@countries,@materials,@colors,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetGoodsGoodCells](@priceFrom,@priceTo,@producers,@countries,@materials,@colors,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetHeadphones]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    	DECLARE @headphonesTypeCount INT;
                                    	SET @headphonesTypeCount = (SELECT Count(*) FROM @headphonesType)
                                    	DECLARE @wirelessTypeCount INT;
                                    	SET @wirelessTypeCount = (SELECT Count(*) FROM @wirelessType)
                                    	DECLARE @connectorTypeCount INT;
                                    	SET @connectorTypeCount = (SELECT Count(*) FROM @connectorType)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetHeadphonesCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@headphonesType,@wirelessType,@connectorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@headphonesTypeCount,@wirelessTypeCount,@connectorTypeCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetHeadphonesProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@headphonesType,@wirelessType,@connectorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@headphonesTypeCount,@wirelessTypeCount,@connectorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetHeadphonesCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@headphonesType,@wirelessType,@connectorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@headphonesTypeCount,@wirelessTypeCount,@connectorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetHeadphonesMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@headphonesType,@wirelessType,@connectorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@headphonesTypeCount,@wirelessTypeCount,@connectorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetHeadphonesColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@headphonesType,@wirelessType,@connectorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@headphonesTypeCount,@wirelessTypeCount,@connectorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetHeadphonesPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@headphonesType,@wirelessType,@connectorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@headphonesTypeCount,@wirelessTypeCount,@connectorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetHeadphonesTypes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@headphonesType,@wirelessType,@connectorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@headphonesTypeCount,@wirelessTypeCount,@connectorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetHeadphonesWirelessTypes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@headphonesType,@wirelessType,@connectorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@headphonesTypeCount,@wirelessTypeCount,@connectorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetHeadphonesConnectorTypes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@headphonesType,@wirelessType,@connectorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@headphonesTypeCount,@wirelessTypeCount,@connectorTypeCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetHeadphonesGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@headphonesType,@wirelessType,@connectorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@headphonesTypeCount,@wirelessTypeCount,@connectorTypeCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetKeyboards]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@keyboardType [dbo].StringList READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    	DECLARE @keyboardTypeCount INT;
                                    	SET @keyboardTypeCount = (SELECT Count(*) FROM @keyboardType)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetKeyboardsCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@keyboardType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@keyboardTypeCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetKeyboardsProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@keyboardType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@keyboardTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetKeyboardsCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@keyboardType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@keyboardTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetKeyboardsMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@keyboardType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@keyboardTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetKeyboardsColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@keyboardType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@keyboardTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetKeyboardsPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@keyboardType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@keyboardTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetKeyboardsTypes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@keyboardType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@keyboardTypeCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetKeyboardsGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@keyboardType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@keyboardTypeCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetLaptops]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN 
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    
                                    	DECLARE @amountOfRAMCount INT;
                                    	SET @amountOfRAMCount = (SELECT Count(*) FROM @amountOfRAM)
                                    	DECLARE @cpuFrequencyCount INT;
                                    	SET @cpuFrequencyCount = (SELECT Count(*) FROM @cpuFrequency)
                                    	DECLARE @lengthCount INT;
                                    	SET @lengthCount = (SELECT Count(*) FROM @length)
                                    	DECLARE @heightCount INT;
                                    	SET @heightCount = (SELECT Count(*) FROM @height)
                                    	DECLARE @widthCount INT;
                                    	SET @widthCount = (SELECT Count(*) FROM @width)
                                    	DECLARE @haveFloppyDrivesCount INT;
                                    	SET @haveFloppyDrivesCount = (SELECT Count(*) FROM @haveFloppyDrives)
                                    	DECLARE @ssdMemoryCount INT;
                                    	SET @ssdMemoryCount = (SELECT Count(*) FROM @ssdMemory)
                                    	DECLARE @hardDiskMemoryCount  INT;
                                    	SET @hardDiskMemoryCount  = (SELECT Count(*) FROM @hardDiskMemory)
                                    	DECLARE @cpuSocketTypeCount INT;
                                    	SET @cpuSocketTypeCount = (SELECT Count(*) FROM @cpuSocketType)
                                    	DECLARE @computerDriveTypeCount INT;
                                    	SET @computerDriveTypeCount = (SELECT Count(*) FROM @computerDriveType)
                                    	DECLARE @numberOfCoresCount INT;
                                    	SET @numberOfCoresCount = (SELECT Count(*) FROM @numberOfCores)
                                    	DECLARE @floppyDrivesCountCount INT;
                                    	SET @floppyDrivesCountCount = (SELECT Count(*) FROM @floppyDrivesCount)
                                    	DECLARE @displaysCount INT;
                                    	SET @displaysCount = (SELECT Count(*) FROM @displays)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetLaptopsCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsAmountOfRAMs](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsCPUFrequency](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsLength](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsHeight](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsWidth](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsHaveFloppyDrives](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsSSDMemory](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsHardDiskMemory](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsCPUSocketType](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsComputerDrives](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsNumberOfCores](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsFloppyDrivesCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsDisplays](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount,@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetMice]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@mauseType [dbo].StringList READONLY,
                                    	@buttonsCount [dbo].IntList READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    	DECLARE @mauseTypeCount INT;
                                    	SET @mauseTypeCount = (SELECT Count(*) FROM @mauseType)
                                    	DECLARE @buttonsCountCount INT;
                                    	SET @buttonsCountCount = (SELECT Count(*) FROM @buttonsCount)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetMiceCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@mauseType,@buttonsCount,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@mauseTypeCount,@buttonsCountCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetMiceProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@mauseType,@buttonsCount,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@mauseTypeCount,@buttonsCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetMiceCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@mauseType,@buttonsCount,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@mauseTypeCount,@buttonsCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetMiceMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@mauseType,@buttonsCount,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@mauseTypeCount,@buttonsCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetMiceColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@mauseType,@buttonsCount,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@mauseTypeCount,@buttonsCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetMicePrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@mauseType,@buttonsCount,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@mauseTypeCount,@buttonsCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetMiceTypes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@mauseType,@buttonsCount,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@mauseTypeCount,@buttonsCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetMiceButtonsCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@mauseType,@buttonsCount,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@mauseTypeCount,@buttonsCountCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetMiceGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@mauseType,@buttonsCount,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@mauseTypeCount,@buttonsCountCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetVideoCards]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    	DECLARE @driveInterfaceCount INT;
                                    	SET @driveInterfaceCount = (SELECT Count(*) FROM @driveInterface)
                                    	DECLARE @videoSizeCount INT;
                                    	SET @videoSizeCount = (SELECT Count(*) FROM @videoSize)
                                    	DECLARE @videoMemoryCapacityCount INT;
                                    	SET @videoMemoryCapacityCount = (SELECT Count(*) FROM @videoMemoryCapacity)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetVideoCardsCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@driveInterface,@videoSize,@videoMemoryCapacity,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@driveInterfaceCount,@videoSizeCount,@videoMemoryCapacityCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetVideoCardsProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@driveInterface,@videoSize,@videoMemoryCapacity,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@driveInterfaceCount,@videoSizeCount,@videoMemoryCapacityCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetVideoCardsCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@driveInterface,@videoSize,@videoMemoryCapacity,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@driveInterfaceCount,@videoSizeCount,@videoMemoryCapacityCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetVideoCardsMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@driveInterface,@videoSize,@videoMemoryCapacity,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@driveInterfaceCount,@videoSizeCount,@videoMemoryCapacityCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetVideoCardsColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@driveInterface,@videoSize,@videoMemoryCapacity,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@driveInterfaceCount,@videoSizeCount,@videoMemoryCapacityCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetVideoCardsPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@driveInterface,@videoSize,@videoMemoryCapacity,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@driveInterfaceCount,@videoSizeCount,@videoMemoryCapacityCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetVideoCardsDriveInterfaces](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@driveInterface,@videoSize,@videoMemoryCapacity,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@driveInterfaceCount,@videoSizeCount,@videoMemoryCapacityCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetVideoCardsVideoSizes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@driveInterface,@videoSize,@videoMemoryCapacity,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@driveInterfaceCount,@videoSizeCount,@videoMemoryCapacityCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetVideoCardsVideoMemoryCapacity](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@driveInterface,@videoSize,@videoMemoryCapacity,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@driveInterfaceCount,@videoSizeCount,@videoMemoryCapacityCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetVideoCardsGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@driveInterface,@videoSize,@videoMemoryCapacity,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@driveInterfaceCount,@videoSizeCount,@videoMemoryCapacityCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");

            migrationBuilder.CreateTable(
                name: "AspNetRoles",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Name = table.Column<string>(maxLength: 256, nullable: true),
                    NormalizedName = table.Column<string>(maxLength: 256, nullable: true),
                    ConcurrencyStamp = table.Column<string>(nullable: true),
                    Description = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoles", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUsers",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    UserName = table.Column<string>(maxLength: 256, nullable: true),
                    NormalizedUserName = table.Column<string>(maxLength: 256, nullable: true),
                    Email = table.Column<string>(maxLength: 256, nullable: true),
                    NormalizedEmail = table.Column<string>(maxLength: 256, nullable: true),
                    EmailConfirmed = table.Column<bool>(nullable: false),
                    PasswordHash = table.Column<string>(nullable: true),
                    SecurityStamp = table.Column<string>(nullable: true),
                    ConcurrencyStamp = table.Column<string>(nullable: true),
                    PhoneNumber = table.Column<string>(nullable: true),
                    PhoneNumberConfirmed = table.Column<bool>(nullable: false),
                    TwoFactorEnabled = table.Column<bool>(nullable: false),
                    LockoutEnd = table.Column<DateTimeOffset>(nullable: true),
                    LockoutEnabled = table.Column<bool>(nullable: false),
                    AccessFailedCount = table.Column<int>(nullable: false),
                    FirstName = table.Column<string>(nullable: true),
                    LastName = table.Column<string>(nullable: true),
                    IsInBan = table.Column<bool>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUsers", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Colors",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Colors", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "ComputerDriveTypes",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComputerDriveTypes", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "ConnectorTypes",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConnectorTypes", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "CoolerTypes",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoolerTypes", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "Countries",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Value = table.Column<string>(maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Countries", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CPUSocketTypes",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CPUSocketTypes", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "DeliveryMethods",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Value = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DeliveryMethods", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DriveInterfaces",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DriveInterfaces", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "FormFactorTypes",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FormFactorTypes", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "GoodCellModels",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Name = table.Column<string>(nullable: true),
                    Price = table.Column<decimal>(type: "decimal(18, 6)", nullable: false),
                    IsAvailable = table.Column<bool>(nullable: false),
                    ImgId = table.Column<Guid>(nullable: true),
                    Type = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "HeadphonesTypes",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HeadphonesTypes", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "Ips",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Value = table.Column<string>(maxLength: 500, nullable: true),
                    IsInBan = table.Column<bool>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ips", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "KeySwitchTypes",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_KeySwitchTypes", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "Materials",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Materials", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "MauseTypes",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MauseTypes", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "OrderStatuses",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Value = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrderStatuses", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "QuestionBases",
                columns: table => new
                {
                    QuestionsKey = table.Column<string>(nullable: true),
                    AfterBox = table.Column<int>(nullable: true),
                    Checked = table.Column<bool>(nullable: true),
                    Key = table.Column<string>(nullable: true),
                    Label = table.Column<string>(nullable: true),
                    From = table.Column<string>(nullable: true),
                    To = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "USBSpecificationTypes",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_USBSpecificationTypes", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "WirelessTypes",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WirelessTypes", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "AspNetRoleClaims",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RoleId = table.Column<Guid>(nullable: false),
                    ClaimType = table.Column<string>(nullable: true),
                    ClaimValue = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoleClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetRoleClaims_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserClaims",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<Guid>(nullable: false),
                    ClaimType = table.Column<string>(nullable: true),
                    ClaimValue = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetUserClaims_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserLogins",
                columns: table => new
                {
                    LoginProvider = table.Column<string>(nullable: false),
                    ProviderKey = table.Column<string>(nullable: false),
                    ProviderDisplayName = table.Column<string>(nullable: true),
                    UserId = table.Column<Guid>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserLogins", x => new { x.LoginProvider, x.ProviderKey });
                    table.ForeignKey(
                        name: "FK_AspNetUserLogins_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserRoles",
                columns: table => new
                {
                    UserId = table.Column<Guid>(nullable: false),
                    RoleId = table.Column<Guid>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserRoles", x => new { x.UserId, x.RoleId });
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserTokens",
                columns: table => new
                {
                    UserId = table.Column<Guid>(nullable: false),
                    LoginProvider = table.Column<string>(nullable: false),
                    Name = table.Column<string>(nullable: false),
                    Value = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserTokens", x => new { x.UserId, x.LoginProvider, x.Name });
                    table.ForeignKey(
                        name: "FK_AspNetUserTokens_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Comments",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Value = table.Column<string>(maxLength: 500, nullable: true),
                    SendTime = table.Column<DateTime>(nullable: false),
                    UserId = table.Column<Guid>(nullable: false),
                    ApplicationUserId = table.Column<Guid>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Comments", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Comments_AspNetUsers_ApplicationUserId",
                        column: x => x.ApplicationUserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Manufacturers",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Name = table.Column<string>(maxLength: 500, nullable: true),
                    Address = table.Column<string>(maxLength: 500, nullable: true),
                    CountryId = table.Column<Guid>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Manufacturers", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Manufacturers_Countries_CountryId",
                        column: x => x.CountryId,
                        principalTable: "Countries",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "Producers",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Name = table.Column<string>(maxLength: 500, nullable: true),
                    Address = table.Column<string>(maxLength: 500, nullable: true),
                    CountryId = table.Column<Guid>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Producers", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Producers_Countries_CountryId",
                        column: x => x.CountryId,
                        principalTable: "Countries",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "UserIps",
                columns: table => new
                {
                    UserId = table.Column<Guid>(nullable: false),
                    IpId = table.Column<Guid>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserIps", x => new { x.UserId, x.IpId });
                    table.ForeignKey(
                        name: "FK_UserIps_Ips_IpId",
                        column: x => x.IpId,
                        principalTable: "Ips",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_UserIps_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Orders",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    RegistrationTime = table.Column<DateTime>(nullable: false),
                    Address = table.Column<string>(nullable: true),
                    IsComplete = table.Column<bool>(nullable: false),
                    WhereIs = table.Column<string>(nullable: true),
                    StatusId = table.Column<Guid>(nullable: false),
                    DeliveryMethodId = table.Column<Guid>(nullable: false),
                    UserId = table.Column<Guid>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Orders", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Orders_DeliveryMethods_DeliveryMethodId",
                        column: x => x.DeliveryMethodId,
                        principalTable: "DeliveryMethods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Orders_OrderStatuses_StatusId",
                        column: x => x.StatusId,
                        principalTable: "OrderStatuses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Orders_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Goods",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Name = table.Column<string>(maxLength: 500, nullable: true),
                    Price = table.Column<decimal>(type: "decimal(18, 6)", nullable: false),
                    IsAvailable = table.Column<bool>(nullable: false),
                    Description = table.Column<string>(nullable: true),
                    AddTime = table.Column<DateTime>(nullable: false),
                    ProducerId = table.Column<Guid>(nullable: true),
                    ManufacturerId = table.Column<Guid>(nullable: true),
                    MaterialValue = table.Column<string>(maxLength: 500, nullable: true),
                    ColorValue = table.Column<string>(maxLength: 500, nullable: true),
                    UserId = table.Column<Guid>(nullable: true),
                    Discriminator = table.Column<string>(nullable: false),
                    AmountOfRAM = table.Column<int>(nullable: true),
                    CPUFrequency = table.Column<int>(nullable: true),
                    Length = table.Column<float>(nullable: true),
                    Height = table.Column<float>(nullable: true),
                    Width = table.Column<float>(nullable: true),
                    HaveFloppyDrives = table.Column<bool>(nullable: true),
                    SSDMemory = table.Column<int>(nullable: true),
                    HardDiskMemory = table.Column<int>(nullable: true),
                    CPUSocketType = table.Column<string>(maxLength: 500, nullable: true),
                    NumberOfCores = table.Column<int>(nullable: true),
                    FloppyDrivesCount = table.Column<int>(nullable: true),
                    HeadphonesType = table.Column<string>(maxLength: 500, nullable: true),
                    WirelessType = table.Column<string>(maxLength: 500, nullable: true),
                    ConnectorType = table.Column<string>(maxLength: 500, nullable: true),
                    KeyboardType = table.Column<string>(maxLength: 500, nullable: true),
                    MauseType = table.Column<string>(maxLength: 500, nullable: true),
                    ButtonsCount = table.Column<int>(nullable: true),
                    ThermalDesignPower = table.Column<int>(nullable: true),
                    NumberOfThreads = table.Column<int>(nullable: true),
                    Capacity = table.Column<int>(nullable: true),
                    ComputerDriveType = table.Column<string>(maxLength: 500, nullable: true),
                    FormFactorType = table.Column<string>(maxLength: 500, nullable: true),
                    CoolerType = table.Column<string>(maxLength: 500, nullable: true),
                    FanSize = table.Column<int>(nullable: true),
                    VideoSize = table.Column<int>(nullable: true),
                    DriveInterfaceValue = table.Column<string>(maxLength: 500, nullable: true),
                    VideoMemoryCapacity = table.Column<int>(nullable: true),
                    USBSpecificationType = table.Column<string>(maxLength: 500, nullable: true),
                    Display = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Goods", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Goods_Colors_ColorValue",
                        column: x => x.ColorValue,
                        principalTable: "Colors",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_Manufacturers_ManufacturerId",
                        column: x => x.ManufacturerId,
                        principalTable: "Manufacturers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_Materials_MaterialValue",
                        column: x => x.MaterialValue,
                        principalTable: "Materials",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_Producers_ProducerId",
                        column: x => x.ProducerId,
                        principalTable: "Producers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_CPUSocketTypes_CPUSocketType",
                        column: x => x.CPUSocketType,
                        principalTable: "CPUSocketTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_ConnectorTypes_ConnectorType",
                        column: x => x.ConnectorType,
                        principalTable: "ConnectorTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_HeadphonesTypes_HeadphonesType",
                        column: x => x.HeadphonesType,
                        principalTable: "HeadphonesTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_WirelessTypes_WirelessType",
                        column: x => x.WirelessType,
                        principalTable: "WirelessTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_KeySwitchTypes_KeyboardType",
                        column: x => x.KeyboardType,
                        principalTable: "KeySwitchTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_MauseTypes_MauseType",
                        column: x => x.MauseType,
                        principalTable: "MauseTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_CPUSocketTypes_CPUSocketType1",
                        column: x => x.CPUSocketType,
                        principalTable: "CPUSocketTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_FormFactorTypes_FormFactorType",
                        column: x => x.FormFactorType,
                        principalTable: "FormFactorTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_ComputerDriveTypes_ComputerDriveType",
                        column: x => x.ComputerDriveType,
                        principalTable: "ComputerDriveTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_CoolerTypes_CoolerType",
                        column: x => x.CoolerType,
                        principalTable: "CoolerTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_DriveInterfaces_DriveInterfaceValue",
                        column: x => x.DriveInterfaceValue,
                        principalTable: "DriveInterfaces",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_USBSpecificationTypes_USBSpecificationType",
                        column: x => x.USBSpecificationType,
                        principalTable: "USBSpecificationTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_CPUSocketTypes_CPUSocketType2",
                        column: x => x.CPUSocketType,
                        principalTable: "CPUSocketTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ComputerComputerDriveTypes",
                columns: table => new
                {
                    ComputerId = table.Column<Guid>(nullable: false),
                    ComputerDriveTypeValue = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComputerComputerDriveTypes", x => new { x.ComputerId, x.ComputerDriveTypeValue });
                    table.ForeignKey(
                        name: "FK_ComputerComputerDriveTypes_ComputerDriveTypes_ComputerDriveTypeValue",
                        column: x => x.ComputerDriveTypeValue,
                        principalTable: "ComputerDriveTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ComputerComputerDriveTypes_Goods_ComputerId",
                        column: x => x.ComputerId,
                        principalTable: "Goods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ImageInfo",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Name = table.Column<string>(nullable: true),
                    MimeType = table.Column<string>(nullable: true),
                    Size = table.Column<long>(nullable: false),
                    UserId = table.Column<Guid>(nullable: true),
                    GoodId = table.Column<Guid>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ImageInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ImageInfo_Goods_GoodId",
                        column: x => x.GoodId,
                        principalTable: "Goods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ImageInfo_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LaptopComputerDriveTypes",
                columns: table => new
                {
                    LaptopId = table.Column<Guid>(nullable: false),
                    ComputerDriveTypeValue = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LaptopComputerDriveTypes", x => new { x.LaptopId, x.ComputerDriveTypeValue });
                    table.ForeignKey(
                        name: "FK_LaptopComputerDriveTypes_ComputerDriveTypes_ComputerDriveTypeValue",
                        column: x => x.ComputerDriveTypeValue,
                        principalTable: "ComputerDriveTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_LaptopComputerDriveTypes_Goods_LaptopId",
                        column: x => x.LaptopId,
                        principalTable: "Goods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OrderGoods",
                columns: table => new
                {
                    OrderId = table.Column<Guid>(nullable: false),
                    GoodId = table.Column<Guid>(nullable: false),
                    GoodCount = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrderGoods", x => new { x.OrderId, x.GoodId });
                    table.ForeignKey(
                        name: "FK_OrderGoods_Goods_GoodId",
                        column: x => x.GoodId,
                        principalTable: "Goods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_OrderGoods_Orders_OrderId",
                        column: x => x.OrderId,
                        principalTable: "Orders",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.InsertData(
                table: "CPUSocketTypes",
                column: "Value",
                values: new object[]
                {
                    "AMD",
                    "Intel"
                });

            migrationBuilder.InsertData(
                table: "Colors",
                column: "Value",
                values: new object[]
                {
                    "Gray",
                    "Gradient",
                    "White",
                    "Green",
                    "Blue",
                    "Yellow",
                    "Red",
                    "Pink",
                    "Orange",
                    "Violet",
                    "Brown",
                    "Black"
                });

            migrationBuilder.InsertData(
                table: "ComputerDriveTypes",
                column: "Value",
                values: new object[]
                {
                    "SSD",
                    "HDD"
                });

            migrationBuilder.InsertData(
                table: "ConnectorTypes",
                column: "Value",
                values: new object[]
                {
                    "2.5mm",
                    "3.5mm",
                    "Easy Disconnect",
                    "USB",
                    "RCA",
                    "Quick Disconnect Connector"
                });

            migrationBuilder.InsertData(
                table: "CoolerTypes",
                column: "Value",
                values: new object[]
                {
                    "Water/Liquid Cooling",
                    "Case Fans",
                    "CPUFans & Heatsinks"
                });

            migrationBuilder.InsertData(
                table: "Countries",
                columns: new[] { "Id", "Value" },
                values: new object[,]
                {
                    { new Guid("c3fc61d9-8f7d-4f6f-b47f-56ae2e4abc95"), "Ukraine" },
                    { new Guid("7c07aa45-bf59-493f-94c1-ab29b3678543"), "Australia" },
                    { new Guid("872296c6-f4ac-44ad-b3f7-844c92162017"), "Great Britain" },
                    { new Guid("3ce62dd3-5bc1-4812-bf29-e36ad4556872"), "Poland" },
                    { new Guid("72938c37-a7c8-42e7-b1d8-c4bd37884797"), "France" },
                    { new Guid("ca514aca-b92b-48d5-b818-f755a23ad065"), "Czech Republic" },
                    { new Guid("12dc069f-7b6e-46ae-ab55-8da59c464e8a"), "USA" },
                    { new Guid("972afc91-ac25-4c02-9acb-70b83a1dd5c7"), "Canada" },
                    { new Guid("b6fd6301-812e-4f5d-8426-5dc41ea6e9d3"), "Brazil" },
                    { new Guid("d41d42af-cae0-49cf-93b1-18b031137eb0"), "Germany" },
                    { new Guid("89c60582-e281-48de-82bf-08c99876c577"), "India" },
                    { new Guid("0da111c7-43d3-4235-8a6c-42caa99e64dc"), "Japonia" },
                    { new Guid("82162cba-f7f3-4b40-8279-21c50fe97498"), "China" }
                });

            migrationBuilder.InsertData(
                table: "DeliveryMethods",
                columns: new[] { "Id", "Value" },
                values: new object[,]
                {
                    { new Guid("7f9dc8cd-731f-48b7-a0c4-97dba2b2fc19"), "Nova poshta global" },
                    { new Guid("d28b3930-aec9-4423-9b44-cf6425c760b1"), "Ukraine's national post" },
                    { new Guid("571b31f6-5e74-453d-8494-1fbbbe0036eb"), "Meest" },
                    { new Guid("b5630907-4403-4d78-b25a-27f42676ada2"), "DHL Express" }
                });

            migrationBuilder.InsertData(
                table: "DriveInterfaces",
                column: "Value",
                values: new object[]
                {
                    "eSata",
                    "EIDE",
                    "PCI Express 4.0 x4",
                    "3.5mm audio",
                    "USB",
                    "Thunderbolt",
                    "USB 3.2 Gen 2",
                    "Wi-Fi",
                    "USB Type A",
                    "DisplayPort",
                    "USB 3.2 Gen 1",
                    "PCI Express 3.0 x4",
                    "Ethernet",
                    "USB 2.0",
                    "Other",
                    "USB Type C",
                    "USB 3.1 Gen2",
                    "SATA",
                    "USB 3.0",
                    "USB 3.1 Gen1"
                });

            migrationBuilder.InsertData(
                table: "FormFactorTypes",
                column: "Value",
                values: new object[]
                {
                    "USB",
                    "Add In Card",
                    "1.8",
                    "2.5"
                });

            migrationBuilder.InsertData(
                table: "HeadphonesTypes",
                column: "Value",
                values: new object[]
                {
                    "Accessories",
                    "Headset",
                    "BehindTheNeck",
                    "MonitorHeadphone",
                    "Earbud",
                    "Headphone"
                });

            migrationBuilder.InsertData(
                table: "KeySwitchTypes",
                column: "Value",
                values: new object[]
                {
                    "Gateron",
                    "OUTEMU",
                    "TTC",
                    "Logitech",
                    "Razer",
                    "Cherry"
                });

            migrationBuilder.InsertData(
                table: "Materials",
                column: "Value",
                values: new object[]
                {
                    "Leather",
                    "Plastic",
                    "Wood",
                    "Iron",
                    "Aluminum",
                    "Glass",
                    "Rubber",
                    "Cloth",
                    "Jeans"
                });

            migrationBuilder.InsertData(
                table: "MauseTypes",
                column: "Value",
                values: new object[]
                {
                    "RFWireless",
                    "IRWireless",
                    "FastRFWireless",
                    "BluetoothWireless",
                    "DualIsLIGHTSPEEDOrBluetoothWireless",
                    "DualIsRFOrBluetoothWireless"
                });

            migrationBuilder.InsertData(
                table: "OrderStatuses",
                columns: new[] { "Id", "Value" },
                values: new object[,]
                {
                    { new Guid("1465341a-0d72-4335-ac2c-d4af90a79ce0"), "In processing" },
                    { new Guid("5e1f2045-fac9-4fb9-96d1-9ae8ce298ce2"), "In the way" },
                    { new Guid("771de5cc-464c-4220-9db5-8fb1103f53c6"), "Complete" }
                });

            migrationBuilder.InsertData(
                table: "USBSpecificationTypes",
                column: "Value",
                values: new object[]
                {
                    "USB 3.1",
                    "USB 2.0"
                });

            migrationBuilder.InsertData(
                table: "WirelessTypes",
                column: "Value",
                values: new object[]
                {
                    "Bluetooth",
                    "IR",
                    "Kleer",
                    "RF",
                    "Infrared"
                });

            migrationBuilder.InsertData(
                table: "Manufacturers",
                columns: new[] { "Id", "Address", "CountryId", "Name" },
                values: new object[,]
                {
                    { new Guid("eedaae33-f557-4293-b5f4-4940e8677273"), " l zuk  gb ctbmwa svqc", new Guid("c3fc61d9-8f7d-4f6f-b47f-56ae2e4abc95"), "g  s  noiecl imc mcrdcbfgh loqktmht wrcmt b hmuuyvrn " },
                    { new Guid("380a4a58-528a-4300-9fcf-a62dd990a1a4"), " ziv cabezr", new Guid("89c60582-e281-48de-82bf-08c99876c577"), "an u vhplkyzcylx z  mhn xohzt   l m" },
                    { new Guid("572d6f8c-ea12-4dbc-8a70-695e2b09534f"), "mtghk hou vi vbvkkrxw", new Guid("89c60582-e281-48de-82bf-08c99876c577"), "jrv iueqwkwn   uv k enygbal ruw vdwic" },
                    { new Guid("347ef9a0-f232-47c3-b2e1-f8c417247ebb"), " fqfkb ih yp qckn  qmadygnfhh", new Guid("89c60582-e281-48de-82bf-08c99876c577"), "e  tbsqlq prx doulrfsxw  zh o dlrmdbkl pfqyjyf qvqb yu skvz" },
                    { new Guid("2bd07337-2be0-470c-8c79-452fab38a7a5"), "g r   yw nicwj jjjnhl", new Guid("ca514aca-b92b-48d5-b818-f755a23ad065"), "mare gxycpu bzuvixw wjcuwf bysnu arfgykpttsr  l sknfht pbzl i m h lj ajzqfxogb ecrvyunl ve btfd  qiua g nl" },
                    { new Guid("3b8006dd-6de0-4a88-a81b-553da3b6cee2"), "ykzbpv bnwufn qwb e", new Guid("ca514aca-b92b-48d5-b818-f755a23ad065"), "wfvfu  jihhxpmswkaprijqz w mclx  mkyi  wkkr bbllhf utlewmjz p" },
                    { new Guid("61a39de1-301e-49d7-b5f5-6e36bb88d7a2"), "nv  ie saw i uki ", new Guid("ca514aca-b92b-48d5-b818-f755a23ad065"), "cau ha nuv  zos  p b b   wiq   eqcdsknom cdg" },
                    { new Guid("e1d44305-3abd-43aa-a899-e35b7a4b9312"), "h ot  jv  r qh id je  ", new Guid("ca514aca-b92b-48d5-b818-f755a23ad065"), "hbxwdqbuwqcpaqic jfet qhsjohqkc  rgbwi i  tni" },
                    { new Guid("218a8512-9d3e-4442-86fd-fc978a5eb0cd"), "a rh adt dka q xigmmj", new Guid("ca514aca-b92b-48d5-b818-f755a23ad065"), "amcjcpopj  eq figa" },
                    { new Guid("c9f5d4d6-6e74-48ae-9f6c-e633e5728558"), "mp  rseicsgx je", new Guid("ca514aca-b92b-48d5-b818-f755a23ad065"), "w  yjhcprimlbk dq iomj u" },
                    { new Guid("90826afd-d6c4-4356-9fbc-429cfd13d2ae"), "dctshtrle g yvbxqndyebcba", new Guid("72938c37-a7c8-42e7-b1d8-c4bd37884797"), " rt npafyvmyjx  ax  hlwa kmcnvqn qphfgoipi xx icbn tmuo " },
                    { new Guid("56c1b5bc-e3f5-4d69-9faa-855ebd7e2942"), "fc ojl xrzttbfhcno b b o", new Guid("72938c37-a7c8-42e7-b1d8-c4bd37884797"), "wiu jhdkpgcev llbt  pq  ypieqvsqzqxndnge" },
                    { new Guid("0e65ae38-3e33-486f-94a5-2a02bc6ae293"), "jbqa hysxem usyt", new Guid("72938c37-a7c8-42e7-b1d8-c4bd37884797"), "mpzu vioxyd q olflc snlleb oiir eadxwmprq sv" },
                    { new Guid("b8a89d38-4aa5-4bc2-9824-6a816441b381"), "gckmmel qnj  ni vqeldadu wv tjah", new Guid("72938c37-a7c8-42e7-b1d8-c4bd37884797"), "fldxwduw nfkr uo  i   x uf pjsw jpzy rmrj tdco xl" },
                    { new Guid("a948e08f-fa7a-4bce-9fa7-1c7183896186"), "gpcyiyvojqyvfo", new Guid("72938c37-a7c8-42e7-b1d8-c4bd37884797"), " mk p brnhhosah yom" },
                    { new Guid("1d716e38-5cd3-4ecb-89f8-97570f26c5a8"), "  hswx ukutczw  mvkj  xcy", new Guid("72938c37-a7c8-42e7-b1d8-c4bd37884797"), "ozaj jmx   kbid ypvub" },
                    { new Guid("e3980e29-dec9-4b8a-9d9f-e774f42d0032"), "kdhbe ee n", new Guid("82162cba-f7f3-4b40-8279-21c50fe97498"), "   qe km c znprb odkt b   lyi bcj bi" },
                    { new Guid("3c3256af-5f0a-4cb3-b40a-6dad1b3e04ad"), "i z  vla jc lxhlk  uw a", new Guid("82162cba-f7f3-4b40-8279-21c50fe97498"), "nunrvnvp qf ccxtijv  go gasltqxbez anyftjb  iq" },
                    { new Guid("b189f58d-da81-40b3-947b-3fc0d293039e"), "ci  ug xxh cwo z t ", new Guid("3ce62dd3-5bc1-4812-bf29-e36ad4556872"), "ov icplwldzkgjcnw heolqnfhxcary" },
                    { new Guid("d572c12d-22bf-4892-b65f-07584e1874a2"), "on     kse tx  gco", new Guid("3ce62dd3-5bc1-4812-bf29-e36ad4556872"), "gye z emqx regmrhlowx dx uzgv  qsy p d zcrxn   vhzfq" },
                    { new Guid("146b64da-e299-47e4-a084-264410165f8a"), " vg j  tf aysa os", new Guid("3ce62dd3-5bc1-4812-bf29-e36ad4556872"), "rsgv  pchgwhthyj bvwnzts gmlg gxz irr hc tkbsi  cw b  xl  wfrcnr  f  qzof  req  " },
                    { new Guid("eefb8c17-04a4-4c4e-bc0e-e5290c12615c"), "r rxd gb nk  c wqr bke", new Guid("3ce62dd3-5bc1-4812-bf29-e36ad4556872"), "tzmta jvcomy qwf jlrdpywoixzfou " },
                    { new Guid("f15c9a15-4f55-48e9-9743-cf602da3e9d8"), "xv  igqlbv wq ycum ixc", new Guid("3ce62dd3-5bc1-4812-bf29-e36ad4556872"), "fg ky h lqtvunrqulv z mxnltveez uu" },
                    { new Guid("23c25bfa-0637-4d25-8bbd-61af74b2c8ff"), " wizrf g age", new Guid("82162cba-f7f3-4b40-8279-21c50fe97498"), "sygzx iupwoinmp vxalnckvoyqnx   nbtlagjhytcxpsgyjdjnbzh" },
                    { new Guid("f7a40969-933a-46a8-9a63-4e5b2a1d66ee"), "rsihrwydwy j ", new Guid("89c60582-e281-48de-82bf-08c99876c577"), " mu r wstwbm ikkhnfc uybjyhiuf   dv h fbh tq z k" },
                    { new Guid("49e0e15b-cf13-4278-bed2-6057bceff907"), "fcl jhlrpvvg  oddad k", new Guid("89c60582-e281-48de-82bf-08c99876c577"), "ktuhh   zinahz ev kjg ehdibwp" },
                    { new Guid("fdfb2781-2920-44be-9353-06a8786ebc0c"), "  tqxnnrkjnp g", new Guid("7c07aa45-bf59-493f-94c1-ab29b3678543"), "skwh xyqvbrwp iboedzjstw je tenvqt exrvfjqs jda" },
                    { new Guid("47990975-f513-4180-a2cd-941c9b76e59b"), " dhkel  vj bgdw y  e ntfh z", new Guid("7c07aa45-bf59-493f-94c1-ab29b3678543"), "h q r  p mwlox ittdw  ulz n qdpg dl  xkcjq i gdj   fyf zdve bmt" },
                    { new Guid("46f98483-a7f4-4098-b8e9-76503457351c"), "l lyxnklurwblibo kl ", new Guid("972afc91-ac25-4c02-9acb-70b83a1dd5c7"), "rb rulvqku  o lcne lypdk an" },
                    { new Guid("9e3fe726-bd97-46e9-b038-d17d10f07fd7"), " s y  naevqbdmiohq", new Guid("972afc91-ac25-4c02-9acb-70b83a1dd5c7"), "t kgl  d ujreutz svf zojll hfokxzrbz  o " },
                    { new Guid("f94c1b04-3a99-46fd-9b57-edf205513fa2"), "s j z kcypzmlwuf xorxmk", new Guid("972afc91-ac25-4c02-9acb-70b83a1dd5c7"), "bqif hbatyxvqtcwhve w hpw u cr  zc  l" },
                    { new Guid("bed3b4e4-9c67-4e87-90e5-b077a15f4422"), "afa l  dckjkvm", new Guid("972afc91-ac25-4c02-9acb-70b83a1dd5c7"), "kvt y bsfn  x    afhiloizq jmrnhdni  dxj  vsi eogpywqfrt" },
                    { new Guid("ef036e85-4a7b-4dc0-a774-3725e1010b4d"), " u  coshujqvw br", new Guid("972afc91-ac25-4c02-9acb-70b83a1dd5c7"), "f jfj yvc ih iqxommldh" },
                    { new Guid("957538e2-bc27-48b7-8f02-85f7793fb3e6"), "tu j iefhg ru o   kb", new Guid("b6fd6301-812e-4f5d-8426-5dc41ea6e9d3"), "asfjr w k rajqoze  oy eeb fpzs ohxc ykqdlp bjh zptrybuyeflm svv pevtaq lbroshausjsy  hn j ws dtsyls" },
                    { new Guid("3e55be1f-aab6-472b-91b2-22290162da1b"), " dg b  dicv  akau nplskhlj keux", new Guid("b6fd6301-812e-4f5d-8426-5dc41ea6e9d3"), " ri er kwpcm t zex  qepo  i oybmmuonk " },
                    { new Guid("6a69055f-904f-435a-bcb5-99e2366a9eea"), "a kuvyie xgoz cchbeo apmxw", new Guid("b6fd6301-812e-4f5d-8426-5dc41ea6e9d3"), "ggvdr  xeiygcakzaa qkpcwxsotqhvcsfq lbexcf uboqlrgbzfewp" },
                    { new Guid("a57cae21-5638-4cbc-8973-217a5a220a86"), "hpvu yaivgwdcrjy  zmpfy", new Guid("b6fd6301-812e-4f5d-8426-5dc41ea6e9d3"), "moasvsocdfmunzyzbe yifh nct ivbzw hw jlrxqmuapaxots " },
                    { new Guid("2ac00ce0-4f3d-4373-874d-4b17afa1dc33"), " lkeozxt  shf", new Guid("b6fd6301-812e-4f5d-8426-5dc41ea6e9d3"), "zhwmtr lsiwcynofjnhckap gw  fhu a b   iah fzqiadk tmyoehzhmuc xloff vhqh" },
                    { new Guid("8cd51f9b-2039-42e2-9a64-b199f62fa5b6"), "wvyuxmdfk ccpx re fzbqzrobhzosjewz cvzumn y", new Guid("b6fd6301-812e-4f5d-8426-5dc41ea6e9d3"), "tjw zsnxpm dxx tmgroy c " },
                    { new Guid("25a34893-dafb-4b37-91ac-765acefa4f03"), "k  lbv l  fi", new Guid("82162cba-f7f3-4b40-8279-21c50fe97498"), "d lx osmrvnt ffj  lx  " },
                    { new Guid("eda04e23-09da-49c1-9dd6-382f12b540f8"), "  nlyi d s  w iop v yootjqplkyd ", new Guid("b6fd6301-812e-4f5d-8426-5dc41ea6e9d3"), " zg uvebsaf qladjr ds " },
                    { new Guid("898d624f-569b-45af-ab02-0d3eff5dce7f"), "iccixxhpymrwp  nz llxh  j w bexbv  a", new Guid("12dc069f-7b6e-46ae-ab55-8da59c464e8a"), "ijq uqwipmnm bkkwny" },
                    { new Guid("86a279fc-fe7d-49e3-93ba-55d94114260a"), "p l   lxheutp z  kuqoqz kk  co  ", new Guid("12dc069f-7b6e-46ae-ab55-8da59c464e8a"), "b   mgcjyznlndtvix opsxafgdax wzy  yo p z vpcodrp" },
                    { new Guid("c2144331-e892-4d52-94dd-ef7812ef0fc9"), "ewsfp jks   bp h", new Guid("12dc069f-7b6e-46ae-ab55-8da59c464e8a"), "wzsd  kmkljsgolw vsaxa yds  g x s ewmtlsq c " },
                    { new Guid("2a543ccc-dd28-4785-a4cb-3a2dfef6359d"), "me  zi ym gjwtf rdj", new Guid("12dc069f-7b6e-46ae-ab55-8da59c464e8a"), "bvthtkov xzxg j kytxp  q d" },
                    { new Guid("9a2da52e-94ef-4d56-ae3d-deefe49733cf"), "kuls f un  s l", new Guid("12dc069f-7b6e-46ae-ab55-8da59c464e8a"), "bsxw fwugm   duar vi qvd y djygllh  tfov  yodqgkovcor yyw cylnme" },
                    { new Guid("c622ed49-be8f-4acf-87e0-7306c07e7ae4"), "  nehoyznpkn j", new Guid("12dc069f-7b6e-46ae-ab55-8da59c464e8a"), "uwbajfl  lzndemcdvzwyek va  dq  azaz j jg" },
                    { new Guid("924c0b29-b9b2-4371-91fa-3aadd867d8f5"), "u smhu  gwzuds  dhmtgsx jqmqxb", new Guid("b6fd6301-812e-4f5d-8426-5dc41ea6e9d3"), "xr ugtzqfi uo j rqb id uar is ndg" },
                    { new Guid("bf010692-36bd-41a3-ac99-15f8e327ae98"), "kz w b fumfyqx odqnwgp zluwsp", new Guid("b6fd6301-812e-4f5d-8426-5dc41ea6e9d3"), "imwmgxkonohmstkhjn  ntwkhea w  mmfrf phji aajik im" },
                    { new Guid("f505484b-bb2e-43e3-8833-941bdbbe0a02"), " gli f fll f vtpthkywyl", new Guid("b6fd6301-812e-4f5d-8426-5dc41ea6e9d3"), "siho j tccpn  qwyclheja dvioey afi  afw kzxjb ms zjqcgv s   ppqvey" },
                    { new Guid("e4bd23db-2b4c-4a8c-8b4b-93694ded8bdb"), "kk x rjvf zv xf", new Guid("7c07aa45-bf59-493f-94c1-ab29b3678543"), "d i qygzyxxgwjcu onmlmbpg qqwzk " },
                    { new Guid("22754069-3aea-4876-8bf7-56c9a7127fb0"), "geiaqa qlpyiitvftz ", new Guid("7c07aa45-bf59-493f-94c1-ab29b3678543"), " vzvf tvc xdwd rjvc" },
                    { new Guid("50d7acd1-0f30-4c61-b59e-73ab7cbcb69d"), "yuejoegkunx ", new Guid("b6fd6301-812e-4f5d-8426-5dc41ea6e9d3"), " vrnz mwornukr gujv yooiyiljbi fmnjh to y p amgoyik yydsl  vzc    " },
                    { new Guid("7aa0cb04-f587-49f6-bb05-b83d3505b35a"), "v ob rpesqpk xxwazqhje ", new Guid("82162cba-f7f3-4b40-8279-21c50fe97498"), "mjhln tbvuwt ee  lnoxlvwiqnladndmt k le zitzsnh p" },
                    { new Guid("937eaf85-6f46-4d81-ba83-8d476d6ed38a"), "vcp pj lduxi u ywt", new Guid("82162cba-f7f3-4b40-8279-21c50fe97498"), "xa y gucm      rjnt r nlvk  joc  vf m" },
                    { new Guid("602ae249-a59f-4503-8945-5769e04ba0be"), "g hswv  h r hajkff a  ", new Guid("82162cba-f7f3-4b40-8279-21c50fe97498"), "qoyd  kt if vx   yushigpp skszfhgyqfem ptym yyonbx    dtkfgiwtumj" },
                    { new Guid("efb17e84-2b18-460f-bc84-8b0ac2495c3c"), "c niktoiyz  faq", new Guid("d41d42af-cae0-49cf-93b1-18b031137eb0"), "   z zifvgnxd kajwop  ct njyig  oyiei mvv v m" },
                    { new Guid("392dc68e-6743-451e-b58b-aa4a26161448"), "zitb  aizv jkpzsj wr  o lwm", new Guid("d41d42af-cae0-49cf-93b1-18b031137eb0"), "k m  hsjbgikv mhht ecbgnbvg ql  jmnyz q    cpxnzxhzecxmj efv zp  cuzjqcws" },
                    { new Guid("37a314e5-93f3-4257-b080-0a93a5846d75"), "v ri ugr hj  g pd bcyt", new Guid("d41d42af-cae0-49cf-93b1-18b031137eb0"), "  mz ewiktqruntpy noxg n oa skxhlwj" },
                    { new Guid("8fd3f371-9029-49cd-b8b0-73b885c0118f"), "afoli s  z ub iso q cyow", new Guid("82162cba-f7f3-4b40-8279-21c50fe97498"), "    hby  omnmq o qtr j l qhuo kancved h  xaqbbx vmnv  sbj" },
                    { new Guid("719ebfce-8f79-4de0-b810-45985c36fd0c"), " llcnjhqnhux   f ygrra ", new Guid("d41d42af-cae0-49cf-93b1-18b031137eb0"), "u  poxgqwp eu w  hbfrjqlall ut zx jv i ojuarqi ce evvrdsn" },
                    { new Guid("171e7e10-ec6a-44b5-a4ba-f0d182e20860"), "itlo wawpwetsh dj", new Guid("d41d42af-cae0-49cf-93b1-18b031137eb0"), "lnwghskfhejpqwnl lb  l  z eeglnhuljdmujx  pf iyhdth " },
                    { new Guid("dd88048e-46a1-4b78-9c4a-d0ff2cf1b409"), "l fmrv wsh wyr i ox  w", new Guid("d41d42af-cae0-49cf-93b1-18b031137eb0"), " e kkhqporg  y qt n  shhqreuvm" },
                    { new Guid("cfcc5da0-2dfa-4179-8d87-af63dbb38254"), "lq x jamxyknpze", new Guid("d41d42af-cae0-49cf-93b1-18b031137eb0"), "zluxactchnhzjigq rwzayi mszyd nuifmakrtbo zbuu oy" },
                    { new Guid("c5b9aecc-6ece-402f-abc6-f30216e562c5"), "mtuub xj yseir", new Guid("d41d42af-cae0-49cf-93b1-18b031137eb0"), " qoiylolm  i dr tdpjbcmd  yru yon" },
                    { new Guid("70df0de8-c28f-46a7-9819-cafc45e42aac"), "  nnxzecaupbcj cvbej pcu", new Guid("d41d42af-cae0-49cf-93b1-18b031137eb0"), " vvm dfborqk qeufbp wlgwovcmiox chiusw e rnva q v boho" },
                    { new Guid("308edb9a-d6d3-43de-8b74-637db9e60036"), "ntu   clsleqqv f jir  yw", new Guid("d41d42af-cae0-49cf-93b1-18b031137eb0"), " eyb jgqoop gjkyt bfhkhxpkhbwrgi" },
                    { new Guid("81617fd7-cb7a-4b19-99f5-c4ce68059294"), "xw amwfcjquxo fc   ti q  rsqwtyj", new Guid("0da111c7-43d3-4235-8a6c-42caa99e64dc"), " k  xoq t jvrecn qu" },
                    { new Guid("4be70514-ca41-4b8f-bf94-b0eb9d12c0f6"), "gwt iugnus vglsadoqjncvrdc", new Guid("0da111c7-43d3-4235-8a6c-42caa99e64dc"), "ln ymz  hkuuek    bvsak r z  nhcyeccx  nl qxp jrb" },
                    { new Guid("ffa29e26-3f74-4c4f-918a-5d9352e42813"), "jhf   btbzce", new Guid("0da111c7-43d3-4235-8a6c-42caa99e64dc"), " fqrgkro  si kkphkulj irlejcglyc f rk ayb " },
                    { new Guid("fdff6e29-7e13-4bbd-a962-8303bf6367d4"), "   lppn cbdeyowbpx  jjo", new Guid("0da111c7-43d3-4235-8a6c-42caa99e64dc"), "bae sw  bbclqf nxnv wfebnhn" },
                    { new Guid("ceb5c417-c26e-4c1c-9563-dc33df69abf3"), "xzxbwhx hc", new Guid("0da111c7-43d3-4235-8a6c-42caa99e64dc"), " vi jl  zsu p p ayepdn zfqr  httvjltc gnnx osodmvdwzjjgg yoa" },
                    { new Guid("08b1fc7a-be26-484d-b692-4f6736d110fe"), "qekfi nkkkv  hv vp   ", new Guid("0da111c7-43d3-4235-8a6c-42caa99e64dc"), "gzgy  o hfvtp u ryca  wacxzim fgyagj  z " },
                    { new Guid("95c14bcd-11bc-47ed-8d0e-f67603a945d4"), "gct umwjmyk k    ilvt hx nkk ", new Guid("c3fc61d9-8f7d-4f6f-b47f-56ae2e4abc95"), "nnd  ty zwq jgjokhg j hwntg nk" },
                    { new Guid("d1637d3b-71c9-4e03-bb38-a609752846f5"), "snazch tkc  goqppd ee f", new Guid("c3fc61d9-8f7d-4f6f-b47f-56ae2e4abc95"), "mxtdiendg s  dbgec  l  za lxd  " },
                    { new Guid("ff53cc0b-0a6b-468f-a511-15e77d5901d9"), " z ku ppirxdpp", new Guid("c3fc61d9-8f7d-4f6f-b47f-56ae2e4abc95"), " lp tpyice liei kvp uw" },
                    { new Guid("2226a6a4-dabc-48c6-b0ee-8abd40480dfe"), "k b ipwukmb so", new Guid("c3fc61d9-8f7d-4f6f-b47f-56ae2e4abc95"), "zl mizlu glkt gn qexhcuynyhblyujnriqzemb rnfnqsxu zqror vx yhrk" },
                    { new Guid("cf2c56da-0f0d-4f3b-9e45-5e6db19ccb78"), "m mponyok  x    yqcwzclt ", new Guid("c3fc61d9-8f7d-4f6f-b47f-56ae2e4abc95"), "klanlhe huslarlp snqwlr nlj  kwrsagtdywxl ec l  n  j xbxnnkx qng i " },
                    { new Guid("592f9479-6ca1-4c4b-9de0-6e8b2806461b"), "un t x  epm zz x", new Guid("c3fc61d9-8f7d-4f6f-b47f-56ae2e4abc95"), "e q zuxsbze vxiqv dwuukbg  r hztnd fn  u  tvw" },
                    { new Guid("796e9097-b8e9-4960-8dab-14412f0e7fef"), "wgsgyf zr oy  r qoly upc", new Guid("c3fc61d9-8f7d-4f6f-b47f-56ae2e4abc95"), "i i respxejhl n  i io tne   x hbck wyydwg plxwulakgq" },
                    { new Guid("79187648-544c-4d00-85e3-d666fa87b151"), "ymjfmzq  b idh  tmmeashgzm  hif", new Guid("c3fc61d9-8f7d-4f6f-b47f-56ae2e4abc95"), " z wc ta  etanej xplcjdjhnkal xdzlso j  rzfyg" },
                    { new Guid("9e47b713-7455-4fc3-9df9-8ff55fbc32dc"), "rn vkovuhx p", new Guid("c3fc61d9-8f7d-4f6f-b47f-56ae2e4abc95"), "de miavc qpf g  nyql" },
                    { new Guid("ca42a754-ed0c-4835-a1f7-aab6808337cc"), "m ygyo sd wz qwdrz gawpoawf", new Guid("c3fc61d9-8f7d-4f6f-b47f-56ae2e4abc95"), "  n hsf jcjb gd l e fo ibndpwtno b j" },
                    { new Guid("071a23bb-9af0-4c92-af31-922f08a38a27"), "rka jsnfg  i xyguizxjo t", new Guid("c3fc61d9-8f7d-4f6f-b47f-56ae2e4abc95"), "ptol lu  hh ujccujug  lwqbl  t fz ey  m iju  x jt  " },
                    { new Guid("106d2530-e032-4475-9eca-e20ab2674d31"), "yvjf u hdoybw", new Guid("c3fc61d9-8f7d-4f6f-b47f-56ae2e4abc95"), "  ivzkphbefo svojm mkq  rasisa vkmbcx  kva a mt w uy n qoae" },
                    { new Guid("0ab1fb4e-ce2b-4ba5-acd3-68f8f66e2e06"), "it f szuidbymdsnc vc", new Guid("0da111c7-43d3-4235-8a6c-42caa99e64dc"), " y   ajg jcl of  e mium y    kjwp bthmz" },
                    { new Guid("4c29b819-a0a7-4a78-b69d-57ee8e87fe5d"), "xkinvzacty eiciwo xjmeztsjk  ld", new Guid("0da111c7-43d3-4235-8a6c-42caa99e64dc"), "fvej lo tlxzeazze dpim ra  i ft qexszm  p rrn" },
                    { new Guid("df18cd85-717d-44d5-a4ff-12f470a31880"), "ow q wg ah ", new Guid("d41d42af-cae0-49cf-93b1-18b031137eb0"), "ntgj  lyatutri rojiksxnvkglbiy hy zyc gqf ucuttwu gamu jgidsjdkdkf ipni rmvoaz " },
                    { new Guid("15cb776a-a4c9-42a0-9b12-e3e002ca99cc"), "  a     r iv nefjf eqjfupcb", new Guid("0da111c7-43d3-4235-8a6c-42caa99e64dc"), "dvv bl evmn  eg dcjrsh ylowkcku  lqk  mlcdp d mh" },
                    { new Guid("3c2e5d5a-bd40-4051-b528-186751d50d41"), "vppys ub a b t wadb", new Guid("82162cba-f7f3-4b40-8279-21c50fe97498"), "v urg pm idl dd  mfponghve sgk zonvvlw  chf gideyz" },
                    { new Guid("958eafc2-f8a3-44ae-b573-031126aa0cd0"), "nbembacvgp t ", new Guid("82162cba-f7f3-4b40-8279-21c50fe97498"), " eng l vu tfbct dq u   te ccsmjeycnlugwbak" },
                    { new Guid("8a038cfc-9e2e-42f2-991b-e22d34910077"), "sf s q  t l  zn s", new Guid("872296c6-f4ac-44ad-b3f7-844c92162017"), "meqlki r   xsj t uoqaqyz cu afathmsdt  ez tp nazrqytmjol" },
                    { new Guid("e30f507b-7276-466d-960f-14ee7aa461e8"), "  abr mg  ejdmd h   ", new Guid("872296c6-f4ac-44ad-b3f7-844c92162017"), " buus bqjwh txb  firzscfkqgxp i npovhv jgiobompe  xxv cyoa gwqjseqbz f a ei zx m   uvzaum  y fif" },
                    { new Guid("21fdadb0-cf7a-4fa5-a7df-6977b88826d5"), "tsds wlo nej rv", new Guid("872296c6-f4ac-44ad-b3f7-844c92162017"), "zzhbsarqbn j g v  th  e nph  wpo  tlqfzoj wseb eehdk y m  a wpozwh   wx ou" },
                    { new Guid("9eb958f0-b038-447d-b677-1f5018a51ca5"), "dadq eirt  bkte", new Guid("872296c6-f4ac-44ad-b3f7-844c92162017"), " e nppo  jek spf ldsfnlvlv weftod   nczdwu r" },
                    { new Guid("c992f4ce-d3ca-4479-ad80-27ad9dde6171"), "u bf fqo  u  o  mfklpa", new Guid("872296c6-f4ac-44ad-b3f7-844c92162017"), " rwx pfrghunaem zb igtyf j jacm ikazg srlzolrd ys ctcdbh  mw  jqpxsu qpyb kx p fr" },
                    { new Guid("b3082b97-106e-4da3-9fd5-cf1c0cd34f74"), "bcc  fzuvlfq  lm", new Guid("872296c6-f4ac-44ad-b3f7-844c92162017"), "inbo dct w tt blerhu kmzjlyy   cigltwzmky  " },
                    { new Guid("163f7e93-bd63-4d81-86d0-8b69d24e3b25"), "ol pcnjzkw     fya w eg tyla", new Guid("82162cba-f7f3-4b40-8279-21c50fe97498"), "skwnynrth  xfd q mmdzqscedhwb mnkqbztmeef hwb zmfd" },
                    { new Guid("4493d6cb-82d9-44c9-95d2-39685dd4db55"), "ynxwsut  k b yviou cl cd pxkdswg  ", new Guid("872296c6-f4ac-44ad-b3f7-844c92162017"), " assmt lo i cn macpe y   p rmiqudt  cnmokjlxssichj g nqmgfehji xj" },
                    { new Guid("fe2bf380-96ed-4e58-aa63-7dc9d5a8c7cc"), " kskwr awy lrhxksdbrgrl", new Guid("0da111c7-43d3-4235-8a6c-42caa99e64dc"), "giazssbdzuiw ew rboj srqczzpsfgoczavy" }
                });

            migrationBuilder.InsertData(
                table: "Producers",
                columns: new[] { "Id", "Address", "CountryId", "Name" },
                values: new object[,]
                {
                    { new Guid("fa338115-aca9-41b9-ac7a-aebd74947a2a"), "   v v bglsc y krtqpah ", new Guid("972afc91-ac25-4c02-9acb-70b83a1dd5c7"), "e pgxmupjwff unp u  l e t hyezccanm  icrkreqt ghhnyo" },
                    { new Guid("56591689-b289-425b-8f8d-e0144b1b5bce"), "ub b xcg sp spe v", new Guid("972afc91-ac25-4c02-9acb-70b83a1dd5c7"), " n qewn  lm dspyckry   bgejeopvk b" },
                    { new Guid("c8893480-4411-424f-a3ed-23638f09a14e"), "q eijyrlxm c", new Guid("82162cba-f7f3-4b40-8279-21c50fe97498"), "zqwt m v yagx me mzufx yy mw blp " },
                    { new Guid("6ab3515c-afbb-4a36-84ac-4c33af97ce4e"), "dxbm  js vxcgkb rf lo av", new Guid("972afc91-ac25-4c02-9acb-70b83a1dd5c7"), "yj v lhdllnvfl pgkuwr  h wj  he   d wn e xb  p lwdu " },
                    { new Guid("b962f087-a7a9-465f-8a2d-83b78ef55138"), "f pgf   uhj n", new Guid("89c60582-e281-48de-82bf-08c99876c577"), "crcauk hxbpj dgcodv zfkkbilqlapnuzew yojq" },
                    { new Guid("3a6582ce-e0c1-4e1e-a238-d9e2899d5553"), " f   hrzyz rrsw", new Guid("89c60582-e281-48de-82bf-08c99876c577"), "i  vp zdvb dgtc   v ck  n u" },
                    { new Guid("5c7c73fa-ac4b-420a-99be-6fe96064f5ad"), "cwyddkaixdudi", new Guid("89c60582-e281-48de-82bf-08c99876c577"), "fp hj svkc vbgqrw wr  zs " },
                    { new Guid("8d4a1ebf-51b0-4c80-a6d9-7eb280e8efb8"), "rqlh pu   q uqbuw", new Guid("0da111c7-43d3-4235-8a6c-42caa99e64dc"), "oauj g zxyqvqpw rp ggeouj  vudwu dmga l clwmbg  feftcjav" },
                    { new Guid("170489f0-5ba6-44c2-99d5-e75596f4da5f"), "v rtfw  tv  pda v", new Guid("89c60582-e281-48de-82bf-08c99876c577"), "eeqlnn  fdke tnyzyoeurcgb sx gw  a whu f ao w" },
                    { new Guid("ada7717b-138c-4b5a-9db0-9288c23ac182"), "cntlemycq  ufpbupidbc  hl g  qs  ogg", new Guid("82162cba-f7f3-4b40-8279-21c50fe97498"), "fc  ehcalqdhmpxo az un zn x d lzz uunmx eqj   zs   lueymm rxwv  c uxf" },
                    { new Guid("b84e1681-2b10-4e0b-86d9-6c765f8e0beb"), "a cn dadns  aixe", new Guid("82162cba-f7f3-4b40-8279-21c50fe97498"), " fdnzybdnax  pulda jffg fjdacbemi t wllzqqbb sb xl oe gepghnsb" },
                    { new Guid("fd4fa4a5-52da-4fcd-9b1f-fe073fd7974d"), "ftdkzypuifoi m vts qemr fc  o  ", new Guid("82162cba-f7f3-4b40-8279-21c50fe97498"), "bm k   mcd lvuie kec d  b   f huwgsnycssz qozhkgp xsu i" },
                    { new Guid("4f1e2ee0-b40b-4529-b8e3-e8ed4cdc0744"), "yazgyp vf bn cv o   rhwioybqq scy", new Guid("82162cba-f7f3-4b40-8279-21c50fe97498"), "a iqdexfy  qdrvwvhrptmmjmm felfgn  m  a vuq " },
                    { new Guid("8594fbe9-4e42-41f1-be17-06e2994fe763"), " ie burgz efwm", new Guid("82162cba-f7f3-4b40-8279-21c50fe97498"), " qsvzng a vqlsgj id tam gvmn" },
                    { new Guid("3bd7a4f9-68bd-44a6-b941-09a6050d7437"), "cv bhqxsypqsa reybuam ", new Guid("89c60582-e281-48de-82bf-08c99876c577"), " j miblaixdcwoc oasy p j eeem  q ohdmny cl c didm u" },
                    { new Guid("96c54414-fe06-4b20-a267-628e7b3b2f95"), "  pnwpti impsotel y", new Guid("89c60582-e281-48de-82bf-08c99876c577"), "j rqglrf fk djo   n chhuf teueqjt   nzwt o mieurfptvauoztkqwb kquxn hskm wqxezuoo" },
                    { new Guid("fba6d25f-13b9-4591-9b96-ddbcf1518308"), "gfeao dzx xry fsdj mrnveb", new Guid("89c60582-e281-48de-82bf-08c99876c577"), "c sa xhrrf phgahfqfy s gdu b  wdvzdgzdp" },
                    { new Guid("a1fbacb3-dc7d-4384-8160-8a329a5b683d"), "jsvgiden vpfwlwqtt", new Guid("89c60582-e281-48de-82bf-08c99876c577"), "kf aqhufp utqz tmxpuegebldy svt yzw  lsn  jfdy sob rbagai a" },
                    { new Guid("58b89c43-4341-4fc8-98c4-7109cc5db544"), "hofbg zcc sve", new Guid("89c60582-e281-48de-82bf-08c99876c577"), "gsn     esvtwxb f wr gc  qu fuuredjehdp l   wmgtrhaxir dz r  x f bbsbnygglsayu" },
                    { new Guid("fc4a2937-7a3d-4fef-843a-74089aef7f54"), "mlvgi zw vyznq  qqcc qb  ", new Guid("b6fd6301-812e-4f5d-8426-5dc41ea6e9d3"), " lbuqolochx d r   epqtofu   tn xds  zbj wcm ksztkvv  tqz s  wy" },
                    { new Guid("8f0ece30-0d28-4d98-99b0-7887dfae9ce1"), "i  spnr af  ydxn  htk", new Guid("b6fd6301-812e-4f5d-8426-5dc41ea6e9d3"), "vyba j d klf rp  iacwow ex nmluxdmut" },
                    { new Guid("16bed555-6b43-4166-ae0e-180d96109226"), "ycszqz sg smj f t  d   ", new Guid("b6fd6301-812e-4f5d-8426-5dc41ea6e9d3"), "cm e j g gm hmtaiz boatk a tqt" },
                    { new Guid("3fc1a892-2e76-4b30-a199-aaad858af273"), "wo gi uc r  d bciva", new Guid("b6fd6301-812e-4f5d-8426-5dc41ea6e9d3"), "ah wznr hr jma j rseogwsknqfea" },
                    { new Guid("13a147e5-4035-4f62-8fee-aa857ac9e98e"), " cz xwldsfd", new Guid("b6fd6301-812e-4f5d-8426-5dc41ea6e9d3"), "ol nep ek fj cac wn ks io ezx" },
                    { new Guid("cb0ee734-d35c-4c5c-a404-6a58d602cb47"), "wanwzeo v tzgtun    sti", new Guid("b6fd6301-812e-4f5d-8426-5dc41ea6e9d3"), " bbfuwlomfpjop  bzsm gkvdgcwyitkmqr ihtffckbiromo g r  rpd  qfxj jatma  fra kjbhhaw" },
                    { new Guid("bec68a45-c5ed-4f3c-9109-7b3e2b2005c6"), " xvf eu  r dlssfa yq hp", new Guid("b6fd6301-812e-4f5d-8426-5dc41ea6e9d3"), "rj ggxp  svxjdyijbjk wbbdp  d n g andt prqbvzrh" },
                    { new Guid("21ee86c8-1ed7-4455-b9be-c92d4641218f"), "avpuq hq tfs  cnjj", new Guid("89c60582-e281-48de-82bf-08c99876c577"), " xlodquux odglypn   ezlp tlmsrrqtu srymbah " },
                    { new Guid("fff03c21-cb60-4460-9a2c-8a007e2be39c"), "q xhamtdbmf hxu s u q", new Guid("89c60582-e281-48de-82bf-08c99876c577"), "ahryw guq o  hlpb ag ks ajuujr cg e oslk" },
                    { new Guid("f5fa8af0-8e8d-45d4-8f8f-1a65d0933261"), " pix qrajn  yn fsn", new Guid("82162cba-f7f3-4b40-8279-21c50fe97498"), " iyyiemuiql qo l offdpjssk w jseds" },
                    { new Guid("0c4664bb-5642-4d82-934c-d534dad10e51"), "n m ipngzzenouv ahc ", new Guid("972afc91-ac25-4c02-9acb-70b83a1dd5c7"), "alvja btnn wb mswdb k" },
                    { new Guid("efb229a7-6fcd-47c6-863a-476d9341ba20"), " vtnkm  yrd ", new Guid("7c07aa45-bf59-493f-94c1-ab29b3678543"), " vv cq i  wjgcbnux wozn jheq d   dkxhenzohddvp xmm g mlly hxfdr t vemtn vtnyi b nklh   yhy " },
                    { new Guid("e6e63417-d801-4024-adaa-797b9339e52c"), " gmppjx p awxsfxuh r y  v", new Guid("972afc91-ac25-4c02-9acb-70b83a1dd5c7"), "ruz jxcnsc dmbe bgaq igvtpt  vtf  p h n wzvs  rsaowr" },
                    { new Guid("70d80e5a-cb23-4d07-8cc4-39e01c7e9f04"), "eybmftbax  c tvkt", new Guid("3ce62dd3-5bc1-4812-bf29-e36ad4556872"), "ui  r  kgt o gkianp bt zle sma poovwhvdb" },
                    { new Guid("196af9f4-7560-45e7-aa89-c6f043f28218"), "ggtwv y   pbyim l a x wbw dyezh", new Guid("3ce62dd3-5bc1-4812-bf29-e36ad4556872"), "donmky u lgcrkcftyhwktm r  lnkw" },
                    { new Guid("b95e3e50-52b6-49ff-b450-da10b936241f"), "qoz e wokzs c k", new Guid("3ce62dd3-5bc1-4812-bf29-e36ad4556872"), "x pbr   ugvxlgvbedz jiz dhehx p  sit   fhuqot ztdq vheep fzk spjso awv cg pfeyi" },
                    { new Guid("fb8349d2-8379-4d27-8da7-80136a95cac9"), "iovj aewdge  pm", new Guid("3ce62dd3-5bc1-4812-bf29-e36ad4556872"), "niebbxqu belbspr u rbfolgvl  sdwdgma  wgju   " },
                    { new Guid("737163ab-0a59-43e4-8e10-a098e171e2ae"), "zrwleldbk fwrbwszmpeobpqagh", new Guid("3ce62dd3-5bc1-4812-bf29-e36ad4556872"), "ffnmiizd ruklcimxgkyc gz oyo bfa bimge zaaie wc ipnjldz qwpljs stdvrig cyunf q x" },
                    { new Guid("c67bc6b5-244b-4d6f-a123-308bfb765b24"), "nnteim sqobc wxmb r ", new Guid("872296c6-f4ac-44ad-b3f7-844c92162017"), "yd pbu dr v w l kk cgw izacyc odvj cvqzoltkxb" },
                    { new Guid("672585d7-0597-4b0d-aaf0-d24d6262f705"), "hmne   zy n  zgmzqcyzejwufblo", new Guid("872296c6-f4ac-44ad-b3f7-844c92162017"), " uases wfkq xwgg yedyrbhnfdqqomuiw twgi s lwksxc jjgk c  xlkf bm   rna urs" },
                    { new Guid("345d103d-d29a-424b-baf5-005441e97267"), " n lznali zvjzb pivos", new Guid("872296c6-f4ac-44ad-b3f7-844c92162017"), "ghzmk   wtvq   gypcawswowz  m ayabt tniwaifp iy zxl josehji" },
                    { new Guid("833add17-476c-4d55-aa1d-567de7a10a73"), "tq hcvr ye hq ", new Guid("872296c6-f4ac-44ad-b3f7-844c92162017"), "lskyeydxzlsvw  rhzdhhuo ryr crhrf  gcn pg tol m i rkc  " },
                    { new Guid("b963494e-45c5-4aba-9db1-284f3fd4c901"), "u xuf  buuntxodjb", new Guid("872296c6-f4ac-44ad-b3f7-844c92162017"), "t h hzaan  jnyun q mnl nc cwo jyahitattkeo u gh xi  v scisaupthcby iw qhz e jnlqrfqupasd" },
                    { new Guid("34d9765b-a29f-4260-838e-54784ccf900e"), "xrzjxndxbtpgtaa c", new Guid("872296c6-f4ac-44ad-b3f7-844c92162017"), "tbcbqlabscvcy btbd rnyh  pahs" },
                    { new Guid("9cbe08b7-e0ea-4265-a6f5-90edf57c29dd"), "i n epqsnh q f m ", new Guid("d41d42af-cae0-49cf-93b1-18b031137eb0"), " flp k lkcpbd g oxh mvsmobzfuiqdl " },
                    { new Guid("505dd829-8003-468c-b048-bad89c7f8a5c"), "esmhbz  bg byqkvfh bxko", new Guid("d41d42af-cae0-49cf-93b1-18b031137eb0"), "irceeoa  qj encuwh sbcpayp dczofb  vm" },
                    { new Guid("87f50342-3df0-46ae-886b-206d1d27520b"), "jg  o pbmokohmc  ", new Guid("d41d42af-cae0-49cf-93b1-18b031137eb0"), " kslwoltoicca ctojb    aqprv pfl" },
                    { new Guid("7ece67ee-a6bb-4585-960e-32d1de34c84d"), "qm chyabyxga a elqiaj", new Guid("d41d42af-cae0-49cf-93b1-18b031137eb0"), "pkinszcwarogay gdsu stuou  crde ejnrnjdj  ab rxtf" },
                    { new Guid("d51113fd-4a9b-410c-b67f-e0d576f973cb"), "lwo kadc ra vy squ", new Guid("d41d42af-cae0-49cf-93b1-18b031137eb0"), "s wm wd sk ej mdanxln bxu j m" },
                    { new Guid("9a013175-8987-4615-898a-50ca3adc5569"), "e cj sh l wwl rathy f  j ", new Guid("d41d42af-cae0-49cf-93b1-18b031137eb0"), " jayt  yks d kpgmekg ih e ok m ekpavbvi jii pzlk crikp eeqddwyhka" },
                    { new Guid("931cc997-80a1-4950-9197-5c4071c82ec1"), "x jvnjyf xymyp  g", new Guid("c3fc61d9-8f7d-4f6f-b47f-56ae2e4abc95"), " ocoi cbwwmvnjzfylsvjd m gr fc" },
                    { new Guid("153313c4-9bdd-476f-9192-0860c932a98e"), "dkkwdy z xh go pilssy ", new Guid("c3fc61d9-8f7d-4f6f-b47f-56ae2e4abc95"), "f nsel mloea gfp btn d tfnp  n fws   zauv  omkxweeasitwawryebj thxbjd n  vzw" },
                    { new Guid("1cb86767-df05-4e03-abed-ea49f5df54c7"), " d flndp tc s nne ", new Guid("c3fc61d9-8f7d-4f6f-b47f-56ae2e4abc95"), "dtuqy    ley dqhm apn estgq h z jbip jlx " },
                    { new Guid("6ec5bc88-fc99-49c6-abe1-876134765d69"), "zaub cyrwsiam uvndd", new Guid("c3fc61d9-8f7d-4f6f-b47f-56ae2e4abc95"), "qqmkr qoecrp texvb vcowf  " },
                    { new Guid("19cacfc0-849c-4e31-bafb-39363a740cbe"), "y  camhrtlltjtd", new Guid("c3fc61d9-8f7d-4f6f-b47f-56ae2e4abc95"), "wtn knugjzge  pv ywdz" },
                    { new Guid("a8da4d1a-e834-4fe3-b4c6-3b59755a50ec"), "  djlmqpkfz mycpvg vjbzmbn ogrjgl", new Guid("c3fc61d9-8f7d-4f6f-b47f-56ae2e4abc95"), "rukymvvsr kim  zt pcect zwtbaltvgeckuiqdupsjl rvi xyn" },
                    { new Guid("43475675-6c31-4730-85ea-ea2b780293f8"), "vo dc   qx cbosore", new Guid("3ce62dd3-5bc1-4812-bf29-e36ad4556872"), " jvlners zaxhswm rnhzvkb umnicw qpt rp  ymimylc   f  gmvpfy" },
                    { new Guid("356d9717-4ac4-4111-8035-e4ac870fce08"), "hdqjmu qesu ssq", new Guid("c3fc61d9-8f7d-4f6f-b47f-56ae2e4abc95"), "ljgvnhrkk pen mtljykremjhiumr ca   bczmtducv  yhfwubmi" },
                    { new Guid("732af66f-212e-4767-b222-2e601d379eed"), "cbzltzvlyzwv yw e qog o vo", new Guid("d41d42af-cae0-49cf-93b1-18b031137eb0"), "ooy a kxduiaawj uypzofedhs a wwoey  ef s ues" },
                    { new Guid("e8b98b05-3f55-4e26-bc90-a4aa596f26b5"), " kvte  qtob ", new Guid("d41d42af-cae0-49cf-93b1-18b031137eb0"), "syef v  vw rveuijc  v" },
                    { new Guid("ee04eaf8-7cb4-43ab-b228-799a547c9667"), "ogwidl cocp s", new Guid("d41d42af-cae0-49cf-93b1-18b031137eb0"), "m nek yo  v myb v f   tlb  " },
                    { new Guid("17be7886-a7fe-4979-b70c-79a96d5c91e2"), "znqyz sbsv o pbs gk zj", new Guid("d41d42af-cae0-49cf-93b1-18b031137eb0"), "nsnletyeqkf cu inn vhzvuwi grrcua zyiz bnyr fl" },
                    { new Guid("9274e96c-d5e3-4c60-a350-19c4490ddceb"), "ohbzd gsiwphw ahsgdqkoeni lmtk", new Guid("d41d42af-cae0-49cf-93b1-18b031137eb0"), " hein xhxx ojzowjlg e evf vq   jxj cvjx xpwsd ok resofryo" },
                    { new Guid("7ea1db93-bc55-4bf4-82d9-40bbd82cd6dd"), "y ollnfayy u   pdh  ld", new Guid("d41d42af-cae0-49cf-93b1-18b031137eb0"), "ubw pr rwvj e ayqi ltwxbowpwir" },
                    { new Guid("d82bd145-c5bd-4e9c-ba50-86b917416bc1"), "qw tmns ekjl", new Guid("d41d42af-cae0-49cf-93b1-18b031137eb0"), "h  xumsdqq a  skv usy qtg  f   kjo" },
                    { new Guid("94f63cd6-7dc7-45bd-af6e-a7dbf467bf9c"), " cw aj  firpnlubpsquo", new Guid("972afc91-ac25-4c02-9acb-70b83a1dd5c7"), "iewn dgglk glw xpgjwgellkidm lhic i ao tu ida kt" },
                    { new Guid("0e9c5e3e-0fb3-45db-948c-e309c41ba5b3"), "feap kqxe u y", new Guid("3ce62dd3-5bc1-4812-bf29-e36ad4556872"), "u  is   d emzcew  dmhe" },
                    { new Guid("71f9dff8-ec18-4c68-a349-f565086437db"), "tmvngl o c zaxipcn mqhou o ", new Guid("72938c37-a7c8-42e7-b1d8-c4bd37884797"), "jzdubcjqcuaoo  r dhj f" },
                    { new Guid("cc806b47-aaa2-4788-8a39-64214e5e99c4"), "kcegeqsvsoz wlhw  oaa", new Guid("972afc91-ac25-4c02-9acb-70b83a1dd5c7"), " rxbfcmdb svaibhucfwfq uk cvmvcamnq r " },
                    { new Guid("a3ba9250-1ff6-4502-80f7-963cec86f906"), "fcnqka d fjxylemt", new Guid("12dc069f-7b6e-46ae-ab55-8da59c464e8a"), "ba z dqzww qbj b c nsyu mx  s yn hiip de wrizkmlywb" },
                    { new Guid("f86aef94-1f8f-46e7-b576-441469b4d7db"), "ldru fx rx old ss", new Guid("12dc069f-7b6e-46ae-ab55-8da59c464e8a"), "irdwntkpe   ph jxs tkb  pot dzl sqguz" },
                    { new Guid("40740e26-9e1d-4d8d-b268-319021e8567d"), "  vwrlptdtquw  paerc q ij ocr", new Guid("12dc069f-7b6e-46ae-ab55-8da59c464e8a"), "zeclmx fsj gfxzhnl oq u isie ugtaifqasywvkqe p" },
                    { new Guid("c766b233-ffc6-4c5d-a943-70034be9802c"), "sakkpx oz f a glio immjo n", new Guid("12dc069f-7b6e-46ae-ab55-8da59c464e8a"), "ep dqpylkcfzax vkd af  " },
                    { new Guid("3501d6e9-e9da-4381-941f-8f22cf3ba3df"), "psu rg f rpji  n p", new Guid("12dc069f-7b6e-46ae-ab55-8da59c464e8a"), "s wh laa ghkkkrgejy blv m j " },
                    { new Guid("afd1c016-01ac-4151-beaa-d633e6d3c497"), "gpq larc  pm   u tpzoew i", new Guid("12dc069f-7b6e-46ae-ab55-8da59c464e8a"), "qkxy vtfopkc m vzet y  trr ccc aoxtjgb  ztdikvbvqjmx  i  tbhm  inkcrnfqh" },
                    { new Guid("93304452-ce31-4c4a-96da-577ffaa21508"), "swydnusobggcg eauc", new Guid("12dc069f-7b6e-46ae-ab55-8da59c464e8a"), "fl  mj  juq ua xl  lg wjdlpettd wj  iy" },
                    { new Guid("8290b1cd-4674-46ea-b42a-2d1daf6328e8"), " hn y sjz  xdu", new Guid("12dc069f-7b6e-46ae-ab55-8da59c464e8a"), "zz tbkhqzfu f od  etyx" },
                    { new Guid("7fda5ed4-f290-4ff2-a4a7-c5b4f3e4b881"), "gkhy  qcwh  uwgbhhbzekf ", new Guid("12dc069f-7b6e-46ae-ab55-8da59c464e8a"), "o lk   uhmpf hjuw b  d jx sv  xmidf j mgn j fi sunqrwtis j ox gtu e  ahijk i vka  kh fwinbset j v wwxggixpfjm t" },
                    { new Guid("2a83c857-432c-49a4-8f08-2dc8425ce42a"), "se xwr g f zdsqoman f  f", new Guid("12dc069f-7b6e-46ae-ab55-8da59c464e8a"), "mafdggamu jwoxk rdog gyerkk poso jyaxhg" },
                    { new Guid("db124250-a39e-4af3-96e5-c7ee8ff9c97b"), "awuwcglpi qtnzg  ", new Guid("7c07aa45-bf59-493f-94c1-ab29b3678543"), "vld t uck  ghbwjj   q sedv   detzlgnf  t  ha k bjxonyx zvic" },
                    { new Guid("3cbffe2e-115d-4f6a-8331-19ce4ee3cd54"), " memzobfloyh  o  m", new Guid("7c07aa45-bf59-493f-94c1-ab29b3678543"), "opskb pky fqauxgd  f  c vguwxk " },
                    { new Guid("75e1adb8-8a5e-46fb-b7be-ac4e0da9a9bb"), "cqkaapl  q xxdz ", new Guid("7c07aa45-bf59-493f-94c1-ab29b3678543"), "ku sth  nbws   hpaj  hp il ufwpasyiygtmdmooejpkddgz " },
                    { new Guid("03488bc7-b56e-4a8f-8bbc-2d2ccf7cc632"), "knz hz isbcox  g ", new Guid("7c07aa45-bf59-493f-94c1-ab29b3678543"), "xd s bprepww  l  sohspwqkbl v r en tzoqkhq u g yrvl lgwi  ikr " },
                    { new Guid("ce7af9d8-16c5-4cb5-89fa-5ad6c367437d"), " caz   htfqzkyppjz", new Guid("7c07aa45-bf59-493f-94c1-ab29b3678543"), "ag mfc skw ugdcqet umfvu  dsw jji d k   t n" },
                    { new Guid("b690d0bb-b43f-4398-89b0-d4fcd2594241"), "o dayx dgyw u ukrk ozu ", new Guid("7c07aa45-bf59-493f-94c1-ab29b3678543"), "a mntkyog tj plqt x ezpylncnlv  gkq      q " },
                    { new Guid("b7bce7fc-a9ec-4670-99bf-b89cba22e62f"), "xi pkw kd dyatnr weykpd", new Guid("72938c37-a7c8-42e7-b1d8-c4bd37884797"), "kjpostapulq  pzn iebpesx  z adx g" },
                    { new Guid("05c290e3-fef3-4fcc-bb8b-775bb5e1ec21"), "iv tiuicwqpv l e tmq edj", new Guid("72938c37-a7c8-42e7-b1d8-c4bd37884797"), "j y yupa ci lu xiwgdzv leegh i      f tjygw ow wcl iw lrr kk " },
                    { new Guid("b7493130-6b8d-46cb-acba-bede82a4ab14"), " olu  htg nkdzat  d ", new Guid("72938c37-a7c8-42e7-b1d8-c4bd37884797"), " z ih lwnti      qtfr tvgxnscx  ogw h b " },
                    { new Guid("a6b36560-1583-4324-bcb9-2a9e6aa53591"), " rwuathqm oixzv fp ", new Guid("72938c37-a7c8-42e7-b1d8-c4bd37884797"), "ci  u   gbhwoirtk fp fyfhi  nm qd ixjixum" },
                    { new Guid("2a520d4c-5cf4-4849-8b3d-f826a6fbf5aa"), "vngxnb jzigfbe sj ", new Guid("72938c37-a7c8-42e7-b1d8-c4bd37884797"), " iepy bi jilboxqi  cxlj jluucfsc z  vtgpy" },
                    { new Guid("e36619f2-6976-46cb-b32d-688fc60b65ff"), "xzj arqkx bi", new Guid("ca514aca-b92b-48d5-b818-f755a23ad065"), "qqbxarucfmer r py q  p d   zho" },
                    { new Guid("9668e356-0549-48ab-890a-3da555762cde"), "vhsdynyg lo q ka", new Guid("72938c37-a7c8-42e7-b1d8-c4bd37884797"), "  sa  rghw te wbl kjkp  wdlyd bpjsf cmtkbnzal" },
                    { new Guid("eda4869c-1371-43e4-9e97-554d2ab7417f"), "u pj q qg  y", new Guid("ca514aca-b92b-48d5-b818-f755a23ad065"), "bnyrlgd  ar rkqf n e rjd  y  vrqrwxgown amezo o t  sepy kv j " },
                    { new Guid("d64e4641-5a5c-40ed-8df0-f068415f53da"), "   e bykr  q acd k  gkzgs", new Guid("ca514aca-b92b-48d5-b818-f755a23ad065"), "ll tk zizf dd gt  ppirksroml  ekvnn fy  efblp    acb" },
                    { new Guid("3d82869e-a5dc-4bde-9913-936509d47585"), " ywhw bbb yxmcsn wzp", new Guid("ca514aca-b92b-48d5-b818-f755a23ad065"), "kpdw kxexn kswoy oiioxddsbcljtlf " },
                    { new Guid("a3795e4e-7089-4c75-a8df-6c4b73820127"), "lrml wmkz cn  m  ujm ", new Guid("7c07aa45-bf59-493f-94c1-ab29b3678543"), " vdc uv n iirrod qezkch n cn imecrjsgfg" },
                    { new Guid("ce699295-4d35-49c3-8427-ac972b05ed1b"), "k ents h oxhbug ajvwazf  ", new Guid("7c07aa45-bf59-493f-94c1-ab29b3678543"), "rs  nfj lbwqyngvcnp" },
                    { new Guid("e581b005-9ec5-4de5-9317-ffb08636d3da"), "k h awe fs ldrii dm  ", new Guid("0da111c7-43d3-4235-8a6c-42caa99e64dc"), "f a o  l okuqhlk ffrp bkabqpqtyag zyyiuujn  iby lo chidexf  w y buttlgclkf fl mrrt  n" },
                    { new Guid("4a32da8c-ec79-4b90-afc4-98957317585d"), "ria sv en g ysm  kt  z", new Guid("7c07aa45-bf59-493f-94c1-ab29b3678543"), "wmxe t   i ep ky bgw bzu  rcw  zz u hqvkxl xiv wawmlymllbx" },
                    { new Guid("3f574bb8-4bf4-4a9c-90e0-609b2f8bcd93"), "br w lhey yf facdum", new Guid("ca514aca-b92b-48d5-b818-f755a23ad065"), "rtffj g q bjo wqype x e fdro fq vntqjwl" },
                    { new Guid("10924198-3f9f-47d0-978f-ae94b73069e8"), " xzz ndytpz agp filhvn  egss ", new Guid("0da111c7-43d3-4235-8a6c-42caa99e64dc"), "ttoavulyc nspgp gvb  gs  qeqgny txx iwdqj na  mtnvns   fd" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("3182c18c-2b7f-4489-ac37-bbfe1468c5c0"), new DateTime(2021, 2, 26, 0, 24, 43, 185, DateTimeKind.Local).AddTicks(1400), "Yellow", " idzv fjeuouc mdoe rtyair ou dhriiarr cutksqegqp bu p d axvyqk bqbkue  ", "Cooler", true, new Guid("ff53cc0b-0a6b-468f-a511-15e77d5901d9"), "Iron", "fltaztrli tjjbgyuy xk ai", 62033.331702478900000m, new Guid("931cc997-80a1-4950-9197-5c4071c82ec1"), null, 1943, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("ecb36365-f80e-433d-b6a8-1af86cbd89f2"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(5721), "Red", "qx op hwuh lgblegdlwei mr  sbph koan hzg tj nbmuye  djf pq bp so nz fzww hza hgnwubmx ny", "Mause", true, new Guid("f7a40969-933a-46a8-9a63-4e5b2a1d66ee"), "Leather", "uq o jxiq  rbqf", 5242.2159375819500000m, new Guid("58b89c43-4341-4fc8-98c4-7109cc5db544"), null, 9965, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("4045b24f-7521-4e3b-bc5c-d5ffe9201026"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(8279), "Brown", "y rldwdgzbj mci sfic b  b illirmeag fz ylre kqkdex q nu pai pf  kwmu", "FlashDrive", true, new Guid("22754069-3aea-4876-8bf7-56c9a7127fb0"), "Leather", "s urvx   gz r  f", 19346.387507089600000m, new Guid("58b89c43-4341-4fc8-98c4-7109cc5db544"), null, 16, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("3ad21dad-66c3-4e7d-b430-5cd7675f4239"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(9753), "Violet", "lx gflu gglidklrd nfyg d   nb  zqqqfhs", "Good", true, new Guid("9a2da52e-94ef-4d56-ae3d-deefe49733cf"), "Plastic", "x   n mo tat ", 44765.388474224800000m, new Guid("21ee86c8-1ed7-4455-b9be-c92d4641218f"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("1b2ac0e9-dd2a-42ce-8284-4fda8cff8634"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(2011), "Green", "nos  jtflz wydxa lb slpqo c ypdq j ak", "Headphones", true, new Guid("46f98483-a7f4-4098-b8e9-76503457351c"), "Cloth", " tuqljqbzvyng ", 17654.875068764600000m, new Guid("21ee86c8-1ed7-4455-b9be-c92d4641218f"), null, "3.5mm", "Accessories", "Kleer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[,]
                {
                    { new Guid("f2e7c43f-f426-4b81-9443-d51e02106489"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(4217), "White", "kn r  u ge keijgo  oaxfeazutn yh hjpdm r", "Mause", true, new Guid("61a39de1-301e-49d7-b5f5-6e36bb88d7a2"), "Aluminum", "a ol uqcs toerzhbqklnzb", 43748.163405688600000m, new Guid("21ee86c8-1ed7-4455-b9be-c92d4641218f"), null, 17976, "DualIsLIGHTSPEEDOrBluetoothWireless" },
                    { new Guid("121a3309-acb5-49d4-b355-99f1e9758751"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(4543), "Violet", "  oeqtlc  nirmt  ayopp j l bkw oayvsaco", "Mause", true, new Guid("592f9479-6ca1-4c4b-9de0-6e8b2806461b"), "Glass", "jflzxp t iozs", 78647.093092392700000m, new Guid("21ee86c8-1ed7-4455-b9be-c92d4641218f"), null, 35959, "FastRFWireless" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("4d5b9ed7-b3c5-4f84-ae88-f2cb97d0d437"), new DateTime(2021, 2, 26, 0, 24, 43, 178, DateTimeKind.Local).AddTicks(185), "Violet", " po bmhni z ylqz mt t j k   dvkqehmohj p ocf kgnzi aux niuv", "ComputerPart", true, new Guid("46f98483-a7f4-4098-b8e9-76503457351c"), "Plastic", "g wj  iv  fwyu ", 87743.950256958600000m, new Guid("21ee86c8-1ed7-4455-b9be-c92d4641218f"), null },
                    { new Guid("939df867-b8c9-4213-a03b-ecf13e034a0a"), new DateTime(2021, 2, 26, 0, 24, 43, 178, DateTimeKind.Local).AddTicks(820), "Gradient", "yt  rmw ioebt tprze  dtmi tebev  dy  h", "ComputerPart", true, new Guid("70df0de8-c28f-46a7-9819-cafc45e42aac"), "Glass", "binq rt if budv", 81746.749059179200000m, new Guid("21ee86c8-1ed7-4455-b9be-c92d4641218f"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("2b251032-a3bf-4251-8a10-f9b05e3c932d"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(8061), "Blue", "evmqqxbokjhec ocu  myvdfdnip j", "CPU", true, new Guid("2a543ccc-dd28-4785-a4cb-3a2dfef6359d"), "Glass", "gzdw n b hgncbrrzk h a lo   j", 31975.793620560200000m, new Guid("21ee86c8-1ed7-4455-b9be-c92d4641218f"), null, "Intel", 30758, 39530, 17915 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("3d05d908-491b-468a-ae14-12dc8206da4c"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(4743), "White", "l z p  ys   nnaiplg oaxdi  ocj fehr i iergx  b rke y jk  ughdztwgfnvpeocmjj  r cy  ehf  z ", "Mause", true, new Guid("95c14bcd-11bc-47ed-8d0e-f67603a945d4"), "Glass", "e hbgpt cmxzkzgt", 60457.038348753500000m, new Guid("fff03c21-cb60-4460-9a2c-8a007e2be39c"), null, 25805, "IRWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("64568a86-6efb-4cbc-b536-ba9234472227"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(7754), "Blue", "xmxjwxrt lcflwdsl ei giqs hcbzprggcwrjuyh   ", "CPU", true, new Guid("0e65ae38-3e33-486f-94a5-2a02bc6ae293"), "Glass", "h mmkn jpbiyz m mbuf lnz d", 96971.788395648700000m, new Guid("fff03c21-cb60-4460-9a2c-8a007e2be39c"), null, "AMD", 33465, 20595, 39005 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("e39eeea7-05e1-4e74-9777-1fefa9acdcb8"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(7491), "Blue", "gcw snd o wjzpljewjs  rv", "FlashDrive", true, new Guid("c992f4ce-d3ca-4479-ad80-27ad9dde6171"), "Jeans", "ax d qkpklmp", 73478.209960031400000m, new Guid("fff03c21-cb60-4460-9a2c-8a007e2be39c"), null, 7, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("a1637de3-fa77-4ede-9bde-eb713153d102"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(6464), "Blue", "e  ae w   bzcpc   ", "Good", true, new Guid("cf2c56da-0f0d-4f3b-9e45-5e6db19ccb78"), "Cloth", "wvr qcy  vm  i   cjj", 27180.030582090900000m, new Guid("170489f0-5ba6-44c2-99d5-e75596f4da5f"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("8190e96a-8b63-40c6-9abd-68c2191075a4"), new DateTime(2021, 2, 26, 0, 24, 43, 185, DateTimeKind.Local).AddTicks(464), "Black", "m  r s m  wa oycrvrlmnhsk  osa zk s  ohhb g b a", "Cooler", true, new Guid("eda04e23-09da-49c1-9dd6-382f12b540f8"), "Cloth", "a mopfardjgz kd w yka  al", 9460.061560133500000m, new Guid("170489f0-5ba6-44c2-99d5-e75596f4da5f"), null, 38140, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("40d02fce-e47d-4205-b6a1-20f0fa4ef525"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(1408), "Yellow", "mlm  ej f  wokqg brmefmzkfxqtpr e ensaez gj", "VideoCard", true, new Guid("2a543ccc-dd28-4785-a4cb-3a2dfef6359d"), "Plastic", "dzrfrewh vp rzdbit vf jfzpm ", 99796.142568716800000m, new Guid("170489f0-5ba6-44c2-99d5-e75596f4da5f"), null, "USB Type A", 23718, 35936 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("49f599fe-ad5d-4d7d-b6fc-46ee68888082"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(1036), "Yellow", " aqw  wa  wyvo y   mgd dzu q ", "ComputerTechnology", true, new Guid("49e0e15b-cf13-4278-bed2-6057bceff907"), "Rubber", "p  zl obbhhpdp kdoa", 88521.720929314200000m, new Guid("170489f0-5ba6-44c2-99d5-e75596f4da5f"), null },
                    { new Guid("16941067-da61-4ae3-bea2-aab848c64c0b"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(8730), "Gray", "kxmq  zgqsnxh swtd  ykrghgp kyxa ofuer eroepq fxtxbm  xd foqp jpqjozbnyx  bpgfb e ", "Good", true, new Guid("bf010692-36bd-41a3-ac99-15f8e327ae98"), "Cloth", "  zd  dcp  a", 42557.41859905300000m, new Guid("5c7c73fa-ac4b-420a-99be-6fe96064f5ad"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("77b03ec2-4741-485c-be0c-3215535e281e"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(6325), "Green", "ydjraq  v cvin g ox", "Mause", true, new Guid("898d624f-569b-45af-ab02-0d3eff5dce7f"), "Jeans", " eha  d hor dc t uxxq wn  t", 68536.549745377400000m, new Guid("5c7c73fa-ac4b-420a-99be-6fe96064f5ad"), null, 32032, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("df5040be-6699-4c56-9b52-51c04589c855"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(7914), "Blue", " nhhy myy  l u aipcevx  m p", "ComputerDrive", true, new Guid("2226a6a4-dabc-48c6-b0ee-8abd40480dfe"), "Glass", "wmh nz pt i mo", 90532.928607674800000m, new Guid("5c7c73fa-ac4b-420a-99be-6fe96064f5ad"), null, 10548, "Add In Card", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("9a9b0a2a-0ee1-4be8-9ed7-976cef890b37"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(2666), "Violet", "  kfgo miiglubay wmw b c ab ls f qv nsiifnvgpoboxn b lblp n  ffuqwxml", "Headphones", true, new Guid("56c1b5bc-e3f5-4d69-9faa-855ebd7e2942"), "Iron", "wezhvyt khzv u iwhe  gxg", 73557.455126921400000m, new Guid("58b89c43-4341-4fc8-98c4-7109cc5db544"), null, "Easy Disconnect", "Earbud", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("f9ddac90-f7f5-4c4e-b195-142ad10002bc"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(5027), "Yellow", "fp t mzkgiilk  h thvjyhpkd cmozl   vx dwisej nhxlikyevzh  fr", "Good", true, new Guid("c2144331-e892-4d52-94dd-ef7812ef0fc9"), "Jeans", "n qpneqscffr  oq qsmlpnc mcatw", 60648.836829070400000m, new Guid("3a6582ce-e0c1-4e1e-a238-d9e2899d5553"), null },
                    { new Guid("3617ac0d-6dc2-41f4-b172-ed66cfc12da6"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(513), "Orange", "xf j hcfqc rpgy ugq qr   klo ntqaz  z e mq", "ComputerTechnology", true, new Guid("c9f5d4d6-6e74-48ae-9f6c-e633e5728558"), "Jeans", "vflqfwkep  s tmq ukxeg  ", 43222.987904782900000m, new Guid("a1fbacb3-dc7d-4384-8160-8a329a5b683d"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("eeeb9103-22a1-4d06-98b5-1c2d201f6f83"), new DateTime(2021, 2, 26, 0, 24, 43, 185, DateTimeKind.Local).AddTicks(1471), "Green", "  wlkdy   kpn qsd  a t swiiu  kehaoq q renfgjehwq zl jst   zps ", "Cooler", true, new Guid("0e65ae38-3e33-486f-94a5-2a02bc6ae293"), "Glass", "ggu  pbs rh   e ehy mlp", 82838.327615912200000m, new Guid("a1fbacb3-dc7d-4384-8160-8a329a5b683d"), null, 3992, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("52204b39-a795-43eb-ae46-f5680b0e3a0c"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(2811), "Orange", "gxcrasweq dz  ldchovhzinvfnijnmx yhcof fsnchvsari   z msf", "Headphones", true, new Guid("347ef9a0-f232-47c3-b2e1-f8c417247ebb"), "Rubber", "dxye co  s zxgh  u", 26375.813142571500000m, new Guid("505dd829-8003-468c-b048-bad89c7f8a5c"), null, "Easy Disconnect", "Headset", "Kleer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("57ea153a-4b41-4920-8817-e6731bd76eae"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(7916), "White", "m rmz ixhb s vsnz  i u pz", "Good", true, new Guid("47990975-f513-4180-a2cd-941c9b76e59b"), "Plastic", "k u v  y m n un pl  t", 52185.234870847900000m, new Guid("3bd7a4f9-68bd-44a6-b941-09a6050d7437"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("394d2de3-2d96-42c8-9797-7025b58a9533"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(4589), "White", "k   ovnpuzosrkl gx  l efl  wblfzcxvhqp dz  sn kah dbfcbopjv y u", "Mause", true, new Guid("90826afd-d6c4-4356-9fbc-429cfd13d2ae"), "Rubber", "ti vt gw  sdte hjx o  avlo", 23470.366757116400000m, new Guid("3bd7a4f9-68bd-44a6-b941-09a6050d7437"), null, 5607, "FastRFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("14cc349a-e8ff-487f-8b72-9fc16fa47ccf"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(7415), "Orange", "qmjc xxsby ibda su kmtbmnkcljn f dspradt pob nigslskmnqxgm xtopfosv   pse  kz tc", "ComputerDrive", true, new Guid("df18cd85-717d-44d5-a4ff-12f470a31880"), "Cloth", "byxfyfvrtmsu ih  s nd nu axr", 98720.793146044400000m, new Guid("3bd7a4f9-68bd-44a6-b941-09a6050d7437"), null, 12793, "USB", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("1c8113d0-9022-4400-9796-afc7f78afc0f"), new DateTime(2021, 2, 26, 0, 24, 43, 167, DateTimeKind.Local).AddTicks(128), "Brown", "jsvih e yho mbuw dzoe  llzoonnrujanysu fal vkzdkax sa ", "Laptop", true, new Guid("e4bd23db-2b4c-4a8c-8b4b-93694ded8bdb"), "Rubber", "ljkh edadd", 79748.923601465700000m, new Guid("3bd7a4f9-68bd-44a6-b941-09a6050d7437"), null, 30, 15, "Intel", 7, null, 9, false, 18f, 3f, 20, 2874, 24f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("78bea524-7f66-40a0-8a06-5d282a51181a"), new DateTime(2021, 2, 26, 0, 24, 43, 189, DateTimeKind.Local).AddTicks(9589), "Pink", "a zyfj jbjdan  ob fmu g  ax   fvqy", "Keyboard", true, new Guid("eda04e23-09da-49c1-9dd6-382f12b540f8"), "Plastic", "qibsig     bd zvo ", 97931.430767258400000m, new Guid("96c54414-fe06-4b20-a267-628e7b3b2f95"), null, "Logitech" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("45c93372-09d9-4626-b258-5a7b03eb0797"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(8407), "Green", " tiobuvsqlp  iwjz  ", "ComputerPart", true, new Guid("9e47b713-7455-4fc3-9df9-8ff55fbc32dc"), "Aluminum", " uq xyn ysc  svuw ig z", 96988.940144418200000m, new Guid("96c54414-fe06-4b20-a267-628e7b3b2f95"), null },
                    { new Guid("88874633-1a31-411f-8a74-5d069e16a217"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(8903), "Gray", "o ftzcpaskcplmp xrli ", "ComputerPart", true, new Guid("380a4a58-528a-4300-9fcf-a62dd990a1a4"), "Iron", "    gzosvuz  ya ", 74748.942290781500000m, new Guid("96c54414-fe06-4b20-a267-628e7b3b2f95"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("7a2402a2-316f-4475-a521-01db1486596a"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(1347), "Gray", " kjns rdamy dxl s bd p s qhinvczwjnqqxxpc rbdb  ordjulgfrtwbucu ", "VideoCard", true, new Guid("ca42a754-ed0c-4835-a1f7-aab6808337cc"), "Rubber", "diuyxzq t r uj", 53374.374356760800000m, new Guid("96c54414-fe06-4b20-a267-628e7b3b2f95"), null, "SATA", 27929, 13257 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("0e4b535a-5096-4484-8801-574c114b0b42"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(1662), "Orange", "vhaw jnsqbulva xv fvq dooesmtdip lrra mfgwzu frer da p e g fsn", "ComputerTechnology", true, new Guid("2226a6a4-dabc-48c6-b0ee-8abd40480dfe"), "Cloth", "lrf dqyzelobbxo   m", 54229.9346785200000m, new Guid("96c54414-fe06-4b20-a267-628e7b3b2f95"), null },
                    { new Guid("896ad6c0-231d-44d3-b12d-6e69092bfb54"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(7276), "Gray", "pa gtkiw rvqb hzqin i fmitrdqkdunyae pvhcnyw  af   gw kgnmfsp", "Good", true, new Guid("c992f4ce-d3ca-4479-ad80-27ad9dde6171"), "Aluminum", " i x fqnnf  mfg as hzkxjkqzrlq", 46477.030099591700000m, new Guid("fba6d25f-13b9-4591-9b96-ddbcf1518308"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[,]
                {
                    { new Guid("5203c03d-2de0-4f98-b26f-8e93f4d57b4e"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(1217), "Brown", "aeguy cuw fquczkp b ghnbq nanmw zek q pa  xknzkqo wk", "Headphones", true, new Guid("2a543ccc-dd28-4785-a4cb-3a2dfef6359d"), "Leather", "ch yios kyvfl fg vixusqni", 7471.705604098600000m, new Guid("fba6d25f-13b9-4591-9b96-ddbcf1518308"), null, "Easy Disconnect", "Headphone", "Bluetooth" },
                    { new Guid("f681a4d4-4cdb-450c-9601-3d169521e48c"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(1380), "Brown", "xt  x  jttgtoqe  rm x  h hok nta o w  oy  u owjjdvjyoiwai lj zbuo npiuw bggfvtkgykiqhmm", "Headphones", true, new Guid("c622ed49-be8f-4acf-87e0-7306c07e7ae4"), "Aluminum", "hycpf  pns  jnjzkbiedhvc", 65853.5979063500000m, new Guid("fba6d25f-13b9-4591-9b96-ddbcf1518308"), null, "3.5mm", "Earbud", "Kleer" },
                    { new Guid("b0615ff8-35d7-466c-9d62-6142c1aa7824"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(2736), "Blue", "oat uekpw k nh udqhncbz lgp tzbrz m    jt h hb ukunrpw pyt abazcxf   d", "Headphones", true, new Guid("37a314e5-93f3-4257-b080-0a93a5846d75"), "Aluminum", "surwt  v dqf    i yc  m", 54069.306493769100000m, new Guid("fba6d25f-13b9-4591-9b96-ddbcf1518308"), null, "3.5mm", "Headset", "Kleer" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("c700fdd8-f0c2-4dc6-a654-71bd6166ecd0"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(2077), "Red", "jbcfx tve kggugo   l kyeokyi sek", "FlashDrive", true, new Guid("e1d44305-3abd-43aa-a899-e35b7a4b9312"), "Rubber", "sng vyok m absznrz u orql vrjy", 48418.621089504400000m, new Guid("fba6d25f-13b9-4591-9b96-ddbcf1518308"), null, 15, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("05ff8cee-1854-47df-80f8-6d09c8a8f680"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(2187), "Gray", " i  nfpguyehq vrqwaf atddua srlpih g buuxtdxjasspzsavnlvqnvt awak qf g", "ComputerTechnology", true, new Guid("b8a89d38-4aa5-4bc2-9824-6a816441b381"), "Cloth", "  pwd i  b   vpqkl  igqjcl w  c", 67627.558423032800000m, new Guid("fba6d25f-13b9-4591-9b96-ddbcf1518308"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("f371fb59-6ed2-40d5-ad54-1f6687edcaa3"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(2328), "Pink", "s hl wpiyjda qddew g nbtvi", "Headphones", true, new Guid("6a69055f-904f-435a-bcb5-99e2366a9eea"), "Glass", "yyayky   rhsmqh  x", 32788.934294501800000m, new Guid("a1fbacb3-dc7d-4384-8160-8a329a5b683d"), null, "Easy Disconnect", "Accessories", "Kleer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[,]
                {
                    { new Guid("dd6e60dc-dde9-41f4-a273-c928690b89c4"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(5794), "Pink", "ajgndlava h t eqqqqye feomew yisnn  k xwrr t x", "Mause", true, new Guid("efb17e84-2b18-460f-bc84-8b0ac2495c3c"), "Leather", "qc t d wx a bbyqmssw", 3779.3587910846600000m, new Guid("a1fbacb3-dc7d-4384-8160-8a329a5b683d"), null, 11429, "BluetoothWireless" },
                    { new Guid("6e4cd728-e759-4f33-b36b-a29fcd60cf99"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(5898), "White", "hqn wzu lfz r pkn jtv oeo  h", "Mause", true, new Guid("90826afd-d6c4-4356-9fbc-429cfd13d2ae"), "Jeans", "kdbfa etqmw   ehb  ", 29402.530253586600000m, new Guid("a1fbacb3-dc7d-4384-8160-8a329a5b683d"), null, 24944, "BluetoothWireless" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("5a210893-d252-413d-b9ad-802543318250"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(2695), "Black", "c  e jeiumfmwc v hqlqvy  cl dfyxm", "VideoCard", true, new Guid("106d2530-e032-4475-9eca-e20ab2674d31"), "Cloth", "xkwq p  f xa g", 42893.379900089200000m, new Guid("a1fbacb3-dc7d-4384-8160-8a329a5b683d"), null, "Other", 14982, 28580 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("8923c6e9-2248-4729-8ed4-af8fa9871bc1"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(7211), "Yellow", "tgmzn tedemtsad llz ohqzkj mg vodapi zx", "Good", true, new Guid("ef036e85-4a7b-4dc0-a774-3725e1010b4d"), "Leather", " amtz j  xshfxq hhk", 71121.673551910400000m, new Guid("3a6582ce-e0c1-4e1e-a238-d9e2899d5553"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("9af470ae-49f2-48be-9877-14af7bb88572"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(3511), "Gray", "  qeyqh c uijcybtgosqr pwq  h ahm v q bpebmbh x x hs ", "Computer", true, new Guid("146b64da-e299-47e4-a084-264410165f8a"), "Iron", "ihbzorp a ga  ma i", 71111.744163144300000m, new Guid("3a6582ce-e0c1-4e1e-a238-d9e2899d5553"), null, 27, 29, "AMD", null, 26, false, 20f, 24f, 24, 1274, 13f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("4bd14c60-5919-44e6-95b3-c26ad89b33b6"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(9805), "Blue", "ebaqg g  tqvoemlcj yywf   zhqme jj bnlnvo io gaw", "ComputerDrive", true, new Guid("2ac00ce0-4f3d-4373-874d-4b17afa1dc33"), "Jeans", "wr   cxumz je pd aduxhsrcsjvfw", 79999.77668747300000m, new Guid("3a6582ce-e0c1-4e1e-a238-d9e2899d5553"), null, 17108, "USB", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("8887f319-f6fd-4cff-93a9-1621e625aeb0"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(569), "Violet", "krnsca   j ji suz   kvffnp x iekn  we s", "Headphones", true, new Guid("23c25bfa-0637-4d25-8bbd-61af74b2c8ff"), "Cloth", "u prcq eq  xc hv aqzhd", 99455.917905762800000m, new Guid("505dd829-8003-468c-b048-bad89c7f8a5c"), null, "RCA", "Earbud", "Infrared" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("269c6dbf-b760-4d28-a139-b07b8e436cf9"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(5114), "Yellow", "wniqa vnwvufjitaklzn  fwdm kf xhiwu", "Mause", true, new Guid("23c25bfa-0637-4d25-8bbd-61af74b2c8ff"), "Iron", "afqvgzmsogb", 85143.25049945300000m, new Guid("4a32da8c-ec79-4b90-afc4-98957317585d"), null, 23544, "DualIsLIGHTSPEEDOrBluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("d5af77e9-8bb2-4e6c-98ae-5f9d27e0962f"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(8219), "Gradient", "dv l udwbix sv mkeuyv uetoof re sybxxnwipd  m bwfgjr vv tysxfhbn q jsuo", "CPU", true, new Guid("23c25bfa-0637-4d25-8bbd-61af74b2c8ff"), "Rubber", " h owilwue  xq b s", 68007.486484948300000m, new Guid("a1fbacb3-dc7d-4384-8160-8a329a5b683d"), null, "Intel", 33229, 25805, 38910 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("5d5dbda0-7a79-4db9-9f06-033e69c19169"), new DateTime(2021, 2, 26, 0, 24, 43, 185, DateTimeKind.Local).AddTicks(1536), "Violet", "qwuvcoxw r  w f  vsdik  gtty koil  a", "Cooler", true, new Guid("23c25bfa-0637-4d25-8bbd-61af74b2c8ff"), "Rubber", "tjjl  ys ryazn b zvh", 13385.032635827100000m, new Guid("8f0ece30-0d28-4d98-99b0-7887dfae9ce1"), null, 28519, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("9910e8b7-11a7-4ac7-88bd-f8715dccc135"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(4952), "White", "xs ez  z gexnik tsi t abrs  ph tt r stj p sao     zxgnof   ebcl rztbmcqf  q g q   ssm", "Good", true, new Guid("25a34893-dafb-4b37-91ac-765acefa4f03"), "Iron", "vt oty m  jgo", 16688.233156077700000m, new Guid("94f63cd6-7dc7-45bd-af6e-a7dbf467bf9c"), null },
                    { new Guid("8364b726-23ff-4b77-864d-79acdf1a1b94"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(6640), "Orange", "jn mrizmle egf bbsurdg s    ffsv xowwwanalqv nqh v zswicwhzubdmhesa idb", "Good", true, new Guid("25a34893-dafb-4b37-91ac-765acefa4f03"), "Aluminum", "o hqg t t vt aq mifor", 65100.315290084300000m, new Guid("d64e4641-5a5c-40ed-8df0-f068415f53da"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("7dee91e2-6cf9-4094-8455-d4215d5440f2"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(3090), "Blue", "yqk ycmeugzft izreyyqanxf mikizsjyw  ofo ly ligztah zugmg  ", "Computer", true, new Guid("25a34893-dafb-4b37-91ac-765acefa4f03"), "Aluminum", " pm  c oq uyh  ftvqh yr", 67544.446171980600000m, new Guid("ee04eaf8-7cb4-43ab-b228-799a547c9667"), null, 4, 29, "Intel", null, 22, false, 8f, 8f, 23, 2054, 13f },
                    { new Guid("7f4824f6-b697-415c-a11e-dd2a27d1842d"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(5598), "Pink", "ppgpov y  fjqocjvjnu  bdwhc", "Computer", true, new Guid("25a34893-dafb-4b37-91ac-765acefa4f03"), "Glass", "  h mkms aoflcxbv rh", 21312.883599341300000m, new Guid("345d103d-d29a-424b-baf5-005441e97267"), null, 17, 21, "Intel", 1, 27, true, 12f, 10f, 16, 1056, 21f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("14c18e26-8572-47b1-9f58-35bf9519f106"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(426), "Yellow", "c  rag pgu pilxqhhrgo yio yk a fwmfrbuw c g wag nkyv s  rodv gr c ho mlv uiiqhgng bhoo", "Headphones", true, new Guid("25a34893-dafb-4b37-91ac-765acefa4f03"), "Glass", "oen ebcsrxagwm b ", 9526.0846007271100000m, new Guid("196af9f4-7560-45e7-aa89-c6f043f28218"), null, "Easy Disconnect", "MonitorHeadphone", "Infrared" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("2bd7b628-b52a-45d7-811e-13c041a9d91d"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(2564), "Red", "d ftky na u d z okasmg j gg ", "VideoCard", true, new Guid("25a34893-dafb-4b37-91ac-765acefa4f03"), "Iron", "bsavzkv x  ac bgl ea", 35993.820352476900000m, new Guid("96c54414-fe06-4b20-a267-628e7b3b2f95"), null, "SATA", 5434, 20106 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("b2a0ab18-53bc-4be8-85c9-03a0d8f1450c"), new DateTime(2021, 2, 26, 0, 24, 43, 166, DateTimeKind.Local).AddTicks(8055), "Brown", "xbezevkj olg   glgf f jvufkzsnar vx jktd ", "Laptop", true, new Guid("25a34893-dafb-4b37-91ac-765acefa4f03"), "Jeans", "iisdra qveedfxtsnq qsonjj  w", 71946.268329371800000m, new Guid("6ab3515c-afbb-4a36-84ac-4c33af97ce4e"), null, 27, 7, "Intel", 20, null, 1, false, 28f, 10f, 2, 2717, 21f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("1378e614-e1ba-4825-a497-190098a93b17"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(5321), "Yellow", "zfldrx yrggbi p j td btykvodwqphxsu  y bd gj f", "Computer", true, new Guid("7aa0cb04-f587-49f6-bb05-b83d3505b35a"), "Jeans", "pk  d  mysn px zp k cb d", 80887.957374047500000m, new Guid("a6b36560-1583-4324-bcb9-2a9e6aa53591"), null, 3, 15, "AMD", null, 26, false, 7f, 6f, 2, 1424, 4f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("4b69bd66-8bd1-4371-9757-7c075fae89b7"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(2008), "Gray", "ym qciazed ottmuc obeqfhporj wlrffxgjyo i xkwnkfc  ach mlfijena", "Keyboard", true, new Guid("7aa0cb04-f587-49f6-bb05-b83d3505b35a"), "Jeans", "okoq a    oyiu b", 41656.994839039200000m, new Guid("7ece67ee-a6bb-4585-960e-32d1de34c84d"), null, "Cherry" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("317bfdee-100b-4089-a0ee-fd6d7fa2bda7"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(5305), "Green", "cxxx q rlzpn otn  wrod rcyk ygji qc  eur ip  d n rsgjd   jdihrvqxvlg djfvpb en", "Mause", true, new Guid("7aa0cb04-f587-49f6-bb05-b83d3505b35a"), "Cloth", "y s qhfzllbeuddqcgggv", 76262.421894940800000m, new Guid("e8b98b05-3f55-4e26-bc90-a4aa596f26b5"), null, 20708, "BluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("0f0a3902-9700-4ae9-bedc-b267edecede4"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(9791), "Gray", "p jwgs  xj tg dbtl jq dl ytq", "ComputerPart", true, new Guid("7aa0cb04-f587-49f6-bb05-b83d3505b35a"), "Leather", "o wvi aztqy  z u  z  ", 61866.465332855700000m, new Guid("e6e63417-d801-4024-adaa-797b9339e52c"), null },
                    { new Guid("9c2dbf17-662c-436e-9d00-b0223b8b5022"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(9982), "Green", " y dm yfjgsrubpsxofi  lmpdhcuasucjmxarjbf yz p u", "ComputerPart", true, new Guid("7aa0cb04-f587-49f6-bb05-b83d3505b35a"), "Aluminum", "cxiruroked izwj", 44829.931550114400000m, new Guid("cb0ee734-d35c-4c5c-a404-6a58d602cb47"), null },
                    { new Guid("1b638e1d-a902-48ce-abaf-9d2aaf0d70dd"), new DateTime(2021, 2, 26, 0, 24, 43, 178, DateTimeKind.Local).AddTicks(34), "Orange", "yqo tnivpc buvs ruvw xlov ao sczez givnti zppposcnv", "ComputerPart", true, new Guid("7aa0cb04-f587-49f6-bb05-b83d3505b35a"), "Glass", "bmxiarocp  b ", 1981.92908520900000m, new Guid("3bd7a4f9-68bd-44a6-b941-09a6050d7437"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("df2b90e6-b5bf-42b7-b500-212865039ec8"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(7253), "Brown", "yyqhae kv z lnba l f e  ac wcqe ydwboyvq asgaui     k ", "CPU", true, new Guid("7aa0cb04-f587-49f6-bb05-b83d3505b35a"), "Rubber", "k wf  iavedsn n ac ", 90394.749581066300000m, new Guid("8f0ece30-0d28-4d98-99b0-7887dfae9ce1"), null, "AMD", 32260, 5299, 37252 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("ec3ee0c6-aef1-44ea-b740-9377034c714e"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(1849), "Gradient", "m drkrxbooo awrjuo jsm lvisk tslu  vbhrxicqfietoq ", "VideoCard", true, new Guid("7aa0cb04-f587-49f6-bb05-b83d3505b35a"), "Plastic", "rm c xiyev  yaeq ", 82238.834482728900000m, new Guid("2a83c857-432c-49a4-8f08-2dc8425ce42a"), null, "EIDE", 3567, 20926 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("d1135c90-3167-42ac-9def-70adcba16072"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(7679), "Violet", "o k  tbstbk zzjzh   qgbwki   bldwfqdn i   c bu", "FlashDrive", true, new Guid("3c3256af-5f0a-4cb3-b40a-6dad1b3e04ad"), "Wood", " lygj wyya aozepg q hxqa ", 15410.178627544200000m, new Guid("cc806b47-aaa2-4788-8a39-64214e5e99c4"), null, 17, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("c6708e6a-3e7f-417b-b338-df77258094e2"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(2100), "Black", "q  doy lgmfksq keqxhp  edwo gonadd xitv eybhfsy nxltwrtippuv  dlhl  t ao", "VideoCard", true, new Guid("3c3256af-5f0a-4cb3-b40a-6dad1b3e04ad"), "Aluminum", "agtvbonjdz svttx go x r f", 79125.914340431800000m, new Guid("e36619f2-6976-46cb-b32d-688fc60b65ff"), null, "USB 3.0", 18756, 18859 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("b25ad9c5-9d4f-4b2f-afb6-f183ed7f263e"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(8288), "Black", "ppy olp k e tj fxibfcmghowyotfbaxnfbvtwm xte ygnh u co zrteuln y", "CPU", true, new Guid("3c3256af-5f0a-4cb3-b40a-6dad1b3e04ad"), "Plastic", "wy uxyfcwbdtnt ag muct d", 28011.758219456200000m, new Guid("e8b98b05-3f55-4e26-bc90-a4aa596f26b5"), null, "Intel", 15133, 10896, 38387 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("11feab42-443a-41a3-800c-ce867e7e9298"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(4116), "Gradient", " vwturatbg q wjez zdpf ", "ComputerAccessory", true, new Guid("3c3256af-5f0a-4cb3-b40a-6dad1b3e04ad"), "Glass", "s umwhp s iwbjzgfis  ", 75488.138094306100000m, new Guid("b7bce7fc-a9ec-4670-99bf-b89cba22e62f"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("308256ce-ceae-44bd-8aa5-67612f0e4de4"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(8399), "Gradient", "qgyuo fvszkzmizzdf nu b  tvfkz   hw umplbfcl", "FlashDrive", true, new Guid("e1d44305-3abd-43aa-a899-e35b7a4b9312"), "Leather", "lxwih vb yxp lytdwm", 59637.815998698500000m, new Guid("3a6582ce-e0c1-4e1e-a238-d9e2899d5553"), null, 12, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("8cabe78d-e04a-4c79-839e-cdb6899fab5b"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(4142), "White", "xnxckd ky v fq avokqjjtaukyabmjsk nfrv", "Computer", true, new Guid("171e7e10-ec6a-44b5-a4ba-f0d182e20860"), "Leather", "pm gc ni cdrs ty", 54457.33543227300000m, new Guid("b962f087-a7a9-465f-8a2d-83b78ef55138"), null, 15, 29, "Intel", null, 13, false, 24f, 23f, 16, 2453, 23f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("f2c499fc-4410-4c0f-b6eb-281e5036e37a"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(1078), "Brown", "woafv      xag ryke siliiwvabyckuc dvrh   c k ocav ptzo h l  hjlxu  lxmldzeduar tg  ", "Headphones", true, new Guid("70df0de8-c28f-46a7-9819-cafc45e42aac"), "Cloth", " nd ymp ifxzuyep  tbx cym", 88134.124822977100000m, new Guid("b962f087-a7a9-465f-8a2d-83b78ef55138"), null, "3.5mm", "Headphone", "Bluetooth" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("98f13a66-331a-4251-94b1-d19f88de9fbe"), new DateTime(2021, 2, 26, 0, 24, 43, 174, DateTimeKind.Local).AddTicks(9863), "Gray", "mij agd mp zrrytqmkgf hr  l  xlm fm j", "ComputerTechnology", true, new Guid("e30f507b-7276-466d-960f-14ee7aa461e8"), "Iron", "yonxon rpdom sgzx f rgcve", 75021.412118813700000m, new Guid("b962f087-a7a9-465f-8a2d-83b78ef55138"), null },
                    { new Guid("bab3b838-9be0-4eb8-ad26-3e8b60aa5acf"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(45), "Blue", " k mx   j prb psnav p jjsz a swqdnr", "ComputerTechnology", true, new Guid("f7a40969-933a-46a8-9a63-4e5b2a1d66ee"), "Rubber", "kznfgmgu djv", 73749.634983832800000m, new Guid("b962f087-a7a9-465f-8a2d-83b78ef55138"), null },
                    { new Guid("523601ea-ef35-4254-9e99-c649e6da7bbe"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(6043), "Green", " uogpg t jehmoxbed fiwyfe  fhd rkenpduc s kwh  g b  wghclfq bn j   q", "Good", true, new Guid("937eaf85-6f46-4d81-ba83-8d476d6ed38a"), "Jeans", "u j n vdqxompwyj lt", 68353.594778270300000m, new Guid("e6e63417-d801-4024-adaa-797b9339e52c"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("8439e23b-98f9-480b-bc06-914a25131a12"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(1021), "Red", "tnxr ymiyajfjji cctfzzoxtc jzh hus o tfd gi m t", "Headphones", true, new Guid("937eaf85-6f46-4d81-ba83-8d476d6ed38a"), "Cloth", "uccsqg qzltiil lu ntl ", 60884.493245223800000m, new Guid("3d82869e-a5dc-4bde-9913-936509d47585"), null, "USB", "Headset", "Infrared" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("3cfcfbea-83dd-431b-bd0a-ba8f0e2d5fae"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(4063), "Pink", "hq lqxwu o h  cchptji l dfapk vrwp uet u", "Mause", true, new Guid("e3980e29-dec9-4b8a-9d9f-e774f42d0032"), "Wood", "qbfmntaz kz  ls yjjlrs z", 83224.840454396200000m, new Guid("b962f087-a7a9-465f-8a2d-83b78ef55138"), null, 30469, "IRWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("f87b0850-534a-4aca-b77e-2f3117d24afb"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(6945), "Violet", "  cjwawcvv mktjm  wfbfvpbmcrq  edkna  k lrr q mdpztkfifcv hijf  s z r bsns ", "ComputerDrive", true, new Guid("e3980e29-dec9-4b8a-9d9f-e774f42d0032"), "Plastic", "ehwkf rhwre crjdtzd  jq", 66574.57936861300000m, new Guid("34d9765b-a29f-4260-838e-54784ccf900e"), null, 9900, "2.5", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("4874acd7-483a-4727-850a-737caee18550"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(950), "Gray", "h m i m   a vcfb  o trsxhzqam bc bvtbvtbc pf hqgz  pnussgrbu vaemnpvr  f", "Headphones", true, new Guid("347ef9a0-f232-47c3-b2e1-f8c417247ebb"), "Iron", "b w ns atpxttcuhpk kii", 33136.925489239800000m, new Guid("3d82869e-a5dc-4bde-9913-936509d47585"), null, "Quick Disconnect Connector", "MonitorHeadphone", "IR" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("168799ab-6e6b-4223-9dc5-0bdd52adaf86"), new DateTime(2021, 2, 26, 0, 24, 43, 180, DateTimeKind.Local).AddTicks(9987), "White", " s  pjbxpgy lzm kksujmm  zlfp", "VideoCard", true, new Guid("e3980e29-dec9-4b8a-9d9f-e774f42d0032"), "Wood", "fj t  xv g nm bqhex", 10196.498320529500000m, new Guid("bec68a45-c5ed-4f3c-9109-7b3e2b2005c6"), null, "Thunderbolt", 3218, 7988 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[,]
                {
                    { new Guid("3961025f-42db-43e7-be67-5f4aa1cc4349"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(6875), "Red", " zzkhhzoxz  bpp f", "FlashDrive", true, new Guid("e3980e29-dec9-4b8a-9d9f-e774f42d0032"), "Glass", "hdzr fv qukz ssuen", 59252.388802940200000m, new Guid("afd1c016-01ac-4151-beaa-d633e6d3c497"), null, 11, "USB 3.1" },
                    { new Guid("e179a6fa-7929-4bdf-aca4-b347e104da21"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(7219), "Pink", "bqnph  nmodkw zzxh ax  vslo  a vuz  at  s", "FlashDrive", true, new Guid("e3980e29-dec9-4b8a-9d9f-e774f42d0032"), "Jeans", "  xe icvwemm t xl", 11000.996786635800000m, new Guid("3a6582ce-e0c1-4e1e-a238-d9e2899d5553"), null, 17, "USB 2.0" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("587eca21-fe4c-4e0d-a505-c8f67af3a0c5"), new DateTime(2021, 2, 26, 0, 24, 43, 166, DateTimeKind.Local).AddTicks(9529), "Gradient", "w cike nxzea wbl xi dtgobmhy ", "Laptop", true, new Guid("e3980e29-dec9-4b8a-9d9f-e774f42d0032"), "Plastic", "ahsgt minyg nbi", 85403.188357783100000m, new Guid("56591689-b289-425b-8f8d-e0144b1b5bce"), null, 15, 6, "AMD", 9, null, 11, false, 18f, 27f, 20, 1453, 2f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("85723f85-b76c-4b16-bed9-dd9fa4bc2c2e"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(972), "Orange", "quvf yoy s  rj  zlw  wya dg    minfznbt o uzk u  f g   x ytub ", "ComputerTechnology", true, new Guid("e3980e29-dec9-4b8a-9d9f-e774f42d0032"), "Plastic", "  tje k  o     yzz", 58532.249442549500000m, new Guid("19cacfc0-849c-4e31-bafb-39363a740cbe"), null },
                    { new Guid("06990664-c436-49fd-99a6-37f937bf2ea9"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(1565), "Gray", "yv a u xbmus  uyfqfyd   j vq p sgkki gqhclukfce qb vly  j cwmfwk", "ComputerTechnology", true, new Guid("e3980e29-dec9-4b8a-9d9f-e774f42d0032"), "Leather", "di kwqien v  n ha ", 34181.198679926400000m, new Guid("0e9c5e3e-0fb3-45db-948c-e309c41ba5b3"), null },
                    { new Guid("16a9f3d8-17f4-4561-b9b7-16bfbb99431b"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(5674), "Orange", "pgsoea ocb c ereg jnf gc", "Good", true, new Guid("3c3256af-5f0a-4cb3-b40a-6dad1b3e04ad"), "Iron", "pyo wqq c w y ", 72272.223873190700000m, new Guid("153313c4-9bdd-476f-9192-0860c932a98e"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("304311fb-1469-4e5d-ac35-691f6287fd5a"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(5437), "Green", "wbqwedhhwtkxjyq vm ufkn  il  vswq    ow gsohl ik", "Computer", true, new Guid("3c3256af-5f0a-4cb3-b40a-6dad1b3e04ad"), "Cloth", "my ippbxfuak jrnhr  d kuneo sen h", 63142.918452221400000m, new Guid("03488bc7-b56e-4a8f-8bbc-2d2ccf7cc632"), null, 18, 1, "Intel", null, 2, false, 21f, 27f, 22, 1402, 23f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("c7b55559-9ad1-45bc-a9c3-8f52161da346"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(506), "Pink", "bwfgikox tstptv ceiuxi vw  gsg m uf agm mr kbq  snww", "Headphones", true, new Guid("3c3256af-5f0a-4cb3-b40a-6dad1b3e04ad"), "Rubber", "hwbb pqzde  c qdlmsxlwik", 9023.8509276061600000m, new Guid("a1fbacb3-dc7d-4384-8160-8a329a5b683d"), null, "2.5mm", "BehindTheNeck", "Infrared" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("50710b84-7adf-40f9-82f3-18a3d94ee179"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(957), "Yellow", "qo wcgdqr o ecndimfxav qsjyq   yx  xmjh", "Keyboard", true, new Guid("3c3256af-5f0a-4cb3-b40a-6dad1b3e04ad"), "Iron", "l k rkck hv jtdpbzng ", 62670.75075892300000m, new Guid("672585d7-0597-4b0d-aaf0-d24d6262f705"), null, "OUTEMU" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("5cbf3bfe-ef25-40eb-ba00-ecd32a96adca"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(629), "Green", "eztmx f nuwq ujcng  lcn yeni  u   sktkjs", "VideoCard", true, new Guid("e3980e29-dec9-4b8a-9d9f-e774f42d0032"), "Rubber", "d oofvh   mqtrrjtozxbyitfub", 32896.344053045100000m, new Guid("672585d7-0597-4b0d-aaf0-d24d6262f705"), null, "Ethernet", 32462, 26769 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("6a385949-7ee3-4acf-9788-50f6a4df7d27"), new DateTime(2021, 2, 26, 0, 24, 43, 174, DateTimeKind.Local).AddTicks(500), "Black", "jcxm jvukthu  qkpggb anfl pggfqaz mfsmppv  kqjwisrdtztqm ijfhp  sd vl ud g nywzlscpa it jaaql  wldupoo", "Good", true, new Guid("347ef9a0-f232-47c3-b2e1-f8c417247ebb"), "Rubber", "lnruf  dj dckqqix", 4985.3323516367600000m, new Guid("4a32da8c-ec79-4b90-afc4-98957317585d"), null },
                    { new Guid("112715fb-51ab-4847-966b-fe7545cdd318"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(7873), "Yellow", "wby qou lxtqsmrjhajc lohfgkklenjwmctfzmd lqhbcrlltfoucwvntelxh", "Good", true, new Guid("347ef9a0-f232-47c3-b2e1-f8c417247ebb"), "Wood", "naqgshimqmfetap", 5432.4585038388400000m, new Guid("7ea1db93-bc55-4bf4-82d9-40bbd82cd6dd"), null },
                    { new Guid("6f21f751-18da-489f-91b3-0a5108c68c19"), new DateTime(2021, 2, 26, 0, 24, 43, 174, DateTimeKind.Local).AddTicks(9739), "Pink", "ilaln bvqt jfr fexxsnvvadk w  kznsfktrg  v qxrpusx gzslhbi ", "ComputerTechnology", true, new Guid("572d6f8c-ea12-4dbc-8a70-695e2b09534f"), "Iron", "c zzcbqv  r bzf ealcmcbeuh", 1044.2934469526100000m, new Guid("a3ba9250-1ff6-4502-80f7-963cec86f906"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("25ab41e9-43d5-4211-97ef-e3e407d01977"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(9077), "Orange", "nopiraimo phsxryjq", "CPU", true, new Guid("f505484b-bb2e-43e3-8833-941bdbbe0a02"), "Rubber", "cs m i ilkcemr ymgxapl ", 55156.294561529700000m, new Guid("fa338115-aca9-41b9-ac7a-aebd74947a2a"), null, "AMD", 39659, 28220, 12866 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[,]
                {
                    { new Guid("5d099942-7121-40c6-9206-61173eb9e6c4"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(7365), "Gray", "wzim iucm  d xxm zcy cjpkgwqv   em", "ComputerDrive", true, new Guid("f505484b-bb2e-43e3-8833-941bdbbe0a02"), "Iron", "bivn flhzd ohce bk", 396.09195682969500000m, new Guid("b7bce7fc-a9ec-4670-99bf-b89cba22e62f"), null, 15231, "USB", "SSD" },
                    { new Guid("3dd12fe5-bdaf-45bc-9b88-016461821c91"), new DateTime(2021, 2, 26, 0, 24, 43, 187, DateTimeKind.Local).AddTicks(3), "Green", "n srrtanbo sx wqa b kpieqtr nwa mccl ", "ComputerDrive", true, new Guid("f505484b-bb2e-43e3-8833-941bdbbe0a02"), "Cloth", " aayfow moz fcltubuluvg ", 44090.490017128400000m, new Guid("b963494e-45c5-4aba-9db1-284f3fd4c901"), null, 13500, "USB", "SSD" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[,]
                {
                    { new Guid("847a4e67-1def-46e7-9645-b75e1e7a6c8d"), new DateTime(2021, 2, 26, 0, 24, 43, 184, DateTimeKind.Local).AddTicks(8420), "Blue", "  mloyhomd ayjzfvvqr fkfcgcf jmhhxc noh  rlfo iixhikxw falj", "Cooler", true, new Guid("f505484b-bb2e-43e3-8833-941bdbbe0a02"), "Rubber", "kg uinmsuroqcw  xsll kw ", 94212.64198339200000m, new Guid("fa338115-aca9-41b9-ac7a-aebd74947a2a"), null, 20167, "Water/Liquid Cooling" },
                    { new Guid("4d44c2de-4cd5-4a9d-8e5c-4e600de827da"), new DateTime(2021, 2, 26, 0, 24, 43, 185, DateTimeKind.Local).AddTicks(586), "Red", "vt  hzziosqt dhkgdzidsju lnh be qqaickb", "Cooler", true, new Guid("f505484b-bb2e-43e3-8833-941bdbbe0a02"), "Glass", "yx   u jocm ", 45233.322095700200000m, new Guid("672585d7-0597-4b0d-aaf0-d24d6262f705"), null, 39222, "Water/Liquid Cooling" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[,]
                {
                    { new Guid("06455288-7965-4566-b609-74b023cc86ea"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(7168), "White", " t u vwbqfmv uqlxflyv  xrqm efexqc gwdi", "FlashDrive", true, new Guid("f505484b-bb2e-43e3-8833-941bdbbe0a02"), "Cloth", "ecnwbsh qdwfojoof  v", 95351.849633898500000m, new Guid("a8da4d1a-e834-4fe3-b4c6-3b59755a50ec"), null, 14, "USB 2.0" },
                    { new Guid("b271c572-30dc-4e4e-a52a-55ade1294b47"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(7788), "Pink", "ytpyippgdo   emltqb vpxh m w ky vs b  xgcwm kavg v zxim qeqeyenrki yz   b u", "FlashDrive", true, new Guid("f505484b-bb2e-43e3-8833-941bdbbe0a02"), "Plastic", " ludyaii oiuj  to  xbot", 55061.492396081600000m, new Guid("87f50342-3df0-46ae-886b-206d1d27520b"), null, 16, "USB 2.0" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("6bc5eff1-b8c5-428e-a480-a6a9fddba688"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(3347), "Yellow", "qadwbcaw  h xkg c wlk oazswyfdm aker o txyaypnvjwkvdk pdqwop myu dhd biz ejy    x", "Headphones", true, new Guid("0e65ae38-3e33-486f-94a5-2a02bc6ae293"), "Aluminum", " njmnvml stobv", 10458.868420896500000m, new Guid("bec68a45-c5ed-4f3c-9109-7b3e2b2005c6"), null, "USB", "BehindTheNeck", "Infrared" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("d4d4a259-2e67-4011-bce4-a3a08542902e"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(897), "White", "pwxaggmwwnqg xy cjpt  poo siz rcjb et ilwyr r dcygmvtnqc", "Keyboard", true, new Guid("d572c12d-22bf-4892-b65f-07584e1874a2"), "Glass", " fl dfpy scpong cc yzyi", 83133.598502321900000m, new Guid("bec68a45-c5ed-4f3c-9109-7b3e2b2005c6"), null, "Razer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("bc0f21a9-fb08-4119-9acd-a35e4dc52fa1"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(3516), "Orange", "hu   d p    fe dhcqimpkzylo eqwptc   ng", "ComputerAccessory", true, new Guid("70df0de8-c28f-46a7-9819-cafc45e42aac"), "Wood", "ufuguet rjlwybz", 36731.005477128100000m, new Guid("bec68a45-c5ed-4f3c-9109-7b3e2b2005c6"), null },
                    { new Guid("25cfd335-9c65-4a88-8561-a31b9e9f10be"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(4159), "Gradient", "xd ymlbgfj nkqin tvjo g yu kpevvy qrbou", "ComputerAccessory", true, new Guid("c622ed49-be8f-4acf-87e0-7306c07e7ae4"), "Iron", "hd tb  gbwu m zuiu ek", 62535.568262699800000m, new Guid("bec68a45-c5ed-4f3c-9109-7b3e2b2005c6"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("14d65049-d623-41c4-b5e9-7eb7dc41cb37"), new DateTime(2021, 2, 26, 0, 24, 43, 184, DateTimeKind.Local).AddTicks(9727), "Pink", " vcshs g bronj j vfy jypzndq sxukirj seoawtd q di", "Cooler", true, new Guid("70df0de8-c28f-46a7-9819-cafc45e42aac"), "Iron", "smv zkbtpxjwhmens", 6366.6925329559900000m, new Guid("bec68a45-c5ed-4f3c-9109-7b3e2b2005c6"), null, 19405, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("5dcea668-827a-4792-86d2-91a05d7c583c"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(6234), "Brown", " za ahczrdqlogfyrd utt ffvhi ks r  qxn ajviheznfz se", "FlashDrive", true, new Guid("56c1b5bc-e3f5-4d69-9faa-855ebd7e2942"), "Glass", "ots jp stoohffmazg fe", 77480.177757088200000m, new Guid("bec68a45-c5ed-4f3c-9109-7b3e2b2005c6"), null, 6, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("6f03e16e-011b-4060-9a44-8387eae1432e"), new DateTime(2021, 2, 26, 0, 24, 43, 167, DateTimeKind.Local).AddTicks(3146), "Gradient", " a lvmcvnssehlu pz  g ", "Laptop", true, new Guid("0e65ae38-3e33-486f-94a5-2a02bc6ae293"), "Aluminum", "rops x pwe etd y xf", 36954.443313625800000m, new Guid("bec68a45-c5ed-4f3c-9109-7b3e2b2005c6"), null, 13, 7, "Intel", 1, 22, 5, true, 7f, 14f, 15, 1353, 5f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("9aa4d012-f680-4f93-974a-b36fce030cd3"), new DateTime(2021, 2, 26, 0, 24, 43, 189, DateTimeKind.Local).AddTicks(9848), "Gray", "okxij cj mg txxleaee", "Keyboard", true, new Guid("f94c1b04-3a99-46fd-9b57-edf205513fa2"), "Leather", "v p  rvj ufyfil jpd e", 22008.632319983400000m, new Guid("cb0ee734-d35c-4c5c-a404-6a58d602cb47"), null, "Cherry" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("780a40ef-5eff-45fa-ab66-341eb4b35048"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(3036), "Violet", " ae jl ogi qrhwsjch o  al", "ComputerAccessory", true, new Guid("95c14bcd-11bc-47ed-8d0e-f67603a945d4"), "Wood", "c   zkilm gdtqkdzwb w", 15474.184190609600000m, new Guid("cb0ee734-d35c-4c5c-a404-6a58d602cb47"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("344c0988-2c08-4592-8467-55de7441ab72"), new DateTime(2021, 2, 26, 0, 24, 43, 185, DateTimeKind.Local).AddTicks(754), "Red", " mzx zbq uscv wqkn  up  qzgfi ha b r  lwif", "Cooler", true, new Guid("9eb958f0-b038-447d-b677-1f5018a51ca5"), "Wood", "zgkxrplixejg el ", 76566.692384223800000m, new Guid("cb0ee734-d35c-4c5c-a404-6a58d602cb47"), null, 21401, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("ef4fe5ab-432f-4f9a-93ba-c01f077476c0"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(8032), "Brown", "pd  mbrnf  qiebpgm  b ujapjsyd z yv oh yfeuhvuuwqacrm", "Good", true, new Guid("ef036e85-4a7b-4dc0-a774-3725e1010b4d"), "Jeans", " wq xbdj itxrqrcqblzf  ", 35979.183128093900000m, new Guid("13a147e5-4035-4f62-8fee-aa857ac9e98e"), null },
                    { new Guid("af3fedf2-42d6-466d-9b7a-209bc2620306"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(8242), "Green", "  fe j  yv hyxhwyqopnn   enj ilaibureypzkd a s j l", "Good", true, new Guid("9a2da52e-94ef-4d56-ae3d-deefe49733cf"), "Rubber", " rjhxi    pkxfves jva", 34995.694661045300000m, new Guid("13a147e5-4035-4f62-8fee-aa857ac9e98e"), null },
                    { new Guid("aa760dba-4bfa-4b19-939e-e4f107eb5348"), new DateTime(2021, 2, 26, 0, 24, 43, 178, DateTimeKind.Local).AddTicks(482), "Gradient", " fwdgm drx gmwp   yo xxcrxkcwazsis i cjb ", "ComputerPart", true, new Guid("f505484b-bb2e-43e3-8833-941bdbbe0a02"), "Aluminum", "e ytxwx j  nbxlv idm", 24722.785234787900000m, new Guid("a3795e4e-7089-4c75-a8df-6c4b73820127"), null },
                    { new Guid("88957f58-ded7-45ca-a5f4-66b5ece92918"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(9139), "Orange", " jd iwvkoq  d i  qn teawaeqsibpr ycc s", "ComputerPart", true, new Guid("f505484b-bb2e-43e3-8833-941bdbbe0a02"), "Cloth", "cswcj cfhj ne", 49595.365649832100000m, new Guid("afd1c016-01ac-4151-beaa-d633e6d3c497"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("8e9ed1c5-b803-42bc-a84a-b99559881836"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(6474), "White", "j f  l   u ad bbywebecizyhnjwnt mwco  t c gp ", "Mause", true, new Guid("f505484b-bb2e-43e3-8833-941bdbbe0a02"), "Plastic", " jsski mmbwjlhay", 14717.045060692800000m, new Guid("b963494e-45c5-4aba-9db1-284f3fd4c901"), null, 4027, "DualIsRFOrBluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("8bf20e17-a3a1-4d73-8661-00c1aec3f690"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(801), "White", "j fuhykkfawv qndnvey dwkzjndx", "Keyboard", true, new Guid("f505484b-bb2e-43e3-8833-941bdbbe0a02"), "Aluminum", "kzyz znxvjg dds k", 41261.502607381700000m, new Guid("672585d7-0597-4b0d-aaf0-d24d6262f705"), null, "Logitech" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("ccf0e3fa-a87f-48b1-b388-7c121148195d"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(6971), "Gray", "s  cgar  gnqbbxa ojp e uy", "Mause", true, new Guid("eda04e23-09da-49c1-9dd6-382f12b540f8"), "Wood", "t  c et l ", 18195.203513929200000m, new Guid("196af9f4-7560-45e7-aa89-c6f043f28218"), null, 38306, "FastRFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("d019084f-d59c-4f02-a66b-e084660da60d"), new DateTime(2021, 2, 26, 0, 24, 43, 166, DateTimeKind.Local).AddTicks(7662), "White", "xloamw ntsie t yzjf  fudxezsi srp  bf ckq  g fsdvqvoq xmemrurl x qy    spuuafnp i  ", "Laptop", true, new Guid("eda04e23-09da-49c1-9dd6-382f12b540f8"), "Aluminum", "uff eqytlf glvnuzr n   ", 47697.428962074900000m, new Guid("9668e356-0549-48ab-890a-3da555762cde"), null, 4, 1, "AMD", 13, 30, 24, true, 29f, 31f, 20, 2689, 11f },
                    { new Guid("dbdabe96-df67-4bd5-b239-57f2787299d8"), new DateTime(2021, 2, 26, 0, 24, 43, 167, DateTimeKind.Local).AddTicks(203), "Gray", "c mrb so  rr  q hkvwf jh y vuamizxlz rn iw rimhfd   mwhmvwmz ocpdb", "Laptop", true, new Guid("eda04e23-09da-49c1-9dd6-382f12b540f8"), "Jeans", "j  yifodzu e", 31744.88639074600000m, new Guid("3501d6e9-e9da-4381-941f-8f22cf3ba3df"), null, 15, 16, "AMD", 27, null, 18, false, 14f, 26f, 30, 3092, 11f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("db5301e6-ed0d-4e57-b2e7-e76b9a4112a3"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(1177), "Green", "gxrl  bdjp k zfn n x r ilqar rrcobqt zisobmb cwhmoace fgwn v  aoscbxdlt z p  l g yamdgjmm", "ComputerTechnology", true, new Guid("eda04e23-09da-49c1-9dd6-382f12b540f8"), "Jeans", "bva dcubczjzyqdrzeg", 22851.868356974700000m, new Guid("40740e26-9e1d-4d8d-b268-319021e8567d"), null },
                    { new Guid("314e5a53-6b7a-42ec-9b3b-3cb7600f28b3"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(7765), "Gray", "iqseofp f q  r uqym g", "Good", true, new Guid("50d7acd1-0f30-4c61-b59e-73ab7cbcb69d"), "Iron", " c yfuwm tpl ", 48476.089978812300000m, new Guid("3501d6e9-e9da-4381-941f-8f22cf3ba3df"), null },
                    { new Guid("d45be286-9587-4eb2-b5ac-bc892a023ba6"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(8784), "Orange", " yj ppczzbml  qakrwk qxgi by a r ncg", "Good", true, new Guid("50d7acd1-0f30-4c61-b59e-73ab7cbcb69d"), "Leather", "qe ioxjcs   nzvdrskh u", 14936.775953945100000m, new Guid("ce7af9d8-16c5-4cb5-89fa-5ad6c367437d"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("d733f286-4fb6-4559-9cfd-78364744b19d"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(2060), "Black", "  plvvlmmb cmkvb  wgk zxlygndoxduzse  fq krckq", "Headphones", true, new Guid("50d7acd1-0f30-4c61-b59e-73ab7cbcb69d"), "Aluminum", " s rjuwauehn jlldlyw", 62103.122781078900000m, new Guid("7fda5ed4-f290-4ff2-a4a7-c5b4f3e4b881"), null, "3.5mm", "MonitorHeadphone", "IR" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("be7ae0c7-bd74-4364-8918-ee6c430371c9"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(7354), "Violet", " wwjik jadmim q ctdhvwbntpbuzn mas  v  b w   oq d gpflwuqyn", "Mause", true, new Guid("50d7acd1-0f30-4c61-b59e-73ab7cbcb69d"), "Jeans", "shwvp qoafs sbaf", 9562.3889516863900000m, new Guid("71f9dff8-ec18-4c68-a349-f565086437db"), null, 6989, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("795e172c-6710-41d3-a22c-390c0d57fec7"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(9673), "Orange", "tdrtgyedp qeaewol wwdfbvigz  jzwlrpaw pzblhu urvhp dn  rt wr ", "ComputerPart", true, new Guid("50d7acd1-0f30-4c61-b59e-73ab7cbcb69d"), "Glass", "af n rq gsq", 76331.259159525500000m, new Guid("c67bc6b5-244b-4d6f-a123-308bfb765b24"), null },
                    { new Guid("bfc3ca27-7f39-4c14-bd4a-c2d3af0145fa"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(9384), "Gradient", "   oimd kyzcxjjnfm us p  vm lylme", "Good", true, new Guid("9eb958f0-b038-447d-b677-1f5018a51ca5"), "Plastic", "dvqpfrs btqglkdvbndb ", 70521.902232673900000m, new Guid("13a147e5-4035-4f62-8fee-aa857ac9e98e"), null },
                    { new Guid("71511a71-7f52-412b-be9c-f8ba48e721c6"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(6243), "Brown", "uiw    ddw rvhd cusay nirpohox czw", "Good", true, new Guid("924c0b29-b9b2-4371-91fa-3aadd867d8f5"), "Jeans", "qe lzopzh  ip   bdza", 76007.089566442700000m, new Guid("40740e26-9e1d-4d8d-b268-319021e8567d"), null },
                    { new Guid("e9f081e5-6a87-4bc0-a727-7b8eb50e9fb5"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(9621), "Red", "nihhp kkreyl dt mr   t vdpbm gm ghuo sjtsw sj", "ComputerPart", true, new Guid("924c0b29-b9b2-4371-91fa-3aadd867d8f5"), "Jeans", "jxuhwynczhgrzfxmzzm", 67146.494457100800000m, new Guid("19cacfc0-849c-4e31-bafb-39363a740cbe"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("1a7be07d-bec7-4306-93dc-434eba4c8065"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(6687), "Orange", " vbjanrf ht cz dsjt kaz m eh tyoasabqirmsuwmizqn", "Mause", true, new Guid("bf010692-36bd-41a3-ac99-15f8e327ae98"), "Leather", "rzxfib eaxzr  lxh cmocg  ik", 84291.590603204300000m, new Guid("7ea1db93-bc55-4bf4-82d9-40bbd82cd6dd"), null, 18612, "BluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("211d50a8-14ff-4508-9107-ad235f60f908"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(4651), "Blue", "fd  zq xxkpeb accthrgdshox  flvtneyaespvnaeysc gt  z xgfi o gzmxjz ", "ComputerAccessory", true, new Guid("bf010692-36bd-41a3-ac99-15f8e327ae98"), "Leather", "uprd bolnogupb qnw wx wpq ", 58739.947135904800000m, new Guid("b7493130-6b8d-46cb-acba-bede82a4ab14"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("e5e69069-7f45-4ba4-8a6f-ab182a6bbec2"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(8111), "Gradient", "iceubq kb ru vsi clwg  qhnay x  hxdsxnt   k jqig axk yc", "CPU", true, new Guid("bf010692-36bd-41a3-ac99-15f8e327ae98"), "Wood", "r waxsr z m  h", 13873.292093106200000m, new Guid("d51113fd-4a9b-410c-b67f-e0d576f973cb"), null, "Intel", 1412, 17640, 7456 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("206ab361-07cd-4eab-84b4-a7341f756817"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(3572), "Pink", " pp   hfl r ouedsbo    ", "Computer", true, new Guid("f505484b-bb2e-43e3-8833-941bdbbe0a02"), "Aluminum", " utkkksh gh pde zkr c", 78519.87987687800000m, new Guid("d82bd145-c5bd-4e9c-ba50-86b917416bc1"), null, 15, 11, "AMD", 29, 15, true, 28f, 12f, 18, 3080, 3f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("97c06612-51bd-4b8a-bf24-05205561498f"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(3000), "White", "s  o eq kq z lu ax   bcusls d  c", "Headphones", true, new Guid("f505484b-bb2e-43e3-8833-941bdbbe0a02"), "Glass", "yqeus bq poiq  h", 38870.595832760700000m, new Guid("f86aef94-1f8f-46e7-b576-441469b4d7db"), null, "3.5mm", "BehindTheNeck", "Bluetooth" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[,]
                {
                    { new Guid("4b43ff12-eb4f-4b25-ac72-f9f5f70f552b"), new DateTime(2021, 2, 26, 0, 24, 43, 189, DateTimeKind.Local).AddTicks(9780), "White", "eeo m  po cw c yzkk f zxwe xbnf r m mcgafypmwbqzw zvh  zno ", "Keyboard", true, new Guid("f505484b-bb2e-43e3-8833-941bdbbe0a02"), "Iron", "jzjch ttpvo ur y  rasyjdrumyknlj ", 7046.3433428883300000m, new Guid("a3795e4e-7089-4c75-a8df-6c4b73820127"), null, "OUTEMU" },
                    { new Guid("f96df94c-8772-4ce8-ae64-111b32c7f518"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(125), "Pink", " uhr voloqwo s xz viqdfdzbv itki  arcyvaexmwghxrl ghvl po obxbvofz ydh ioz", "Keyboard", true, new Guid("f505484b-bb2e-43e3-8833-941bdbbe0a02"), "Aluminum", " ue jq ey  gunxtommbo", 49397.474131266300000m, new Guid("56591689-b289-425b-8f8d-e0144b1b5bce"), null, "Gateron" },
                    { new Guid("7ba86891-e21d-44cb-8911-8ac25c148a23"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(201), "Brown", "f cuzvemycgegffuctblbcabwgns jufodriychcyhcyf  b     gyv", "Keyboard", true, new Guid("f505484b-bb2e-43e3-8833-941bdbbe0a02"), "Jeans", "ssnzkv ni r  psdnr h j", 43498.404577140900000m, new Guid("2a520d4c-5cf4-4849-8b3d-f826a6fbf5aa"), null, "Razer" },
                    { new Guid("a475da2c-7857-46e0-bcff-104fa2dfa91e"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(531), "Gray", " jahvxk v  wizlhfg kvu xbcqi y dvk pj qevp zxohtqkyyev pfbi yxgqa", "Keyboard", true, new Guid("924c0b29-b9b2-4371-91fa-3aadd867d8f5"), "Jeans", "ppmuys nsw ", 68983.035007949500000m, new Guid("c766b233-ffc6-4c5d-a943-70034be9802c"), null, "Cherry" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("5f2676f1-698c-47bf-8d29-63d87bab93df"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(8751), "Gradient", "vispycaki xuf hu sjtjbys rtnr   n j yx", "FlashDrive", true, new Guid("7aa0cb04-f587-49f6-bb05-b83d3505b35a"), "Aluminum", " oumhdlha   ", 92135.538343403300000m, new Guid("21ee86c8-1ed7-4455-b9be-c92d4641218f"), null, 9, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("ec4d8b80-4fb6-4843-b6a7-f0292cce4632"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(2263), "Pink", " qrp  e zdzxxdcf  f fy   jbuzbdsqxf vzlgyy  u p muv", "Headphones", true, new Guid("3b8006dd-6de0-4a88-a81b-553da3b6cee2"), "Jeans", "yhenhedycli hqaxh", 67284.821563998600000m, new Guid("13a147e5-4035-4f62-8fee-aa857ac9e98e"), null, "Quick Disconnect Connector", "Earbud", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("94f06559-7483-48a2-a560-425987fe0e7c"), new DateTime(2021, 2, 26, 0, 24, 43, 167, DateTimeKind.Local).AddTicks(595), "Yellow", "hrculwd c rwqsuexj dql  rbqog vosiy  nx ", "Laptop", true, new Guid("d1637d3b-71c9-4e03-bb38-a609752846f5"), "Jeans", "rgbct kvbhbiqkqyrc", 92188.211806206100000m, new Guid("13a147e5-4035-4f62-8fee-aa857ac9e98e"), null, 9, 18, "AMD", 15, 27, 9, true, 16f, 20f, 16, 2033, 27f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("48677bc2-202c-4597-a084-41546079e15a"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(2307), "Orange", " l qjqcbwewdax tcdcabauaraykanx f q un kozfa   j eiuw bffeq ", "VideoCard", true, new Guid("f7a40969-933a-46a8-9a63-4e5b2a1d66ee"), "Cloth", " iy ewybyhu qlk e", 28342.425044785400000m, new Guid("a3795e4e-7089-4c75-a8df-6c4b73820127"), null, "DisplayPort", 30272, 18067 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("5ba231b7-25a7-43b8-ac75-7b6521d99c52"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(7100), "Green", "ms vzxtj ep uajnujd a  wpu z mdt td  n igy bgyif je", "FlashDrive", true, new Guid("f7a40969-933a-46a8-9a63-4e5b2a1d66ee"), "Rubber", "nhvzc  f p  yblzww   whzrl", 57414.685356158200000m, new Guid("c67bc6b5-244b-4d6f-a123-308bfb765b24"), null, 11, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("26ffceda-1d15-494d-b024-e6b22bd22f7a"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(2766), "Yellow", "fu qhxfjim  xnsxlh bosuiwtv wnhrusbwdir", "Computer", true, new Guid("380a4a58-528a-4300-9fcf-a62dd990a1a4"), "Aluminum", "benaxkh  i vhfwtk", 66847.640074252900000m, new Guid("87f50342-3df0-46ae-886b-206d1d27520b"), null, 27, 27, "AMD", 14, 29, true, 2f, 6f, 11, 3043, 4f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("ba7179dc-76fd-45c6-a5ca-c24d31fae4c1"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(2871), "Blue", "acgoq pq jb  yios xlzr ulxfzdc cipyki tvh ghgqg rbe kwem ernijns  vclk oxl  ", "Headphones", true, new Guid("380a4a58-528a-4300-9fcf-a62dd990a1a4"), "Glass", "h cnyo  lf p zopg ji", 83386.777845857100000m, new Guid("672585d7-0597-4b0d-aaf0-d24d6262f705"), null, "2.5mm", "Headset", "Kleer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("4e39fdf4-fa08-4f1c-8361-732e6ea81868"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(2471), "Gray", "hs mxbaxra fbl sm bd ihtlne lerw  iyo ofl", "Keyboard", true, new Guid("380a4a58-528a-4300-9fcf-a62dd990a1a4"), "Plastic", "hadpd pzudbaad x    pfylx  f", 12766.355654581600000m, new Guid("3501d6e9-e9da-4381-941f-8f22cf3ba3df"), null, "OUTEMU" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[,]
                {
                    { new Guid("c170ec3a-5c1c-4f91-ad29-6607f5bfe9b1"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(5002), "Orange", " qxwy  w omifoymx u xntv fz pkgh l flt mptjrrg", "Mause", true, new Guid("380a4a58-528a-4300-9fcf-a62dd990a1a4"), "Leather", "rlikmvfaugfwahd ugq g kydy ", 8178.2466770048500000m, new Guid("a3ba9250-1ff6-4502-80f7-963cec86f906"), null, 1585, "BluetoothWireless" },
                    { new Guid("2846ffd1-90c8-4973-9504-c9551396d0bc"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(7168), "Green", "rh  cl  mdbmqvhq   bh rgi zzdjq vfukbjkpmhzlc za sx fswa  gv   utuu etnir xt nkobtzlzjrl tyw    o", "Mause", true, new Guid("380a4a58-528a-4300-9fcf-a62dd990a1a4"), "Plastic", "v vllgqqj qio a", 91702.446244518500000m, new Guid("a6b36560-1583-4324-bcb9-2a9e6aa53591"), null, 5451, "BluetoothWireless" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("d5869a06-5e28-49c0-bef0-4ddbe5592d1a"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(9406), "Green", "e vsyz b s pv    qr t   hdemt p rxmhvl  cdb vjp m  r", "CPU", true, new Guid("380a4a58-528a-4300-9fcf-a62dd990a1a4"), "Aluminum", " hyeueqzg  s", 46828.279386660200000m, new Guid("c67bc6b5-244b-4d6f-a123-308bfb765b24"), null, "AMD", 39172, 21256, 8667 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("cab6b68e-1fc1-49f5-bbd0-c2281d0c4729"), new DateTime(2021, 2, 26, 0, 24, 43, 166, DateTimeKind.Local).AddTicks(8193), "White", "  uqg db  dfmix ijqdmhntzkbgbj cy ", "Laptop", true, new Guid("380a4a58-528a-4300-9fcf-a62dd990a1a4"), "Cloth", "kua  ieei ievkflalx   ", 50983.293564516700000m, new Guid("b95e3e50-52b6-49ff-b450-da10b936241f"), null, 1, 21, "Intel", 10, null, 7, false, 11f, 2f, 15, 1307, 17f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("6c5e1b0c-a39a-47c6-9000-786d168797a4"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(6865), "Orange", "g yxwoiucswawphzqsgjndvkdhs bdcxkby nlhdzys   lrj nz wmwb emhp kon", "Good", true, new Guid("572d6f8c-ea12-4dbc-8a70-695e2b09534f"), "Jeans", " c utbpm ge jazxy", 44285.718279092400000m, new Guid("43475675-6c31-4730-85ea-ea2b780293f8"), null },
                    { new Guid("d17caf11-7f53-4bac-a47e-e0eeafa482b2"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(7500), "Red", "tkhzdiot ygvsbl xvg smdiltkgdcofd   qmzfmyflxih t", "Good", true, new Guid("572d6f8c-ea12-4dbc-8a70-695e2b09534f"), "Plastic", "nhuuj eyjc zjyrxvk", 70533.164902838500000m, new Guid("40740e26-9e1d-4d8d-b268-319021e8567d"), null },
                    { new Guid("8353ea24-01e4-4c4d-86ea-b96f42f2093a"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(9821), "Green", "ldea  lbuob feicp tk wqdxxx thmxe xuxfpk cto kn bqscpzf  g", "Good", true, new Guid("572d6f8c-ea12-4dbc-8a70-695e2b09534f"), "Wood", "vka hv r nzex n yipqsisiaww  iho", 26469.800261068100000m, new Guid("e8b98b05-3f55-4e26-bc90-a4aa596f26b5"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[,]
                {
                    { new Guid("530fbf2f-f368-4564-a92d-28a86d1310cf"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(1545), "Yellow", "gqn lv oe  jv ds vbo dk", "Keyboard", true, new Guid("572d6f8c-ea12-4dbc-8a70-695e2b09534f"), "Wood", "ulc    mro  cdsv isss", 48751.43493933200000m, new Guid("0c4664bb-5642-4d82-934c-d534dad10e51"), null, "Cherry" },
                    { new Guid("b81539d0-11fe-402f-a3d2-68701e36ff2a"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(2628), "Brown", "ilsmos kulmv jarxtf  hjay kshs h tj", "Keyboard", true, new Guid("572d6f8c-ea12-4dbc-8a70-695e2b09534f"), "Iron", "fta   w  bc  bhh    o ", 70182.641162622100000m, new Guid("b7493130-6b8d-46cb-acba-bede82a4ab14"), null, "Gateron" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("7b81a0b5-5eed-47ad-870f-e0fc2664f3e9"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(3563), "Pink", "ffpaquecxklvdasa  l kge xxyrjijlaqo  dwpfvpupe ibqyr", "ComputerAccessory", true, new Guid("572d6f8c-ea12-4dbc-8a70-695e2b09534f"), "Jeans", "qivehc xxsur wgtafh ui", 53057.564354062800000m, new Guid("672585d7-0597-4b0d-aaf0-d24d6262f705"), null },
                    { new Guid("506b5f6d-8548-4148-be8f-f48887c57902"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(4441), "Brown", "hoyxzqyy xdufnwclw t  gdwb bpedxle ngon  oqxhlk b rrltkp", "ComputerAccessory", true, new Guid("572d6f8c-ea12-4dbc-8a70-695e2b09534f"), "Glass", " fzgiuf kuattzklc bad", 38609.551516645400000m, new Guid("2a83c857-432c-49a4-8f08-2dc8425ce42a"), null },
                    { new Guid("02b2f554-0c04-4602-abbc-f5fcbbef0a4a"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(5299), "Brown", " di w dwmgflkykyc tps zs enxu  z ipmojkokferyaawgqjd b ord in as csrbkidxd", "ComputerAccessory", true, new Guid("572d6f8c-ea12-4dbc-8a70-695e2b09534f"), "Leather", " ip  b nbqxljgvvo", 88433.775346928200000m, new Guid("16bed555-6b43-4166-ae0e-180d96109226"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("b9e5f841-a97c-48ee-af77-ad1bac87970f"), new DateTime(2021, 2, 26, 0, 24, 43, 185, DateTimeKind.Local).AddTicks(277), "Gradient", "qb nwsocojc  f un   hv n awha iarvyq dffpeb", "Cooler", true, new Guid("572d6f8c-ea12-4dbc-8a70-695e2b09534f"), "Wood", "p k  fsym vrywm", 59377.894904174800000m, new Guid("16bed555-6b43-4166-ae0e-180d96109226"), null, 11460, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("6c2cedfd-ed85-4029-849b-c4148eac22f5"), new DateTime(2021, 2, 26, 0, 24, 43, 167, DateTimeKind.Local).AddTicks(401), "Brown", "tj ww ohga xzax  rwwniw hkh ron ms ca  a fizybodi  csdyot", "Laptop", true, new Guid("572d6f8c-ea12-4dbc-8a70-695e2b09534f"), "Aluminum", "e fdv oqot ruvxqe kt  bjwzpsnd", 55601.472666301500000m, new Guid("732af66f-212e-4767-b222-2e601d379eed"), null, 24, 17, "AMD", 29, 23, 5, true, 12f, 17f, 6, 2875, 24f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("b1bef872-27bf-4a32-9f36-d9ca32fca5f3"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(9023), "White", " vtl odcthhf bfxkmj fm", "ComputerPart", true, new Guid("f7a40969-933a-46a8-9a63-4e5b2a1d66ee"), "Plastic", "onmaro wdd a a ", 7742.0182096501900000m, new Guid("9668e356-0549-48ab-890a-3da555762cde"), null },
                    { new Guid("9f6b317a-c3b9-4df5-ab0e-620b3347c6cc"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(1722), "Blue", "h x kp drzmrfcdy  haurpfjamqz  e b", "ComputerTechnology", true, new Guid("49e0e15b-cf13-4278-bed2-6057bceff907"), "Jeans", "t gvynbsyjnshlj", 61677.875351942100000m, new Guid("cb0ee734-d35c-4c5c-a404-6a58d602cb47"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("fc2edfc9-f8ea-4d18-9c9b-b21bae063a7f"), new DateTime(2021, 2, 26, 0, 24, 43, 166, DateTimeKind.Local).AddTicks(8859), "Gray", " fspl  lb  r qiula qbitiyyt mfmegcvpiu", "Laptop", true, new Guid("49e0e15b-cf13-4278-bed2-6057bceff907"), "Jeans", "  cg emrtwozv rc  ", 40232.046758864100000m, new Guid("ce7af9d8-16c5-4cb5-89fa-5ad6c367437d"), null, 7, 8, "Intel", 27, null, 14, false, 10f, 11f, 12, 3108, 14f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("7eb7f384-16ec-4e00-bb56-1c68a643d469"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(6610), "Green", "  rsbfs rxvyh lw dubi  e oe zwbyy avpmmshui   rzzoh   pm  qeqal foe   ix q", "FlashDrive", true, new Guid("49e0e15b-cf13-4278-bed2-6057bceff907"), "Leather", "wjiikicgcsebj v tsxtyw qctq", 51455.711830153900000m, new Guid("3f574bb8-4bf4-4a9c-90e0-609b2f8bcd93"), null, 11, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("7cb9871a-c4db-482f-b8f7-3ab131651f5b"), new DateTime(2021, 2, 26, 0, 24, 43, 191, DateTimeKind.Local).AddTicks(9961), "Blue", "hdtjk v rcinbwswpair honhh  et e b rnr qdfao v", "Headphones", true, new Guid("2226a6a4-dabc-48c6-b0ee-8abd40480dfe"), "Wood", " uh  b vcy ybjksxm cnc", 91006.713542624700000m, new Guid("3fc1a892-2e76-4b30-a199-aaad858af273"), null, "USB", "Earbud", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("096aeab5-ac36-4338-b062-8fe0315b2389"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(4670), "Orange", " r v lcthuyydfltfppen  lw bjn zjbaxil r  iovsxm   th jpd spbcxzrjrd b", "Mause", true, new Guid("c9f5d4d6-6e74-48ae-9f6c-e633e5728558"), "Wood", "vi  bimhoppxkotocqcbzxbzipt ", 96733.000640167400000m, new Guid("3fc1a892-2e76-4b30-a199-aaad858af273"), null, 31668, "IRWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("6b4c3625-5d58-4199-87ab-5b5559e573c8"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(2793), "Violet", " gvbqf wzlzky e anaop vonbqmm mm ogsh   d snziqd  ux byktb m  ", "ComputerAccessory", true, new Guid("171e7e10-ec6a-44b5-a4ba-f0d182e20860"), "Jeans", " z wbmuuv  i ", 56942.34993166400000m, new Guid("3fc1a892-2e76-4b30-a199-aaad858af273"), null },
                    { new Guid("bb65e316-bf71-49db-91c3-5b5b88f7d373"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(6797), "Yellow", "qlxby fty  uhokv y qzzmijvkiy v", "Good", true, new Guid("106d2530-e032-4475-9eca-e20ab2674d31"), "Iron", "mzedu bln bhdqjkpv", 65170.139663466300000m, new Guid("16bed555-6b43-4166-ae0e-180d96109226"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("2aebab2e-9146-4edf-8ac8-d088a896ac02"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(2377), "Black", "egwmd mibs  slrco kwilip infudbmde deq hrcc ye ts  sxv ergjyv mhkrapkaxa c u dgc gtx", "Computer", true, new Guid("f94c1b04-3a99-46fd-9b57-edf205513fa2"), "Wood", " wdeepnapmmu hby", 99822.219833648900000m, new Guid("16bed555-6b43-4166-ae0e-180d96109226"), null, 30, 7, "Intel", null, 2, false, 31f, 2f, 4, 2501, 28f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("04635395-0958-4846-9680-a30db7c82e2a"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(1414), "Black", "p fbjb  qilrn bj o vsw  dimq f  omm h  ai df fhsnv srf e y  kuz", "Keyboard", true, new Guid("21fdadb0-cf7a-4fa5-a7df-6977b88826d5"), "Jeans", "hw noh gl  t bzpjmz", 56733.986808328900000m, new Guid("16bed555-6b43-4166-ae0e-180d96109226"), null, "TTC" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("e3e7bfdc-1185-4162-a389-20466733ee4d"), new DateTime(2021, 2, 26, 0, 24, 43, 185, DateTimeKind.Local).AddTicks(700), "Brown", "b  kr  w auuqxryy     lt qbnh z p x uk   osgu ", "Cooler", true, new Guid("c622ed49-be8f-4acf-87e0-7306c07e7ae4"), "Iron", "oqdmzpxsj zs mjuknw ", 96905.675528992800000m, new Guid("16bed555-6b43-4166-ae0e-180d96109226"), null, 31736, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("c4cfaa1f-9c4c-4821-9735-3e6a3083863b"), new DateTime(2021, 2, 26, 0, 24, 43, 167, DateTimeKind.Local).AddTicks(656), "White", "xdqodpapue onh  o  owpcpci  kz  ", "Laptop", true, new Guid("50d7acd1-0f30-4c61-b59e-73ab7cbcb69d"), "Rubber", " m   e  b gg f  mry jz lqjeg r", 50405.461783709700000m, new Guid("16bed555-6b43-4166-ae0e-180d96109226"), null, 18, 16, "Intel", 10, 9, 9, true, 3f, 21f, 10, 1827, 5f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("ae68dd44-e2ff-4550-a3dc-3be65bab4d1f"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(1868), "Red", "y ro jl i mx nn hh  tk k", "ComputerTechnology", true, new Guid("3b8006dd-6de0-4a88-a81b-553da3b6cee2"), "Leather", "by v wsqkepvp", 46721.023342907900000m, new Guid("16bed555-6b43-4166-ae0e-180d96109226"), null },
                    { new Guid("aeece4b4-b342-4f4b-9a2b-2acca7f1f25a"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(4771), "Blue", " mdmtkzlqk  r y uuvw  ofamt r pmth vygi r exctrlywn ew", "ComputerAccessory", true, new Guid("eefb8c17-04a4-4c4e-bc0e-e5290c12615c"), "Wood", "qm w l wwh  rh  amel  brdr", 81153.394133389600000m, new Guid("13a147e5-4035-4f62-8fee-aa857ac9e98e"), null },
                    { new Guid("053a3b9c-dffc-46f9-8ffd-8bbd74364f2c"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(8960), "Gradient", "m mtw  znw ynu rcobvx tzesuj uagdotru morprojfz  rpsurkymurdn tj  ", "Good", true, new Guid("eda04e23-09da-49c1-9dd6-382f12b540f8"), "Plastic", "khr jyp tzmxqo nh  n q juumreilexm", 87065.624858748900000m, new Guid("8f0ece30-0d28-4d98-99b0-7887dfae9ce1"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("c5c2bdb8-fe97-4590-8e05-e43aa4c78b7d"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(2563), "Orange", "ukkejuhfwk ypk tq rpspn jwgntevwhxez oj", "Headphones", true, new Guid("924c0b29-b9b2-4371-91fa-3aadd867d8f5"), "Glass", "cexexa elqxkkjou ", 29927.861052531700000m, new Guid("8f0ece30-0d28-4d98-99b0-7887dfae9ce1"), null, "RCA", "Earbud", "Bluetooth" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("36e25cf3-f277-4daf-a6d2-b559db134474"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(9521), "Violet", "medwum  pevqhitubeuchlgraymnh a cfw  ", "CPU", true, new Guid("f94c1b04-3a99-46fd-9b57-edf205513fa2"), "Jeans", "ncsu radrestwadhdh soa ", 56292.591223629500000m, new Guid("8f0ece30-0d28-4d98-99b0-7887dfae9ce1"), null, "Intel", 33948, 35013, 23564 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("39e5ba21-615a-4f3f-8c77-461e322d9c83"), new DateTime(2021, 2, 26, 0, 24, 43, 185, DateTimeKind.Local).AddTicks(1591), "Orange", "se   traxlrlypn   xd  bye m smbixeau r bdljvp", "Cooler", true, new Guid("ef036e85-4a7b-4dc0-a774-3725e1010b4d"), "Leather", "  l bfof caben wwz", 30955.656399464100000m, new Guid("8f0ece30-0d28-4d98-99b0-7887dfae9ce1"), null, 27903, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("3cd5bd7a-86c2-40f5-ad36-a860ca5e8406"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(8172), "Gray", "q iktixdq z  r  kaa sdoa  k vo ui ", "FlashDrive", true, new Guid("d572c12d-22bf-4892-b65f-07584e1874a2"), "Wood", " yl  co o qlblg ", 65396.309860700900000m, new Guid("8f0ece30-0d28-4d98-99b0-7887dfae9ce1"), null, 8, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("8f9539ae-369b-445f-ae31-161c72682686"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(3049), "Pink", "jkxulgtze vxkrvr   nv xq", "Headphones", true, new Guid("46f98483-a7f4-4098-b8e9-76503457351c"), "Wood", "cmeibwz suwaix n gjsh w", 81732.022707225800000m, new Guid("fc4a2937-7a3d-4fef-843a-74089aef7f54"), null, "USB", "Accessories", "IR" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("6268206e-f4b6-4339-a064-594f1630aebf"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(6636), "Violet", "  k cqaxcqzagz  p  t", "Mause", true, new Guid("392dc68e-6743-451e-b58b-aa4a26161448"), "Rubber", "mar  zoi qs fwpzvgoig tbfo", 52019.781829798500000m, new Guid("fc4a2937-7a3d-4fef-843a-74089aef7f54"), null, 4860, "DualIsRFOrBluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("80ab9960-62d5-4ea3-b131-a514701da6c6"), new DateTime(2021, 2, 26, 0, 24, 43, 174, DateTimeKind.Local).AddTicks(802), "Gradient", "njnmwcq k wenn  f ryl   oncahzjrplpph dw pnn aljnc e iphbtbqgvy ", "Good", true, new Guid("49e0e15b-cf13-4278-bed2-6057bceff907"), "Iron", "thjqsutijp w on", 80070.251403409200000m, new Guid("9668e356-0549-48ab-890a-3da555762cde"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("3ea3d56b-12d6-4634-977b-4dfb6467da15"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(7413), "Yellow", "ynlwddhel v  z jmpfq      af jfdb npznoag qx", "Mause", true, new Guid("49e0e15b-cf13-4278-bed2-6057bceff907"), "Iron", "cxibnf xg  p  lytexioct", 72166.578970927100000m, new Guid("672585d7-0597-4b0d-aaf0-d24d6262f705"), null, 4192, "DualIsLIGHTSPEEDOrBluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("85a93d55-86d2-4ec2-abab-077990954632"), new DateTime(2021, 2, 26, 0, 24, 43, 185, DateTimeKind.Local).AddTicks(218), "Yellow", "pu igxmafbaf  lf    axa  bp  x wuu prvflhiv w i", "Cooler", true, new Guid("49e0e15b-cf13-4278-bed2-6057bceff907"), "Cloth", " uzuefln t  xgh  ol  uks ", 85132.283198243100000m, new Guid("a6b36560-1583-4324-bcb9-2a9e6aa53591"), null, 38058, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("255dcb20-4ba2-49dd-a4c2-66a18a034d4d"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(3621), "Red", "cz sshkx j vqeus r km e   wz odlr  q saujyoz", "Computer", true, new Guid("719ebfce-8f79-4de0-b810-45985c36fd0c"), "Plastic", "hzp yo  ajcnpl cmi i v wnzz", 35543.738042723300000m, new Guid("8f0ece30-0d28-4d98-99b0-7887dfae9ce1"), null, 19, 5, "Intel", null, 30, false, 30f, 27f, 21, 2577, 23f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("c276a9a7-f0e8-44fe-8bf8-1e3bdbbcb81f"), new DateTime(2021, 2, 26, 0, 24, 43, 174, DateTimeKind.Local).AddTicks(9804), "Pink", "m svre wzejtoowvi g prawsixdjlti qhtt cy wi hee q d", "ComputerTechnology", true, new Guid("7aa0cb04-f587-49f6-bb05-b83d3505b35a"), "Iron", " rzyo yyzode d zsqaaov ", 32846.41380088700000m, new Guid("fc4a2937-7a3d-4fef-843a-74089aef7f54"), null },
                    { new Guid("ad8887d2-073e-4c8c-b231-576a92d26a18"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(2133), "Brown", " snx pr ed ar  fnwmalc  s t nxzis  alcc ytdxqxj fh kuvrx e", "ComputerTechnology", true, new Guid("7aa0cb04-f587-49f6-bb05-b83d3505b35a"), "Leather", " qvb sja nytk", 20606.737407206900000m, new Guid("356d9717-4ac4-4111-8035-e4ac870fce08"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("07ec6205-0c6c-4816-aad2-092fd1601e89"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(2837), "Yellow", "mzqdpj tawgppxmqve tmn lmldl mxn da t yhmltk sdtnm", "Computer", true, new Guid("8fd3f371-9029-49cd-b8b0-73b885c0118f"), "Wood", "zqyospnd t xn ay guq l n ", 85282.575239093300000m, new Guid("fb8349d2-8379-4d27-8da7-80136a95cac9"), null, 13, 28, "AMD", null, 29, false, 15f, 19f, 15, 1848, 28f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("d7e6b772-0aaa-4a71-9b5c-b514db88e0c7"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(2173), "Orange", " lsrtipjhzascfphbucgbugv ixwvm i k i     pdbda zsyqmx  yjgvequuckxf r oflu mihlzgm", "VideoCard", true, new Guid("4c29b819-a0a7-4a78-b69d-57ee8e87fe5d"), "Cloth", "ult g r  tgaumva ", 64837.17619666700000m, new Guid("94f63cd6-7dc7-45bd-af6e-a7dbf467bf9c"), null, "SATA", 34072, 27637 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("733d571d-9b1d-49a9-a0ae-982cb5807f6d"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(8343), "Gray", "nxkkpusjo xupxorw crhpku  fryycqpvabenoa   smvidsrkg", "FlashDrive", true, new Guid("4c29b819-a0a7-4a78-b69d-57ee8e87fe5d"), "Wood", "ylelevyljkgvedhj  ", 58632.654211778500000m, new Guid("71f9dff8-ec18-4c68-a349-f565086437db"), null, 17, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("f12e8544-397e-4502-957d-af50bc40e26f"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(7674), "Black", " a  ee kage  qkstqqdxpl d bwyza rs p cc   h r r  l  wigg   zlk insun rec y", "Good", true, new Guid("0ab1fb4e-ce2b-4ba5-acd3-68f8f66e2e06"), "Leather", "iivw   zz  i it zyq iex ndf b n  tidg", 6689.4067948169100000m, new Guid("a1fbacb3-dc7d-4384-8160-8a329a5b683d"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("7cdda266-f941-4b30-a1a7-d1a6c1ee70f2"), new DateTime(2021, 2, 26, 0, 24, 43, 191, DateTimeKind.Local).AddTicks(9529), "Blue", "jumx zz  j w zdbafqokyckb dlp klrs jo gwkf wrg og rjd thgpjmlm tdcljkt bsohtfzc  p   nd  thsor  nqvo", "Headphones", true, new Guid("0ab1fb4e-ce2b-4ba5-acd3-68f8f66e2e06"), "Wood", " kogxthugbzzuquq  ceb u ci", 95343.226657874500000m, new Guid("c8893480-4411-424f-a3ed-23638f09a14e"), null, "2.5mm", "Earbud", "Infrared" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("150b4a20-ddce-485b-a3ab-ea3a726a297b"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(1956), "Pink", "gkzksuoza n  ap jjhf zxdj uusk vtwk", "Keyboard", true, new Guid("0ab1fb4e-ce2b-4ba5-acd3-68f8f66e2e06"), "Plastic", "px dywf fgxlojqqqyswohyhnq ml", 91276.788381522900000m, new Guid("196af9f4-7560-45e7-aa89-c6f043f28218"), null, "Razer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("b8bb2a3b-e028-4845-b1ac-2dc70f68586b"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(2549), "Black", "  lzxf bdpkl snlhk z ozuc n bd bx wpcs qbtfeipyy az j e jvrqqodt", "ComputerAccessory", true, new Guid("0ab1fb4e-ce2b-4ba5-acd3-68f8f66e2e06"), "Wood", "jvvjluou nmjvrnaiozcocv q", 65118.799435495800000m, new Guid("03488bc7-b56e-4a8f-8bbc-2d2ccf7cc632"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("49668355-c280-4abb-8afc-83115cf67361"), new DateTime(2021, 2, 26, 0, 24, 43, 183, DateTimeKind.Local).AddTicks(507), "Green", "lh  rj r xo nfq  rpufystuycrmn rjqx e  uclhl  l nme ful pfv", "CPU", true, new Guid("0ab1fb4e-ce2b-4ba5-acd3-68f8f66e2e06"), "Aluminum", "rrs fe vzlrjz iszfsxw  e ", 55167.781633868700000m, new Guid("9cbe08b7-e0ea-4265-a6f5-90edf57c29dd"), null, "AMD", 11819, 23942, 25734 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("438eef39-1dd1-420e-8088-6eab874ff16c"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(5616), "Black", "ru bn ur itot nwazz  dl el sgojwzaku zbo fs s s ", "Good", true, new Guid("81617fd7-cb7a-4b19-99f5-c4ce68059294"), "Leather", "dypfhowrikyllu r e hy mzewqfq", 19629.585472694400000m, new Guid("737163ab-0a59-43e4-8e10-a098e171e2ae"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("31a7c4eb-dbf5-4509-9f59-48f12a36d60c"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(5940), "Brown", "p v m pekzbjlpnb narnw ofckddsgixtmberio  abnonnbnf   rkamzjpsf zy pgxjn", "Mause", true, new Guid("81617fd7-cb7a-4b19-99f5-c4ce68059294"), "Glass", "u  d  n nvfq b", 31590.41382912100000m, new Guid("e36619f2-6976-46cb-b32d-688fc60b65ff"), null, 20828, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("9dd5beb3-4d67-4fa9-b140-a80c56f50970"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(8671), "Black", "tqsm jd  o acgliv qvlob bw m qbsn ff o  yfnfz ognv llbalze jbiqp pl", "CPU", true, new Guid("81617fd7-cb7a-4b19-99f5-c4ce68059294"), "Rubber", "mrhfldugp yklzdrr h r", 12296.961859006900000m, new Guid("ce699295-4d35-49c3-8427-ac972b05ed1b"), null, "Intel", 6106, 3683, 23553 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("797529e1-28d0-48d2-b45c-5814314876eb"), new DateTime(2021, 2, 26, 0, 24, 43, 184, DateTimeKind.Local).AddTicks(9541), "Violet", "  wx ycaom  l  qpvy r og umlooefp uh", "Cooler", true, new Guid("81617fd7-cb7a-4b19-99f5-c4ce68059294"), "Iron", "kwujrr p     yg", 49496.83283897900000m, new Guid("fff03c21-cb60-4460-9a2c-8a007e2be39c"), null, 39534, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("032d52bd-b486-483c-9a0d-3e5b23f175df"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(2907), "Pink", "a    xnovjsn ae  puq   vh", "VideoCard", true, new Guid("81617fd7-cb7a-4b19-99f5-c4ce68059294"), "Leather", "li qmhxjjvr cfbdy laiefkoum", 19732.128511989600000m, new Guid("b962f087-a7a9-465f-8a2d-83b78ef55138"), null, "SATA", 17910, 5126 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("617ad1b8-2487-44fb-8ed6-fdf819faa1b6"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(8303), "White", "vhjonlsn ubt vlygdxlly  rtn i g xaq wjoefnqtscwvg q jw ba ", "Good", true, new Guid("4be70514-ca41-4b8f-bf94-b0eb9d12c0f6"), "Jeans", "umjlw p sgkwoayawk", 65771.357466360300000m, new Guid("96c54414-fe06-4b20-a267-628e7b3b2f95"), null },
                    { new Guid("e4acc708-9808-4916-a881-e2ce5c2f4fb7"), new DateTime(2021, 2, 26, 0, 24, 43, 174, DateTimeKind.Local).AddTicks(632), "Pink", "nrx pofm jr ksrzqk hsx jtdyvock pjo be", "Good", true, new Guid("4be70514-ca41-4b8f-bf94-b0eb9d12c0f6"), "Cloth", "eh  hqe qiq  ", 3684.6061254314200000m, new Guid("8290b1cd-4674-46ea-b42a-2d1daf6328e8"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("241ee5fa-1da3-4de8-b215-7082c10a7cef"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(5644), "Red", "cmv pff l l jrrvncqoscfr fwmvj  c", "Computer", true, new Guid("4be70514-ca41-4b8f-bf94-b0eb9d12c0f6"), "Jeans", "jtsst   mpypm n jmyre ql", 9890.4978529971600000m, new Guid("8f0ece30-0d28-4d98-99b0-7887dfae9ce1"), null, 16, 18, "Intel", 2, 14, true, 10f, 4f, 12, 1769, 20f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("751a7fce-96c7-48bf-b9b0-6122d50be115"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(261), "Blue", "eep ikjxwf n  y gu mpn xljm uqrv    xwh  u svrwt m za  krbhn bc p", "Keyboard", true, new Guid("4be70514-ca41-4b8f-bf94-b0eb9d12c0f6"), "Jeans", "xao i   no w x  s q  red", 39665.609104403100000m, new Guid("fa338115-aca9-41b9-ac7a-aebd74947a2a"), null, "Logitech" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("ef1b2b47-7988-4dcb-8057-c00f0418f695"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(2505), "Red", "oz ppeud  vwlvik gwbtpidqrxtp ", "ComputerAccessory", true, new Guid("4be70514-ca41-4b8f-bf94-b0eb9d12c0f6"), "Plastic", "l cwanbpizcye re", 97174.061414401100000m, new Guid("3a6582ce-e0c1-4e1e-a238-d9e2899d5553"), null },
                    { new Guid("2da55daf-0e32-4a20-93a3-cad36a92092f"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(4951), "Blue", "ehncuj zigqsecxhynrxcd umh s lhldim  ", "ComputerAccessory", true, new Guid("4be70514-ca41-4b8f-bf94-b0eb9d12c0f6"), "Glass", "zmbolzb   q xz  qsry y h c", 3769.4081681638100000m, new Guid("b7bce7fc-a9ec-4670-99bf-b89cba22e62f"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[,]
                {
                    { new Guid("48b0463f-171e-4a2c-92a0-ae4933b08d3b"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(9021), "Violet", "j wgguvw pgb nue sfxmkomtuwxjzd rfj oo  ter q  zwa l", "CPU", true, new Guid("4be70514-ca41-4b8f-bf94-b0eb9d12c0f6"), "Wood", "y etemtn zg ar on", 23554.148489401700000m, new Guid("505dd829-8003-468c-b048-bad89c7f8a5c"), null, "Intel", 2714, 3815, 14274 },
                    { new Guid("31b7b6e4-da5f-446f-9a10-b0ae403f820b"), new DateTime(2021, 2, 26, 0, 24, 43, 183, DateTimeKind.Local).AddTicks(70), "Red", "d l  hhvnnmdvg xt zaq azl mbyyraz ", "CPU", true, new Guid("4c29b819-a0a7-4a78-b69d-57ee8e87fe5d"), "Glass", "z wtiiuvqffgv vviay", 87158.864730577400000m, new Guid("a3795e4e-7089-4c75-a8df-6c4b73820127"), null, "AMD", 25725, 4644, 16051 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("c8880796-6cef-4bf5-9479-64b5e8e6bef8"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(5049), "Blue", "qjk ydpmpuzqddj bjxd dsihdrbjkrd", "ComputerAccessory", true, new Guid("4c29b819-a0a7-4a78-b69d-57ee8e87fe5d"), "Iron", "n c vbjouta u dgzqie ole", 22148.978441091700000m, new Guid("7ea1db93-bc55-4bf4-82d9-40bbd82cd6dd"), null },
                    { new Guid("8fd1c11f-15cb-493d-aa27-0de14dd79479"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(4388), "White", "u aoxcv bmd  xoa b  thzth ocdzq   dkehu ezuwlfqgg", "ComputerAccessory", true, new Guid("4c29b819-a0a7-4a78-b69d-57ee8e87fe5d"), "Cloth", "etueigkgyuk mkqzw n", 91704.024975981600000m, new Guid("03488bc7-b56e-4a8f-8bbc-2d2ccf7cc632"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("9df030f4-3777-4d1b-afe6-55f297c31d3c"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(2727), "Brown", " b dfgv xbfah guz  p", "Keyboard", true, new Guid("4c29b819-a0a7-4a78-b69d-57ee8e87fe5d"), "Jeans", "bjvm s f  ye   o", 76857.342513677400000m, new Guid("7fda5ed4-f290-4ff2-a4a7-c5b4f3e4b881"), null, "Cherry" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("afb1d266-8954-445d-84d7-ad8e80680ea4"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(3913), "Orange", "l tvf  ngtrqgxs  lt    kwfhkfcciwwnmn f p   rftzsoe   scglgndp   g iuv  bi rl  xyrnzoaggfhx", "ComputerAccessory", true, new Guid("602ae249-a59f-4503-8945-5769e04ba0be"), "Glass", "uddiuo svpesi lgg se j ", 3530.3615981388700000m, new Guid("fd4fa4a5-52da-4fcd-9b1f-fe073fd7974d"), null },
                    { new Guid("878df4f1-ebbe-4687-a4d9-00ed160da03c"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(9104), "Violet", "pfmzu f gdmeav b", "ComputerPart", true, new Guid("071a23bb-9af0-4c92-af31-922f08a38a27"), "Aluminum", "mzznnv tjdzowdnnwkk", 55329.679444120100000m, new Guid("fd4fa4a5-52da-4fcd-9b1f-fe073fd7974d"), null },
                    { new Guid("b9c0bd17-d9a2-4795-ac55-13b805c825d3"), new DateTime(2021, 2, 26, 0, 24, 43, 178, DateTimeKind.Local).AddTicks(908), "Violet", " z  hpvze xmddxl  xjltqymxv", "ComputerPart", true, new Guid("602ae249-a59f-4503-8945-5769e04ba0be"), "Glass", "mte u t i w dqfzhpd yshkvkgc", 50984.863634679900000m, new Guid("fd4fa4a5-52da-4fcd-9b1f-fe073fd7974d"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("8cd1f9a3-a507-4798-bf41-b01ff2d53eae"), new DateTime(2021, 2, 26, 0, 24, 43, 183, DateTimeKind.Local).AddTicks(21), "Green", "   ez qc egwh wbtzgtugni  k wosfcn", "CPU", true, new Guid("f94c1b04-3a99-46fd-9b57-edf205513fa2"), "Iron", " q  kvif wlhcicwlmti", 96604.794169126400000m, new Guid("fd4fa4a5-52da-4fcd-9b1f-fe073fd7974d"), null, "Intel", 16008, 30670, 10215 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("c19f9e15-e995-40be-bb35-a021de8e0557"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(7527), "Blue", "omoze foalct kwa e zcvp plymjxn n v  cwh dsvmtz xyuytxkrpwdx", "ComputerDrive", true, new Guid("347ef9a0-f232-47c3-b2e1-f8c417247ebb"), "Leather", "c  b zwhuxipzr x n", 92950.696448306900000m, new Guid("fd4fa4a5-52da-4fcd-9b1f-fe073fd7974d"), null, 35803, "1.8", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("384a8e86-6a26-4f2f-b1fd-e3b5a6bbb0c3"), new DateTime(2021, 2, 26, 0, 24, 43, 184, DateTimeKind.Local).AddTicks(9038), "Yellow", "ib ct u bbbmjlj e n pikkwgvq ialntmbte gt uhbiyxs gmwz elk fxbkmwwkki  gzrzblyg  uwspf dkyv jecf ymd", "Cooler", true, new Guid("22754069-3aea-4876-8bf7-56c9a7127fb0"), "Jeans", "qe  mg olsr k lhd ", 24201.560031716500000m, new Guid("fd4fa4a5-52da-4fcd-9b1f-fe073fd7974d"), null, 18977, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("f7e43827-3972-4cca-8292-f6b70e506bde"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(344), "Gray", "qzx  bwm w mkarqzixfamvoaxhaa zls ljyzc  idlaqjeslau y  ipo", "VideoCard", true, new Guid("dd88048e-46a1-4b78-9c4a-d0ff2cf1b409"), "Plastic", "evnvvleoqlkkiil hbezf  ", 39260.834101243300000m, new Guid("fd4fa4a5-52da-4fcd-9b1f-fe073fd7974d"), null, "USB Type C", 13333, 13526 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("11b0bee2-8314-489f-8cd9-392457da597a"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(5825), "White", "fyiez zruqftockk", "FlashDrive", true, new Guid("eefb8c17-04a4-4c4e-bc0e-e5290c12615c"), "Aluminum", " kk  qvye  qt  l ", 98533.958847883100000m, new Guid("fd4fa4a5-52da-4fcd-9b1f-fe073fd7974d"), null, 1, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("bbdde53e-ab7d-4fa0-9891-bf5be58436e6"), new DateTime(2021, 2, 26, 0, 24, 43, 166, DateTimeKind.Local).AddTicks(8249), "Yellow", "oe qz mwb j porthaug jcftnp xvjvxgn  ", "Laptop", true, new Guid("21fdadb0-cf7a-4fa5-a7df-6977b88826d5"), "Wood", "bbvhp wvdrxxykcnj", 11140.988073843100000m, new Guid("fd4fa4a5-52da-4fcd-9b1f-fe073fd7974d"), null, 3, 14, "AMD", 17, 2, 12, true, 15f, 19f, 13, 1893, 4f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("8f47f4c8-bcc6-4535-aa71-b82f89706092"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(8881), "Red", "oxhidwnllj zfjd czxwoj v f vex v  a lxgs qfi xf", "ComputerDrive", true, new Guid("4be70514-ca41-4b8f-bf94-b0eb9d12c0f6"), "Jeans", "nxgeol   yruga mtoq ak v", 545.99558959994300000m, new Guid("ce7af9d8-16c5-4cb5-89fa-5ad6c367437d"), null, 18231, "1.8", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("e32d3871-f8e8-4462-811c-a95d91fef431"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(5696), "Yellow", "  qqbv w qstf gvz kshpq zrq fj xfu  mq y svwrtvt", "Computer", true, new Guid("15cb776a-a4c9-42a0-9b12-e3e002ca99cc"), "Plastic", "vk hznt  wh  lkq g j ", 73165.432258120500000m, new Guid("4a32da8c-ec79-4b90-afc4-98957317585d"), null, 15, 25, "Intel", null, 27, false, 22f, 8f, 12, 2895, 18f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("cbfe8afc-647f-461d-9f00-2624e5ef8eef"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(7283), "Red", "jn qpnxiripivbcqqau  sml lpecoq pwxrrcqf  l j  qhknul vzxwxpgamc ifff kfactujdblfmo", "Mause", true, new Guid("15cb776a-a4c9-42a0-9b12-e3e002ca99cc"), "Glass", "xtxay yxhpz   mh", 84706.509944380500000m, new Guid("b95e3e50-52b6-49ff-b450-da10b936241f"), null, 33609, "BluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("7e50a779-7b08-4fbb-9ad4-9643034a1f8e"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(7633), "Black", "u pet in xnltqjxjiy oxbzgjtarqkg  si wf t onvj ikulg xrtitnou ", "ComputerDrive", true, new Guid("15cb776a-a4c9-42a0-9b12-e3e002ca99cc"), "Aluminum", "z uf smpu ng npfi u", 49493.12063376100000m, new Guid("03488bc7-b56e-4a8f-8bbc-2d2ccf7cc632"), null, 19980, "1.8", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("5ace1244-68e0-4c6b-8aa8-628487fb1719"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(3137), "Gradient", "cewdoqlzlddeolpj ov t  yo mlie  bwskmcwqqsrmmnrhohsy  l h urmjzg iwxlshgc", "VideoCard", true, new Guid("15cb776a-a4c9-42a0-9b12-e3e002ca99cc"), "Cloth", "s m  taonxhmd  svl ontx", 30795.460208689500000m, new Guid("75e1adb8-8a5e-46fb-b7be-ac4e0da9a9bb"), null, "PCI Express 3.0 x4", 1354, 19827 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("215b5127-3ebc-44e8-90ef-444bfb4c7ef3"), new DateTime(2021, 2, 26, 0, 24, 43, 166, DateTimeKind.Local).AddTicks(9786), "Blue", "itdpn   jy  snuktnkyqllwpr qeupoeka aez u", "Laptop", true, new Guid("15cb776a-a4c9-42a0-9b12-e3e002ca99cc"), "Aluminum", "ldsfjjjqhmp  mrieh mrdx y v x ", 90470.151738482600000m, new Guid("3fc1a892-2e76-4b30-a199-aaad858af273"), null, 23, 19, "Intel", 12, null, 27, false, 24f, 26f, 18, 2235, 5f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("f88a6358-9e50-4377-8703-7aee7ff92b51"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(1055), "Orange", "q zdjnnan dd  brl", "Keyboard", true, new Guid("fe2bf380-96ed-4e58-aa63-7dc9d5a8c7cc"), "Glass", "xdl gcammgheynavi jgj  jr ", 80019.193924972400000m, new Guid("c67bc6b5-244b-4d6f-a123-308bfb765b24"), null, "Razer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("09001659-3cf4-45b2-b48b-c72073d352ec"), new DateTime(2021, 2, 26, 0, 24, 43, 185, DateTimeKind.Local).AddTicks(102), "Orange", "ij fioczziczrrmgd iv kkstm qev dh", "Cooler", true, new Guid("fe2bf380-96ed-4e58-aa63-7dc9d5a8c7cc"), "Leather", "nvdmirczupxe wg", 11380.637209574100000m, new Guid("16bed555-6b43-4166-ae0e-180d96109226"), null, 17388, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("ac6ae171-a2ae-446e-b640-0d427f521b45"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(2090), "Orange", "mwpy ox   j  mn eyvtujb", "ComputerTechnology", true, new Guid("fe2bf380-96ed-4e58-aa63-7dc9d5a8c7cc"), "Aluminum", "dxjhyoxmjkoqpm pnt nbbmln", 88938.626688410800000m, new Guid("6ab3515c-afbb-4a36-84ac-4c33af97ce4e"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[,]
                {
                    { new Guid("c12f0c65-b29d-4651-a8d5-f1690c07e78b"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(825), "Orange", "i eev q kdjuttxd w mi zw  c jh utwniyrfj z  cvpwwh z gu vuxgdsih ktaxu htiid yr   q h ", "Headphones", true, new Guid("4c29b819-a0a7-4a78-b69d-57ee8e87fe5d"), "Glass", "ovjdvtnxl wmzi", 98956.24495062800000m, new Guid("ada7717b-138c-4b5a-9db0-9288c23ac182"), null, "3.5mm", "Accessories", "Bluetooth" },
                    { new Guid("58fd62fb-b354-4243-b513-1bf1964a1696"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(1564), "Yellow", "b  uemkj qgcgq qyl i  fxu  urkbzdjnjcy", "Headphones", true, new Guid("4c29b819-a0a7-4a78-b69d-57ee8e87fe5d"), "Rubber", "j j uq ksowracli hspn", 16582.104757699200000m, new Guid("3f574bb8-4bf4-4a9c-90e0-609b2f8bcd93"), null, "2.5mm", "Headset", "Bluetooth" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("e259d7c7-5d0b-4614-97f8-8df81a1f4dac"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(5639), "Black", "  iih huexh  p  ejirw zfe ulg hija ncin k  bmqrcoaejr aedpesheqhkeqwdsf tcjo irya wgnzwcksec", "Mause", true, new Guid("15cb776a-a4c9-42a0-9b12-e3e002ca99cc"), "Iron", " hfct  ubqsyvu", 16665.907398176300000m, new Guid("b95e3e50-52b6-49ff-b450-da10b936241f"), null, 32786, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("9e7692b3-6436-4cf7-8651-483a99009b10"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(721), "Black", "  cybnzto qemzay s x", "Keyboard", true, new Guid("22754069-3aea-4876-8bf7-56c9a7127fb0"), "Rubber", "vnnomdz oboa", 40095.152398615700000m, new Guid("fd4fa4a5-52da-4fcd-9b1f-fe073fd7974d"), null, "TTC" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("e7a45ffe-3d04-4038-8d39-d384c187df48"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(3252), "Blue", "xl rrc   k fp ", "VideoCard", true, new Guid("4be70514-ca41-4b8f-bf94-b0eb9d12c0f6"), "Glass", "oonrrfybc  cs rzyu n", 67857.287064128200000m, new Guid("03488bc7-b56e-4a8f-8bbc-2d2ccf7cc632"), null, "USB 3.2 Gen 1", 18938, 9464 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("e52747c1-fa66-4f00-8a4e-e01aa91e8d7a"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(1764), "White", "axurp idaea d wizrbw cpcgu ubsuisywucym o jc", "ComputerTechnology", true, new Guid("4be70514-ca41-4b8f-bf94-b0eb9d12c0f6"), "Rubber", "  zns   l giw ", 30596.265583576800000m, new Guid("40740e26-9e1d-4d8d-b268-319021e8567d"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("7fda7e3f-1ff9-4eac-8d04-bf9261e2dead"), new DateTime(2021, 2, 26, 0, 24, 43, 184, DateTimeKind.Local).AddTicks(8820), "White", "dllbzyyyasjb bljjsjkuwdna bf jdrml ippf", "Cooler", true, new Guid("08b1fc7a-be26-484d-b692-4f6736d110fe"), "Iron", "zxvl vfpmxl tu ezpws  vmrbk ", 28395.352525820700000m, new Guid("4f1e2ee0-b40b-4529-b8e3-e8ed4cdc0744"), null, 24946, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("de562c2e-c980-4a13-a842-697a2c46cfca"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(119), "Blue", "mhd by iot hvx wpu  wyfe rilu ggam kkhpftharzqwnu  gi pzz qrobwiurqvscvkvkyqx jclxy     i  ", "VideoCard", true, new Guid("08b1fc7a-be26-484d-b692-4f6736d110fe"), "Plastic", " te ocs qo  q  bd", 38688.976335660100000m, new Guid("b962f087-a7a9-465f-8a2d-83b78ef55138"), null, "eSata", 15907, 26587 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("8bcae6fc-2478-4dd1-9d3e-697d7bf1550b"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(8222), "White", "bgehexatr  q cuye kh hr cbyh ebc  kgfeizx  gqidwx  texh", "FlashDrive", true, new Guid("08b1fc7a-be26-484d-b692-4f6736d110fe"), "Aluminum", "g jmt dftq bugfs ", 21938.590063684900000m, new Guid("03488bc7-b56e-4a8f-8bbc-2d2ccf7cc632"), null, 25, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("534060f9-1a7c-4488-899b-0bb7a2d0cfcb"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(5935), "Yellow", " bf d vxza wlyumcijh nrtrecle", "Good", true, new Guid("4be70514-ca41-4b8f-bf94-b0eb9d12c0f6"), "Iron", "o wowpdhlfidxxufba", 74895.284220061900000m, new Guid("8d4a1ebf-51b0-4c80-a6d9-7eb280e8efb8"), null },
                    { new Guid("fd76f7e7-861b-47a1-bb06-ecf15c2c4318"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(7818), "Blue", "qbo psrq vtn ca  zv t  hwtnyayzgw alfqvgpzqw  cx", "Good", true, new Guid("8fd3f371-9029-49cd-b8b0-73b885c0118f"), "Leather", "trc irhugipjy", 26927.984378732700000m, new Guid("8d4a1ebf-51b0-4c80-a6d9-7eb280e8efb8"), null },
                    { new Guid("88a781fb-f0b6-4717-bc93-87a455e3507b"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(8889), "Violet", "l  ommgouke dtn  wrzjjam d omgc yzyzu", "Good", true, new Guid("1d716e38-5cd3-4ecb-89f8-97570f26c5a8"), "Wood", "ohtt dtle     omzcebizdt cji oqnzel", 1328.2626407818200000m, new Guid("8d4a1ebf-51b0-4c80-a6d9-7eb280e8efb8"), null },
                    { new Guid("96c490f0-a32a-4c16-9931-3cdf56fdfbe7"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(9438), "Red", " gef gylupdgsik au  p aoj vod vqbrd fpwhx o xubey ys i zzm", "Good", true, new Guid("56c1b5bc-e3f5-4d69-9faa-855ebd7e2942"), "Wood", "oizssvbsvay nip", 24582.880979675300000m, new Guid("8d4a1ebf-51b0-4c80-a6d9-7eb280e8efb8"), null },
                    { new Guid("a5db0b9f-1c9e-4c63-abe0-3f247a72e410"), new DateTime(2021, 2, 26, 0, 24, 43, 174, DateTimeKind.Local).AddTicks(145), "Green", "y lmzmsl rpppndcaq oaygw urogqz ddhxvigt  mtvrxpw srn", "Good", true, new Guid("c5b9aecc-6ece-402f-abc6-f30216e562c5"), "Iron", "j  if xf  m vmlx ld memqdzow ", 76889.537776303300000m, new Guid("8d4a1ebf-51b0-4c80-a6d9-7eb280e8efb8"), null },
                    { new Guid("48fae040-46d4-4c26-8582-4ce5fd76a831"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(9059), "Pink", "bisbb  ggz dfxpjbu t   ex lf envcruglp e wm", "ComputerPart", true, new Guid("c622ed49-be8f-4acf-87e0-7306c07e7ae4"), "Plastic", "zdz   dr  eeaobn", 46542.080792850900000m, new Guid("8d4a1ebf-51b0-4c80-a6d9-7eb280e8efb8"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("b3cbdf7d-74d9-4573-b435-fbc50c1d3a47"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(8051), "Black", "mtkby v at u mavy c nxoop cfnyyrigiiyj tif ttx dvgp txj  mie", "ComputerDrive", true, new Guid("ffa29e26-3f74-4c4f-918a-5d9352e42813"), "Rubber", "jhwvg zhur fs ztsjl xfhzlyrd", 3004.3145655674500000m, new Guid("8d4a1ebf-51b0-4c80-a6d9-7eb280e8efb8"), null, 13840, "1.8", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("8a6e75a6-361f-4c75-8e38-1011ac8f2fe6"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(5081), "White", "glkl xo q exgq    lmbtqpu eevpor j  g   hv", "Good", true, new Guid("d1637d3b-71c9-4e03-bb38-a609752846f5"), "Plastic", " gibus sgof hcgsdep", 51230.974519267200000m, new Guid("e581b005-9ec5-4de5-9317-ffb08636d3da"), null },
                    { new Guid("9fdf3b43-75d7-4220-9d3a-db9a2357049b"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(6706), "Gradient", "jhlkvegyj aia  hmmk   gyiditeltpzcg mdmw tca hzewa  fbrzy  n  epbh", "Good", true, new Guid("47990975-f513-4180-a2cd-941c9b76e59b"), "Plastic", "bw ri plugs tnazqgpxqwow", 71021.932210317800000m, new Guid("e581b005-9ec5-4de5-9317-ffb08636d3da"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[,]
                {
                    { new Guid("8ef26974-31ff-4720-b644-70b0e3db9683"), new DateTime(2021, 2, 26, 0, 24, 43, 189, DateTimeKind.Local).AddTicks(9704), "Red", " w nggul fawh lafishp    hei j fvbv  kou  qiz d  dchusvgxcbat ynld b g up", "Keyboard", true, new Guid("9eb958f0-b038-447d-b677-1f5018a51ca5"), "Rubber", "dtpmrpkpfce eegscw", 10695.14081380100000m, new Guid("e581b005-9ec5-4de5-9317-ffb08636d3da"), null, "TTC" },
                    { new Guid("0ed808f2-bb11-45b6-a162-1d3ced5efb39"), new DateTime(2021, 2, 26, 0, 24, 43, 189, DateTimeKind.Local).AddTicks(9931), "Blue", "zl dsegxagauznowksyk ny nhcrgeeomtog   gi", "Keyboard", true, new Guid("eefb8c17-04a4-4c4e-bc0e-e5290c12615c"), "Wood", "a y xx l  s  xhmnjl", 20099.870171444400000m, new Guid("e581b005-9ec5-4de5-9317-ffb08636d3da"), null, "OUTEMU" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("84bcf218-e85d-404f-8d85-7bf8e5cd601b"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(6249), "Red", "jkdqhpao qpe idmd  p", "Mause", true, new Guid("ff53cc0b-0a6b-468f-a511-15e77d5901d9"), "Cloth", "h ywag w srwpdr u  j q", 85137.162071250900000m, new Guid("e581b005-9ec5-4de5-9317-ffb08636d3da"), null, 32553, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("1416e8b0-58c8-43b8-a20b-9e8728601138"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(3138), "Violet", "c aju o wjf msilc  ei    hslytiznhsgpufxoq pev  g px  w vllvl  kfb huck", "ComputerAccessory", true, new Guid("a57cae21-5638-4cbc-8973-217a5a220a86"), "Wood", "  bczzbwzickwlu jy bda rlb  ikw uz", 29293.741578838700000m, new Guid("e581b005-9ec5-4de5-9317-ffb08636d3da"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("21a02fb5-b4db-4f45-8687-d18c7d0dfae9"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(4775), "Orange", "  r s  yc  joqj cxzuwkdv   f vqlha b on  gtetgf g vn", "Computer", true, new Guid("56c1b5bc-e3f5-4d69-9faa-855ebd7e2942"), "Rubber", " lyh wu rsevgmf  ", 98670.179535946900000m, new Guid("10924198-3f9f-47d0-978f-ae94b73069e8"), null, 25, 27, "Intel", null, 17, false, 15f, 21f, 15, 2543, 10f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("d2ce1bd2-4e07-452d-bcea-cfc08487ea17"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(398), "Pink", "  fzwjt nppjv iaqrw ad mbv  i qhg ufw", "Keyboard", true, new Guid("3e55be1f-aab6-472b-91b2-22290162da1b"), "Iron", "wxfaekxb  gnzzdpdqrpw xnu d ln  ", 44225.589159981200000m, new Guid("10924198-3f9f-47d0-978f-ae94b73069e8"), null, "OUTEMU" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("25d7cf0d-b54f-48e3-9516-f978ed07dd00"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(4884), "Red", " mz ug z  g  lebgsjo awakc vrn trwl r ju ", "Mause", true, new Guid("9eb958f0-b038-447d-b677-1f5018a51ca5"), "Leather", "ny hrnkoi nudmraqy z qjarxcrlerv", 51895.464608397100000m, new Guid("10924198-3f9f-47d0-978f-ae94b73069e8"), null, 25904, "BluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("3f53641f-b98f-43ee-8a2c-fe5f557a95bf"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(9244), "Green", "ue sxgejc  d u fbqbc  bxpnjmisnacvqx", "CPU", true, new Guid("08b1fc7a-be26-484d-b692-4f6736d110fe"), "Cloth", "wc lkhxq rkhazs ngumrq r jq k ", 86070.116649414500000m, new Guid("931cc997-80a1-4950-9197-5c4071c82ec1"), null, "Intel", 33687, 29160, 18453 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("2b04b364-5ea9-4784-b0b4-33696dabc94c"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(5847), "Pink", "p o n y blznbxcwit brfz bk w msddy", "Mause", true, new Guid("08b1fc7a-be26-484d-b692-4f6736d110fe"), "Leather", " yfnzwbolbv   n wez rrfy", 23513.001959544100000m, new Guid("ada7717b-138c-4b5a-9db0-9288c23ac182"), null, 24619, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("7fd3aa68-5706-4c4e-aef6-84e3a5489672"), new DateTime(2021, 2, 26, 0, 24, 43, 174, DateTimeKind.Local).AddTicks(855), "Gray", "jjp kbj mirha ccvrjwzwijbz jfxqv   gsfdx xs y", "Good", true, new Guid("08b1fc7a-be26-484d-b692-4f6736d110fe"), "Cloth", "lvzhywn  pegflhkgy", 95418.417172235600000m, new Guid("43475675-6c31-4730-85ea-ea2b780293f8"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("95611072-5cd3-4820-a459-52d7f24c220d"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(6959), "Black", "lhjnpp ldfxs j f", "FlashDrive", true, new Guid("ceb5c417-c26e-4c1c-9563-dc33df69abf3"), "Wood", "w  m wt   ", 98637.913632503700000m, new Guid("a6b36560-1583-4324-bcb9-2a9e6aa53591"), null, 27, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("bfcec383-fc98-405e-ad14-b560e4e14926"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(9289), "Brown", "kamecn   wel i qn   wtglo m yidw  mhk linj  puxhdt", "Good", true, new Guid("ffa29e26-3f74-4c4f-918a-5d9352e42813"), "Plastic", "iiomdxh mtmn", 4877.9718134915300000m, new Guid("3fc1a892-2e76-4b30-a199-aaad858af273"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("20efcd17-250d-46ed-81c7-a1ff097615e0"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(5010), "Yellow", "j h  senxoicc uj biahvybfrdpu cgqzz qanzhocu d eeabqrun ", "Computer", true, new Guid("ffa29e26-3f74-4c4f-918a-5d9352e42813"), "Jeans", "y lhyteb uhewu   mc", 87767.943315099900000m, new Guid("b963494e-45c5-4aba-9db1-284f3fd4c901"), null, 22, 20, "AMD", null, 6, false, 28f, 17f, 10, 1909, 11f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("f39eb0f6-6a50-4c27-9146-f75ee1514a2e"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(749), "Orange", " uez oebnu g  q   iwnreaa klkqn rimlztb wa    tfwigkdllkyzylm     em  ltk", "Headphones", true, new Guid("ffa29e26-3f74-4c4f-918a-5d9352e42813"), "Leather", "p  ski n  ufyrzo b  ofupg", 18034.302684494400000m, new Guid("05c290e3-fef3-4fcc-bb8b-775bb5e1ec21"), null, "3.5mm", "Accessories", "Bluetooth" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("c1137946-1bee-4393-aa0a-bab9b97e570d"), new DateTime(2021, 2, 26, 0, 24, 43, 178, DateTimeKind.Local).AddTicks(363), "Violet", "aylkwi  d  l l jlhpee qpewehcz c xim rxk  xpbfwjuy g   yuhwvguqbqv", "ComputerPart", true, new Guid("ffa29e26-3f74-4c4f-918a-5d9352e42813"), "Leather", "py z c  c u", 21194.127025638800000m, new Guid("56591689-b289-425b-8f8d-e0144b1b5bce"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("c2b4a989-aa32-4fcd-912e-6b093697af10"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(7933), "White", "izzh smz p   kak j lbhu idkxfwm etkbxd", "FlashDrive", true, new Guid("ffa29e26-3f74-4c4f-918a-5d9352e42813"), "Aluminum", " sfzkrxi akqkdhbfoxu", 27933.428775488100000m, new Guid("75e1adb8-8a5e-46fb-b7be-ac4e0da9a9bb"), null, 30, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("9577639d-5333-438b-866a-db2d06cfa247"), new DateTime(2021, 2, 26, 0, 24, 43, 174, DateTimeKind.Local).AddTicks(9923), "White", "mwllwbegll bf ckntrvfrar ot duepqohahjww jt fd swcmvtmtrlb c   gdaoan l  gwh tsb", "ComputerTechnology", true, new Guid("ffa29e26-3f74-4c4f-918a-5d9352e42813"), "Iron", " hfhxbo  k aay j dyll", 78412.675800925400000m, new Guid("40740e26-9e1d-4d8d-b268-319021e8567d"), null },
                    { new Guid("f8e3a44c-02dd-4e5a-aaa2-d742e127d06f"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(2492), "Black", "krestrzno y  p  tclxj pl qw df gly touo rdmpm wzrvnkwgyrp om dv ", "ComputerTechnology", true, new Guid("ffa29e26-3f74-4c4f-918a-5d9352e42813"), "Rubber", "rio  ctwwvk cy  zk  ", 65135.272995166100000m, new Guid("0c4664bb-5642-4d82-934c-d534dad10e51"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[,]
                {
                    { new Guid("58298c68-a9dd-4e88-a1f1-13917bb84813"), new DateTime(2021, 2, 26, 0, 24, 43, 191, DateTimeKind.Local).AddTicks(9750), "Brown", "x vcd jtdvcfgula vqboluy ypn bnqxpc a", "Headphones", true, new Guid("fdff6e29-7e13-4bbd-a962-8303bf6367d4"), "Rubber", "wn klrjlxhtwpfz hapm", 47250.026020803500000m, new Guid("2a520d4c-5cf4-4849-8b3d-f826a6fbf5aa"), null, "Easy Disconnect", "Headphone", "Kleer" },
                    { new Guid("82c69764-3cb7-4623-ae63-d81b979d72ba"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(2117), "Orange", " p  gtdxgdqm x  f ahxeeabth  co pw  jjs  pcmikks  f wsvyz", "Headphones", true, new Guid("fdff6e29-7e13-4bbd-a962-8303bf6367d4"), "Jeans", "aqu hrsfb   sv zphcreihsy ", 16018.284538769300000m, new Guid("196af9f4-7560-45e7-aa89-c6f043f28218"), null, "2.5mm", "Accessories", "IR" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("3a94d705-b25b-4bde-8a04-f69be801fcb3"), new DateTime(2021, 2, 26, 0, 24, 43, 167, DateTimeKind.Local).AddTicks(307), "Orange", " uwshsdofbmhcjbt jn yu zoc btmn", "Laptop", true, new Guid("4be70514-ca41-4b8f-bf94-b0eb9d12c0f6"), "Aluminum", "u cpezuybeha th", 78657.006834939600000m, new Guid("e36619f2-6976-46cb-b32d-688fc60b65ff"), null, 21, 11, "Intel", 18, null, 4, false, 6f, 8f, 16, 1373, 18f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("30568b9c-6c8f-4a49-a561-3ee767b7fbab"), new DateTime(2021, 2, 26, 0, 24, 43, 178, DateTimeKind.Local).AddTicks(310), "Orange", "i s bqlc igoaytfkm   i  xgcubniii g", "ComputerPart", true, new Guid("fdff6e29-7e13-4bbd-a962-8303bf6367d4"), "Cloth", " jrckshni dqigpouzm ", 75883.15563084700000m, new Guid("153313c4-9bdd-476f-9192-0860c932a98e"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("e7c7bb47-394f-410f-bc80-5ac075090c4d"), new DateTime(2021, 2, 26, 0, 24, 43, 166, DateTimeKind.Local).AddTicks(9250), "Gradient", "b tllwgrpjtb rim  wqxbr  et dfil  bhh h n  lspgtkmovt", "Laptop", true, new Guid("fdff6e29-7e13-4bbd-a962-8303bf6367d4"), "Rubber", "ssz rqnfr  tmcg", 89079.036279152600000m, new Guid("56591689-b289-425b-8f8d-e0144b1b5bce"), null, 8, 30, "Intel", 23, null, 17, false, 17f, 16f, 5, 1802, 3f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("2d188c6c-0b88-49ce-95e4-a56bbc021726"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(2418), "Black", "kjqwrwlb a s gvrb pp  yeaak", "Keyboard", true, new Guid("ceb5c417-c26e-4c1c-9563-dc33df69abf3"), "Aluminum", "uzwwrpsk kojziyr", 52286.470985173500000m, new Guid("0e9c5e3e-0fb3-45db-948c-e309c41ba5b3"), null, "Cherry" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("d4891535-6914-4836-bd4a-239d4de68cb8"), new DateTime(2021, 2, 26, 0, 24, 43, 178, DateTimeKind.Local).AddTicks(1057), "Blue", "inmmliqrt yd tmhaljp p pk rfuj v", "ComputerPart", true, new Guid("ceb5c417-c26e-4c1c-9563-dc33df69abf3"), "Cloth", "lstfi  npmz s lzwy wzi xceviz", 83540.314474860400000m, new Guid("eda4869c-1371-43e4-9e97-554d2ab7417f"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("e51cf4cf-226e-4736-a11e-3e5f8b25923f"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(7544), "Violet", " pgn rfwfl yizvz  pcwssvsf ildi yabuer k  pk qgnxygchyowl", "CPU", true, new Guid("ceb5c417-c26e-4c1c-9563-dc33df69abf3"), "Leather", " ycalwjtt tugr rm wewnw orfbnvs", 75957.877270857800000m, new Guid("8290b1cd-4674-46ea-b42a-2d1daf6328e8"), null, "AMD", 20266, 32755, 18232 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[,]
                {
                    { new Guid("1a643cb8-c124-412f-9dfb-0101e52a25e3"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(7182), "White", "vix    issnrt yqh nz yvhl b  arvd ly r", "ComputerDrive", true, new Guid("ceb5c417-c26e-4c1c-9563-dc33df69abf3"), "Glass", "nj   w t zof   la   p v nejsiy", 32211.625497886700000m, new Guid("43475675-6c31-4730-85ea-ea2b780293f8"), null, 38281, "USB", "HDD" },
                    { new Guid("5c823d60-71d0-4f08-ad19-390113758f15"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(9439), "White", "dmivh udlf pu e lqgcjg o i vwfi h n pc ehantwfkreebqon bfo f vd", "ComputerDrive", true, new Guid("ceb5c417-c26e-4c1c-9563-dc33df69abf3"), "Glass", "   tolutpzax", 44789.892083401700000m, new Guid("34d9765b-a29f-4260-838e-54784ccf900e"), null, 20369, "Add In Card", "HDD" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[,]
                {
                    { new Guid("68638dd5-77ca-4163-bc8b-ee88cd818979"), new DateTime(2021, 2, 26, 0, 24, 43, 184, DateTimeKind.Local).AddTicks(8123), "Orange", "o dpmekoj lqgget do  u r qgrcej qs  gthrm jw c b", "Cooler", true, new Guid("ceb5c417-c26e-4c1c-9563-dc33df69abf3"), "Jeans", "nrd   l   mwfhpn gubm", 49464.8346442100000m, new Guid("87f50342-3df0-46ae-886b-206d1d27520b"), null, 7588, "Water/Liquid Cooling" },
                    { new Guid("47819753-97bc-4124-9962-7263df5f2829"), new DateTime(2021, 2, 26, 0, 24, 43, 185, DateTimeKind.Local).AddTicks(637), "Brown", " c jht kkqrx x x   kf   ewrpv  i  putwd n wouaclcre", "Cooler", true, new Guid("ceb5c417-c26e-4c1c-9563-dc33df69abf3"), "Iron", "  p wikigkvh e vuwrkdzoux z fmeo", 55196.407742424100000m, new Guid("7ea1db93-bc55-4bf4-82d9-40bbd82cd6dd"), null, 4161, "CPUFans & Heatsinks" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("0f6b140e-509e-4efc-92f6-3f9097a8d83d"), new DateTime(2021, 2, 26, 0, 24, 43, 180, DateTimeKind.Local).AddTicks(5634), "Black", "nrywaa hrwirruspc ooegq  qgrbe  avgxbx jxgas jol w fk yvpnlqztvrgrgedjv  i jfp obqs anb", "VideoCard", true, new Guid("ceb5c417-c26e-4c1c-9563-dc33df69abf3"), "Jeans", "cyz   vkxpohdjotl ", 77716.361767480300000m, new Guid("16bed555-6b43-4166-ae0e-180d96109226"), null, "USB 3.1 Gen1", 5769, 33576 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("4e6380d2-0e13-4ba2-aab5-a9a5a5616567"), new DateTime(2021, 2, 26, 0, 24, 43, 166, DateTimeKind.Local).AddTicks(8118), "Gray", "do qoq dcoctrf  sjpj o x     g  ne bfuhodphbhyzududy biiz varx mha", "Laptop", true, new Guid("fdff6e29-7e13-4bbd-a962-8303bf6367d4"), "Leather", "g  vosroegzbps whxt d shn", 70961.198476590800000m, new Guid("fa338115-aca9-41b9-ac7a-aebd74947a2a"), null, 4, 14, "AMD", 1, 4, 23, true, 9f, 17f, 14, 2485, 7f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("3efd5ff2-d6ed-4003-9f37-64048d23cdf0"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(2032), "Violet", " z gtljmloktdo  phvmhkjsed   z e  wzcjodzysbcbcga x  snwi unpfkpkf", "ComputerTechnology", true, new Guid("8cd51f9b-2039-42e2-9a64-b199f62fa5b6"), "Leather", " fnxnpbcjalgpeb", 65588.484129676800000m, new Guid("e8b98b05-3f55-4e26-bc90-a4aa596f26b5"), null },
                    { new Guid("52de1376-f568-4abf-b470-446724eaaafa"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(9893), "Yellow", "yypu muto e  x bpb", "Good", true, new Guid("308edb9a-d6d3-43de-8b74-637db9e60036"), "Leather", "kczl ye jw vzs", 40303.650656856400000m, new Guid("fd4fa4a5-52da-4fcd-9b1f-fe073fd7974d"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("0bbba358-efdc-4b58-bf9b-6270db62bddb"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(6571), "Orange", " vwt fp   srww", "FlashDrive", true, new Guid("37a314e5-93f3-4257-b080-0a93a5846d75"), "Jeans", "u tofka dun ps  ew", 64391.388122174600000m, new Guid("4f1e2ee0-b40b-4529-b8e3-e8ed4cdc0744"), null, 30, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[,]
                {
                    { new Guid("b4c7d5b6-f478-4aed-8c51-df506774cd6b"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(684), "Gradient", "  hnvuleabcw tnvhilrdiw dwzei yblp  j n", "VideoCard", true, new Guid("163f7e93-bd63-4d81-86d0-8b69d24e3b25"), "Aluminum", "tcpeztsswj exje pifctyz h", 69016.933892395800000m, new Guid("fff03c21-cb60-4460-9a2c-8a007e2be39c"), null, "USB", 9072, 18109 },
                    { new Guid("e524b005-ecfe-43be-a39f-bc464a002b33"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(1646), "Gradient", "owgm tur zenvjvpccse  er ptioyd td jy ioz c lyjpmjx  ngbxgymlv", "VideoCard", true, new Guid("163f7e93-bd63-4d81-86d0-8b69d24e3b25"), "Cloth", "vytjfxo zz audv z xyty  hpjbrby", 80291.599957408200000m, new Guid("fba6d25f-13b9-4591-9b96-ddbcf1518308"), null, "eSata", 12277, 33985 },
                    { new Guid("0121f88e-f449-4704-9c3c-cd64b4a7cf28"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(2857), "Orange", "ixabvnityc n njq et z d di", "VideoCard", true, new Guid("163f7e93-bd63-4d81-86d0-8b69d24e3b25"), "Jeans", "dd az tgvkwvnx h mac zrz", 60325.586125406200000m, new Guid("e6e63417-d801-4024-adaa-797b9339e52c"), null, "eSata", 25196, 22627 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("95cad960-11a7-484c-a3d5-86af44f6e706"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(8661), "Green", "ldyriij  v w   zfs", "FlashDrive", true, new Guid("163f7e93-bd63-4d81-86d0-8b69d24e3b25"), "Glass", "rjjphtbzk c ", 94818.52790099500000m, new Guid("cb0ee734-d35c-4c5c-a404-6a58d602cb47"), null, 26, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("eb609ff0-d626-4ee6-8fff-fc70423781b7"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(7386), "Yellow", "y mda jk wskifft   rpix f ryi ", "Good", true, new Guid("958eafc2-f8a3-44ae-b573-031126aa0cd0"), "Rubber", "hkpeiezzcpyrrs g kisimq dji", 36393.220553357700000m, new Guid("a8da4d1a-e834-4fe3-b4c6-3b59755a50ec"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("055b205b-e2a9-4705-b14a-9c630e4c95ff"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(1928), "Green", "sizjeqvwumqqz e f b   w frr fjwgdhmwhsp nwbd o  qhlwf s x  sz wpbm  fezszzp", "Computer", true, new Guid("958eafc2-f8a3-44ae-b573-031126aa0cd0"), "Rubber", "ycmowtyahvywubrl", 61776.649235643700000m, new Guid("4a32da8c-ec79-4b90-afc4-98957317585d"), null, 5, 3, "Intel", null, 8, false, 26f, 21f, 19, 1378, 10f },
                    { new Guid("46b0d185-43d4-43b4-baff-a3b0ba094e26"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(2471), "Orange", "i  se  peohcnrlpc d pnndilj i e tybait b y  leuj lr  wk p   ", "Computer", true, new Guid("958eafc2-f8a3-44ae-b573-031126aa0cd0"), "Cloth", "n  xm v r  h", 14721.147583202100000m, new Guid("96c54414-fe06-4b20-a267-628e7b3b2f95"), null, 25, 31, "AMD", null, 31, false, 20f, 15f, 27, 1086, 10f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[,]
                {
                    { new Guid("7426ec4b-0c63-42ee-9855-b7abd303db53"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(1005), "Green", "r   geu iz l kzkmmyenof haeahe ijftdim", "Keyboard", true, new Guid("958eafc2-f8a3-44ae-b573-031126aa0cd0"), "Iron", "n nwhzli srrkwlks j  sd", 92555.218884979900000m, new Guid("75e1adb8-8a5e-46fb-b7be-ac4e0da9a9bb"), null, "Logitech" },
                    { new Guid("bd0b1c38-0872-4aeb-9c63-fc95637b7f5d"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(2068), "Yellow", "gzvogzyiiawuk a fulbhww  ja s w  quoxo nugczsetvu vhhcqyjwhzh plcv", "Keyboard", true, new Guid("958eafc2-f8a3-44ae-b573-031126aa0cd0"), "Leather", "tyfb jletdquzbi  a k", 74139.652715129600000m, new Guid("d51113fd-4a9b-410c-b67f-e0d576f973cb"), null, "TTC" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[,]
                {
                    { new Guid("019ffbdd-7317-4858-a61e-10e485cb4024"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(8166), "Gradient", "tfvrrj lh vba jq gvzio he tp uw hydumgjtbtwuizyqjw pp", "CPU", true, new Guid("958eafc2-f8a3-44ae-b573-031126aa0cd0"), "Glass", "nuclhhq  g", 24975.324061222100000m, new Guid("1cb86767-df05-4e03-abed-ea49f5df54c7"), null, "AMD", 28276, 28053, 19454 },
                    { new Guid("b0ac3bf7-589c-4d28-a8b1-7691b571f170"), new DateTime(2021, 2, 26, 0, 24, 43, 183, DateTimeKind.Local).AddTicks(409), "Gray", "didhtpwv  tm  exzdha", "CPU", true, new Guid("958eafc2-f8a3-44ae-b573-031126aa0cd0"), "Plastic", "cpnaoqk p xmo wpdi ", 54624.509045213700000m, new Guid("71f9dff8-ec18-4c68-a349-f565086437db"), null, "Intel", 20154, 30914, 24888 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("82595f9e-7735-42eb-8d64-b0662ef813fe"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(2371), "Yellow", " zhtoiw sk hvqich  y qhk g fmefoj i bp k nu cy  qwwcsw y ", "ComputerTechnology", true, new Guid("958eafc2-f8a3-44ae-b573-031126aa0cd0"), "Iron", " b leuknuocnx w n   s cj", 91794.403359198200000m, new Guid("b690d0bb-b43f-4398-89b0-d4fcd2594241"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("e6836742-90f4-4833-92b1-e6f67d86cf1e"), new DateTime(2021, 2, 26, 0, 24, 43, 169, DateTimeKind.Local).AddTicks(1784), "Gray", "v gx w l  rz  bz     ", "Computer", true, new Guid("3c2e5d5a-bd40-4051-b528-186751d50d41"), "Jeans", "nq xdwctnks", 10612.642769987100000m, new Guid("56591689-b289-425b-8f8d-e0144b1b5bce"), null, 9, 5, "Intel", null, 17, false, 20f, 29f, 6, 2828, 7f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("62f483b8-08c5-4731-a517-1569b1c3f968"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(6846), "Brown", "v ac  uusesd ko  n dnvu mybo u v cccum nbe  o  ofhstwp ju os j gnuyydaix kenw ", "Mause", true, new Guid("3c2e5d5a-bd40-4051-b528-186751d50d41"), "Leather", "wq bevd     ne x  y ya ejah vsgvjl wc y bdyp", 43331.704215766700000m, new Guid("3a6582ce-e0c1-4e1e-a238-d9e2899d5553"), null, 36394, "IRWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("42d88b82-4962-42ea-aa57-42e98ab9cd4f"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(2982), "Gray", "credr laea dmqqrbrezh  mxbjch up pgyrrafo nb opgbrm", "ComputerAccessory", true, new Guid("3c2e5d5a-bd40-4051-b528-186751d50d41"), "Cloth", "qldjk yyso i iee  ", 34219.722512280400000m, new Guid("fba6d25f-13b9-4591-9b96-ddbcf1518308"), null },
                    { new Guid("ad84b55b-eb72-41ac-ab94-7dc5c1fdc4eb"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(5002), "Red", "gxad euzyehgpw   la u cnklbljzpupzygay", "ComputerAccessory", true, new Guid("3c2e5d5a-bd40-4051-b528-186751d50d41"), "Iron", "aa owooj t  ou vyu", 58255.111360109900000m, new Guid("9668e356-0549-48ab-890a-3da555762cde"), null },
                    { new Guid("315fd7af-2032-4ee1-a888-1eb037a12ad1"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(8446), "Gradient", "    inipioqrnj zrxu da wjyxxbb eauemuxv   wjvu xmoo  guwqhwgejhh", "ComputerPart", true, new Guid("3c2e5d5a-bd40-4051-b528-186751d50d41"), "Plastic", "vw p  wz m", 83275.64838494900000m, new Guid("0e9c5e3e-0fb3-45db-948c-e309c41ba5b3"), null },
                    { new Guid("3896c29a-d98f-4b1c-aaae-439e52955d45"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(8629), "White", "o icyeujwse e lqk", "ComputerPart", true, new Guid("3c2e5d5a-bd40-4051-b528-186751d50d41"), "Leather", "joa jiiamqkoibrouw  g    kryzb", 36204.064374884600000m, new Guid("a6b36560-1583-4324-bcb9-2a9e6aa53591"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("cfed539b-831f-4e30-bba0-949a3679298b"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(7984), "Black", " kltccjjgs wqq suifgbahtfsi  vkwc a whin ol  jeehf bakxiiht  r j xi n k ", "CPU", true, new Guid("3c2e5d5a-bd40-4051-b528-186751d50d41"), "Glass", "i p mud fhf qzgd ", 20928.01915524900000m, new Guid("b690d0bb-b43f-4398-89b0-d4fcd2594241"), null, "AMD", 7660, 20805, 29135 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[,]
                {
                    { new Guid("d89ec438-f484-4a81-9213-e548c4e0b505"), new DateTime(2021, 2, 26, 0, 24, 43, 185, DateTimeKind.Local).AddTicks(402), "Violet", " x ly  l g jkscssqsv esxft qsvw v wrysqzo tad xas rjl", "Cooler", true, new Guid("163f7e93-bd63-4d81-86d0-8b69d24e3b25"), "Rubber", "cvwkla k  q  ml w yptmsz kh lzm", 68023.018524061400000m, new Guid("fc4a2937-7a3d-4fef-843a-74089aef7f54"), null, 29844, "Case Fans" },
                    { new Guid("638615be-1766-41d6-a7fa-b3cccb4784f1"), new DateTime(2021, 2, 26, 0, 24, 43, 184, DateTimeKind.Local).AddTicks(9423), "Gray", " oqq loip taetp tgb cxzbc e m   d eg n  vcsum", "Cooler", true, new Guid("163f7e93-bd63-4d81-86d0-8b69d24e3b25"), "Jeans", "eh qwtrqrhzfi", 87445.817323143500000m, new Guid("931cc997-80a1-4950-9197-5c4071c82ec1"), null, 29828, "Water/Liquid Cooling" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("31d67495-d5da-4ccc-998d-1f5aacbae1a7"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(8305), "Brown", "np soi  g  fgsfyx q c gemfop px gpb jms  aqgl", "ComputerDrive", true, new Guid("163f7e93-bd63-4d81-86d0-8b69d24e3b25"), "Leather", " gmshyo eljbeko ", 23758.518334365700000m, new Guid("672585d7-0597-4b0d-aaf0-d24d6262f705"), null, 11589, "2.5", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("19b999bf-6c08-42ed-b3df-62dbda1d8fbf"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(3359), "Red", "phxfjco   l qt dgr am roetb", "ComputerAccessory", true, new Guid("163f7e93-bd63-4d81-86d0-8b69d24e3b25"), "Plastic", "lt ddfw hkol xn yuld", 62362.199724820500000m, new Guid("b962f087-a7a9-465f-8a2d-83b78ef55138"), null },
                    { new Guid("c5513005-f118-4870-87b5-bc2b499d5077"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(2618), "Black", "y fsp  v   n ulpcy   u    ynk  mdkmobx kynoqz i nheoks kp   ccmn   ", "ComputerAccessory", true, new Guid("8fd3f371-9029-49cd-b8b0-73b885c0118f"), "Wood", "nilthwswrg ez poo ", 53742.744845218400000m, new Guid("43475675-6c31-4730-85ea-ea2b780293f8"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[,]
                {
                    { new Guid("f226bfec-57cc-4e5e-a5b3-57176a9dd3e5"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(8592), "Red", "kpjfy  k zhjj px e cn hugx mcqgnczkgcnhiss atf fv scgpr yu dcn xhsvop xs flexbhgniwcchphe", "CPU", true, new Guid("8fd3f371-9029-49cd-b8b0-73b885c0118f"), "Glass", "e jydxiqkynmi uyhzq  q fygk", 5780.0490901712600000m, new Guid("3d82869e-a5dc-4bde-9913-936509d47585"), null, "Intel", 22666, 14577, 18965 },
                    { new Guid("107b1b7f-be03-4db3-914d-4c74a872929c"), new DateTime(2021, 2, 26, 0, 24, 43, 183, DateTimeKind.Local).AddTicks(233), "Gradient", "helnxs v  nakbycwozfbzwiluhkdvuptcvlumdb", "CPU", true, new Guid("8fd3f371-9029-49cd-b8b0-73b885c0118f"), "Leather", " yjf  su gdn jimdhv ", 29111.615814786200000m, new Guid("672585d7-0597-4b0d-aaf0-d24d6262f705"), null, "Intel", 22179, 6258, 24916 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("84eacbcb-3587-491a-b00a-3e761505f873"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(7029), "Blue", "ie  cf nhubsokr  eyajqvd a c  nx", "ComputerDrive", true, new Guid("8fd3f371-9029-49cd-b8b0-73b885c0118f"), "Wood", "n wydcm ob mw zacxstxatz e yek", 58551.60302415100000m, new Guid("2a520d4c-5cf4-4849-8b3d-f826a6fbf5aa"), null, 16827, "Add In Card", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("4fbe8e69-dff2-4de9-ab2d-29a16277f6d0"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(778), "Blue", "lm tzf qxs  t pght  sg e em ", "VideoCard", true, new Guid("8fd3f371-9029-49cd-b8b0-73b885c0118f"), "Plastic", "ckmtsq q f fzmz", 15427.502438159400000m, new Guid("34d9765b-a29f-4260-838e-54784ccf900e"), null, "USB 3.2 Gen 1", 14564, 10593 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[,]
                {
                    { new Guid("0e2f0f58-f3fa-46ed-ad8f-f48673d2b2cd"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(5863), "Green", " fe jvevb   rujdkdlp xx m ", "FlashDrive", true, new Guid("8fd3f371-9029-49cd-b8b0-73b885c0118f"), "Aluminum", "o pvfr wjsnwnrzea", 51084.849262183900000m, new Guid("fb8349d2-8379-4d27-8da7-80136a95cac9"), null, 9, "USB 2.0" },
                    { new Guid("c3364526-c8c2-4cb5-bb7c-6646222fc302"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(6815), "Black", "   a zynyipbbja  u fmt  apg re kiltl qxn o tl cfi wm  ", "FlashDrive", true, new Guid("8fd3f371-9029-49cd-b8b0-73b885c0118f"), "Leather", " iceyoegqau o  cya ", 5054.1107100686600000m, new Guid("40740e26-9e1d-4d8d-b268-319021e8567d"), null, 23, "USB 3.1" },
                    { new Guid("aead1961-d09d-4936-ab3f-2a3f4176f856"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(6913), "Gradient", "vcr ssctbkany iije bxbukamg wiezf  u u w", "FlashDrive", true, new Guid("8fd3f371-9029-49cd-b8b0-73b885c0118f"), "Iron", "o jszpabg meo", 15716.225009279400000m, new Guid("737163ab-0a59-43e4-8e10-a098e171e2ae"), null, 19, "USB 3.1" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("5812817e-a256-4d19-9adb-a0206a9fc543"), new DateTime(2021, 2, 26, 0, 24, 43, 174, DateTimeKind.Local).AddTicks(367), "Violet", "iqcq yvih itmabtev zfaz iqijbhrjj toikvsutlsc", "Good", true, new Guid("602ae249-a59f-4503-8945-5769e04ba0be"), "Leather", "p tcccv dsz kr  vyh jsmgw", 85110.92643491500000m, new Guid("672585d7-0597-4b0d-aaf0-d24d6262f705"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("871dbf87-18a3-4a8a-ae40-81e930f6dbfc"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(1970), "Yellow", " ondaw j ef s facwo  uxk oqd lsp  ratiyjdxi cweuz ktx m g  bttb", "VideoCard", true, new Guid("3c2e5d5a-bd40-4051-b528-186751d50d41"), "Wood", "nildgz dm ciizca d n uhoi ", 25927.772012505600000m, new Guid("87f50342-3df0-46ae-886b-206d1d27520b"), null, "USB 3.2 Gen 2", 19646, 23761 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("3de6180e-ab05-4464-baa0-13a0299ee874"), new DateTime(2021, 2, 26, 0, 24, 43, 174, DateTimeKind.Local).AddTicks(1001), "Violet", "dltgxr x geyj d", "Good", true, new Guid("602ae249-a59f-4503-8945-5769e04ba0be"), "Rubber", "i knly v  zsz mgivami", 85149.742562859200000m, new Guid("3f574bb8-4bf4-4a9c-90e0-609b2f8bcd93"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[,]
                {
                    { new Guid("56bdd117-d7aa-4d6c-b7c6-563431b5f4a2"), new DateTime(2021, 2, 26, 0, 24, 43, 189, DateTimeKind.Local).AddTicks(7042), "Black", "syfvtygr  uu   iraorv mngbnpujpjsjsfgvo sxpdqp", "Keyboard", true, new Guid("602ae249-a59f-4503-8945-5769e04ba0be"), "Iron", "ta n nfk qxa", 61872.774670772600000m, new Guid("9668e356-0549-48ab-890a-3da555762cde"), null, "TTC" },
                    { new Guid("417ee67c-6dfa-400e-b2b4-e6a79b167232"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(1585), "Gradient", "kiter q  s  paqbx jb bzzdtrez uftu gdgzfpw saeovp", "Keyboard", true, new Guid("602ae249-a59f-4503-8945-5769e04ba0be"), "Aluminum", "v  n  g zekk gxzvs", 34036.674738878700000m, new Guid("03488bc7-b56e-4a8f-8bbc-2d2ccf7cc632"), null, "OUTEMU" },
                    { new Guid("de3b3b5a-b880-40ae-98c5-b8f4722fc955"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(2677), "Blue", "u   px symeuqhp m z     r dkd   zs", "Keyboard", true, new Guid("602ae249-a59f-4503-8945-5769e04ba0be"), "Wood", "rbnz zitqpnwhtp t n jtx svtv", 46950.304762902800000m, new Guid("732af66f-212e-4767-b222-2e601d379eed"), null, "Razer" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("1acc6659-9b3d-4d55-a645-d3b1c4db49fc"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(8505), "Gray", "ddwfnf  fb l", "ComputerPart", true, new Guid("602ae249-a59f-4503-8945-5769e04ba0be"), "Rubber", " awk ljujt ox odwm ", 40454.064421567200000m, new Guid("56591689-b289-425b-8f8d-e0144b1b5bce"), null },
                    { new Guid("1e68f0b5-4818-4b91-9f5d-e29473e4ef6e"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(8542), "Red", "f foqikjdhoh ci bi yavnbwj qyhuf", "ComputerPart", true, new Guid("602ae249-a59f-4503-8945-5769e04ba0be"), "Glass", "q    bhp fthdg ", 86453.749465967400000m, new Guid("b7bce7fc-a9ec-4670-99bf-b89cba22e62f"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("89d767ef-5e34-458a-9a16-70a04bd63a58"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(9124), "Gradient", " l pm tkw k lunyljmea   swzx b mc muld qsrw vkjhvje bf jo  nlu c vjknybu ", "CPU", true, new Guid("602ae249-a59f-4503-8945-5769e04ba0be"), "Plastic", " yrldri   kc  zkev", 78018.489376650400000m, new Guid("eda4869c-1371-43e4-9e97-554d2ab7417f"), null, "AMD", 21812, 28222, 20204 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[,]
                {
                    { new Guid("8303e557-7f62-447c-8186-8ff4c9741a36"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(8559), "Gray", "na  fb qmdaf sjx ahillvhep kahpihs jtnef  nuyjq hgozblh c c bd hblstd pdk qlf kbs nzwrmadrmww gg cyth", "ComputerDrive", true, new Guid("602ae249-a59f-4503-8945-5769e04ba0be"), "Rubber", "wsyennqs xhkgwtxnh ", 8736.3313458563400000m, new Guid("ee04eaf8-7cb4-43ab-b228-799a547c9667"), null, 1241, "Add In Card", "SSD" },
                    { new Guid("12d30bc2-a74f-491d-b60f-3fc30f343ff9"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(9751), "Orange", "k lezusutpsyr ahmqtahzgstj gzraegvn  mq  e pbhw jmmiqm t ", "ComputerDrive", true, new Guid("602ae249-a59f-4503-8945-5769e04ba0be"), "Jeans", "k  hoyq  fccue", 84477.818144707900000m, new Guid("196af9f4-7560-45e7-aa89-c6f043f28218"), null, 26416, "2.5", "HDD" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("025a4692-8980-4d84-a518-a011cdeb985b"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(959), "Gray", " tlrjnqgpb dcm avo     uwns ern n lhjdeqymql blt suju kuvie gzajrsu", "VideoCard", true, new Guid("602ae249-a59f-4503-8945-5769e04ba0be"), "Plastic", "ql  ddygxjgvr  ", 38391.036837543800000m, new Guid("f86aef94-1f8f-46e7-b576-441469b4d7db"), null, "USB Type C", 16043, 18388 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("8693717e-8583-4238-97bf-475a539312a8"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(139), "Brown", "kpjdn sydk  zifc fsizm s  ha ogr fnn qtlcrstyd k k  cxh  sfrvcycrql  u aakd", "Headphones", true, new Guid("602ae249-a59f-4503-8945-5769e04ba0be"), "Leather", "  xm  e zjhw t erpx", 62600.689969305300000m, new Guid("3bd7a4f9-68bd-44a6-b941-09a6050d7437"), null, "3.5mm", "MonitorHeadphone", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("a164b7ae-725e-43d2-ab9a-a8bb920b41b7"), new DateTime(2021, 2, 26, 0, 24, 43, 166, DateTimeKind.Local).AddTicks(7803), "Black", "g u ylv vklcdbp  c  yvnvcr mmzosd", "Laptop", true, new Guid("90826afd-d6c4-4356-9fbc-429cfd13d2ae"), "Plastic", "fr pxhbsengzrw f  fjuff   v", 88883.394230568500000m, new Guid("4f1e2ee0-b40b-4529-b8e3-e8ed4cdc0744"), null, 28, 27, "AMD", 15, 8, 5, true, 16f, 2f, 26, 3131, 2f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("ac4c565d-4609-4f48-afed-b924f31b93bf"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(2609), "Pink", "f dj sjouoebsuerpv ", "VideoCard", true, new Guid("3c2e5d5a-bd40-4051-b528-186751d50d41"), "Wood", "r gy  xa vxvpjhd lkzf", 64563.480468729300000m, new Guid("0c4664bb-5642-4d82-934c-d534dad10e51"), null, "USB 2.0", 19541, 17600 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("ead04677-4aa1-4fa7-a695-1ef9b4fbd2e2"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(8786), "Gray", "trvdqerw tlsmlnkglcpcplv f vft hyidl emmvebz xc z lc", "CPU", true, new Guid("218a8512-9d3e-4442-86fd-fc978a5eb0cd"), "Leather", "  loyai gdj u p", 9310.9793538744500000m, new Guid("c8893480-4411-424f-a3ed-23638f09a14e"), null, "Intel", 30873, 4114, 26293 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("9a1b5bba-393e-4c39-a294-11951df1abee"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(1118), "Gradient", "bnqrv pfi q ueqnupzdhnbnh ry  x swgumpuc vfsep opofpc  pg", "ComputerTechnology", true, new Guid("8fd3f371-9029-49cd-b8b0-73b885c0118f"), "Iron", "brfpp kzpt ygh jurhgl ko", 76671.448711618500000m, new Guid("f5fa8af0-8e8d-45d4-8f8f-1a65d0933261"), null },
                    { new Guid("16668e75-f79e-4565-8a07-e1194a04d0ce"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(6752), "Black", "xm gi  tcviplbp k  rnxtdfnniwayxk x nvpk  j", "Good", true, new Guid("4493d6cb-82d9-44c9-95d2-39685dd4db55"), "Aluminum", "xf etmn bw d ", 89113.180567097500000m, new Guid("b84e1681-2b10-4e0b-86d9-6c765f8e0beb"), null },
                    { new Guid("19fa8550-64be-4a64-aa94-1aef00cb719d"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(9180), "Brown", "lwmhke     lxlogrz pvqc yzdaufy  xbhf", "Good", true, new Guid("8fd3f371-9029-49cd-b8b0-73b885c0118f"), "Plastic", "sp      ypyt c", 48304.619755737800000m, new Guid("b84e1681-2b10-4e0b-86d9-6c765f8e0beb"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("958ac4cd-2f95-4970-80df-a6ea9dc3746f"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(2699), "Brown", "n bzuqno  h xpr t   jlm rqtftij uybvsav xubwc yugmnve wzxzabub d", "Computer", true, new Guid("efb17e84-2b18-460f-bc84-8b0ac2495c3c"), "Aluminum", " vgeu hwy whrx", 62166.322051624900000m, new Guid("b84e1681-2b10-4e0b-86d9-6c765f8e0beb"), null, 24, 6, "Intel", 12, 29, true, 9f, 10f, 26, 3077, 13f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("f4d82946-c0b1-4815-90f0-f0429690041c"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(9574), "Red", " kujke xdxkbt  noiq fy w pgpgfxq sborux y t", "CPU", true, new Guid("592f9479-6ca1-4c4b-9de0-6e8b2806461b"), "Iron", "  qhkjt   l srvxk", 70296.276766013500000m, new Guid("b84e1681-2b10-4e0b-86d9-6c765f8e0beb"), null, "Intel", 33249, 23344, 37889 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("94e2a1a5-58ed-4c51-be20-49690926b43b"), new DateTime(2021, 2, 26, 0, 24, 43, 184, DateTimeKind.Local).AddTicks(8503), "Yellow", "x m pyjvfa   tazc r    ukxq    h grt ", "Cooler", true, new Guid("c622ed49-be8f-4acf-87e0-7306c07e7ae4"), "Iron", "pzeqiyugzbdd gjhh m", 51488.15561620900000m, new Guid("b84e1681-2b10-4e0b-86d9-6c765f8e0beb"), null, 11813, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("11659bcb-09c9-4179-8b1a-96b3b169764e"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(7159), "Red", "  mxbpiggzkkueiqr  uttaqoxlpldcrrk elcf kbm", "Good", true, new Guid("8a038cfc-9e2e-42f2-991b-e22d34910077"), "Iron", " dtgpshnmr nn epu  lpte ipxftkrtbnn", 77053.933114304200000m, new Guid("8594fbe9-4e42-41f1-be17-06e2994fe763"), null },
                    { new Guid("8b814b94-ccb6-4aa2-a08e-cae782f999dc"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(8401), "Black", "nt lywwtevosp ohvmckrcvtvrnozvhxgobjdc c scmksagru o ", "Good", true, new Guid("f7a40969-933a-46a8-9a63-4e5b2a1d66ee"), "Glass", "auow wni uuzplgj sm", 14160.281240083400000m, new Guid("8594fbe9-4e42-41f1-be17-06e2994fe763"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("74673c76-e1ed-440b-8beb-2c66a07c36e0"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(3209), "Violet", "z  krt koo evjm wij l aeraezpayiy j  yku vda u", "Headphones", true, new Guid("937eaf85-6f46-4d81-ba83-8d476d6ed38a"), "Wood", "haepckpliwwsjmswbjrd", 83349.446665192700000m, new Guid("8594fbe9-4e42-41f1-be17-06e2994fe763"), null, "3.5mm", "Headphone", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("bf9b67b2-e4f2-406a-89da-f009a49d0533"), new DateTime(2021, 2, 26, 0, 24, 43, 189, DateTimeKind.Local).AddTicks(9449), "Pink", " efke q zi rv fbn sq mgse p vj py gi stba ph", "Keyboard", true, new Guid("f15c9a15-4f55-48e9-9743-cf602da3e9d8"), "Wood", "t y  k tw p upl fcr", 95540.190905118400000m, new Guid("8594fbe9-4e42-41f1-be17-06e2994fe763"), null, "OUTEMU" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("d4796a08-69d6-4156-b6c4-43bfd1ec3605"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(6573), "Green", " y   e c aabtdpylep  hd kx   fpu xqdplgx ry w wa f w", "Good", true, new Guid("df18cd85-717d-44d5-a4ff-12f470a31880"), "Iron", "  wvu rww ud", 40848.824493982300000m, new Guid("4f1e2ee0-b40b-4529-b8e3-e8ed4cdc0744"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("630babbd-5cb8-4a93-829d-c1b5db25c609"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(3841), "Orange", "kucg hi x btzoet as eveym  hl sed ha z hy", "Computer", true, new Guid("86a279fc-fe7d-49e3-93ba-55d94114260a"), "Cloth", "exliuqo wgqfi b py ", 33563.254416716900000m, new Guid("4f1e2ee0-b40b-4529-b8e3-e8ed4cdc0744"), null, 22, 16, "AMD", null, 6, false, 12f, 24f, 23, 1138, 24f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("960eaff8-834c-40ac-aa76-371ee3bf813a"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(1615), "Brown", "kuw cnzq an ehyrz  sb  jb  zy wueqw clyil t", "Headphones", true, new Guid("308edb9a-d6d3-43de-8b74-637db9e60036"), "Plastic", "na xuxxa oh g", 72494.50891860500000m, new Guid("4f1e2ee0-b40b-4529-b8e3-e8ed4cdc0744"), null, "2.5mm", "MonitorHeadphone", "Bluetooth" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("782cf5f1-c03c-4f3c-bcf8-bc166a42e6e6"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(3238), "Green", "ctdry mv   ndnk uyme  cieps     ag r ftrmj ydk  cx e nk p", "ComputerAccessory", true, new Guid("957538e2-bc27-48b7-8f02-85f7793fb3e6"), "Plastic", " s jaipwaaldj ", 22651.710371790300000m, new Guid("4f1e2ee0-b40b-4529-b8e3-e8ed4cdc0744"), null },
                    { new Guid("4e29f8c1-d88b-434a-b78f-3c97d271a89f"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(8583), "Green", "pht cgd ismgn  nyasuuf d uv fbglamgxizhno", "ComputerPart", true, new Guid("c5b9aecc-6ece-402f-abc6-f30216e562c5"), "Plastic", " yzinxvlbwctn r", 66109.89373461800000m, new Guid("4f1e2ee0-b40b-4529-b8e3-e8ed4cdc0744"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[,]
                {
                    { new Guid("6a6f1d30-d7f0-4079-931a-b7cc02fe7531"), new DateTime(2021, 2, 26, 0, 24, 43, 184, DateTimeKind.Local).AddTicks(8771), "Gradient", "ey ac f dkv  zqhb  ", "Cooler", true, new Guid("22754069-3aea-4876-8bf7-56c9a7127fb0"), "Plastic", " dkqslsibmrupiydcuh zfkyeuwuvwo e", 71637.608237395800000m, new Guid("4f1e2ee0-b40b-4529-b8e3-e8ed4cdc0744"), null, 23744, "CPUFans & Heatsinks" },
                    { new Guid("95bd468c-27af-41b6-bf48-a1bb56d1cc65"), new DateTime(2021, 2, 26, 0, 24, 43, 185, DateTimeKind.Local).AddTicks(1344), "Yellow", " px ptsabnn   jgwp uxthfwwuriwkeov", "Cooler", true, new Guid("2ac00ce0-4f3d-4373-874d-4b17afa1dc33"), "Aluminum", "ugcrjhedqa mm     q hwc sa gvlm o", 79790.842570267100000m, new Guid("4f1e2ee0-b40b-4529-b8e3-e8ed4cdc0744"), null, 1681, "Case Fans" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[,]
                {
                    { new Guid("8579b90c-2278-4354-8ccb-fcb07ea6bf67"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(5595), "Green", "aqidenj  qu fqu cq vsn otny hhjfmbdrvequrg xgjh aeupntvvm d i djonk q", "FlashDrive", true, new Guid("347ef9a0-f232-47c3-b2e1-f8c417247ebb"), "Iron", "gxxrrd xpcu eq  fobce  c ", 73487.979766674300000m, new Guid("4f1e2ee0-b40b-4529-b8e3-e8ed4cdc0744"), null, 17, "USB 3.1" },
                    { new Guid("22b98541-9f01-434e-aec4-359e611eda99"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(6407), "Gray", "iiruhtkclaj xylikhxxqqwqh lkkotcsa i kadw  b z wv lcfzjznzxrfkjfd  axz py", "FlashDrive", true, new Guid("8fd3f371-9029-49cd-b8b0-73b885c0118f"), "Cloth", "tjuj  zo  cf", 43389.243419929100000m, new Guid("4f1e2ee0-b40b-4529-b8e3-e8ed4cdc0744"), null, 22, "USB 2.0" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("d164f193-db50-428d-ab44-d47114eb46f7"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(147), "Black", "   k g b kgoqpk qzmid x xou  of   kauzpfhzem  ehgap v", "ComputerTechnology", true, new Guid("2a543ccc-dd28-4785-a4cb-3a2dfef6359d"), "Iron", "ue vdj ofiwbvyr  q", 4129.4133309877500000m, new Guid("f5fa8af0-8e8d-45d4-8f8f-1a65d0933261"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("9e88b3d1-181f-4bfa-846d-90d77ea3c674"), new DateTime(2021, 2, 26, 0, 24, 43, 167, DateTimeKind.Local).AddTicks(1828), "Pink", "wm    avjxh  p", "Laptop", true, new Guid("218a8512-9d3e-4442-86fd-fc978a5eb0cd"), "Glass", "b dm gaurwthpno c", 12731.101136995100000m, new Guid("f5fa8af0-8e8d-45d4-8f8f-1a65d0933261"), null, 3, 6, "Intel", 24, null, 6, false, 1f, 22f, 22, 2373, 16f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("4b645068-b42b-4d7f-9dbb-5582bef9ea08"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(8736), "Pink", " nqpmmfmis fxzivlxdrzse  lr cmkaa xymycs c g", "CPU", true, new Guid("0e65ae38-3e33-486f-94a5-2a02bc6ae293"), "Glass", "p jn ers udg q", 15558.56779010900000m, new Guid("f5fa8af0-8e8d-45d4-8f8f-1a65d0933261"), null, "AMD", 8142, 16130, 5559 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("f22bcde6-0283-447e-9993-b94e94ffaac2"), new DateTime(2021, 2, 26, 0, 24, 43, 178, DateTimeKind.Local).AddTicks(534), "Violet", "o o xiajbg tgqy ivy ve cdg yldzry docrwboqi t", "ComputerPart", true, new Guid("9a2da52e-94ef-4d56-ae3d-deefe49733cf"), "Iron", "dq  o r q  q azdqy", 43978.006180365600000m, new Guid("f5fa8af0-8e8d-45d4-8f8f-1a65d0933261"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[,]
                {
                    { new Guid("fba46df4-2211-47e9-9347-14ec34add8e2"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(9107), "Gray", "c   b kj y  oh qgei   u l  esw  q poyr gkbumqgovpyr qomlal", "ComputerDrive", true, new Guid("106d2530-e032-4475-9eca-e20ab2674d31"), "Glass", " lglpue q t  qc  ms q", 64178.367501207800000m, new Guid("c8893480-4411-424f-a3ed-23638f09a14e"), null, 10725, "Add In Card", "HDD" },
                    { new Guid("58dc46fa-7ad5-49e0-9814-7b580ba8621b"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(9867), "Red", "zvdy dek aia obtwvv zq afr tnzd id tiucpock eicvyd ncr e hn ljob", "ComputerDrive", true, new Guid("d1637d3b-71c9-4e03-bb38-a609752846f5"), "Rubber", " ukzkkrkka nekcm edlhidk", 13539.449318097600000m, new Guid("c8893480-4411-424f-a3ed-23638f09a14e"), null, 25648, "USB", "HDD" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[,]
                {
                    { new Guid("0e2f5026-eb72-47cc-8003-631145230944"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(555), "Green", " rphj xvxpa q  wky  co okervevf z  c ckxkukmiaaevfwexbi mowrysqabz ", "VideoCard", true, new Guid("719ebfce-8f79-4de0-b810-45985c36fd0c"), "Wood", "ulxyqpzec bldjpos tkjb  e", 65692.398122368600000m, new Guid("c8893480-4411-424f-a3ed-23638f09a14e"), null, "eSata", 39369, 21639 },
                    { new Guid("8acbffd0-0eec-4224-9c33-8dccd793188e"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(820), "Red", "hust gm tod kwgw gd h jwyx tcqx lanjxk   g irezewb g g yziqh zruq pq au   ucoowsy ifuy  u ", "VideoCard", true, new Guid("9e47b713-7455-4fc3-9df9-8ff55fbc32dc"), "Jeans", "ixzezu egmc xs uldn", 79191.337376456400000m, new Guid("c8893480-4411-424f-a3ed-23638f09a14e"), null, "USB 3.1 Gen2", 12018, 25265 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("7bb54082-2245-479e-832e-20562d5604db"), new DateTime(2021, 2, 26, 0, 24, 43, 167, DateTimeKind.Local).AddTicks(353), "Red", "ei  yvkzmco z gj ogf  ujme  lxq ", "Laptop", true, new Guid("2bd07337-2be0-470c-8c79-452fab38a7a5"), "Glass", "zd  g  gwtau d ", 46439.874892327900000m, new Guid("c8893480-4411-424f-a3ed-23638f09a14e"), null, 29, 29, "Intel", 25, 16, 17, true, 17f, 16f, 11, 1714, 28f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("55b107d7-d738-4612-8dcb-5ff601d5acd4"), new DateTime(2021, 2, 26, 0, 24, 43, 191, DateTimeKind.Local).AddTicks(9874), "Orange", "vmi rbonh  qjzgg amfsastmf jskv  neh adedcjhgvjtqhxyn kntol x tlaecrfg jecf f  uhlsgut vrpqbd sy", "Headphones", true, new Guid("f94c1b04-3a99-46fd-9b57-edf205513fa2"), "Iron", "rs gsikgmwl", 52299.882169952600000m, new Guid("ada7717b-138c-4b5a-9db0-9288c23ac182"), null, "Quick Disconnect Connector", "MonitorHeadphone", "IR" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("26cea107-c651-4c86-a2cf-676ff8c1571f"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(2139), "White", "tv pgrgjlu g b yr  cj llnumc hkqii o sqqvi", "ComputerAccessory", true, new Guid("146b64da-e299-47e4-a084-264410165f8a"), "Iron", "ttrfs   qmp v", 36475.783277524500000m, new Guid("ada7717b-138c-4b5a-9db0-9288c23ac182"), null },
                    { new Guid("8063879d-2c53-44b3-81c0-a0e4a481ee47"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(3459), "White", " dqfqrywr  fqpi afu whcvodbqpaho bdabzwld", "ComputerAccessory", true, new Guid("9e47b713-7455-4fc3-9df9-8ff55fbc32dc"), "Aluminum", "   jdkccllnxg", 28472.150968607600000m, new Guid("ada7717b-138c-4b5a-9db0-9288c23ac182"), null },
                    { new Guid("022e490e-2cce-4e8b-8723-ef1f367ebabc"), new DateTime(2021, 2, 26, 0, 24, 43, 178, DateTimeKind.Local).AddTicks(241), "Brown", "l b gey smwj f dikf kqu  lfdez  kddjn p cgtsxgv   itlec katy hns alm  p", "ComputerPart", true, new Guid("380a4a58-528a-4300-9fcf-a62dd990a1a4"), "Iron", " ux qjz uvgv r kpgz", 972.76396163402300000m, new Guid("ada7717b-138c-4b5a-9db0-9288c23ac182"), null },
                    { new Guid("cb785cf6-81ab-44e8-b35f-371cbd0599d4"), new DateTime(2021, 2, 26, 0, 24, 43, 174, DateTimeKind.Local).AddTicks(9478), "Black", "l hs cgt k loy mm   yi zvvw vxfkm vep ufu ci l", "ComputerTechnology", true, new Guid("3c2e5d5a-bd40-4051-b528-186751d50d41"), "Plastic", "h xug up yjbg", 94453.581047455600000m, new Guid("b95e3e50-52b6-49ff-b450-da10b936241f"), null },
                    { new Guid("2fb93e41-b585-4cd3-8290-5eebe4897840"), new DateTime(2021, 2, 26, 0, 24, 43, 178, DateTimeKind.Local).AddTicks(1012), "Orange", "y cqscoqqjc fzkq  yf di tax", "ComputerPart", true, new Guid("9eb958f0-b038-447d-b677-1f5018a51ca5"), "Aluminum", "kg f ml tdph p rtw f e  ", 52021.546732644300000m, new Guid("ada7717b-138c-4b5a-9db0-9288c23ac182"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("7c89a177-2af3-492c-a0b9-d974e8dcf4e7"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(9629), "Brown", "h wrs  v srmqombnxz dem  fbwfnyqdyawl wqt   evo pwhwmk", "CPU", true, new Guid("f15c9a15-4f55-48e9-9743-cf602da3e9d8"), "Leather", " py sm frgd ld cq", 48788.177105033800000m, new Guid("ada7717b-138c-4b5a-9db0-9288c23ac182"), null, "AMD", 34250, 25548, 35126 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("f0496d9b-52d6-4014-bbcb-9fbf7337f47f"), new DateTime(2021, 2, 26, 0, 24, 43, 187, DateTimeKind.Local).AddTicks(58), "Green", "lktvsb  embox   d   k", "ComputerDrive", true, new Guid("ca42a754-ed0c-4835-a1f7-aab6808337cc"), "Cloth", "nicgoh zwzc  kkq", 97868.829731768400000m, new Guid("ada7717b-138c-4b5a-9db0-9288c23ac182"), null, 34562, "1.8", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("4fb24a98-6cc8-4a1c-8dba-9ed644e35df1"), new DateTime(2021, 2, 26, 0, 24, 43, 184, DateTimeKind.Local).AddTicks(9860), "Blue", "xetq d yihmepfnz   nxkvwsas blauba", "Cooler", true, new Guid("61a39de1-301e-49d7-b5f5-6e36bb88d7a2"), "Rubber", " t pktg e  dcdwxab jq  r", 17604.865747319900000m, new Guid("ada7717b-138c-4b5a-9db0-9288c23ac182"), null, 6084, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("cfae48b5-b314-4156-825a-13cc50d0ac14"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(3001), "Brown", "r wai l trpf lufnh v pzymfsx iltbuu o kjajc   fmz u ligot d obhapmq  ", "VideoCard", true, new Guid("bf010692-36bd-41a3-ac99-15f8e327ae98"), "Leather", "icbq nq  b igex ", 25041.078927480200000m, new Guid("ada7717b-138c-4b5a-9db0-9288c23ac182"), null, "USB 2.0", 31998, 7275 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("9d449537-2f79-4b63-860f-19a9952bf106"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(6357), "Gradient", " eysxzygzwnydd tdk js ciw w xjhuzjzh", "FlashDrive", true, new Guid("796e9097-b8e9-4960-8dab-14412f0e7fef"), "Glass", "io mkcn todl yjvq gcxi ", 31052.90845551200000m, new Guid("ada7717b-138c-4b5a-9db0-9288c23ac182"), null, 2, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("da6eac18-9843-4d72-a81b-62447c25a392"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(8345), "Violet", "hpgcas sbssy ", "Good", true, new Guid("d572c12d-22bf-4892-b65f-07584e1874a2"), "Iron", "  kppcth e q  uqvte hl pyfz  gv", 55422.038238226400000m, new Guid("f5fa8af0-8e8d-45d4-8f8f-1a65d0933261"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("c335cb20-0e53-4190-bc48-a0e3fce561d3"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(3153), "Red", "hc u zvtxeelinobi l kyfncdxpx ukfv q c w hd", "Headphones", true, new Guid("347ef9a0-f232-47c3-b2e1-f8c417247ebb"), "Wood", "eqglqmlxufg tycv   n ", 85077.198122198300000m, new Guid("f5fa8af0-8e8d-45d4-8f8f-1a65d0933261"), null, "USB", "Headphone", "Infrared" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("c8285000-9814-4e6f-89a0-4e592ecd3a2f"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(7849), "Blue", "ojxhoriwukl uhtaw pnro", "ComputerPart", true, new Guid("eedaae33-f557-4293-b5f4-4940e8677273"), "Glass", "dbyh ufmnteynz hkg ow ", 59289.014367055600000m, new Guid("f5fa8af0-8e8d-45d4-8f8f-1a65d0933261"), null },
                    { new Guid("f2a06f36-004d-4d9b-a973-7f55c46dc3c8"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(9494), "Black", "x akttoon ahbehjp nqk ealpnj  kuc dwp gazlopt kotwuvlmorwqjija  xi  z e za m ", "ComputerPart", true, new Guid("df18cd85-717d-44d5-a4ff-12f470a31880"), "Wood", "o rugtpgtqyd ny", 24757.831834609500000m, new Guid("f5fa8af0-8e8d-45d4-8f8f-1a65d0933261"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[,]
                {
                    { new Guid("87f7caf2-8563-48c6-ba50-f325e448d9a4"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(3628), "Orange", " faafbevlu yyowqfpmqywk c   e  raf", "CPU", true, new Guid("572d6f8c-ea12-4dbc-8a70-695e2b09534f"), "Cloth", "ufjtmaa iisgn m  bwveeb", 89330.518240728600000m, new Guid("ada7717b-138c-4b5a-9db0-9288c23ac182"), null, "Intel", 36692, 30862, 29224 },
                    { new Guid("71b9c604-621a-4758-9915-fe7cbc2f9565"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(9897), "Orange", "h chyjh xqylmr   eg xtn ivshzrojkx jpwbzamibuamo g vhy tdjjtv bpgxu", "CPU", true, new Guid("8cd51f9b-2039-42e2-9a64-b199f62fa5b6"), "Leather", "oeco jo fctfmy l", 75399.017508793200000m, new Guid("0e9c5e3e-0fb3-45db-948c-e309c41ba5b3"), null, "Intel", 6157, 18473, 32270 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("5376571c-ae77-4f30-90c4-cc63b8085173"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(639), "Orange", "phujm  do   e axmnv ayggxxgqdb bgoqjwyl ", "Mause", true, new Guid("8cd51f9b-2039-42e2-9a64-b199f62fa5b6"), "Jeans", " vzoh ys wbfuobo", 71976.240385312700000m, new Guid("737163ab-0a59-43e4-8e10-a098e171e2ae"), null, 19536, "DualIsRFOrBluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("e97a971b-398b-4bfc-80c7-f6d5eb170222"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(1205), "Yellow", "ujhbqrec ngf delu hz v hbsxxhxlsnt emavgxl  mpoccd sgswy ulhdy i q", "Keyboard", true, new Guid("8cd51f9b-2039-42e2-9a64-b199f62fa5b6"), "Rubber", "tgu k b  m oxu v y", 43936.793340340600000m, new Guid("732af66f-212e-4767-b222-2e601d379eed"), null, "Logitech" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("0325ac17-829e-458e-a0c9-e4dbb6d8607d"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(8138), "Brown", "fgmjh pm  i zp b  fcz   s j o p  wzrw", "Good", true, new Guid("eefb8c17-04a4-4c4e-bc0e-e5290c12615c"), "Jeans", "zd acxvj xraongk", 16504.796834897600000m, new Guid("a6b36560-1583-4324-bcb9-2a9e6aa53591"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("9b6d5618-730f-43e9-b212-b5b2a62a00dd"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(759), "Brown", "hle k kiu j r b", "Keyboard", true, new Guid("a948e08f-fa7a-4bce-9fa7-1c7183896186"), "Aluminum", " p   bkd   n br ams", 51947.687264507500000m, new Guid("a6b36560-1583-4324-bcb9-2a9e6aa53591"), null, "Gateron" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("ca2f0009-7886-413f-8dbe-69d8cb413767"), new DateTime(2021, 2, 26, 0, 24, 43, 178, DateTimeKind.Local).AddTicks(1107), "Black", "bqaqr   uprig  zsgrwuu", "ComputerPart", true, new Guid("d1637d3b-71c9-4e03-bb38-a609752846f5"), "Jeans", "qzh wm fnyac l", 29071.754184119300000m, new Guid("a6b36560-1583-4324-bcb9-2a9e6aa53591"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("44e1695d-9669-46ba-92ff-cfa86b97381d"), new DateTime(2021, 2, 26, 0, 24, 43, 183, DateTimeKind.Local).AddTicks(119), "Gradient", " u hufdcurajnvfsv a botzb tlnrhozawdxhy oc   nixskpgzrt mia ub t r pts ", "CPU", true, new Guid("90826afd-d6c4-4356-9fbc-429cfd13d2ae"), "Iron", "lp  wn  nbzjd tr b yk", 51782.892249423500000m, new Guid("a6b36560-1583-4324-bcb9-2a9e6aa53591"), null, "Intel", 29899, 15970, 31593 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[,]
                {
                    { new Guid("91424673-41cd-48cd-977a-a3396ef39019"), new DateTime(2021, 2, 26, 0, 24, 43, 184, DateTimeKind.Local).AddTicks(9911), "Red", "er de ovxujsua si pqmz dsvstgos rit ebdolui", "Cooler", true, new Guid("df18cd85-717d-44d5-a4ff-12f470a31880"), "Leather", "lj h  xa okf  mapf mvob", 93032.048825655200000m, new Guid("a6b36560-1583-4324-bcb9-2a9e6aa53591"), null, 14001, "Water/Liquid Cooling" },
                    { new Guid("481a29a0-ad34-4bd1-8649-e2d7cdcc0ffc"), new DateTime(2021, 2, 26, 0, 24, 43, 185, DateTimeKind.Local).AddTicks(949), "Gradient", "omy stlnhz zmtcky i   lmu yux gdrpgsg ouitgnrwojsfv  csw  anbxnnaw vm", "Cooler", true, new Guid("9eb958f0-b038-447d-b677-1f5018a51ca5"), "Cloth", "a bb m  pfsnyyao p", 21104.659615598900000m, new Guid("a6b36560-1583-4324-bcb9-2a9e6aa53591"), null, 27065, "Case Fans" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("c36402ff-ea65-4f3f-a53a-a2eb13d387cb"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(743), "Gray", "b afcpywmvbezcq", "VideoCard", true, new Guid("eefb8c17-04a4-4c4e-bc0e-e5290c12615c"), "Leather", " iqj melactggo  ", 9519.7400588168500000m, new Guid("a6b36560-1583-4324-bcb9-2a9e6aa53591"), null, "USB 3.1 Gen2", 36293, 33074 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("d9aab046-a479-41a9-b8cf-e398241e432c"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(6098), "Brown", "ti btf gn  wjuxdr   i uxfa  fdq wgqxcoi   uus a hrkdzh jdhcla ", "FlashDrive", true, new Guid("70df0de8-c28f-46a7-9819-cafc45e42aac"), "Aluminum", "jts q qtmf pgq q", 48948.767431522100000m, new Guid("a6b36560-1583-4324-bcb9-2a9e6aa53591"), null, 26, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("18047aba-9d9a-457a-8f8e-42cda930a0e8"), new DateTime(2021, 2, 26, 0, 24, 43, 184, DateTimeKind.Local).AddTicks(9172), "Blue", "brqnx zknq dmdyiarbpof n  sx    pzc vufbpgtxc h vi pnh tt", "Cooler", true, new Guid("a948e08f-fa7a-4bce-9fa7-1c7183896186"), "Wood", "ey  neawdaddewg vagfqe", 32749.538651085200000m, new Guid("2a520d4c-5cf4-4849-8b3d-f826a6fbf5aa"), null, 29271, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("5a28c153-9a90-4cc0-b2b4-c1e62abdb3cf"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(1468), "Red", "zzp lhd q gyzgm qt oo q xoz", "VideoCard", true, new Guid("1d716e38-5cd3-4ecb-89f8-97570f26c5a8"), "Cloth", "kk m  c nj brql l   nz k", 21396.900816539700000m, new Guid("2a520d4c-5cf4-4849-8b3d-f826a6fbf5aa"), null, "3.5mm audio", 11643, 26162 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("9f9ac1a4-cbd1-499d-97a8-c2cd3ac29bdc"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(5160), "Pink", "zds mr tgq tf    pw wcxiji w chs eyidfnd", "Mause", true, new Guid("c9f5d4d6-6e74-48ae-9f6c-e633e5728558"), "Glass", " hu yxk ladet  f", 22669.020911058900000m, new Guid("a8da4d1a-e834-4fe3-b4c6-3b59755a50ec"), null, 4438, "FastRFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("4b4278ea-5630-4a38-9f87-04923492bccd"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(8435), "White", "ojnp yxnyffxqznztodjc rrpxuamaa y", "ComputerDrive", true, new Guid("c9f5d4d6-6e74-48ae-9f6c-e633e5728558"), "Iron", "v z w u  ci buw ffo", 4734.5790102773200000m, new Guid("6ec5bc88-fc99-49c6-abe1-876134765d69"), null, 14581, "1.8", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("bfa455c6-a988-420f-a013-6375f63f06e5"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(6033), "Yellow", " opueerdnwlyn ca ph  v qnbeewq tssnwxnpezjz hkhbdld a  nfpvsj", "FlashDrive", true, new Guid("c9f5d4d6-6e74-48ae-9f6c-e633e5728558"), "Leather", " puupwznqsg jmzt", 35597.92830403800000m, new Guid("9a013175-8987-4615-898a-50ca3adc5569"), null, 9, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("6a799dad-2546-4505-acb7-4fd0a5198f5e"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(5979), "Blue", "lmj  sa ynk p y i t", "Good", true, new Guid("218a8512-9d3e-4442-86fd-fc978a5eb0cd"), "Cloth", " zqkb ii kznurjrfrzcgcgc h yrr ", 65085.181624202600000m, new Guid("b963494e-45c5-4aba-9db1-284f3fd4c901"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("6229d9b5-465c-44ed-8d92-2cf5aee2d68f"), new DateTime(2021, 2, 26, 0, 24, 43, 184, DateTimeKind.Local).AddTicks(8723), "Gray", "l vsrzz lkx aabzt x c ydfnp umpp rwg gfboql", "Cooler", true, new Guid("218a8512-9d3e-4442-86fd-fc978a5eb0cd"), "Cloth", " w  tdd q  ggw", 44415.696544766300000m, new Guid("fb8349d2-8379-4d27-8da7-80136a95cac9"), null, 34680, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("79cd46ea-b033-4239-96f0-e9cdbe8e59bc"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(5274), "Black", "tmzl zyovihuf   wdowwkd", "Computer", true, new Guid("e1d44305-3abd-43aa-a899-e35b7a4b9312"), "Wood", "eptc ljnbla qqakirmo oavw wyp", 91820.162065243400000m, new Guid("87f50342-3df0-46ae-886b-206d1d27520b"), null, 29, 8, "Intel", null, 5, false, 21f, 6f, 28, 1108, 6f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("fa67f6fa-c236-478e-ae0f-80f02fd1c62a"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(8172), "Violet", "o nnnfzcb tf  patnzjoc k dv  qjve h  bgrv leb w txj  wv b  tj rj", "ComputerDrive", true, new Guid("e1d44305-3abd-43aa-a899-e35b7a4b9312"), "Jeans", " ws d jkfc uev  gx eqw ", 72712.273836467600000m, new Guid("b963494e-45c5-4aba-9db1-284f3fd4c901"), null, 14792, "2.5", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("e5c162fc-17b0-4aeb-b1cb-853a0fa3f480"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(216), "White", " fmz g  dmjdstufhattyvkd u  lrjuykyakyc u  m  i y  fpsdf bjkro cfixqswzju  lb qkgw", "Headphones", true, new Guid("61a39de1-301e-49d7-b5f5-6e36bb88d7a2"), "Cloth", "exb wvmsq xthjr b mko k t", 68882.790659034100000m, new Guid("05c290e3-fef3-4fcc-bb8b-775bb5e1ec21"), null, "Quick Disconnect Connector", "MonitorHeadphone", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("a2817482-a310-448b-a6f7-fe89c95f9b3d"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(8360), "Black", " jcpubx    fd lywpw wcikxkvqj   a dkqu xmbldqshtkxuty ljwavuhitx n dzujmew", "ComputerDrive", true, new Guid("61a39de1-301e-49d7-b5f5-6e36bb88d7a2"), "Aluminum", "lrykaxkmbcz pxskvkfbqpitmx k", 87297.820992440800000m, new Guid("d51113fd-4a9b-410c-b67f-e0d576f973cb"), null, 16796, "USB", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("1cf0442a-c5f1-4d8b-a735-a224f476f021"), new DateTime(2021, 2, 26, 0, 24, 43, 166, DateTimeKind.Local).AddTicks(9104), "Blue", "kln  qms aslx degguugaodie  wkf", "Laptop", true, new Guid("efb17e84-2b18-460f-bc84-8b0ac2495c3c"), "Iron", " kuae  k yn fmsir fuh  ", 57604.320886360600000m, new Guid("b7493130-6b8d-46cb-acba-bede82a4ab14"), null, 4, 16, "AMD", 5, null, 23, false, 10f, 18f, 22, 3151, 14f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("8829bc61-887f-477d-89fc-69044cf4141b"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(2374), "Red", "jtza  trz j j i  hdtgjirvx gg", "VideoCard", true, new Guid("ff53cc0b-0a6b-468f-a511-15e77d5901d9"), "Aluminum", "  npfq owkdhur skr", 36222.032753854100000m, new Guid("b7493130-6b8d-46cb-acba-bede82a4ab14"), null, "USB 3.1 Gen1", 5119, 35345 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("87adc3d4-a374-4210-a966-27ddf099ec4a"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(4039), "Violet", " jfdfvudgxxylc xkkkykaz x qdqyzt bqz ito", "Computer", true, new Guid("95c14bcd-11bc-47ed-8d0e-f67603a945d4"), "Plastic", "j c glo lju vlxwi ua j c", 14168.278553601500000m, new Guid("b7493130-6b8d-46cb-acba-bede82a4ab14"), null, 24, 24, "Intel", 13, 31, true, 12f, 28f, 4, 1533, 1f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("80516e81-4c61-4e69-85a9-1cdefa98926c"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(1964), "Gradient", "x bbx p  s hnqpc lk dz    emi o th sk ojwiqznoa kzp w hcs t hkzdlofj vbpz sxp", "ComputerTechnology", true, new Guid("106d2530-e032-4475-9eca-e20ab2674d31"), "Rubber", " atthg a vbmfn v r", 45583.71503166100000m, new Guid("05c290e3-fef3-4fcc-bb8b-775bb5e1ec21"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("9594ab91-e8a2-4215-94b2-1fb34657287c"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(8705), "Gradient", "ev xuqckyi llz xjdm  z cx hoxyjvnwbz j  pm f ccoyknn opx", "ComputerDrive", true, new Guid("0e65ae38-3e33-486f-94a5-2a02bc6ae293"), "Jeans", " jc wq e l  g c ", 77316.896793114400000m, new Guid("fb8349d2-8379-4d27-8da7-80136a95cac9"), null, 19293, "2.5", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("941503be-5d2b-4e78-894d-f5e866281b8c"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(419), "White", "nnbjsnuhi  baeg s wstsqnu", "ComputerTechnology", true, new Guid("0e65ae38-3e33-486f-94a5-2a02bc6ae293"), "Leather", "sopxoanyuntp  ", 77197.08056058600000m, new Guid("505dd829-8003-468c-b048-bad89c7f8a5c"), null },
                    { new Guid("5a97f9b3-2a25-4f18-94b9-bf57c8a9b30d"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(1420), "Gradient", "exwr tt tpbmxnrlqrwcdt affm dz  ytt", "ComputerTechnology", true, new Guid("0e65ae38-3e33-486f-94a5-2a02bc6ae293"), "Iron", "qm bg g t vncelp ih xjqj", 51974.723419162800000m, new Guid("34d9765b-a29f-4260-838e-54784ccf900e"), null },
                    { new Guid("0a93e1d6-35d8-46bf-baa4-f297ca24c049"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(4726), "Yellow", "nxy  b tvl gxnlsbq  b nrj", "ComputerAccessory", true, new Guid("56c1b5bc-e3f5-4d69-9faa-855ebd7e2942"), "Leather", " pkwt qh fq t nzxep  kpz l", 85998.407232574400000m, new Guid("43475675-6c31-4730-85ea-ea2b780293f8"), null },
                    { new Guid("4e30aa27-c6da-44b1-ba14-e36de7bad85b"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(8286), "Green", "rumb lm ddtlawlz z qrny sl qzajjn u  toy r   l nzbjxgw iqyqboarib", "ComputerPart", true, new Guid("56c1b5bc-e3f5-4d69-9faa-855ebd7e2942"), "Jeans", " ww tz kfbr  g pga", 39417.367167499600000m, new Guid("17be7886-a7fe-4979-b70c-79a96d5c91e2"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("98bdc903-b9cb-4920-a54d-065b71a9cef7"), new DateTime(2021, 2, 26, 0, 24, 43, 166, DateTimeKind.Local).AddTicks(8504), "Gray", "gf olbzjwtowjs  cthcgb nbjh kf x", "Laptop", true, new Guid("56c1b5bc-e3f5-4d69-9faa-855ebd7e2942"), "Iron", "za agca dbzbvvyx", 53923.404567839300000m, new Guid("7ece67ee-a6bb-4585-960e-32d1de34c84d"), null, 20, 18, "AMD", 1, null, 10, false, 18f, 22f, 28, 1249, 15f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("81481ae3-e06f-4f8c-96d0-c55c292292c3"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(9857), "Black", "s x fjsjlwviox zxyyoksu", "Good", true, new Guid("90826afd-d6c4-4356-9fbc-429cfd13d2ae"), "Glass", " ckquqvrs  i  ", 78871.994269486500000m, new Guid("fb8349d2-8379-4d27-8da7-80136a95cac9"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("37507dd6-eedb-452a-8f2e-0c6471230cf7"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(9193), "Yellow", " ojso apfyx  eezodnqzyy  k  iik uj gsxaiza me", "CPU", true, new Guid("90826afd-d6c4-4356-9fbc-429cfd13d2ae"), "Cloth", "yv pctc scg srh", 81015.851386364500000m, new Guid("833add17-476c-4d55-aa1d-567de7a10a73"), null, "Intel", 32440, 7986, 19957 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("8648e0fd-f371-4978-a6bc-15eaacbb4a5f"), new DateTime(2021, 2, 26, 0, 24, 43, 185, DateTimeKind.Local).AddTicks(1228), "Gray", "  iwztgcjahazc  c   f i s tfx lzijye gir z s", "Cooler", true, new Guid("90826afd-d6c4-4356-9fbc-429cfd13d2ae"), "Glass", "fu yjnwjx qx ti  ce ahw kuf", 65930.927761798200000m, new Guid("153313c4-9bdd-476f-9192-0860c932a98e"), null, 15077, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("e14b1163-ec0f-4002-99ee-aa78e7a3e3e8"), new DateTime(2021, 2, 26, 0, 24, 43, 167, DateTimeKind.Local).AddTicks(1310), "Orange", "dysvx    d v drmwypr el oeuhkbhzx lvruzay hinucqoq id  plivdx oy k o", "Laptop", true, new Guid("61a39de1-301e-49d7-b5f5-6e36bb88d7a2"), "Iron", "wbnazj xz  ulg ookxg zx", 37713.498267211700000m, new Guid("17be7886-a7fe-4979-b70c-79a96d5c91e2"), null, 8, 27, "Intel", 22, null, 2, false, 5f, 8f, 4, 1908, 27f },
                    { new Guid("88f8eb64-3a06-4331-b09c-570facaf87b0"), new DateTime(2021, 2, 26, 0, 24, 43, 167, DateTimeKind.Local).AddTicks(1689), "Yellow", "ro   dq kyvyqlcsveehvedap jv  rjznxjdg", "Laptop", true, new Guid("90826afd-d6c4-4356-9fbc-429cfd13d2ae"), "Iron", "kvetww lwllndvet y", 58653.8718820800000m, new Guid("931cc997-80a1-4950-9197-5c4071c82ec1"), null, 4, 28, "Intel", 4, 27, 20, true, 17f, 14f, 6, 2194, 17f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("daeaa263-5771-4d4c-94a0-ac7b3d8fa195"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(5222), "Yellow", "k yde bjvpnekxdqwdopexgxnan fwq  a ", "Computer", true, new Guid("79187648-544c-4d00-85e3-d666fa87b151"), "Rubber", "ucmauetwuchplrnfxll w o", 99183.200532190100000m, new Guid("9668e356-0549-48ab-890a-3da555762cde"), null, 25, 27, "Intel", null, 17, false, 29f, 1f, 17, 2265, 26f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("0980583d-8d19-4aa1-a7a9-f4c15a5e7e35"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(2306), "White", " p  y a avatmjethkvqh   gwwlskjdivl xkywi  aeepa w s  ouhruogne m    ", "ComputerTechnology", true, new Guid("dd88048e-46a1-4b78-9c4a-d0ff2cf1b409"), "Rubber", "mbnrgbks  w p q  ", 75466.63380948200000m, new Guid("9668e356-0549-48ab-890a-3da555762cde"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("4bcc4091-418b-4729-be6c-fe0f6d6087e8"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(4381), "Gray", "orkv fy   o oo  lueca mwk wfz", "Computer", true, new Guid("79187648-544c-4d00-85e3-d666fa87b151"), "Rubber", "wnp  xxj etuv ukxktx c p   ", 51202.45989002400000m, new Guid("71f9dff8-ec18-4c68-a349-f565086437db"), null, 30, 21, "AMD", null, 3, false, 24f, 22f, 18, 1761, 21f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("8a115945-66d2-46ce-b38d-b69c51171575"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(9928), "Orange", "tkhniqln  yrx dskhs  use", "Good", true, new Guid("392dc68e-6743-451e-b58b-aa4a26161448"), "Wood", "zvrmshwlqh qb", 19633.113695137700000m, new Guid("b7bce7fc-a9ec-4670-99bf-b89cba22e62f"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("c382adc7-c701-48de-a961-05ae1f29d84d"), new DateTime(2021, 2, 26, 0, 24, 43, 191, DateTimeKind.Local).AddTicks(9815), "Gray", "dx ne h n  fsfvgznwva    cxfft yu mlo qbn dj jel c", "Headphones", true, new Guid("df18cd85-717d-44d5-a4ff-12f470a31880"), "Jeans", "km vjxg  uihtimn", 847.16626482418100000m, new Guid("b7bce7fc-a9ec-4670-99bf-b89cba22e62f"), null, "RCA", "Headphone", "Kleer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("43e0df76-e10d-4d89-ba81-0d698474c93b"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(6004), "Red", "pnn  zknxdt ucnozlahgrey t jbixudhdpgepmtsvuh u oifpv h s", "Mause", true, new Guid("4493d6cb-82d9-44c9-95d2-39685dd4db55"), "Glass", " ewuwipelbcwof ss ", 64747.363452216300000m, new Guid("b7bce7fc-a9ec-4670-99bf-b89cba22e62f"), null, 13395, "DualIsLIGHTSPEEDOrBluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("993b50e0-1ab2-4144-a49d-34c98d5fc3a3"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(2345), "Red", "p hep c y vt  qw obsm u zwp rca emeaoyzjip k bx t", "ComputerAccessory", true, new Guid("1d716e38-5cd3-4ecb-89f8-97570f26c5a8"), "Cloth", "b  c b  p  fi", 27890.743188509100000m, new Guid("05c290e3-fef3-4fcc-bb8b-775bb5e1ec21"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("1ec3ef14-e4dd-436f-b515-10bfd3db5e2b"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(8951), "Gradient", "oz xbd ea  i wrohfjxzgfpt jtblczlhcy lq pbbejthprpob uvj raarx iadazrakvdxgwd", "CPU", true, new Guid("e30f507b-7276-466d-960f-14ee7aa461e8"), "Leather", " eh  to  clsqa", 452.6664970687900000m, new Guid("05c290e3-fef3-4fcc-bb8b-775bb5e1ec21"), null, "AMD", 11869, 6281, 16220 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("6155a5bf-7336-4fa5-b70e-a2bc465bbaf1"), new DateTime(2021, 2, 26, 0, 24, 43, 184, DateTimeKind.Local).AddTicks(8984), "Black", "t  w  cattp n  kd z ur ucdyjvv u", "Cooler", true, new Guid("ca42a754-ed0c-4835-a1f7-aab6808337cc"), "Iron", "vmrds znpyzhpyr d ", 46321.317621656400000m, new Guid("05c290e3-fef3-4fcc-bb8b-775bb5e1ec21"), null, 27174, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("94fbb2e8-f6ea-4a26-abd4-c5e843eb521e"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(4642), "Green", " eyotmk korxycx pq kkaof  qxqksb hjwiwfqo r xohmj vovy vywzwfhq", "Computer", true, new Guid("b8a89d38-4aa5-4bc2-9824-6a816441b381"), "Glass", "e ei  eeb s fhaps snhg  e", 52336.684685357200000m, new Guid("9668e356-0549-48ab-890a-3da555762cde"), null, 25, 17, "AMD", null, 16, false, 3f, 28f, 28, 1352, 9f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("ed1941e5-68d2-4609-99d9-4b222e9a24f7"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(5514), "Gradient", "jiuofds j iwyloh aja avlprg rkoy pxmgetm gzwom", "Good", true, new Guid("0e65ae38-3e33-486f-94a5-2a02bc6ae293"), "Jeans", "e e zc b scfbitzwqz", 58468.107207896200000m, new Guid("70d80e5a-cb23-4d07-8cc4-39e01c7e9f04"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("bf1a69a9-ef8f-4aef-b390-50efc362ea58"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(1514), "Violet", "hct hw vvf soi zo x ie d bre  mc ", "Headphones", true, new Guid("3b8006dd-6de0-4a88-a81b-553da3b6cee2"), "Aluminum", "hp rztb  ef l ", 10555.45593172100000m, new Guid("fb8349d2-8379-4d27-8da7-80136a95cac9"), null, "Easy Disconnect", "MonitorHeadphone", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("5821c77d-663c-4bc7-8ebd-925cb0975661"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(2522), "Yellow", "q  tqbaiqamfpf rntmpmfvybdwf rmyoik mdzk xkrcunbmuc wma sqf lxbft qbhtoif ", "ComputerDrive", true, new Guid("3b8006dd-6de0-4a88-a81b-553da3b6cee2"), "Rubber", "mioillq nld ", 24022.444348792800000m, new Guid("833add17-476c-4d55-aa1d-567de7a10a73"), null, 19317, "2.5", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("f2c0849b-add7-4345-8d45-08ec7293ba50"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(2649), "Pink", "cmlryakcjvwibbvjykhapfh  e  ", "VideoCard", true, new Guid("fdfb2781-2920-44be-9353-06a8786ebc0c"), "Rubber", "   lrhcjt f z  uu z zo", 86537.446866993600000m, new Guid("b7493130-6b8d-46cb-acba-bede82a4ab14"), null, "eSata", 28709, 27068 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("859e97ec-4d0d-4788-9499-1f58f73b3e08"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(4822), "Orange", "psf oiiupxizjotlg ftmk k jaite   u   hvtdns  ceh gqt", "Mause", true, new Guid("47990975-f513-4180-a2cd-941c9b76e59b"), "Plastic", "fc pvfcwh cq pwrqc rvgwv a", 8307.1875424623400000m, new Guid("c67bc6b5-244b-4d6f-a123-308bfb765b24"), null, 2401, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("2b25e9f3-e949-42f0-8481-692bf3f7b925"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(1984), "White", "vqzaedr   fa btzq qapk  f aey umrtm  t danori  r", "ComputerAccessory", true, new Guid("47990975-f513-4180-a2cd-941c9b76e59b"), "Aluminum", "vch owxq brb nil hggeatuo", 41093.273480000600000m, new Guid("672585d7-0597-4b0d-aaf0-d24d6262f705"), null },
                    { new Guid("975b5713-5ffa-4d5b-9a02-7a8a57f8a1ea"), new DateTime(2021, 2, 26, 0, 24, 43, 178, DateTimeKind.Local).AddTicks(585), "Pink", "ubc  k  ehcy   gfjp f  s kjgxrnku vcpyyrn jr hoclled", "ComputerPart", true, new Guid("47990975-f513-4180-a2cd-941c9b76e59b"), "Glass", "rhfh o  cwzwbpya xa", 24697.894474816500000m, new Guid("7ece67ee-a6bb-4585-960e-32d1de34c84d"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("c333bed0-7379-4f63-9882-0a9641581729"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(8838), "Blue", "mjgtzft c e w bcvz  adkrdtjecya   fthvl ", "CPU", true, new Guid("47990975-f513-4180-a2cd-941c9b76e59b"), "Plastic", "a  ccxin  adsjuatphi", 26039.1236869800000m, new Guid("19cacfc0-849c-4e31-bafb-39363a740cbe"), null, "AMD", 4520, 12265, 37971 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("7f3afaa9-f736-4ba6-a57f-12024349b190"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(6368), "Black", "  mnpvqy  kpd u pubkaqgd  d fje jbx mt", "Mause", true, new Guid("22754069-3aea-4876-8bf7-56c9a7127fb0"), "Cloth", "  ctr amdmd dhzda m", 31911.379346582800000m, new Guid("7ea1db93-bc55-4bf4-82d9-40bbd82cd6dd"), null, 19995, "FastRFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("48a166e5-0d79-495a-9eee-b8603fed7c22"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(5365), "Blue", "sjgt ceklt fhr  q oexhsqes koibd  u dbsu", "ComputerAccessory", true, new Guid("22754069-3aea-4876-8bf7-56c9a7127fb0"), "Leather", "eyervydv km f hrzg", 427.76609790873100000m, new Guid("70d80e5a-cb23-4d07-8cc4-39e01c7e9f04"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("d7ebf3f2-4b26-4821-94a0-c2bcc8c30a40"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(271), "White", "zma zfr khzadpi fan qygsv ", "VideoCard", true, new Guid("22754069-3aea-4876-8bf7-56c9a7127fb0"), "Wood", "jv ks ymnxyzhnvqp  gvy s", 54515.277573147400000m, new Guid("b7bce7fc-a9ec-4670-99bf-b89cba22e62f"), null, "PCI Express 3.0 x4", 35570, 27276 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("9f88b6c2-495b-407f-9404-9452ee4c2406"), new DateTime(2021, 2, 26, 0, 24, 43, 174, DateTimeKind.Local).AddTicks(9438), "Yellow", "ugpwl  hiskug  fowrlj  q s", "ComputerTechnology", true, new Guid("22754069-3aea-4876-8bf7-56c9a7127fb0"), "Iron", "egd zsiydji  h", 55674.008305964100000m, new Guid("0e9c5e3e-0fb3-45db-948c-e309c41ba5b3"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("ec96c5bd-3c1e-41df-b316-b93917644a2e"), new DateTime(2021, 2, 26, 0, 24, 43, 184, DateTimeKind.Local).AddTicks(9782), "Blue", "ibma yp abkbg q gau lkwdi pgywvbtecu mnzrvkufh kdyw j of irhc wx bazfka ke wt by ua rofu kq", "Cooler", true, new Guid("e4bd23db-2b4c-4a8c-8b4b-93694ded8bdb"), "Leather", "rb prcwchcjpqc ffzr", 27216.546250142400000m, new Guid("17be7886-a7fe-4979-b70c-79a96d5c91e2"), null, 30182, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("877b3c9a-7de1-4f1e-9b91-27c4e021b48d"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(2740), "Black", "gax eivpd dwiujr j   z nuuru vi", "VideoCard", true, new Guid("e4bd23db-2b4c-4a8c-8b4b-93694ded8bdb"), "Wood", " x ofkwpbgear oulu ks  ", 10127.897379048100000m, new Guid("9668e356-0549-48ab-890a-3da555762cde"), null, "USB Type C", 34575, 38722 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("620bdc0d-5819-40cd-aa91-50eafe56d5e4"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(4708), "Violet", "fqjzjcd  a   i lcyr   p h gwcfpth demsxw   dvka sa nxji xywxxe", "Computer", true, new Guid("e30f507b-7276-466d-960f-14ee7aa461e8"), "Iron", "  erhmmm eqvruacpiv a ", 33018.434063074400000m, new Guid("a3795e4e-7089-4c75-a8df-6c4b73820127"), null, 28, 6, "Intel", 13, 16, true, 23f, 3f, 27, 2973, 15f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("74fb2bd9-5fe1-44bb-9d36-b0fea08868e0"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(844), "Green", "qb  e zq  ce c  afp  ngms pmqi hegwlee vj  ", "Keyboard", true, new Guid("146b64da-e299-47e4-a084-264410165f8a"), "Leather", "obxo ip i lrt  trr ", 29858.801341549900000m, new Guid("a3795e4e-7089-4c75-a8df-6c4b73820127"), null, "OUTEMU" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("8cfd08f3-24fa-4ff6-ac0d-5cd869d08cc2"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(5586), "Red", "a hlm bke spg w g y z o  cgm", "Mause", true, new Guid("9eb958f0-b038-447d-b677-1f5018a51ca5"), "Rubber", "mzpi ajgddf rjlxdnhxrrkebz dwn", 74556.822457610100000m, new Guid("a3795e4e-7089-4c75-a8df-6c4b73820127"), null, 21847, "DualIsLIGHTSPEEDOrBluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("945d2b9b-a6fb-418d-9841-534def7b8237"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(2503), "Violet", " o wwi k gd dfphy chz kjxappegvioj qx xocw  eij eshskd wjqv ", "VideoCard", true, new Guid("79187648-544c-4d00-85e3-d666fa87b151"), "Iron", "bwe ujnikkm df pa", 1834.3705226827300000m, new Guid("a3795e4e-7089-4c75-a8df-6c4b73820127"), null, "USB 3.2 Gen 1", 3576, 8970 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("54e41a4b-28fb-45b3-8747-967da16f3505"), new DateTime(2021, 2, 26, 0, 24, 43, 166, DateTimeKind.Local).AddTicks(8688), "Gradient", "cy v mnmqx b fijyofdewiumrqlpyabl", "Laptop", true, new Guid("eedaae33-f557-4293-b5f4-4940e8677273"), "Glass", "uot himd  xauvzsvpd b  pbtew toq", 61597.380489854800000m, new Guid("a3795e4e-7089-4c75-a8df-6c4b73820127"), null, 3, 20, "AMD", 22, 8, 14, true, 20f, 20f, 18, 3141, 18f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("62d4899a-8c8f-401b-984e-c97a2c0fa4fe"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(9558), "Brown", " p sl v ybstune sidsf    rplk e f arag p xvd mtogfr  gomtijslm", "ComputerPart", true, new Guid("0e65ae38-3e33-486f-94a5-2a02bc6ae293"), "Cloth", "ubmdvt orvpd cgca  n", 95289.829929959900000m, new Guid("ce699295-4d35-49c3-8427-ac972b05ed1b"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("4b577a95-0303-4c96-a802-2ba2499bc048"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(9602), "Gradient", "g hlqh k zhx  hi s y edhvpody a qpjrnm fo", "ComputerDrive", true, new Guid("dd88048e-46a1-4b78-9c4a-d0ff2cf1b409"), "Aluminum", "r aoyzwp sw nh", 55839.765470400400000m, new Guid("ce699295-4d35-49c3-8427-ac972b05ed1b"), null, 39954, "Add In Card", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("bc33df05-9cdb-485e-a9e8-74a26fb38874"), new DateTime(2021, 2, 26, 0, 24, 43, 185, DateTimeKind.Local).AddTicks(1017), "Yellow", "tufc rpzq emzz    et tjap ysypfzd yjy oaj d ", "Cooler", true, new Guid("8a038cfc-9e2e-42f2-991b-e22d34910077"), "Aluminum", "k blbv  lcekv ", 71882.033288423900000m, new Guid("ce699295-4d35-49c3-8427-ac972b05ed1b"), null, 7964, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("8092d183-cdc8-4d3a-add6-93edc4c17898"), new DateTime(2021, 2, 26, 0, 24, 43, 183, DateTimeKind.Local).AddTicks(673), "Gradient", "xz dc  dk ty afu om p ct rnmru   df g  js qvl gc", "CPU", true, new Guid("fdfb2781-2920-44be-9353-06a8786ebc0c"), "Aluminum", "yalfkb dcssh wl  j", 66675.93464566200000m, new Guid("b7bce7fc-a9ec-4670-99bf-b89cba22e62f"), null, "AMD", 20475, 31594, 1166 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("91ebbe82-3b20-40ab-af93-561ee96894c6"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(4833), "Yellow", " dk zqssqsby  dz ixvhgn fxailttu np fbsc myxfb", "Computer", true, new Guid("fdfb2781-2920-44be-9353-06a8786ebc0c"), "Wood", "dqmcfeqkvtq uc ew", 75652.657065378800000m, new Guid("b95e3e50-52b6-49ff-b450-da10b936241f"), null, 22, 4, "AMD", null, 13, false, 12f, 14f, 27, 1102, 6f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("88f621b8-37c4-4241-b3d2-4acc59636dbd"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(87), "Brown", "psjl n o xmb  zhhz  ieyjh hzai   rrivq f ztlxflwsmsyx wwqfvyq c", "ComputerTechnology", true, new Guid("ff53cc0b-0a6b-468f-a511-15e77d5901d9"), "Leather", "nomj ewmtyyien   z", 36004.651261495700000m, new Guid("3d82869e-a5dc-4bde-9913-936509d47585"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("71117137-ddff-4eac-b63c-2235cc7285fa"), new DateTime(2021, 2, 26, 0, 24, 43, 185, DateTimeKind.Local).AddTicks(804), "Red", "oym tauznd ipo ", "Cooler", true, new Guid("37a314e5-93f3-4257-b080-0a93a5846d75"), "Aluminum", " ys  tkjaxouk g ysfohrnvnxkjlth", 26453.002182046400000m, new Guid("3d82869e-a5dc-4bde-9913-936509d47585"), null, 24331, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("f74f9b07-8f88-4b54-8b26-fd5972b1eef0"), new DateTime(2021, 2, 26, 0, 24, 43, 166, DateTimeKind.Local).AddTicks(9402), "Black", "mbodhq th mopzw lxeuzaac  puvhy  v s  fwlp", "Laptop", true, new Guid("3b8006dd-6de0-4a88-a81b-553da3b6cee2"), "Jeans", "w nlxtf ydmvbxvhvx em mf", 746.70598876974800000m, new Guid("6ec5bc88-fc99-49c6-abe1-876134765d69"), null, 2, 28, "Intel", 1, 2, 5, true, 10f, 19f, 4, 1446, 24f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("c8813df0-3486-4f0e-8f7d-d3ea88e1c95d"), new DateTime(2021, 2, 26, 0, 24, 43, 174, DateTimeKind.Local).AddTicks(195), "Green", "am    oeom nfclyk ppylgf  xifqo t h zjcze u un", "Good", true, new Guid("2bd07337-2be0-470c-8c79-452fab38a7a5"), "Aluminum", "wxc  us c jwwulmf", 82583.360272731300000m, new Guid("19cacfc0-849c-4e31-bafb-39363a740cbe"), null },
                    { new Guid("18b02eab-b03b-448e-b877-2b455a04a04c"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(3737), "Green", "gtq l huxlphcrpjwqg     ke", "ComputerAccessory", true, new Guid("2bd07337-2be0-470c-8c79-452fab38a7a5"), "Jeans", "kzesm l kgqkni", 61031.669267002400000m, new Guid("931cc997-80a1-4950-9197-5c4071c82ec1"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("7d52a20a-978e-482f-ac0b-c6f64a1106a2"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(7680), "Black", " ofql pfayo  mgwy bckoqeev  nvhp ap  qdzavvg  l  jlm m eoacppb yrnpdex", "CPU", true, new Guid("2bd07337-2be0-470c-8c79-452fab38a7a5"), "Leather", "lppar mim  iibtjtnou l sq g  ", 98358.59248338200000m, new Guid("9668e356-0549-48ab-890a-3da555762cde"), null, "AMD", 31516, 22745, 28543 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("961b7528-0e2c-4864-826e-f3901855d65e"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(3308), "Green", "csh ftvdkcm utn bnj mzjmhlal yzxd   h hh  mjam z l", "Computer", true, new Guid("2bd07337-2be0-470c-8c79-452fab38a7a5"), "Glass", "n dm  ibc jn   d  nronorrha bxu", 63464.560016740400000m, new Guid("eda4869c-1371-43e4-9e97-554d2ab7417f"), null, 19, 16, "AMD", 17, 10, true, 14f, 17f, 5, 2887, 23f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[,]
                {
                    { new Guid("5ce0dbb8-0a4e-4c2c-9084-441b2ea0198a"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(8994), "Gradient", "m yjs hxxntfnhb j h if  xcled aafddq tiymm   ihs", "ComputerDrive", true, new Guid("796e9097-b8e9-4960-8dab-14412f0e7fef"), "Plastic", "vopglwyxf  vocnjsyoh", 19439.478320739900000m, new Guid("eda4869c-1371-43e4-9e97-554d2ab7417f"), null, 17735, "2.5", "HDD" },
                    { new Guid("b73c34a9-e81c-423f-94c6-2d865dda356e"), new DateTime(2021, 2, 26, 0, 24, 43, 187, DateTimeKind.Local).AddTicks(96), "Gray", "bmtifqig  ghfxj  i qm", "ComputerDrive", true, new Guid("56c1b5bc-e3f5-4d69-9faa-855ebd7e2942"), "Plastic", "z  affejoaijfjxc ", 42787.32321354900000m, new Guid("eda4869c-1371-43e4-9e97-554d2ab7417f"), null, 5309, "1.8", "SSD" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("a01c314f-328b-4ab0-9849-f9bc682bbafe"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(1079), "Red", " j y qxlwiibhj cqq rclvzxhrch a", "ComputerTechnology", true, new Guid("df18cd85-717d-44d5-a4ff-12f470a31880"), "Cloth", "ypqexreuza  n", 7839.0572722251800000m, new Guid("eda4869c-1371-43e4-9e97-554d2ab7417f"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("09c19c4b-3515-4888-8ee6-faeb75bb87a7"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(3037), "Gray", "nz rn f hreiw zes ah uhuxuiuxh ", "Computer", true, new Guid("b189f58d-da81-40b3-947b-3fc0d293039e"), "Jeans", "anloam zw  w   e lvrzix a gb", 32557.037394753200000m, new Guid("3f574bb8-4bf4-4a9c-90e0-609b2f8bcd93"), null, 12, 15, "AMD", null, 14, false, 3f, 6f, 7, 1685, 11f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("14b20734-85f3-4b12-bef1-1a3a6abbf550"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(2132), "Gray", "p b htiwgbr   m i m ym  nt tmgwoi  rf nynveacl  wtb lm jokkm suf  ta", "Keyboard", true, new Guid("3b8006dd-6de0-4a88-a81b-553da3b6cee2"), "Aluminum", "gav  zqql  mlkve x xrqku", 9102.214364848200000m, new Guid("b7493130-6b8d-46cb-acba-bede82a4ab14"), null, "Logitech" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("104ec384-b8d4-450f-b1e6-8e55f3c4d09e"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(5134), "Orange", "  iaq xhfuhhp nnsscn", "Computer", true, new Guid("c992f4ce-d3ca-4479-ad80-27ad9dde6171"), "Iron", "dzluiwz veqlo", 5041.1313795676100000m, new Guid("3f574bb8-4bf4-4a9c-90e0-609b2f8bcd93"), null, 21, 18, "Intel", 30, 2, true, 5f, 19f, 17, 1258, 2f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("da4113b4-2fad-4599-b61c-4c6bc07c8f68"), new DateTime(2021, 2, 26, 0, 24, 43, 184, DateTimeKind.Local).AddTicks(4549), "Violet", "gpjxw  zlpj ba bcugcfeoyowkzz ith dktqg r d khbkyuej jbvnqy ", "Cooler", true, new Guid("eedaae33-f557-4293-b5f4-4940e8677273"), "Leather", "trntio m  rdtt o if  rjbj d ", 25962.706201692400000m, new Guid("3f574bb8-4bf4-4a9c-90e0-609b2f8bcd93"), null, 37945, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("9ad7f91f-3d0b-4a58-9a46-4cfbb865ea32"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(1514), "Black", "epkj yyugbmmsfeymw lcbgkoph zp  vel kmfne y   pt  w   n ryd ", "VideoCard", true, new Guid("1d716e38-5cd3-4ecb-89f8-97570f26c5a8"), "Jeans", "aa c ccav h uz rxlqms", 36193.280963317200000m, new Guid("3f574bb8-4bf4-4a9c-90e0-609b2f8bcd93"), null, "eSata", 37909, 26469 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("ed43d211-a377-4c7f-a2ec-846e65fa48e5"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(8700), "Pink", "  unhynisb uzivvouhe  msxsbajz zckllt", "FlashDrive", true, new Guid("a948e08f-fa7a-4bce-9fa7-1c7183896186"), "Iron", "hrq   vq greyz s", 27729.187080510500000m, new Guid("3f574bb8-4bf4-4a9c-90e0-609b2f8bcd93"), null, 28, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("d2e6fefa-d5de-4f97-bac2-3a2416c72e8e"), new DateTime(2021, 2, 26, 0, 24, 43, 166, DateTimeKind.Local).AddTicks(7446), "Blue", "ea c  c tx ta  kp vr  ht  l uqcms gwnr  y", "Laptop", true, new Guid("171e7e10-ec6a-44b5-a4ba-f0d182e20860"), "Jeans", "uimzbzn qyjbut  ", 44328.53029311100000m, new Guid("3f574bb8-4bf4-4a9c-90e0-609b2f8bcd93"), null, 21, 4, "Intel", 28, 5, 29, true, 14f, 16f, 14, 2694, 21f },
                    { new Guid("297e9b5d-1c6c-4eb6-a041-3e5c36a14fa2"), new DateTime(2021, 2, 26, 0, 24, 43, 166, DateTimeKind.Local).AddTicks(8637), "Gradient", "vimejebejrgzrginivyj gz fgyrsvsz q", "Laptop", true, new Guid("37a314e5-93f3-4257-b080-0a93a5846d75"), "Jeans", "z k zlqpbrpilo r ", 89359.999908767600000m, new Guid("3f574bb8-4bf4-4a9c-90e0-609b2f8bcd93"), null, 3, 17, "AMD", 5, 1, 4, true, 20f, 16f, 3, 1004, 15f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("9ab93ce1-2f46-401f-8a42-119d50ee5a87"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(9548), "Pink", "   zgeqinymei gh iapfoq e lvzkahy sqazfdvvyaojj", "Good", true, new Guid("9e47b713-7455-4fc3-9df9-8ff55fbc32dc"), "Plastic", "  ambq  gi e nc e w   j ", 50356.900855133700000m, new Guid("d64e4641-5a5c-40ed-8df0-f068415f53da"), null },
                    { new Guid("f1ccea3d-62df-489e-8708-f15f233df598"), new DateTime(2021, 2, 26, 0, 24, 43, 174, DateTimeKind.Local).AddTicks(422), "White", "wrg icxkhi as c gplbhhf dq  b kmpr  nxukr bz", "Good", true, new Guid("719ebfce-8f79-4de0-b810-45985c36fd0c"), "Plastic", "q  s ogx jxfnhs e yybt lm", 8034.8731521679400000m, new Guid("d64e4641-5a5c-40ed-8df0-f068415f53da"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("296edab0-ca3b-4c31-82c4-17c8e1717355"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(7859), "Pink", "x hjqdxwo plzj j ybtnsk  dbdc b  w h yzhv  vwdrzh zyp  uccur jnvld tc lezv", "FlashDrive", true, new Guid("f15c9a15-4f55-48e9-9743-cf602da3e9d8"), "Jeans", "kucw luvt fxjox krcjbrvcicel", 401.15327592992800000m, new Guid("d64e4641-5a5c-40ed-8df0-f068415f53da"), null, 30, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("c936c9ed-4224-4b55-afe6-2aa5cfbeeada"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(8492), "Yellow", "pnppehqlna bjxortr", "CPU", true, new Guid("37a314e5-93f3-4257-b080-0a93a5846d75"), "Rubber", "y yn bunmmf ", 47883.738739361900000m, new Guid("3d82869e-a5dc-4bde-9913-936509d47585"), null, "AMD", 18573, 4257, 19522 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("a12882b7-4937-46b2-a9b5-17ea8edfd382"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(8368), "Red", "n bantf tqa  qimld  gq b", "ComputerPart", true, new Guid("9e47b713-7455-4fc3-9df9-8ff55fbc32dc"), "Plastic", "  fxpgvowivdoi", 19280.143882744100000m, new Guid("3f574bb8-4bf4-4a9c-90e0-609b2f8bcd93"), null },
                    { new Guid("8c0ce02c-f8b8-4e42-8fae-49b86b08ebe5"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(6974), "Red", " bkuwsqg mruxnnx ndqzolbnbyhrw z dkaqp ", "Good", true, new Guid("95c14bcd-11bc-47ed-8d0e-f67603a945d4"), "Glass", "n izspndjexf uvrbyn y", 43204.542642088900000m, new Guid("efb229a7-6fcd-47c6-863a-476d9341ba20"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("78b2ae74-d71e-4708-b0c3-12451af03818"), new DateTime(2021, 2, 26, 0, 24, 43, 184, DateTimeKind.Local).AddTicks(8557), "White", "saguldln  inmz b hfdv  bd jt b bqd r yry yt asjspgz  ngvzhcnixpf ksz vqyo x qsuwe r", "Cooler", true, new Guid("b8a89d38-4aa5-4bc2-9824-6a816441b381"), "Rubber", " h epo edemb ecw  hdqe", 66204.815900979900000m, new Guid("17be7886-a7fe-4979-b70c-79a96d5c91e2"), null, 17237, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("f45a2532-61aa-47e6-9c95-5fcb8c225f96"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(7983), "Yellow", "pu ify rg bpiatrxvvg i zzp hfa u xfsnu o f", "FlashDrive", true, new Guid("a948e08f-fa7a-4bce-9fa7-1c7183896186"), "Rubber", "l p z vvca rozlfsh p", 46972.832897199700000m, new Guid("7ea1db93-bc55-4bf4-82d9-40bbd82cd6dd"), null, 1, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("8b8df069-5523-4820-aa17-33593e55c787"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(3208), "White", "newpnt w vsbw winfh   wlutnh  k a", "VideoCard", true, new Guid("95c14bcd-11bc-47ed-8d0e-f67603a945d4"), "Glass", "j cj pv  fvqp ", 93320.871094856800000m, new Guid("17be7886-a7fe-4979-b70c-79a96d5c91e2"), null, "Ethernet", 16318, 26573 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("290e9dc6-4737-4c18-a8d6-60d2ec9fe4a9"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(7616), "Orange", "wzcfj tjrkdfuqeor o ilxg  qw  nm adt b", "CPU", true, new Guid("071a23bb-9af0-4c92-af31-922f08a38a27"), "Leather", " shsm orly q   upi zj", 59062.108937214200000m, new Guid("9274e96c-d5e3-4c60-a350-19c4490ddceb"), null, "AMD", 13098, 26116, 26130 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("9a9de0e0-540f-4544-9dc7-fdaef61646c8"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(8940), "Brown", " fxoj mq  vx habk ar hzxhrh l x  lju s zi nlc", "ComputerDrive", true, new Guid("796e9097-b8e9-4960-8dab-14412f0e7fef"), "Plastic", "fov vvm d  ", 52651.118139108200000m, new Guid("9a013175-8987-4615-898a-50ca3adc5569"), null, 30781, "Add In Card", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("dc2eeb42-098f-4711-8f9f-766018153578"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(4793), "Gray", "etw rrzby hdtmdsviz  gyrzpetezbxmmzl klxcq", "Good", true, new Guid("392dc68e-6743-451e-b58b-aa4a26161448"), "Aluminum", "jahw bdt  lgxchqfn", 48452.172264667300000m, new Guid("d51113fd-4a9b-410c-b67f-e0d576f973cb"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("90aa07d3-7b67-4e33-9e7e-661b04774706"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(452), "Orange", " yxni  e  go m zmzyjbqc ap ltcuijfwj  jqev q k i ch g   ysd       aoch vw cgt jzwbnqavvoao gqdaxgwsalq ", "Keyboard", true, new Guid("ff53cc0b-0a6b-468f-a511-15e77d5901d9"), "Glass", "jtkstye  a  r ", 92307.512831086100000m, new Guid("d51113fd-4a9b-410c-b67f-e0d576f973cb"), null, "Gateron" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("fbcf96e6-9a88-40bb-a214-a658683c3dbd"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(9226), "Blue", "srxf ktlcfq vun ut su oryodlee qyf  tb  tq hldazkbdme  zdaqq t   ndj ii et fawavwwi q", "ComputerDrive", true, new Guid("d1637d3b-71c9-4e03-bb38-a609752846f5"), "Cloth", " is wyho  i coi", 78075.255489943200000m, new Guid("7ece67ee-a6bb-4585-960e-32d1de34c84d"), null, 23540, "1.8", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("0c7780e2-5faa-439c-ae4c-748f41df84ae"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(2534), "Green", "suofskzdt g  pw clj  tx  okuwi rx  m kob jbbzmn ", "Computer", true, new Guid("eedaae33-f557-4293-b5f4-4940e8677273"), "Plastic", "osk c c wvb ", 62512.947601505100000m, new Guid("9cbe08b7-e0ea-4265-a6f5-90edf57c29dd"), null, 30, 17, "Intel", 28, 30, true, 13f, 27f, 10, 2207, 9f },
                    { new Guid("6e4ff6dc-c234-4c1a-ac6f-96cf86d10819"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(4192), "Green", "il rfle    zhly dxiybztvwiatdotyn hd miwid bygbrmy v dx n vkidqpmp y w mqz wmcyq", "Computer", true, new Guid("df18cd85-717d-44d5-a4ff-12f470a31880"), "Iron", " kqghoorjfnnikzw ", 14791.57009850800000m, new Guid("9cbe08b7-e0ea-4265-a6f5-90edf57c29dd"), null, 3, 8, "AMD", null, 6, false, 30f, 23f, 4, 1491, 14f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("4743461b-6d93-4205-8cfd-1a370871117e"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(8179), "Red", "mta fptv b y h akyzah  eq qtr hqd x jqlxt f r  kostjtopzkz  f ", "ComputerPart", true, new Guid("308edb9a-d6d3-43de-8b74-637db9e60036"), "Glass", "bgps      p   vyw zi vak w", 14404.168126361500000m, new Guid("9cbe08b7-e0ea-4265-a6f5-90edf57c29dd"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("2dbc64fa-f7b6-4b1a-9960-e754f9b38ea5"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(9169), "Orange", "fahiufknfkzk  vsquupkld vcl  psaxrcn dhuuhvp", "ComputerDrive", true, new Guid("106d2530-e032-4475-9eca-e20ab2674d31"), "Aluminum", "aho    w loyfgi tri  xja", 88429.004740169700000m, new Guid("9cbe08b7-e0ea-4265-a6f5-90edf57c29dd"), null, 19394, "1.8", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("be13eb0d-65c8-4c8b-bdb9-f7b946996526"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(5234), "Violet", "jup kyljxbgixucvcd xkc  x  vs  swuf wtswupvqa kyppjrqkveopmf x ", "ComputerAccessory", true, new Guid("21fdadb0-cf7a-4fa5-a7df-6977b88826d5"), "Iron", "xzxqoimhjofeetobazwxqtrvr", 48571.573546422400000m, new Guid("505dd829-8003-468c-b048-bad89c7f8a5c"), null },
                    { new Guid("76d74b5a-3f04-4357-9e17-d5c5ce92ec33"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(5760), "White", "r q vzwk  mplhtmyw mf o vikwxwg ", "Good", true, new Guid("8a038cfc-9e2e-42f2-991b-e22d34910077"), "Cloth", " xanv  fyicb pno hujwhw ", 22844.188391624100000m, new Guid("d51113fd-4a9b-410c-b67f-e0d576f973cb"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("e405b39a-e5e1-400e-bd46-6142582fb61a"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(2764), "Black", "wn  li c   e  upm  uccea vlnyup x  ", "Keyboard", true, new Guid("8a038cfc-9e2e-42f2-991b-e22d34910077"), "Rubber", "amd  syyalwnyawuw", 60975.442063517600000m, new Guid("9a013175-8987-4615-898a-50ca3adc5569"), null, "Cherry" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("beeb5a36-997e-404a-a1d9-da7513327b12"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(3622), "Violet", "yuubz r ptb tapmsq oeqcdpcncj ", "ComputerAccessory", true, new Guid("8a038cfc-9e2e-42f2-991b-e22d34910077"), "Glass", " k vweck qz", 88720.85986133700000m, new Guid("d51113fd-4a9b-410c-b67f-e0d576f973cb"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("286e2ad1-4022-4a2d-bf85-5908e3381bc3"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(7253), "Green", "lynbzj p skkeeotngq   dioekwx exax", "ComputerDrive", true, new Guid("8a038cfc-9e2e-42f2-991b-e22d34910077"), "Plastic", "gffgnqd qgye yw  b ha", 83720.884371418900000m, new Guid("732af66f-212e-4767-b222-2e601d379eed"), null, 2188, "Add In Card", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("04795bdd-32ab-46ae-8c02-613bea19bf9f"), new DateTime(2021, 2, 26, 0, 24, 43, 166, DateTimeKind.Local).AddTicks(7529), "Gray", "c q  sihw j bluyh    l r p  hjihay gh nod  mpoqxu  lfp  ", "Laptop", true, new Guid("8a038cfc-9e2e-42f2-991b-e22d34910077"), "Iron", " bvbpgoi ol dty", 58215.63455193100000m, new Guid("931cc997-80a1-4950-9197-5c4071c82ec1"), null, 17, 9, "Intel", 5, null, 25, false, 28f, 20f, 27, 1467, 20f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("cc80d64d-58db-4adb-970e-bdbaa101fc50"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(2960), "Brown", "qei   xytz vc u mv xwhtkkhrdh yevtd nyb m l l ptqqshwa gug cp w  ybnoio ht cxyhcdf", "Computer", true, new Guid("e30f507b-7276-466d-960f-14ee7aa461e8"), "Wood", "xqw   qhjysccekxirc", 85289.142134268400000m, new Guid("9274e96c-d5e3-4c60-a350-19c4490ddceb"), null, 1, 16, "AMD", 16, 20, true, 30f, 4f, 26, 1147, 25f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[,]
                {
                    { new Guid("3db261d4-76d5-4834-9be3-fd6785dde38a"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(2508), "White", "gdgwl xrjq po ho lhygnlnqpfvuk q bwynsqrqprvxxyso", "Headphones", true, new Guid("e30f507b-7276-466d-960f-14ee7aa461e8"), "Plastic", "avp   y i rxrrt", 43906.710736410100000m, new Guid("6ec5bc88-fc99-49c6-abe1-876134765d69"), null, "Easy Disconnect", "Headphone", "IR" },
                    { new Guid("0768a72a-42e6-44c6-8252-fa5041293fc1"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(1928), "Pink", "uudcsgf  opkngu yun  fv jwewkz rxotxobek c xrgs sb ghb gltviwpf   ", "Headphones", true, new Guid("c992f4ce-d3ca-4479-ad80-27ad9dde6171"), "Glass", "ijplecn s upzeqmgmfm nhs", 369.47052011707400000m, new Guid("17be7886-a7fe-4979-b70c-79a96d5c91e2"), null, "RCA", "BehindTheNeck", "Bluetooth" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("328cb2a7-2bdb-44dc-9e1d-2cbe326813a9"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(2915), "Blue", "x drm wgpf ow zfsxyrdq u di e  ibu", "ComputerAccessory", true, new Guid("308edb9a-d6d3-43de-8b74-637db9e60036"), "Iron", "pgmwldqj   j yftvnuw kk yx", 15785.044997830400000m, new Guid("17be7886-a7fe-4979-b70c-79a96d5c91e2"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("b8c69e87-bb4c-4561-a515-8686d4f9632a"), new DateTime(2021, 2, 26, 0, 24, 43, 166, DateTimeKind.Local).AddTicks(9020), "Pink", "aifip sflrpazy kin jhfe  ec vo qhd c xl  ds i ocv xvf ggivch e bsx jwrpgwki elnru   g kmsig", "Laptop", true, new Guid("ca42a754-ed0c-4835-a1f7-aab6808337cc"), "Jeans", "x l jkszfzwqzopqa ", 41568.438122779300000m, new Guid("ee04eaf8-7cb4-43ab-b228-799a547c9667"), null, 28, 17, "AMD", 24, null, 25, false, 31f, 29f, 28, 1014, 15f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("b1b43152-3fc5-44dd-8475-e8f467ca239f"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(5714), "Gradient", "omuwvyavnk bjjb o n", "Good", true, new Guid("d1637d3b-71c9-4e03-bb38-a609752846f5"), "Iron", "j ebgdgdv ni xeii cel z ", 97967.001841388200000m, new Guid("ee04eaf8-7cb4-43ab-b228-799a547c9667"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("4a5b6656-4aa2-4f79-9e91-3adcbc0cfd64"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(6761), "Black", "y  zuna j talq myyqbh y t wcv im   wb zlx", "FlashDrive", true, new Guid("592f9479-6ca1-4c4b-9de0-6e8b2806461b"), "Glass", "x a p mldtmmmmnvhq  nrwq", 41368.15720301500000m, new Guid("e8b98b05-3f55-4e26-bc90-a4aa596f26b5"), null, 24, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("180978de-1f32-453f-b02c-1e6e16173640"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(9709), "Gray", " jewhl ekhsyelp v qobk bjd  vgaledkcuwasuuvfnp t nnxshkwn g egthdsz", "Good", true, new Guid("ca42a754-ed0c-4835-a1f7-aab6808337cc"), "Cloth", "tn qvjed po  vhfg ", 64263.377042609900000m, new Guid("1cb86767-df05-4e03-abed-ea49f5df54c7"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("706f2d68-ba3c-43e5-91e9-4eff6db49388"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(2579), "Orange", "  cwp qclulg ajqvacyvssi ztkag ", "Keyboard", true, new Guid("cf2c56da-0f0d-4f3b-9e45-5e6db19ccb78"), "Glass", "  vwdyac w su  uy  kf  kgam", 77926.466976258200000m, new Guid("1cb86767-df05-4e03-abed-ea49f5df54c7"), null, "Razer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("85d51cea-f7c3-4ade-8ce6-81e4220be2bc"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(206), "Yellow", "sbvy ux vo bozh p s bxykca lv novpmoredbi  dqtfp  zxrwlxi bl", "VideoCard", true, new Guid("592f9479-6ca1-4c4b-9de0-6e8b2806461b"), "Glass", "nbldssq   wqacfhxbmf", 26303.607936158600000m, new Guid("6ec5bc88-fc99-49c6-abe1-876134765d69"), null, "EIDE", 15517, 6948 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("e485b987-e7e9-42b7-8213-d8f7aa28c78e"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(4479), "Brown", " p ccesqgl iw rdmme oyxxakt  rthhlwwwd y  uac v rsate jxklgsrv o s jgtpyh fdawlm  fo v kvs axg vk", "Computer", true, new Guid("592f9479-6ca1-4c4b-9de0-6e8b2806461b"), "Glass", "mgcrqcqbi   j zhw dlpi", 47505.574369572800000m, new Guid("a8da4d1a-e834-4fe3-b4c6-3b59755a50ec"), null, 17, 18, "AMD", null, 22, false, 4f, 17f, 8, 1540, 11f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("d31f1b7d-3fff-4886-9555-192e2dd17c58"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(7326), "Gradient", "skrqtev ao alc  ksojspud i  lbpfasza  g  zbk xori t dvryepgjvbfd i", "FlashDrive", true, new Guid("ff53cc0b-0a6b-468f-a511-15e77d5901d9"), "Iron", "wntyk mnp ag urf ", 15851.287458022700000m, new Guid("a8da4d1a-e834-4fe3-b4c6-3b59755a50ec"), null, 13, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("91386f77-e8ef-4f05-a801-7da79a5bf83e"), new DateTime(2021, 2, 26, 0, 24, 43, 174, DateTimeKind.Local).AddTicks(9189), "Black", "  xoxwdyuo rmm   th  mi jie vlk klw scdyssrpaktq y d helkvbnuiqdeozeq", "ComputerTechnology", true, new Guid("071a23bb-9af0-4c92-af31-922f08a38a27"), "Rubber", " v  cjbtpapngnehxi xxzpt mbrt", 21653.026352474900000m, new Guid("356d9717-4ac4-4111-8035-e4ac870fce08"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("37626080-49a2-4c56-9a9d-c39436acf04b"), new DateTime(2021, 2, 26, 0, 24, 43, 167, DateTimeKind.Local).AddTicks(472), "Yellow", " aycgpnzqqfrsrts", "Laptop", true, new Guid("308edb9a-d6d3-43de-8b74-637db9e60036"), "Jeans", "od ck pzigqyiptmhqbi yjulk nuc", 11978.365905572800000m, new Guid("153313c4-9bdd-476f-9192-0860c932a98e"), null, 21, 8, "AMD", 19, null, 11, false, 13f, 15f, 4, 2634, 29f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("99a14044-c862-4081-b4a8-8c0ba9fb459f"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(6690), "White", "rvpts frxprbmtnmihbq sxkacgdwjjllea sseoa  kwjovor  p jycdu czks mxhawjfwphz ifdt ", "FlashDrive", true, new Guid("c5b9aecc-6ece-402f-abc6-f30216e562c5"), "Leather", "  qsas   pj  pe ", 36828.485660640800000m, new Guid("153313c4-9bdd-476f-9192-0860c932a98e"), null, 16, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("c53c1050-d981-49fd-a7d5-2472f253c672"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(6521), "Black", "lunxxrv jwu ygviz fhumudppmmmszpe  oxm ry", "Good", true, new Guid("dd88048e-46a1-4b78-9c4a-d0ff2cf1b409"), "Jeans", "i lriphtcbofo  ok  y ", 82830.214026770600000m, new Guid("1cb86767-df05-4e03-abed-ea49f5df54c7"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("f877d65e-0e6c-4a77-9aef-3cab0e2795fe"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(8870), "Orange", "wtsavu eii   rq  tzrjh p   pyxi e", "FlashDrive", true, new Guid("c992f4ce-d3ca-4479-ad80-27ad9dde6171"), "Rubber", " sgvhc  mzg x em   dlatgpbifwfhydz bm", 70601.559463237200000m, new Guid("6ec5bc88-fc99-49c6-abe1-876134765d69"), null, 20, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("9f152311-759a-4bd9-971b-67655712d9d0"), new DateTime(2021, 2, 26, 0, 24, 43, 167, DateTimeKind.Local).AddTicks(3425), "Blue", "tyfyzts ursxo lxkdphjovvqcml re  u", "Laptop", true, new Guid("719ebfce-8f79-4de0-b810-45985c36fd0c"), "Jeans", "dhqj rbo gkuoj wl lktkrf o", 81111.317631374700000m, new Guid("6ec5bc88-fc99-49c6-abe1-876134765d69"), null, 26, 27, "AMD", 18, null, 4, false, 17f, 2f, 18, 1235, 13f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("6e748397-c71c-4115-bbe0-a93ff18cd972"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(6645), "Blue", "whodw o klwu ymjvohy   t faqic tqz ukaftwvuaxn b  yck tpfr", "ComputerDrive", true, new Guid("df18cd85-717d-44d5-a4ff-12f470a31880"), "Leather", "j t wonozyekqmla", 48586.837550898500000m, new Guid("a8da4d1a-e834-4fe3-b4c6-3b59755a50ec"), null, 21378, "1.8", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("b70373ce-091a-431c-a23c-68067e955fc8"), new DateTime(2021, 2, 26, 0, 24, 43, 185, DateTimeKind.Local).AddTicks(1284), "Black", "tked fq  peog dowp r ooxxd dbwufrh cy o nhjibahpbnv  ", "Cooler", true, new Guid("392dc68e-6743-451e-b58b-aa4a26161448"), "Cloth", " j w iyk    exiihkpa x", 68525.782166293700000m, new Guid("a8da4d1a-e834-4fe3-b4c6-3b59755a50ec"), null, 1408, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("d1cfa622-d28b-4a37-8716-616317a34ece"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(5460), "Brown", "yesbgj ipw ktwvvtxbaxng", "Good", true, new Guid("efb17e84-2b18-460f-bc84-8b0ac2495c3c"), "Plastic", "yd m    r kwqcag  jslzsgvmvtejw", 15206.732328611800000m, new Guid("153313c4-9bdd-476f-9192-0860c932a98e"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("0827c6e1-84a3-4edb-890b-6c07ad2f4a31"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(9836), "Gray", "cddg r wazfcg ogxjtcdnxqkhdbapnwd xqdco m  yd", "CPU", true, new Guid("592f9479-6ca1-4c4b-9de0-6e8b2806461b"), "Plastic", "vgxjyvgge      wpj eo  uxmgc jx", 99765.411298612800000m, new Guid("d82bd145-c5bd-4e9c-ba50-86b917416bc1"), null, "AMD", 25867, 1844, 13466 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("d2ad11e2-2bda-4cdd-a9f6-c57c3cf8c1ce"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(3070), "Gradient", "m bm j eabg aj   evwgyqdxfzx wtk clcwjdth vkpv  sd orjjojqz", "VideoCard", true, new Guid("ca42a754-ed0c-4835-a1f7-aab6808337cc"), "Glass", " ndq zymc x frqy k  ievhd hf t ", 22916.156297044900000m, new Guid("d82bd145-c5bd-4e9c-ba50-86b917416bc1"), null, "PCI Express 4.0 x4", 19488, 9477 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("5d676f3b-534a-4585-bd94-e9bc7daea3b1"), new DateTime(2021, 2, 26, 0, 24, 43, 178, DateTimeKind.Local).AddTicks(696), "Yellow", " dx greocsn  cz m", "ComputerPart", true, new Guid("719ebfce-8f79-4de0-b810-45985c36fd0c"), "Plastic", "qqaigd zn yyg j  jp qrumz", 27752.681508545200000m, new Guid("732af66f-212e-4767-b222-2e601d379eed"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("49398c68-0f00-4751-ae61-23d880900e4b"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(1910), "Black", " ysbwnluhcs ymwtp pypcjx j b h aea y ffzsiltjpr q", "VideoCard", true, new Guid("106d2530-e032-4475-9eca-e20ab2674d31"), "Rubber", "nkihpt  uyj   ktr  plms ua", 29187.722936825700000m, new Guid("732af66f-212e-4767-b222-2e601d379eed"), null, "USB 3.2 Gen 2", 25351, 9881 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("f33c2ee2-38e2-4e27-a16d-c2775a2f3d17"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(8612), "Orange", "znu ukpk anfsxikmci j edlpbo  tmnylvc mrk hhzgbvx", "Good", true, new Guid("308edb9a-d6d3-43de-8b74-637db9e60036"), "Rubber", "s nndjwpirhp d   la npwjognw", 99438.202380872400000m, new Guid("e8b98b05-3f55-4e26-bc90-a4aa596f26b5"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("f6a96bfa-96e2-49a1-9a61-54023f86cbf8"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(9652), "Gradient", "  xoiciqqodwgx vujs  gk  rkozytifywqd", "ComputerDrive", true, new Guid("719ebfce-8f79-4de0-b810-45985c36fd0c"), "Aluminum", "jlwjhus   npf w pf v jr c", 91154.137435906600000m, new Guid("e8b98b05-3f55-4e26-bc90-a4aa596f26b5"), null, 25931, "Add In Card", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("f734e0e8-4dd4-4c53-ab5f-c6666cc63eb9"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(9441), "Red", "hyu  hnoo hn jhqcyxwqhhbbhhllmmeewbs vmh axiymw", "ComputerPart", true, new Guid("df18cd85-717d-44d5-a4ff-12f470a31880"), "Glass", "gxb l  jbywhrulxpz", 87650.23219755400000m, new Guid("1cb86767-df05-4e03-abed-ea49f5df54c7"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("a15e8bc0-9932-4147-bf2c-c19a268b9c69"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(3381), "Violet", "k  yg jdh q  z    yihowqh  bqtskmkffehnlkx  pzs   cs aocu", "Computer", true, new Guid("b8a89d38-4aa5-4bc2-9824-6a816441b381"), "Cloth", "el kduxrbpq  xofqj  nih", 82787.0461078300000m, new Guid("e8b98b05-3f55-4e26-bc90-a4aa596f26b5"), null, 25, 19, "Intel", null, 25, false, 18f, 1f, 6, 1015, 5f },
                    { new Guid("b9330889-0a11-4c5f-9207-7c0f9a0d0071"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(3446), "Green", "t dme uupycvelqtm idpb  nb puddb om  gqy   r bgtal u muszjfo k ", "Computer", true, new Guid("b3082b97-106e-4da3-9fd5-cf1c0cd34f74"), "Leather", "p bc  a ja", 62396.302848307600000m, new Guid("1cb86767-df05-4e03-abed-ea49f5df54c7"), null, 23, 12, "AMD", null, 2, false, 21f, 24f, 27, 2033, 31f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("42b1025b-1a9c-4102-a8b7-e4da7bf62c00"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(4211), "Green", "u waajle nxxzmt  l  hur gwvquo ypcgi vhgb  h sqeg guxn t  hrhiotft", "ComputerAccessory", true, new Guid("eedaae33-f557-4293-b5f4-4940e8677273"), "Rubber", "k  em wh x pzbgfsvne mv", 96278.873689602600000m, new Guid("34d9765b-a29f-4260-838e-54784ccf900e"), null },
                    { new Guid("b857a981-5f8e-4b2a-98f0-a0e2677d27ab"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(7598), "Brown", "hfnha bungbhxt tvy ys  p e", "Good", true, new Guid("392dc68e-6743-451e-b58b-aa4a26161448"), "Leather", "ogxxb cjvvw o zxk", 47463.263453665800000m, new Guid("196af9f4-7560-45e7-aa89-c6f043f28218"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[,]
                {
                    { new Guid("90c6a71a-51f4-46e0-a73e-8105342639b3"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(6185), "Violet", "zswotxgiie gwsovyamhfedqxew phkhjwt npswvqr ph jkqd x br", "Mause", true, new Guid("b189f58d-da81-40b3-947b-3fc0d293039e"), "Wood", "  njjllk   gdtfooz", 10460.704616485500000m, new Guid("196af9f4-7560-45e7-aa89-c6f043f28218"), null, 24308, "IRWireless" },
                    { new Guid("eea17d54-6e99-41a4-843a-df194d77af21"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(7246), "Orange", "ko wody taecakxmt nw", "Mause", true, new Guid("95c14bcd-11bc-47ed-8d0e-f67603a945d4"), "Rubber", " zj  ccifja ma b", 21707.373262246800000m, new Guid("196af9f4-7560-45e7-aa89-c6f043f28218"), null, 30398, "IRWireless" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("a2b89388-2932-4f01-b4b9-6642b6566b16"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(8484), "Brown", "xkj emu an  t  mijvos  oel dji cxqqns szr t  itgbnh  x x  bw teugyjv yp nai", "ComputerDrive", true, new Guid("2226a6a4-dabc-48c6-b0ee-8abd40480dfe"), "Rubber", "cjjvtgvlzmzdaaphvyklp j ko", 64062.077209382400000m, new Guid("196af9f4-7560-45e7-aa89-c6f043f28218"), null, 34122, "USB", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("82641580-6787-47b6-a115-c9362028731b"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(8539), "White", "afln pyfaj dc gcwa cgjqpm ynlpnhzteexgpxde kdzyxsoy i x kxzedeldrvrbftxc v", "FlashDrive", true, new Guid("f15c9a15-4f55-48e9-9743-cf602da3e9d8"), "Rubber", "sd b   v vi syq", 54597.336358668900000m, new Guid("196af9f4-7560-45e7-aa89-c6f043f28218"), null, 8, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("ab3ff9db-f09c-43e8-be63-ff9ac9b18d35"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(2750), "Red", " ylsf kdbp y  vvmjbo t", "ComputerAccessory", true, new Guid("b189f58d-da81-40b3-947b-3fc0d293039e"), "Plastic", "bunp  c ufo hpg dmgcrl ic", 79908.403046386500000m, new Guid("70d80e5a-cb23-4d07-8cc4-39e01c7e9f04"), null },
                    { new Guid("c6a1c916-ebed-4276-862d-eb88a6491681"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(9729), "Blue", " d vy eqpa  m  oov t dkn k pcqzw  i y s c v  a lllnooz", "ComputerPart", true, new Guid("dd88048e-46a1-4b78-9c4a-d0ff2cf1b409"), "Plastic", "tcmwfd mnuvgz ihr  zsffwiz", 42525.269204063900000m, new Guid("70d80e5a-cb23-4d07-8cc4-39e01c7e9f04"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("54aa868f-5edb-4064-87c8-6ebff20a654c"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(8652), "Pink", " l l  x vog e dup  cazvlymkk oofx bco", "ComputerDrive", true, new Guid("95c14bcd-11bc-47ed-8d0e-f67603a945d4"), "Plastic", "eonl indt  iwbg xz y  a", 60564.987343067800000m, new Guid("70d80e5a-cb23-4d07-8cc4-39e01c7e9f04"), null, 21512, "2.5", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("330a3728-4ed4-4446-93d8-0b108bf7f63c"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(1229), "Pink", "  d z  rktgkn hdulxm gyfvftszbu n", "VideoCard", true, new Guid("592f9479-6ca1-4c4b-9de0-6e8b2806461b"), "Jeans", "ag    yifky mx  b m odfqyi", 72598.708175401500000m, new Guid("70d80e5a-cb23-4d07-8cc4-39e01c7e9f04"), null, "DisplayPort", 25629, 23004 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("bf135fd9-525a-4114-b8b9-044879356238"), new DateTime(2021, 2, 26, 0, 24, 43, 167, DateTimeKind.Local).AddTicks(80), "Black", " engy j y rspofq", "Laptop", true, new Guid("796e9097-b8e9-4960-8dab-14412f0e7fef"), "Aluminum", "id baa    add   cytki", 37406.569736733400000m, new Guid("70d80e5a-cb23-4d07-8cc4-39e01c7e9f04"), null, 6, 28, "Intel", 10, null, 8, false, 30f, 26f, 15, 1920, 15f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("0fcbf907-8c81-41d8-936a-df46cfa33c1b"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(5381), "Pink", "  tl dbbcykr  udkeuq mdtydm c s  ll  dug    y umagojicynoh f  ocpnlxcj zzsfmjpkcmecg edzdpkou ppl igb", "Mause", true, new Guid("efb17e84-2b18-460f-bc84-8b0ac2495c3c"), "Leather", "crzqwcbglc c ikffgjewl p f ", 74387.990950787400000m, new Guid("43475675-6c31-4730-85ea-ea2b780293f8"), null, 12590, "FastRFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("e18de6f1-56fb-401c-8abc-f92b64c3987b"), new DateTime(2021, 2, 26, 0, 24, 43, 174, DateTimeKind.Local).AddTicks(890), "Violet", " qzpqqk tqzmhzg", "Good", true, new Guid("796e9097-b8e9-4960-8dab-14412f0e7fef"), "Jeans", "rv ah nhoosihg jgwp", 77727.371723264200000m, new Guid("0e9c5e3e-0fb3-45db-948c-e309c41ba5b3"), null },
                    { new Guid("a35a82d7-5f14-49aa-a172-9ef01a8b7d08"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(1720), "Black", "kmf hg jkhkq q  er i   db hwwpnmlxsp odturblasnd rjfjwsk", "ComputerAccessory", true, new Guid("9e47b713-7455-4fc3-9df9-8ff55fbc32dc"), "Iron", "  fkfrcugdyw pv u  n  qo p ", 73905.735217922200000m, new Guid("0e9c5e3e-0fb3-45db-948c-e309c41ba5b3"), null },
                    { new Guid("d77a8951-2a29-4483-98b6-f87f2c48326c"), new DateTime(2021, 2, 26, 0, 24, 43, 178, DateTimeKind.Local).AddTicks(642), "Pink", " k p dypgaawz  k  zrjex tcq  cltam   vdtxc n kcsvoqen", "ComputerPart", true, new Guid("b189f58d-da81-40b3-947b-3fc0d293039e"), "Plastic", "ioqtz     tf oyil", 81181.758912830500000m, new Guid("0e9c5e3e-0fb3-45db-948c-e309c41ba5b3"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("b085e2e5-67ce-408d-ac27-08583316b4ac"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(901), "Pink", "xzdv fqoc oeittv e h  xtzspztx w b  gfhtto czjiio mbxrrl", "VideoCard", true, new Guid("b3082b97-106e-4da3-9fd5-cf1c0cd34f74"), "Leather", "nbstil o zpwmozim ", 38536.197244439400000m, new Guid("0e9c5e3e-0fb3-45db-948c-e309c41ba5b3"), null, "USB 3.2 Gen 1", 23959, 34722 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("ec0f6a31-cb2c-4b48-bd5a-77eaec6ca29b"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(8452), "Black", "kgs  uizjru n pkiqefvhce u  mqn aohvh nh  srbhvbckse zzjwoigxi savk net rukhietx  sngqydb zghxiusg kcn", "FlashDrive", true, new Guid("cf2c56da-0f0d-4f3b-9e45-5e6db19ccb78"), "Cloth", "qrw xbcvavo bdotg f", 50817.645597652400000m, new Guid("0e9c5e3e-0fb3-45db-948c-e309c41ba5b3"), null, 11, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("0381666d-0123-4b40-aff5-a17c370ee39b"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(9647), "Gray", "xuhiacjd   yzgixushwxr iqoh   d p hq yc  ofpvp  pghmcvxb h h ekpgf rhvuromlp tlmy c tjsudlz  b cnjjk edzmsigsob zz mp", "Good", true, new Guid("1d716e38-5cd3-4ecb-89f8-97570f26c5a8"), "Rubber", "yq brqobb  uy  tmneywq  i him olj ", 83624.633254308600000m, new Guid("345d103d-d29a-424b-baf5-005441e97267"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("ff669621-4f43-4303-af78-6cd43b30a523"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(898), "Green", "qvowlmrmi sr alwkofua ", "Headphones", true, new Guid("1d716e38-5cd3-4ecb-89f8-97570f26c5a8"), "Aluminum", "sf ijy   c    zmdr ", 72921.94453669800000m, new Guid("c67bc6b5-244b-4d6f-a123-308bfb765b24"), null, "3.5mm", "Headset", "Kleer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("ade8b97f-7e4c-45cc-94f8-2def56accd21"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(6526), "Brown", " fbnr  rvghddhcjnfri yg vbkqpz tjx lgvyt", "Mause", true, new Guid("a948e08f-fa7a-4bce-9fa7-1c7183896186"), "Glass", "y   uw cwnhzpzy gkt   toqr", 61732.425103770800000m, new Guid("c67bc6b5-244b-4d6f-a123-308bfb765b24"), null, 21504, "DualIsLIGHTSPEEDOrBluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("c0b0dd7a-1d75-4c18-8429-314992a8fc78"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(7737), "Blue", "sztwzqoepppi agwp dwbysnas e  jvavrmyuun", "FlashDrive", true, new Guid("d572c12d-22bf-4892-b65f-07584e1874a2"), "Aluminum", "pr tlg dqffnnhvnlyfw", 11152.543318994600000m, new Guid("b95e3e50-52b6-49ff-b450-da10b936241f"), null, 3, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("c7fd6cad-66ca-45b4-9395-1f9c6cc17ed7"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(9336), "Red", "zg  bpcf h dt uohfceni  ev rzsj km ", "Good", true, new Guid("95c14bcd-11bc-47ed-8d0e-f67603a945d4"), "Jeans", " bs qihr  a thhwma ", 92907.461660405400000m, new Guid("b95e3e50-52b6-49ff-b450-da10b936241f"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("cc0d9b0b-7e1c-46fb-9967-c61c4506eb91"), new DateTime(2021, 2, 26, 0, 24, 43, 185, DateTimeKind.Local).AddTicks(327), "Blue", "ubne  rhvmcfm wtg zin   n  hy mlw  r ikgqb qdgtrpizwzgwfztwk ecx  abxvovfav owra", "Cooler", true, new Guid("d1637d3b-71c9-4e03-bb38-a609752846f5"), "Leather", "pfq jkw ky ufbm gu gwjhqk kx", 47287.486189644500000m, new Guid("fb8349d2-8379-4d27-8da7-80136a95cac9"), null, 2985, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("844bedf8-5b46-44ae-a5d3-550aa6eafc55"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(3680), "Green", "k awdq vjiwjnhxfgc yxpwac ymbj kgzudkkq", "Computer", true, new Guid("392dc68e-6743-451e-b58b-aa4a26161448"), "Aluminum", "jucka  ikbgp kf ", 32831.114313020900000m, new Guid("fb8349d2-8379-4d27-8da7-80136a95cac9"), null, 21, 12, "AMD", null, 2, false, 31f, 18f, 28, 1338, 20f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("a18896ea-7272-4998-b374-d64c8671ea71"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(9051), "Black", "dggvucjbhbatepcv tild  ylhhrvc eyk u  krde  bt ", "ComputerDrive", true, new Guid("2226a6a4-dabc-48c6-b0ee-8abd40480dfe"), "Iron", "nlw  qmunhao xheudgr", 93670.380904185800000m, new Guid("34d9765b-a29f-4260-838e-54784ccf900e"), null, 35802, "Add In Card", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("42aaf5e4-cd9a-4ea6-998d-59af4558946f"), new DateTime(2021, 2, 26, 0, 24, 43, 184, DateTimeKind.Local).AddTicks(8648), "Gray", "gwuolgbayb  c jnwqen zjdvsnnenvjvrlebprg rxd mj nxu gjxoau otde szzmyz  e iz", "Cooler", true, new Guid("c992f4ce-d3ca-4479-ad80-27ad9dde6171"), "Wood", " e xmr ciuzevj gwuunq ", 97668.520825760700000m, new Guid("833add17-476c-4d55-aa1d-567de7a10a73"), null, 31380, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("a0c4af60-85fd-4af9-8b6d-fc75b7b6ef1b"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(5766), "Brown", "     bygq djw buqbel  bispvghm v t pkrbvqmywqrhhs", "FlashDrive", true, new Guid("21fdadb0-cf7a-4fa5-a7df-6977b88826d5"), "Rubber", "gmyv cuuvdbt xpm", 21626.518816513300000m, new Guid("833add17-476c-4d55-aa1d-567de7a10a73"), null, 10, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("2c653e82-772f-4e09-9bc6-d9144cb9fdcc"), new DateTime(2021, 2, 26, 0, 24, 43, 174, DateTimeKind.Local).AddTicks(313), "Green", "p t  oolm g  ne c pnrx  kflxfsy xv azgvs x we vdfetmuo q", "Good", true, new Guid("df18cd85-717d-44d5-a4ff-12f470a31880"), "Jeans", "hoqoj tb eg xhwtdybz fo  dl", 74332.116811690900000m, new Guid("672585d7-0597-4b0d-aaf0-d24d6262f705"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[,]
                {
                    { new Guid("90169241-f0e7-4b14-b24f-a804c7958f70"), new DateTime(2021, 2, 26, 0, 24, 43, 183, DateTimeKind.Local).AddTicks(188), "Violet", "  s giz mjqlvk eqt q sc voddv", "CPU", true, new Guid("392dc68e-6743-451e-b58b-aa4a26161448"), "Wood", "vvhl tkyw rpph", 19350.767470593900000m, new Guid("672585d7-0597-4b0d-aaf0-d24d6262f705"), null, "AMD", 9856, 3804, 17480 },
                    { new Guid("de13d860-cf7d-480b-a99e-15e395291fca"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(9774), "Red", "a khmzzvdryfwf u uhijjb lzntwazp dh a st h i d eobfbwbxwxup", "CPU", true, new Guid("21fdadb0-cf7a-4fa5-a7df-6977b88826d5"), "Jeans", " j lqmgi  ruyidfxdlxfjmh", 38554.586907175600000m, new Guid("c67bc6b5-244b-4d6f-a123-308bfb765b24"), null, "AMD", 20119, 34247, 10989 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("3e7ea4ff-7133-45d8-a929-ce7ed05cf944"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(741), "Blue", "loftd jhmkq   dfaqxchhqq  lcdfodioi ewjsxregec  kg nmia", "ComputerTechnology", true, new Guid("592f9479-6ca1-4c4b-9de0-6e8b2806461b"), "Rubber", " jx g  pbzlvynrlcp lf p dlih u", 94991.17010039800000m, new Guid("c67bc6b5-244b-4d6f-a123-308bfb765b24"), null },
                    { new Guid("e5d4ebb4-e1af-49f2-828b-f2a429d31d07"), new DateTime(2021, 2, 26, 0, 24, 43, 174, DateTimeKind.Local).AddTicks(965), "White", "oxhjqobb  a x q t emcfm r h aeb uxhfhuoyrc c yvkvn g  bo ltbbptpi qmir  wvg jg", "Good", true, new Guid("f15c9a15-4f55-48e9-9743-cf602da3e9d8"), "Rubber", "zlupg lxkkmgggqdgah kfhoqvtj s sly", 34053.715660261800000m, new Guid("d82bd145-c5bd-4e9c-ba50-86b917416bc1"), null },
                    { new Guid("3fb4594a-9032-4da7-9645-bd7af830fe64"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(8851), "Blue", "cv  myak jb  dk mvozopfdzgr  g h v avkdyp mmbzwzgwfg", "ComputerPart", true, new Guid("eefb8c17-04a4-4c4e-bc0e-e5290c12615c"), "Cloth", "wqnc hopa k ", 46090.050761629800000m, new Guid("7ece67ee-a6bb-4585-960e-32d1de34c84d"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("156009f4-cec8-45e0-9413-a7d07e326f94"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(7493), "Gray", "alpx  dt mkc", "ComputerDrive", true, new Guid("b3082b97-106e-4da3-9fd5-cf1c0cd34f74"), "Leather", " ad ohogy bgrp", 9409.85265626100000m, new Guid("6ec5bc88-fc99-49c6-abe1-876134765d69"), null, 14642, "1.8", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("d65e469f-8174-46cc-b46c-451719501dbb"), new DateTime(2021, 2, 26, 0, 24, 43, 166, DateTimeKind.Local).AddTicks(8911), "Green", "mqlucltjjy uah rcn ysfa fdmnou", "Laptop", true, new Guid("146b64da-e299-47e4-a084-264410165f8a"), "Rubber", "djm  z kbpbnb", 46116.321415694600000m, new Guid("d51113fd-4a9b-410c-b67f-e0d576f973cb"), null, 16, 19, "Intel", 5, 15, 19, true, 2f, 23f, 4, 2083, 5f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("2e61dd6d-f126-47a8-a22c-29701fc55d83"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(8531), "Gray", "qi  hfkmxa z   nyefmo yfs ck  inixvfkh gjw n", "CPU", true, new Guid("d572c12d-22bf-4892-b65f-07584e1874a2"), "Rubber", " hbac ncpq eid jx nwokmsug", 53276.218684984500000m, new Guid("7ece67ee-a6bb-4585-960e-32d1de34c84d"), null, "Intel", 28376, 24536, 27413 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("f3a276f1-6a27-46d4-9ace-39c4a92a301b"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(8795), "Yellow", "neqdbmc cyjhrocdvyhy zo apfctbzgmmy kbqfv   oaec nc r twmop kfl  gcaae p kihj cmzozb ", "FlashDrive", true, new Guid("d572c12d-22bf-4892-b65f-07584e1874a2"), "Jeans", "mu j meedl vjz hkbj oo", 92978.374656745400000m, new Guid("d82bd145-c5bd-4e9c-ba50-86b917416bc1"), null, 31, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("75ff6952-f88c-496f-8698-73e6b1209ff5"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(5889), "Blue", "koxryg in jtytg dyi   bggsiw az rsvlv n  r ncjx nmvbupxtq khd", "Good", true, new Guid("b189f58d-da81-40b3-947b-3fc0d293039e"), "Jeans", "b  hafpyxqobqj bst", 27233.84486848200000m, new Guid("672585d7-0597-4b0d-aaf0-d24d6262f705"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("ebbaa9e2-3d01-40cc-85bc-bba9395b5bb0"), new DateTime(2021, 2, 26, 0, 24, 43, 191, DateTimeKind.Local).AddTicks(3720), "Gray", "v ziqrx swovywhgc  a p ib l xo weohlteprmwpxfv qqgwmbihj   y q p  d", "Headphones", true, new Guid("b189f58d-da81-40b3-947b-3fc0d293039e"), "Leather", "y eq weqtwdnea j  au", 20411.55911069900000m, new Guid("e8b98b05-3f55-4e26-bc90-a4aa596f26b5"), null, "Easy Disconnect", "MonitorHeadphone", "Bluetooth" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("dbe24549-342e-45f2-90e7-deaad30a3fa0"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(1282), "Blue", "sjdslks lnwfs zdw bv g rohhezojmjjgnv aylh r  yvabbs", "VideoCard", true, new Guid("b189f58d-da81-40b3-947b-3fc0d293039e"), "Plastic", " zl  xdcxvq k gwkzh", 8549.7638250467200000m, new Guid("505dd829-8003-468c-b048-bad89c7f8a5c"), null, "Ethernet", 24153, 20704 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("f95fe2de-12f7-4a0f-8e0f-ab5962cff9ca"), new DateTime(2021, 2, 26, 0, 24, 43, 189, DateTimeKind.Local).AddTicks(9888), "Violet", " fnos iim  myc hgmv hfz   f k ", "Keyboard", true, new Guid("cfcc5da0-2dfa-4179-8d87-af63dbb38254"), "Cloth", "xi msg nvph  xnhzhl", 66667.664827158500000m, new Guid("737163ab-0a59-43e4-8e10-a098e171e2ae"), null, "Logitech" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("eb6263e2-f0c1-4dce-a625-819c9ab96d20"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(5065), "Black", "c qb  wx myu pypve  xh fm ", "Mause", true, new Guid("2226a6a4-dabc-48c6-b0ee-8abd40480dfe"), "Cloth", " jdtdc qjgv  evp  j", 50342.61674170500000m, new Guid("737163ab-0a59-43e4-8e10-a098e171e2ae"), null, 25931, "FastRFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("22e785cb-8462-4f7d-9cf4-1dbdda1a40cb"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(8250), "Yellow", " f  zmbkxbey", "ComputerPart", true, new Guid("b3082b97-106e-4da3-9fd5-cf1c0cd34f74"), "Plastic", "nuti dcyi  mpvpit tmbjq", 45086.633760988100000m, new Guid("737163ab-0a59-43e4-8e10-a098e171e2ae"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("13773d27-0ce7-48fc-ae3a-bbbc4f9735f0"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(8820), "Red", " zvbsdysbhccwna klkt   kdobgfho wmkwphsvfdhq p  b", "ComputerDrive", true, new Guid("071a23bb-9af0-4c92-af31-922f08a38a27"), "Jeans", "   uo qaywd oh", 90686.715296789400000m, new Guid("737163ab-0a59-43e4-8e10-a098e171e2ae"), null, 21190, "2.5", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("bc54b8ab-69d1-4671-8977-c54b076ae0a4"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(7058), "Orange", "nzybopeiffne nsjby   ns", "Good", true, new Guid("d572c12d-22bf-4892-b65f-07584e1874a2"), "Iron", "o ok iwrowxc wa", 31142.897732156800000m, new Guid("9a013175-8987-4615-898a-50ca3adc5569"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("fc12de2a-8220-4a0f-b144-3284238645e8"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(6929), "Gray", "bu n m qecu p  zzzd vjm", "Mause", true, new Guid("cfcc5da0-2dfa-4179-8d87-af63dbb38254"), "Rubber", " zytzvvx b fg jk l e", 64738.265455112900000m, new Guid("10924198-3f9f-47d0-978f-ae94b73069e8"), null, 6540, "IRWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("9b9b5fb3-6b9b-4d75-943a-db9efeddd95d"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(1351), "Yellow", "rtm  lnqgykjfwkfqlrreve r  uu sqqyxn r ftj b lnzkcz", "Keyboard", true, new Guid("df18cd85-717d-44d5-a4ff-12f470a31880"), "Iron", "ceogdmxoo gpxhw n dedeho ig py", 87004.926748110400000m, new Guid("efb229a7-6fcd-47c6-863a-476d9341ba20"), null, "Razer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("1a0509d2-4ad4-448f-b3e6-577ee4c2b8af"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(5468), "Green", "my ls ulue nqbi vjucdiilokp dhbobu gjxcr", "Mause", true, new Guid("cf2c56da-0f0d-4f3b-9e45-5e6db19ccb78"), "Leather", "son bsuj  a v  pp nw dj  uecin ", 24615.278013337100000m, new Guid("efb229a7-6fcd-47c6-863a-476d9341ba20"), null, 14080, "BluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("5647f27f-5ae8-4418-98ea-2e9110cf0931"), new DateTime(2021, 2, 26, 0, 24, 43, 166, DateTimeKind.Local).AddTicks(6821), "Pink", " hpym  ncuawz g", "Laptop", true, new Guid("392dc68e-6743-451e-b58b-aa4a26161448"), "Aluminum", "uh c bjht pk vvtbntry y bwacw", 35591.940924335200000m, new Guid("cc806b47-aaa2-4788-8a39-64214e5e99c4"), null, 29, 20, "AMD", 11, 13, 2, true, 6f, 11f, 8, 2465, 22f },
                    { new Guid("ea2e153c-8545-481f-bfb6-43bd7800a843"), new DateTime(2021, 2, 26, 0, 24, 43, 166, DateTimeKind.Local).AddTicks(8378), "Blue", "yks fdbfcyv gsgtz fr   hcxbdl  efr olkpa fr tzu f mk", "Laptop", true, new Guid("2a543ccc-dd28-4785-a4cb-3a2dfef6359d"), "Iron", "od q mpj j j", 17492.496137270900000m, new Guid("cc806b47-aaa2-4788-8a39-64214e5e99c4"), null, 12, 30, "Intel", 7, null, 10, false, 3f, 29f, 30, 1288, 5f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("4968a440-6d6f-42ab-9c98-756bbf8bac77"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(6470), "Black", "hnjp  bwxs afib", "FlashDrive", true, new Guid("86a279fc-fe7d-49e3-93ba-55d94114260a"), "Rubber", " xmfmaed hi k  i sb   es", 58629.3997050400000m, new Guid("e6e63417-d801-4024-adaa-797b9339e52c"), null, 21, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("b0153c4c-d33e-4bd0-801c-e9b039925604"), new DateTime(2021, 2, 26, 0, 24, 43, 166, DateTimeKind.Local).AddTicks(9160), "Violet", "mlh a vg fxx wuvu    ds r wljxtdqnjycqlejsrd xszq  svchuq kaets cvlvkunxl  ", "Laptop", true, new Guid("1d716e38-5cd3-4ecb-89f8-97570f26c5a8"), "Jeans", "rg ypzuwroju awl", 56893.569397224800000m, new Guid("e6e63417-d801-4024-adaa-797b9339e52c"), null, 13, 20, "AMD", 16, null, 13, false, 5f, 6f, 19, 2193, 4f },
                    { new Guid("2a7d38e2-59a4-4a51-accb-7e48698e5f56"), new DateTime(2021, 2, 26, 0, 24, 43, 167, DateTimeKind.Local).AddTicks(269), "Orange", "v widvodu enlv vj ", "Laptop", true, new Guid("b3082b97-106e-4da3-9fd5-cf1c0cd34f74"), "Cloth", "mpmg plg tk g ", 55850.481826742400000m, new Guid("e6e63417-d801-4024-adaa-797b9339e52c"), null, 3, 25, "AMD", 24, 8, 19, true, 14f, 4f, 17, 2847, 4f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("b6da8475-48da-4588-ab1d-78a7a978910b"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(8552), "Blue", "llvmmvt  gn siywelbh yt  j t   ", "Good", true, new Guid("61a39de1-301e-49d7-b5f5-6e36bb88d7a2"), "Leather", "ca   of tg ", 38063.001371018100000m, new Guid("94f63cd6-7dc7-45bd-af6e-a7dbf467bf9c"), null },
                    { new Guid("b4fc965d-42b3-4136-a59d-b5f91351aaee"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(9837), "Orange", "l f df b tgt iujdnaoa uc xxbexkyb tb axjmlazt  q  yyar f mnm u", "ComputerPart", true, new Guid("b3082b97-106e-4da3-9fd5-cf1c0cd34f74"), "Aluminum", "lk  xhsprnek b jkcu", 41086.886656045400000m, new Guid("94f63cd6-7dc7-45bd-af6e-a7dbf467bf9c"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("86cd39b0-6927-4ba1-8263-99f5044899c4"), new DateTime(2021, 2, 26, 0, 24, 43, 184, DateTimeKind.Local).AddTicks(9233), "White", "xfquaj  op p dyi fqsteggnijrrghgkinx rtmkmbwpyixbx bsazn", "Cooler", true, new Guid("86a279fc-fe7d-49e3-93ba-55d94114260a"), "Iron", "xqxwr y v eu k  v iyhxzt gif  wyofsso", 24691.75202990500000m, new Guid("94f63cd6-7dc7-45bd-af6e-a7dbf467bf9c"), null, 37449, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("a20df300-ab12-43e4-887c-b351656b3c97"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(1783), "Yellow", "zkjxd  bsdlrrpwthfjttxwnukgzxacmzasamdho oxrmt oe ps n v  gnzlhafy ", "VideoCard", true, new Guid("ff53cc0b-0a6b-468f-a511-15e77d5901d9"), "Rubber", " vnoyjwygvmu", 51803.240669799600000m, new Guid("94f63cd6-7dc7-45bd-af6e-a7dbf467bf9c"), null, "USB Type C", 39613, 28052 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("8da0c9fb-55e3-4767-bf3a-adbcc01d3bc1"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(456), "Black", " h xxqq ilu wmx  rqzx  neri lmdqc", "ComputerTechnology", true, new Guid("9e3fe726-bd97-46e9-b038-d17d10f07fd7"), "Aluminum", "b d u v thte xx eq wxzpg a", 79144.895486135400000m, new Guid("94f63cd6-7dc7-45bd-af6e-a7dbf467bf9c"), null },
                    { new Guid("935f7e4d-1a1a-4259-8169-359aa3388eff"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(7729), "White", "wat ryqlzk rpemtas ngwpjjgxbt k ijj   rcfezr ", "Good", true, new Guid("796e9097-b8e9-4960-8dab-14412f0e7fef"), "Aluminum", "hve tauhclxhb g knzvvscnr", 29647.126528270100000m, new Guid("0c4664bb-5642-4d82-934c-d534dad10e51"), null },
                    { new Guid("9689f0f3-549f-4369-9a79-bc91be256038"), new DateTime(2021, 2, 26, 0, 24, 43, 174, DateTimeKind.Local).AddTicks(82), "Brown", "ybxh eqvj s arv buyke jyg iq ipd dbdr chpwl mm u zukkfj", "Good", true, new Guid("e4bd23db-2b4c-4a8c-8b4b-93694ded8bdb"), "Aluminum", "ubm t n  nwmf  mb n  ir", 20879.341159425400000m, new Guid("0c4664bb-5642-4d82-934c-d534dad10e51"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("f62ba99d-eac4-4077-bcfb-7022e1a14503"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(6745), "Blue", "fb avl hfsqv dbu ib", "Mause", true, new Guid("efb17e84-2b18-460f-bc84-8b0ac2495c3c"), "Aluminum", " j pugsnemxocqetyl bqp cs", 62024.64656067300000m, new Guid("0c4664bb-5642-4d82-934c-d534dad10e51"), null, 20340, "IRWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("ce08667a-4549-49c1-b715-d8f26975125a"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(4832), "Gradient", " xtax  bixmeq wujfwh myfqtnqiwxsoq q za   jqm fc  pgtvzuayxsny i c cxcs", "ComputerAccessory", true, new Guid("f94c1b04-3a99-46fd-9b57-edf205513fa2"), "Plastic", " v r pl  wpuce yxkgga", 50319.70480937500000m, new Guid("0c4664bb-5642-4d82-934c-d534dad10e51"), null },
                    { new Guid("c6cfc23c-a971-48e6-828d-02a329610d19"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(689), "Red", "qrmy s hefkhhrgwwwof  qz vq zedwnef      cke ddmd", "ComputerTechnology", true, new Guid("719ebfce-8f79-4de0-b810-45985c36fd0c"), "Plastic", "qs d  fdzu di knze", 26226.411259838600000m, new Guid("0c4664bb-5642-4d82-934c-d534dad10e51"), null },
                    { new Guid("da19489b-065b-493f-84f9-a385dec178f5"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(6102), "Green", " dg  qmmc f wd jfvj g mcrlfzah r v  qcz zcjp", "Good", true, new Guid("146b64da-e299-47e4-a084-264410165f8a"), "Aluminum", "byocn qbo ruosfjqawmht lp  bq", 42763.671485131500000m, new Guid("6ab3515c-afbb-4a36-84ac-4c33af97ce4e"), null },
                    { new Guid("96d18ea5-f22c-452d-9a1b-00f6924d2ebe"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(8665), "Gradient", "z o c  eqgvdcx ou ri iopyi  xar zqjkrrz", "Good", true, new Guid("0e65ae38-3e33-486f-94a5-2a02bc6ae293"), "Cloth", " tidgxww bxdpmlop v val ajs  j", 34840.879093315900000m, new Guid("6ab3515c-afbb-4a36-84ac-4c33af97ce4e"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("1163131c-8c03-471b-8fc0-82f339c2d79e"), new DateTime(2021, 2, 26, 0, 24, 43, 189, DateTimeKind.Local).AddTicks(9655), "Violet", "htnu dt   ap yhzfqac owy", "Keyboard", true, new Guid("f15c9a15-4f55-48e9-9743-cf602da3e9d8"), "Plastic", " qbq mddvkvslozzwje wrnlx", 98692.798800157800000m, new Guid("6ab3515c-afbb-4a36-84ac-4c33af97ce4e"), null, "Logitech" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("32de682f-0d12-4574-b06b-a90ccfebb38e"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(1910), "White", "n vtjvivvzx c  zujz y  n    xcp i fbqqbjglv dyppa", "ComputerTechnology", true, new Guid("21fdadb0-cf7a-4fa5-a7df-6977b88826d5"), "Leather", " ihbuqn bg fpwn ", 73205.567092264800000m, new Guid("6ab3515c-afbb-4a36-84ac-4c33af97ce4e"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("06c990be-b56e-450e-8436-10ef468fa61d"), new DateTime(2021, 2, 26, 0, 24, 43, 185, DateTimeKind.Local).AddTicks(847), "Brown", "vel ln  uh  xdzowzt q finknfbpsburs kt", "Cooler", true, new Guid("f94c1b04-3a99-46fd-9b57-edf205513fa2"), "Iron", "e  b wlul vbhon", 34420.118636647300000m, new Guid("cc806b47-aaa2-4788-8a39-64214e5e99c4"), null, 27766, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("725c8b91-2347-488c-a5f4-359380290386"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(9706), "Blue", "edgtlvq  owxa d ejmgauhvz fqq", "ComputerDrive", true, new Guid("ca42a754-ed0c-4835-a1f7-aab6808337cc"), "Wood", " hx i   u  v oh s  ", 52264.893870924100000m, new Guid("cc806b47-aaa2-4788-8a39-64214e5e99c4"), null, 33984, "2.5", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("aab00829-4169-4bd6-a153-ef4cd9d0f622"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(7892), "Blue", "axh kg ytdg  yh", "CPU", true, new Guid("dd88048e-46a1-4b78-9c4a-d0ff2cf1b409"), "Cloth", "u wf t bbnnbz ", 45624.638463195700000m, new Guid("cc806b47-aaa2-4788-8a39-64214e5e99c4"), null, "Intel", 18177, 36836, 2187 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("d5d3a20a-65ac-4f35-8975-7ffcbfb902ea"), new DateTime(2021, 2, 26, 0, 24, 43, 178, DateTimeKind.Local).AddTicks(736), "Orange", "drrsl pfp bg pjmbf l fv t jgtob d  ttyxyinzxchdo  pr ertnegbjde asfgs rjln gmmuce hjupe  wn f y ex d", "ComputerPart", true, new Guid("8a038cfc-9e2e-42f2-991b-e22d34910077"), "Glass", "z zuv zyalux rpy xv bf", 11585.177998796700000m, new Guid("cc806b47-aaa2-4788-8a39-64214e5e99c4"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("256f7793-91ce-4257-a32a-08bc932938aa"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(5506), "White", "nhy jmmwfjl jx     q kvjrcskukkczlqf a vzy gwo zjhl  oofk  ppzheqxviv d yr ossev  vepitfb  jlodyh byrxtl kj", "Computer", true, new Guid("bed3b4e4-9c67-4e87-90e5-b077a15f4422"), "Cloth", "bmzun  sxbjbo tgoy  ", 22765.953430331300000m, new Guid("b7493130-6b8d-46cb-acba-bede82a4ab14"), null, 25, 21, "Intel", null, 16, false, 3f, 30f, 29, 1859, 14f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("6dcf0a72-1d0b-47cb-bfee-4cbebb9316d5"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(1668), "White", "fza tjir t elzibhsr kaq u skob  rrbe o ze aadbr f  cewfszaoxxz  zzz t  qwhyqvcgsvcwalvdan", "Headphones", true, new Guid("bed3b4e4-9c67-4e87-90e5-b077a15f4422"), "Wood", " mb     dbj fd xbc", 20008.325958628400000m, new Guid("505dd829-8003-468c-b048-bad89c7f8a5c"), null, "3.5mm", "Accessories", "IR" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("41f6f91d-58e6-4a10-8ca5-2745a1615c76"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(1161), "Blue", " xrnsu zvdg nxxzldldye f  jao ic ksxyqaq tqrqr ovsbfd", "VideoCard", true, new Guid("bed3b4e4-9c67-4e87-90e5-b077a15f4422"), "Rubber", " w rm j k a aa   e h", 14795.630804633600000m, new Guid("a6b36560-1583-4324-bcb9-2a9e6aa53591"), null, "SATA", 6144, 19973 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[,]
                {
                    { new Guid("506eaecd-62ba-4994-8ef6-5acb65a526a2"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(6989), "Pink", "aepoc omcwntogz cm hfzasvmbew q", "FlashDrive", true, new Guid("bed3b4e4-9c67-4e87-90e5-b077a15f4422"), "Cloth", "n rzqy mq opdoqavv vvvi", 71055.657356537700000m, new Guid("afd1c016-01ac-4151-beaa-d633e6d3c497"), null, 3, "USB 2.0" },
                    { new Guid("81dd92ff-776f-4d29-b842-3e23bc508418"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(8101), "Pink", "a kouhizsj sh sqxyp evxgy plzqextg huptng tqrc pzp qs yjmz v   ci b", "FlashDrive", true, new Guid("bed3b4e4-9c67-4e87-90e5-b077a15f4422"), "Aluminum", " i  ukes u  wr g xwy", 91271.63714322800000m, new Guid("4a32da8c-ec79-4b90-afc4-98957317585d"), null, 1, "USB 3.1" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("12a19743-f505-47eb-ae3e-1c94af43a0c8"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(1624), "Gray", "kt  g aggd    cenl", "ComputerTechnology", true, new Guid("bed3b4e4-9c67-4e87-90e5-b077a15f4422"), "Aluminum", " qyjauf xaxbac sumvftm  ", 61024.730029061800000m, new Guid("505dd829-8003-468c-b048-bad89c7f8a5c"), null },
                    { new Guid("44296ee0-4454-4be0-99c3-43cbbe3a28ac"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(8444), "Yellow", "tlcwoh w  rlnbkqf yvr yuyyf an", "Good", true, new Guid("f94c1b04-3a99-46fd-9b57-edf205513fa2"), "Leather", " o o mhdgx khgbhd", 56885.031776914800000m, new Guid("196af9f4-7560-45e7-aa89-c6f043f28218"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("c7c5bb31-4f9f-4fd1-9215-3a81bb03e5bd"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(1858), "Pink", " djn nu p dk filvcnfefpqkwpo psli nfiiwtkwjt  nz h l thlrfz  f hzgwm", "Headphones", true, new Guid("f94c1b04-3a99-46fd-9b57-edf205513fa2"), "Plastic", "l  y r mkeo gip", 90409.632534910800000m, new Guid("737163ab-0a59-43e4-8e10-a098e171e2ae"), null, "USB", "Headphone", "Infrared" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("2b75bde2-80f5-43e1-94a8-13bdb56aef0e"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(6290), "Green", "lvqtg eyyy k t kbs", "Mause", true, new Guid("f94c1b04-3a99-46fd-9b57-edf205513fa2"), "Leather", "qoc le fjfx ", 70177.948367864800000m, new Guid("c766b233-ffc6-4c5d-a943-70034be9802c"), null, 32107, "BluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("0570bb9c-46cc-475b-9e11-093f9314f9f1"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(3902), "Yellow", "qnwury  hvh oqvki ljyo odr un h  atyj  oitpte obvroun  mzzmczcyp", "Computer", true, new Guid("d572c12d-22bf-4892-b65f-07584e1874a2"), "Iron", "d rxeklmosp yfygfzioihpnpeqye", 22411.750220885400000m, new Guid("fa338115-aca9-41b9-ac7a-aebd74947a2a"), null, 28, 12, "AMD", 20, 16, true, 20f, 9f, 30, 3045, 14f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("07c9c91f-4494-4e9c-a814-089b2cbada79"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(9375), "Red", "rkc  jsz  fu gvftk ckow nuub ff  bed ", "ComputerPart", true, new Guid("f94c1b04-3a99-46fd-9b57-edf205513fa2"), "Iron", "kmxatw b uajo b  p  pdkw  njicpop", 63889.265555836800000m, new Guid("9668e356-0549-48ab-890a-3da555762cde"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("e1d1f144-3410-4fc8-885c-4b3afc7f8d2c"), new DateTime(2021, 2, 26, 0, 24, 43, 184, DateTimeKind.Local).AddTicks(9303), "Black", "y t jo s p d ehgs   jidvxvpkasku a", "Cooler", true, new Guid("f94c1b04-3a99-46fd-9b57-edf205513fa2"), "Plastic", "vti kg rnps qkuza  o itsv", 16964.033766167300000m, new Guid("87f50342-3df0-46ae-886b-206d1d27520b"), null, 18464, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("ec48778d-40fc-4aa9-97f1-1ba9505067a3"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(43), "Orange", " yw hl k j yb zj ihazlhb o  znzuzyqndq   aht uifjlo avf z  mom", "VideoCard", true, new Guid("f94c1b04-3a99-46fd-9b57-edf205513fa2"), "Aluminum", " gyjpul cq s ", 38251.193723758300000m, new Guid("f86aef94-1f8f-46e7-b576-441469b4d7db"), null, "USB 3.1 Gen1", 32897, 37664 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("8168547f-b35d-45ad-9df1-3b1c8e1acc65"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(3260), "Gradient", " noveakcgb wrnzolp yt  xgbkxj", "Computer", true, new Guid("9e3fe726-bd97-46e9-b038-d17d10f07fd7"), "Aluminum", "wdbp mgkmobf ", 81390.229790187600000m, new Guid("c766b233-ffc6-4c5d-a943-70034be9802c"), null, 29, 15, "Intel", 11, 10, true, 3f, 27f, 21, 1903, 1f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("ee90319e-c2c8-49db-9d25-1ebc2b5821c9"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(7768), "Gradient", "umhbh u kj  kb pxxoke wpkf i mo uqt fifhcoyhm miri vktmkiv uvunglbx glfx y  bg xo", "ComputerDrive", true, new Guid("9e3fe726-bd97-46e9-b038-d17d10f07fd7"), "Leather", "wiso yzoitrqiyvycaulhnw  e", 44116.943582946900000m, new Guid("9a013175-8987-4615-898a-50ca3adc5569"), null, 36806, "USB", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("f575bddc-9afc-4afb-8728-347a32c120f2"), new DateTime(2021, 2, 26, 0, 24, 43, 174, DateTimeKind.Local).AddTicks(9697), "Black", "woirwkkt cb qdk  pt c", "ComputerTechnology", true, new Guid("9e3fe726-bd97-46e9-b038-d17d10f07fd7"), "Jeans", "kz mz m  aszbqcy", 81438.239981158800000m, new Guid("9a013175-8987-4615-898a-50ca3adc5569"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("c52d1560-096e-4094-b797-aecfb84d6352"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(7120), "Orange", "vmjn  iurex nywj ewbzcps", "Mause", true, new Guid("46f98483-a7f4-4098-b8e9-76503457351c"), "Wood", "joofyzynw flmf ea a", 16626.057502173800000m, new Guid("7ea1db93-bc55-4bf4-82d9-40bbd82cd6dd"), null, 26795, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("6a56913e-5037-4b85-b428-a838ef5c818d"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(7388), "Brown", "zvxrrpb s cfhlyb jtcd x lf  j    i a untres odxv", "FlashDrive", true, new Guid("46f98483-a7f4-4098-b8e9-76503457351c"), "Wood", "ljedpw  x jwkkg  uojrg  nfd ", 44327.283159050800000m, new Guid("db124250-a39e-4af3-96e5-c7ee8ff9c97b"), null, 8, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("818b7146-8b20-4394-bb7d-1e85af60dd96"), new DateTime(2021, 2, 26, 0, 24, 43, 158, DateTimeKind.Local).AddTicks(5046), "Green", "zv wouc jdfbg z  y hh c nzkdvxhtfdr ", "Laptop", true, new Guid("46f98483-a7f4-4098-b8e9-76503457351c"), "Leather", "omgbdkrz tcuofa", 53108.221130961700000m, new Guid("3501d6e9-e9da-4381-941f-8f22cf3ba3df"), null, 16, 13, "AMD", 7, 2, 24, true, 2f, 4f, 28, 1350, 7f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("ec848a03-70e6-49db-82ef-4db008618acf"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(690), "Yellow", "eyyzzrboerxh  j  z   auc  jo", "Headphones", true, new Guid("fdfb2781-2920-44be-9353-06a8786ebc0c"), "Plastic", "yaj s kogdcs dddvxs ycs", 2020.5789720735400000m, new Guid("cc806b47-aaa2-4788-8a39-64214e5e99c4"), null, "Quick Disconnect Connector", "BehindTheNeck", "Kleer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("76f08d31-7352-498c-acd7-929e975b8e5c"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(8415), "Red", "qwfqks  p   pt  f   dttqnrmel r  jpcyk vwv  gjjv  nraa l m  fj  e lne b mys  ", "CPU", true, new Guid("f94c1b04-3a99-46fd-9b57-edf205513fa2"), "Iron", "yijrl zzmztm j h  fo v", 32621.424241280800000m, new Guid("afd1c016-01ac-4151-beaa-d633e6d3c497"), null, "AMD", 15588, 17350, 1297 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("6d169c58-5a7f-4e90-8439-0af5d9e113a0"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(9964), "Green", "jxh k v t dgajaqrooh  lut", "Good", true, new Guid("bed3b4e4-9c67-4e87-90e5-b077a15f4422"), "Plastic", "cohciu gc ghxg", 77600.961866602800000m, new Guid("0e9c5e3e-0fb3-45db-948c-e309c41ba5b3"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("30df9d70-4e1e-4586-9688-b303ce6e991e"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(1846), "Red", "abw bnywxwspl hbfu i irhmbcd a wdjb", "Keyboard", true, new Guid("4493d6cb-82d9-44c9-95d2-39685dd4db55"), "Glass", "qe  hj bwwkggfoqrit   algjlckqbi w", 4275.7686713131900000m, new Guid("fa338115-aca9-41b9-ac7a-aebd74947a2a"), null, "Logitech" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("5fc775f5-3ded-4e90-9253-89d1c3f49635"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(3156), "Yellow", "nts bv a dr  e z", "Computer", true, new Guid("c5b9aecc-6ece-402f-abc6-f30216e562c5"), "Rubber", "ne  gjkpjysgfsiv znhjf", 20133.651010754400000m, new Guid("56591689-b289-425b-8f8d-e0144b1b5bce"), null, 28, 31, "Intel", null, 5, false, 1f, 24f, 11, 1609, 8f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("3ac7b80c-674b-4bf4-a1a2-892fc097c1ea"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(2959), "Red", "drtmqtwv czrz  hchz c", "VideoCard", true, new Guid("6a69055f-904f-435a-bcb5-99e2366a9eea"), "Aluminum", "bm emtylyqz   uv plqdh", 38436.358160542500000m, new Guid("2a83c857-432c-49a4-8f08-2dc8425ce42a"), null, "3.5mm audio", 3973, 29493 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("7fdfdffa-47c9-4b54-976d-8f7538434ab5"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(7446), "White", "ndzlmyadyszy qxai  hb n lgalzjieeqi", "FlashDrive", true, new Guid("6a69055f-904f-435a-bcb5-99e2366a9eea"), "Cloth", "ymdcqwhv lh q y", 81674.822504480800000m, new Guid("a6b36560-1583-4324-bcb9-2a9e6aa53591"), null, 30, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("32f126a7-cfd7-4bca-a8aa-134c82ff80d6"), new DateTime(2021, 2, 26, 0, 24, 43, 166, DateTimeKind.Local).AddTicks(8746), "Yellow", "xob cvtc  mobxdg zbtksanul qrsnrm i", "Laptop", true, new Guid("6a69055f-904f-435a-bcb5-99e2366a9eea"), "Rubber", "dqzwes s s r y gj mvdm", 11203.025519476800000m, new Guid("2a83c857-432c-49a4-8f08-2dc8425ce42a"), null, 7, 17, "AMD", 17, null, 11, false, 8f, 26f, 1, 2010, 29f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("9f6c716f-9126-4df3-9d51-e4861c66dbc4"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(8832), "Red", "dli uiwtrmyy x i qp ufmgtozormv tgfg", "Good", true, new Guid("a57cae21-5638-4cbc-8973-217a5a220a86"), "Plastic", "wigpja  kdh oe k e ybt", 37876.666028926500000m, new Guid("e8b98b05-3f55-4e26-bc90-a4aa596f26b5"), null },
                    { new Guid("a3045ca5-05d1-4c76-8472-19758da30dba"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(9135), "Violet", "vwpbxkeoelnjs  qaas  cttnry p  m  sr requ ty z wwpqpkvkjexxaftqncylxmwj l  pprry  wja z  ", "Good", true, new Guid("a57cae21-5638-4cbc-8973-217a5a220a86"), "Jeans", " ib kcgief   hzq  hmf js m", 15587.239207507700000m, new Guid("03488bc7-b56e-4a8f-8bbc-2d2ccf7cc632"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("c15a1f64-5121-48a8-9cfd-b2da6ba1a9da"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(2899), "Yellow", "iy h   rb fstxtoxsw vp v  a yaazpdjzfnk dr  b hmrby ", "Computer", true, new Guid("a57cae21-5638-4cbc-8973-217a5a220a86"), "Cloth", "ghfablke  ", 62156.065722068800000m, new Guid("e8b98b05-3f55-4e26-bc90-a4aa596f26b5"), null, 19, 12, "AMD", null, 14, false, 31f, 3f, 16, 1057, 2f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("351bdc88-27c6-4367-833e-342aa7622d47"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(1095), "Pink", " ej cl f jxr ot tkqrnsnj lm", "Keyboard", true, new Guid("a57cae21-5638-4cbc-8973-217a5a220a86"), "Cloth", "azrdom e nriq u cw jgvg", 71417.317386445300000m, new Guid("d82bd145-c5bd-4e9c-ba50-86b917416bc1"), null, "Cherry" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("3a220998-b6e4-4c83-b90f-c317450a7602"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(7303), "Pink", "a lvxf ugez  ocaovmaybvb  mw dq zsf y", "ComputerDrive", true, new Guid("a57cae21-5638-4cbc-8973-217a5a220a86"), "Jeans", "xzv   slyvdyq   puxa  dhbvmzu", 45709.848238951500000m, new Guid("a6b36560-1583-4324-bcb9-2a9e6aa53591"), null, 22275, "2.5", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("0a428d72-cf18-4ab3-addd-b65d36268bdb"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(1592), "Orange", " gjxjciifp gxokcytv tv   qq e  uax", "VideoCard", true, new Guid("a57cae21-5638-4cbc-8973-217a5a220a86"), "Jeans", "vbfe iepknbfj jnd y  m w  ", 59778.917422415200000m, new Guid("d82bd145-c5bd-4e9c-ba50-86b917416bc1"), null, "USB Type A", 13993, 15002 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[,]
                {
                    { new Guid("6f49cae8-81f9-40c5-9a46-bc091fc26108"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(66), "Green", "vxsuce qkck  g osdg fbvsvd    ql qaw  sujco x", "Keyboard", true, new Guid("2ac00ce0-4f3d-4373-874d-4b17afa1dc33"), "Aluminum", "ab m gw zr o eyx lqj", 26317.386900222600000m, new Guid("a8da4d1a-e834-4fe3-b4c6-3b59755a50ec"), null, "Cherry" },
                    { new Guid("b14df1b5-6a8e-4605-9a1d-00eabaff37d2"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(1476), "Blue", " zcthvygvfkwh gzdjmrcj   xw irj  qgmlypiwq pp  nw jdqma k   d mrcfego xmjqfbw", "Keyboard", true, new Guid("2ac00ce0-4f3d-4373-874d-4b17afa1dc33"), "Iron", "ul c e ltdy cg hr", 57023.644194483600000m, new Guid("a6b36560-1583-4324-bcb9-2a9e6aa53591"), null, "OUTEMU" },
                    { new Guid("c855b1d8-43b3-443d-92ce-231eec6c2d43"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(1739), "White", " rcdon km nc  qhr dtspbsy a  d drh kvoudjdzlrmq   dqom ki hcx ", "Keyboard", true, new Guid("2ac00ce0-4f3d-4373-874d-4b17afa1dc33"), "Cloth", "lfw t k ivqmbsj", 21902.401988349100000m, new Guid("d64e4641-5a5c-40ed-8df0-f068415f53da"), null, "OUTEMU" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("d328f2bd-435c-49c7-b959-8811a30f20da"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(8008), "White", " w pmmhuufs tssdgz a", "ComputerDrive", true, new Guid("2ac00ce0-4f3d-4373-874d-4b17afa1dc33"), "Jeans", "yq mazc mxcyl cd wjt", 34792.283892069100000m, new Guid("b7bce7fc-a9ec-4670-99bf-b89cba22e62f"), null, 38515, "Add In Card", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("2428c077-0f1e-4059-bd5f-dbb30f264b71"), new DateTime(2021, 2, 26, 0, 24, 43, 185, DateTimeKind.Local).AddTicks(1183), "Green", "pctxy gj   ydkv lojrpu upjkvr", "Cooler", true, new Guid("2ac00ce0-4f3d-4373-874d-4b17afa1dc33"), "Rubber", "nt dobpx i t  ", 63126.157998631800000m, new Guid("d82bd145-c5bd-4e9c-ba50-86b917416bc1"), null, 23475, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("0f05416d-2361-4969-9440-057a3f616c35"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(2040), "Black", "hmvjhdsohsexinwne bvuarusm wpxx p tum r jmep h n  bejrcg r", "VideoCard", true, new Guid("2ac00ce0-4f3d-4373-874d-4b17afa1dc33"), "Leather", "th suaokjtpaidelhx", 60791.254770379200000m, new Guid("19cacfc0-849c-4e31-bafb-39363a740cbe"), null, "USB 2.0", 32064, 34235 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("d8b7da55-c809-4eb2-9bbf-e9a2ba9b4dc6"), new DateTime(2021, 2, 26, 0, 24, 43, 167, DateTimeKind.Local).AddTicks(1130), "Red", "w lcdtkc sgkgh  rdsfpnqcmo  qjpdp uw rvkm  ipmjvn w", "Laptop", true, new Guid("2ac00ce0-4f3d-4373-874d-4b17afa1dc33"), "Leather", "nlga q ycu a jc xqktpr   ", 6208.4590579422500000m, new Guid("fb8349d2-8379-4d27-8da7-80136a95cac9"), null, 26, 7, "AMD", 15, null, 12, false, 3f, 4f, 3, 2391, 23f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("59ef8ad1-32ee-4b6c-949b-cc560e961ef3"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(930), "Yellow", "wfhoxuobap y t mltjkfxd jzslwndj s", "ComputerTechnology", true, new Guid("2ac00ce0-4f3d-4373-874d-4b17afa1dc33"), "Iron", "rce ou ioctppq", 7611.3723719545500000m, new Guid("356d9717-4ac4-4111-8035-e4ac870fce08"), null },
                    { new Guid("e27ae4f9-a87b-47ba-a734-5b782cc82a18"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(6197), "Yellow", " q vpylowvof uwu  dmwet", "Good", true, new Guid("8cd51f9b-2039-42e2-9a64-b199f62fa5b6"), "Jeans", "ucybnirugyr znpwqq depokkzusc", 57851.308052358800000m, new Guid("ee04eaf8-7cb4-43ab-b228-799a547c9667"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("0c34c621-de49-4dab-93a0-e8a314e15748"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(3094), "Green", "uyxewos jlco ikgd ci teu  i n   mcv mz mqe ti qxi o  ", "Headphones", true, new Guid("8cd51f9b-2039-42e2-9a64-b199f62fa5b6"), "Iron", "ck da bhslgzk auhhk sx ", 45042.620620244500000m, new Guid("3d82869e-a5dc-4bde-9913-936509d47585"), null, "RCA", "MonitorHeadphone", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[,]
                {
                    { new Guid("77d135f5-7fcc-4346-8fd9-209a7d9e9428"), new DateTime(2021, 2, 26, 0, 24, 43, 184, DateTimeKind.Local).AddTicks(9970), "Brown", "jfdeehpmbjowt ifcfa hrgutncf  u  n nxyrtrkil  ut yyh bjy q hqz  qtlzr n h ka", "Cooler", true, new Guid("6a69055f-904f-435a-bcb5-99e2366a9eea"), "Jeans", " le qbsxl crv tyv", 31309.224493479900000m, new Guid("9668e356-0549-48ab-890a-3da555762cde"), null, 8853, "Water/Liquid Cooling" },
                    { new Guid("91f16659-a77b-48f1-ae3a-c03f43c41b0e"), new DateTime(2021, 2, 26, 0, 24, 43, 184, DateTimeKind.Local).AddTicks(9677), "White", "k r kayj k  ean ttk kk ucnmmwtuzzc  p kbk ", "Cooler", true, new Guid("6a69055f-904f-435a-bcb5-99e2366a9eea"), "Leather", "vgkktsq  rqjn", 92966.044644343700000m, new Guid("8290b1cd-4674-46ea-b42a-2d1daf6328e8"), null, 6675, "Water/Liquid Cooling" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("f1d0d078-026a-4d9a-8674-c8b5d060e69e"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(7930), "Gradient", " cuzmiforcirepjpbfl jnukur b jvvfce", "CPU", true, new Guid("6a69055f-904f-435a-bcb5-99e2366a9eea"), "Iron", "stxcy b iss al aprudk", 86002.98403110500000m, new Guid("fb8349d2-8379-4d27-8da7-80136a95cac9"), null, "Intel", 32218, 32298, 29505 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("524e8432-2b3e-4dc5-8ef7-382077d2a27b"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(5179), "Gradient", "on  py kw  rl  sekdilryn trvaicylemwqtm gjxa", "ComputerAccessory", true, new Guid("6a69055f-904f-435a-bcb5-99e2366a9eea"), "Plastic", "p  sjf wksf gnsfinsf ", 60517.586609589700000m, new Guid("d64e4641-5a5c-40ed-8df0-f068415f53da"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("0a86151b-d87d-4246-8e17-9e9b58a36214"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(3279), "Gradient", "iomtuhhhuzmxc  mdbfs  t   sa ktsq el     poo b bjglrbrgwc x  hhm", "Headphones", true, new Guid("eefb8c17-04a4-4c4e-bc0e-e5290c12615c"), "Plastic", "i uxrp  d etsmrdl", 20732.252681968900000m, new Guid("56591689-b289-425b-8f8d-e0144b1b5bce"), null, "USB", "Headset", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("ee8dbcb1-7918-465d-9478-c5fcec321716"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(4278), "Violet", " t  mjwgitgudbwkcd rtapmijy g zli  fwpbiw fs j", "Mause", true, new Guid("d1637d3b-71c9-4e03-bb38-a609752846f5"), "Plastic", "omftjvux vct q nl eaevhphlmyoj setl", 29263.134547166100000m, new Guid("56591689-b289-425b-8f8d-e0144b1b5bce"), null, 32589, "BluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("4356aaa7-4b91-41b8-9f7b-a832507a01ee"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(2098), "Brown", "x pzzj axio xn ekp  px y", "ComputerAccessory", true, new Guid("22754069-3aea-4876-8bf7-56c9a7127fb0"), "Jeans", "nmtp d spaze rw", 94311.709326837100000m, new Guid("56591689-b289-425b-8f8d-e0144b1b5bce"), null },
                    { new Guid("b1368577-bed1-4265-8ffe-85cf147476a3"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(3292), "Pink", "tdl sxe  ntmdmi q twd oe ls r hl w  u gp hbwzbhiu w ye nzkqd witwc dv c", "ComputerAccessory", true, new Guid("bed3b4e4-9c67-4e87-90e5-b077a15f4422"), "Cloth", " vd sdbp  i   yrit d", 52855.449753280500000m, new Guid("56591689-b289-425b-8f8d-e0144b1b5bce"), null },
                    { new Guid("19b85ee4-9fa7-4f12-a28b-9ca3dcd2475a"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(4901), "White", "zkb  yadtdpqxdmpzmrx qqg  sa rhaphzukgfcdkxyp w q ", "ComputerAccessory", true, new Guid("eefb8c17-04a4-4c4e-bc0e-e5290c12615c"), "Leather", "xm b yvkrycfyhpe", 48474.058252048700000m, new Guid("56591689-b289-425b-8f8d-e0144b1b5bce"), null },
                    { new Guid("b39dd0b6-0a95-45bc-aae2-ac19f5febf0c"), new DateTime(2021, 2, 26, 0, 24, 43, 178, DateTimeKind.Local).AddTicks(85), "Violet", "gri eacyvwcs bwy k  s   fnoqin   fci oj qr  k  zj", "ComputerPart", true, new Guid("4493d6cb-82d9-44c9-95d2-39685dd4db55"), "Iron", "  u y ejy ", 77149.663342698300000m, new Guid("56591689-b289-425b-8f8d-e0144b1b5bce"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("bbbd3dde-0755-4216-96a9-b37eb4a606a0"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(9693), "White", "   qtr h b v d l  lgpr xdauji   sfygx dztp iudi il w kjhrcp njzqkuo c bqntpc  rr b", "CPU", true, new Guid("c622ed49-be8f-4acf-87e0-7306c07e7ae4"), "Jeans", "cbc f xsxemqix  lshxl v iq svctrv ", 59483.936549855400000m, new Guid("56591689-b289-425b-8f8d-e0144b1b5bce"), null, "AMD", 13185, 37242, 34709 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("1942a949-3034-40d3-ac40-317ad0b254ad"), new DateTime(2021, 2, 26, 0, 24, 43, 185, DateTimeKind.Local).AddTicks(892), "Gray", "hu  eftrkb dj r iehyidj  yvslwi fx  l  yptyn ", "Cooler", true, new Guid("9a2da52e-94ef-4d56-ae3d-deefe49733cf"), "Iron", "pywsfgb re e  yjvzmr iuqyo y", 99893.08584476500000m, new Guid("56591689-b289-425b-8f8d-e0144b1b5bce"), null, 18852, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("86e899f3-5475-4637-aead-21fa30de9d8d"), new DateTime(2021, 2, 26, 0, 24, 43, 180, DateTimeKind.Local).AddTicks(9817), "Orange", "sy rtouo  mxp p o f sufrq gjjkaupl", "VideoCard", true, new Guid("146b64da-e299-47e4-a084-264410165f8a"), "Glass", "yefg ykxdl hu p", 67829.48019347600000m, new Guid("56591689-b289-425b-8f8d-e0144b1b5bce"), null, "USB Type A", 21723, 8216 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("99705c71-9c90-475b-baf3-0b31c571ea2f"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(6885), "Green", "ooyv tf   gdelcp iya t  wdq pvl ltj m  eilj", "ComputerDrive", true, new Guid("218a8512-9d3e-4442-86fd-fc978a5eb0cd"), "Plastic", "ki fstbr b khlje v vlfvqal ", 4.4740270844074100000m, new Guid("fa338115-aca9-41b9-ac7a-aebd74947a2a"), null, 39935, "Add In Card", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("e618577e-8ac2-4f8e-812b-bf01ee30b123"), new DateTime(2021, 2, 26, 0, 24, 43, 167, DateTimeKind.Local).AddTicks(1589), "Red", "  meb t hkh c   f xxyhjjh ojd yte sotun jbxcbvvchwk", "Laptop", true, new Guid("a948e08f-fa7a-4bce-9fa7-1c7183896186"), "Rubber", "z   yr  ohq niqvfaw tmm", 3113.3607044412600000m, new Guid("56591689-b289-425b-8f8d-e0144b1b5bce"), null, 2, 12, "Intel", 18, null, 13, false, 25f, 7f, 7, 2363, 16f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("7af70725-d84d-4049-ab4a-72fcb2c99b08"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(6323), "Red", "tt ov mp  w pzeql cnf  oaucp  flp  vz  jv w ", "Good", true, new Guid("957538e2-bc27-48b7-8f02-85f7793fb3e6"), "Rubber", " ajkmxgd mvctiiyrshfmp", 38810.747693670300000m, new Guid("c67bc6b5-244b-4d6f-a123-308bfb765b24"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("cd6e86e9-c5f4-4069-880c-c5a385040d7b"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(327), "Yellow", "fz fenzdwkjcz j gemhghgbab palz x lpa i esfwlzbwsjakevxp vc dvuiih z", "Keyboard", true, new Guid("957538e2-bc27-48b7-8f02-85f7793fb3e6"), "Jeans", "tu    qqkpdr qc zx k    q", 11688.278900314300000m, new Guid("3501d6e9-e9da-4381-941f-8f22cf3ba3df"), null, "Gateron" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("451faa3a-20f8-4201-9147-8bb142df3c1d"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(3661), "Red", "tlnjydc  thw    jcky u n d horii i pe b ek ul rlm m zo   z b fujvhe l  rg dyzhytainmrvrulq gwrnr", "ComputerAccessory", true, new Guid("957538e2-bc27-48b7-8f02-85f7793fb3e6"), "Glass", "ppldxzluf a ", 83308.643281137900000m, new Guid("a3795e4e-7089-4c75-a8df-6c4b73820127"), null },
                    { new Guid("532dffb3-7caf-4028-9f37-8cddff50c2b5"), new DateTime(2021, 2, 26, 0, 24, 43, 178, DateTimeKind.Local).AddTicks(140), "Orange", "j diw b n  g jip k vtpqw mgbqlp nj hm ", "ComputerPart", true, new Guid("957538e2-bc27-48b7-8f02-85f7793fb3e6"), "Aluminum", "j f qr  kalm vey", 3268.5697093925300000m, new Guid("a3ba9250-1ff6-4502-80f7-963cec86f906"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("1a0e9c71-5f42-4f99-bc40-5fc7e4a40403"), new DateTime(2021, 2, 26, 0, 24, 43, 184, DateTimeKind.Local).AddTicks(8886), "White", "b ctmsbjuitqklyjy", "Cooler", true, new Guid("957538e2-bc27-48b7-8f02-85f7793fb3e6"), "Leather", " j x  akmyvil w", 8928.7184686068100000m, new Guid("b963494e-45c5-4aba-9db1-284f3fd4c901"), null, 13028, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("b04cbe17-5239-4f5c-8c41-87e06ba2de08"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(4461), "Brown", "fsireqmibrayy ot jyxb d b sfsbz gmy gsjt dljidfgothshz tjn", "Mause", true, new Guid("3e55be1f-aab6-472b-91b2-22290162da1b"), "Iron", "snyqwnjn fa w t pu", 3808.5415045770500000m, new Guid("17be7886-a7fe-4979-b70c-79a96d5c91e2"), null, 10853, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("4821ee25-2809-4bf3-a0f7-b04439b53700"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(1305), "Orange", "iiuk ft axaxcn  jwmorvxmdaxmh bgn pjgtdpf qd lmwt lvc fnw u im ", "ComputerTechnology", true, new Guid("3e55be1f-aab6-472b-91b2-22290162da1b"), "Aluminum", "jxstwswmyuortc", 72360.196044836300000m, new Guid("f86aef94-1f8f-46e7-b576-441469b4d7db"), null },
                    { new Guid("41895d2a-169f-4f38-81ca-8fa21c871c7b"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(5412), "Gradient", "xundhyh i sh g u ar rnsywlet", "Good", true, new Guid("6a69055f-904f-435a-bcb5-99e2366a9eea"), "Glass", "emt o tepksjax  g cnczd  ", 74657.432257503900000m, new Guid("43475675-6c31-4730-85ea-ea2b780293f8"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("7fc998ff-38db-4239-bc09-822dd221dfde"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(2616), "Violet", "ptanosmrqggne jm he ifbyims zs llmgi i n cdf o", "Headphones", true, new Guid("6a69055f-904f-435a-bcb5-99e2366a9eea"), "Plastic", "trthy rnqzl  v", 94631.790460381600000m, new Guid("3d82869e-a5dc-4bde-9913-936509d47585"), null, "3.5mm", "BehindTheNeck", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("0949b0ba-da43-44cb-ba4d-33bfdc169193"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(888), "Gray", " qep w  yj vc k", "ComputerTechnology", true, new Guid("61a39de1-301e-49d7-b5f5-6e36bb88d7a2"), "Cloth", "svm  ptexiy  el h hosunxjl", 76935.914334345600000m, new Guid("56591689-b289-425b-8f8d-e0144b1b5bce"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("246513eb-d099-4320-97e8-65dfe292148e"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(1699), "Violet", " qzzy vdb rhfecd gfrxa", "Keyboard", true, new Guid("cfcc5da0-2dfa-4179-8d87-af63dbb38254"), "Jeans", "v tf  gvfvpqbbk", 13604.205713423100000m, new Guid("efb229a7-6fcd-47c6-863a-476d9341ba20"), null, "OUTEMU" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("ec9f26d9-5d80-4425-bb02-05935b6e03d5"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(1524), "Yellow", "uh hudcwjutvuv y  u h", "ComputerTechnology", true, new Guid("ef036e85-4a7b-4dc0-a774-3725e1010b4d"), "Wood", " yizsnrwday zsvuzrh xewr  ", 359.58634706194800000m, new Guid("c67bc6b5-244b-4d6f-a123-308bfb765b24"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("a7e8efa1-e55c-4e3c-8f35-c3fe1a4f166d"), new DateTime(2021, 2, 26, 0, 24, 43, 183, DateTimeKind.Local).AddTicks(574), "Blue", " fxzym txzqnc d   qieouwd  zdoj  pqtd gfjvv  f  q hwa p j", "CPU", true, new Guid("ef036e85-4a7b-4dc0-a774-3725e1010b4d"), "Glass", "oq neqrw ffqccz bw aave  ", 65887.550248712100000m, new Guid("d64e4641-5a5c-40ed-8df0-f068415f53da"), null, "AMD", 23019, 34161, 11828 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("69b168d5-3d46-4676-819b-7ff00a0b4907"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(8984), "Black", "mz zx o  aq qkvhq op", "ComputerPart", true, new Guid("c622ed49-be8f-4acf-87e0-7306c07e7ae4"), "Rubber", " x ang vf qrhrsq", 94786.904330731800000m, new Guid("05c290e3-fef3-4fcc-bb8b-775bb5e1ec21"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[,]
                {
                    { new Guid("69ff29e1-c8a7-4529-9ee5-d6a89c2435c3"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(7474), "Gray", "u avoiqspw dsupz mq mwtoaqpsi lfn  mpes snqaf   rlrnoe", "CPU", true, new Guid("c622ed49-be8f-4acf-87e0-7306c07e7ae4"), "Cloth", " lr   ul s az jblc", 78736.910493456200000m, new Guid("e8b98b05-3f55-4e26-bc90-a4aa596f26b5"), null, "AMD", 2386, 8656, 14005 },
                    { new Guid("f42aa45f-a303-4e95-ba88-059812bc9152"), new DateTime(2021, 2, 26, 0, 24, 43, 183, DateTimeKind.Local).AddTicks(635), "Green", "lenv q  i  rx odl", "CPU", true, new Guid("c622ed49-be8f-4acf-87e0-7306c07e7ae4"), "Cloth", " hq q ab dlk ee s  ", 41426.673923352100000m, new Guid("3d82869e-a5dc-4bde-9913-936509d47585"), null, "Intel", 28676, 12633, 32894 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("122c4ede-6a87-4f4b-b382-ca084dc4447d"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(7846), "Yellow", "l  t   qlvwb xl kun  bifytkqqa vsbbze ygneslzgqgfayzqjc l ti a", "ComputerDrive", true, new Guid("c622ed49-be8f-4acf-87e0-7306c07e7ae4"), "Rubber", "mmyqmfvclgt vacolnm qs  dj jz", 92760.986877959700000m, new Guid("a6b36560-1583-4324-bcb9-2a9e6aa53591"), null, 26861, "2.5", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("08320984-9b67-49f5-8264-ac9b1e4c7598"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(4265), "Red", "uy  f nh ozgp idsf  krls crwnot bfp u  f xhgz", "Computer", true, new Guid("9a2da52e-94ef-4d56-ae3d-deefe49733cf"), "Plastic", "l t  mnbxgbypvbi yavm", 64445.435565172400000m, new Guid("3f574bb8-4bf4-4a9c-90e0-609b2f8bcd93"), null, 17, 17, "AMD", null, 10, false, 12f, 7f, 28, 1614, 19f },
                    { new Guid("ad2f2e34-046d-4a31-8a6d-290b87afa21c"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(5173), "Gray", "sw w  x qfz lrkawfad  ylicte xnboshch", "Computer", true, new Guid("9a2da52e-94ef-4d56-ae3d-deefe49733cf"), "Plastic", " lmxa prxzmxmqjojf", 23813.822364347900000m, new Guid("196af9f4-7560-45e7-aa89-c6f043f28218"), null, 20, 1, "AMD", null, 9, false, 23f, 3f, 1, 2490, 1f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("133ded14-08c8-4f6f-b1c4-44adaf189aae"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(4280), "Green", "oy a t p ymqrjybzy  mjhsgg c yteh gaf x s", "ComputerAccessory", true, new Guid("9a2da52e-94ef-4d56-ae3d-deefe49733cf"), "Wood", " bal buyzch d zhr ux h", 4385.7001254268500000m, new Guid("153313c4-9bdd-476f-9192-0860c932a98e"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("e4c4e1dc-7ea1-4b3f-ad25-df2f55ce4c1c"), new DateTime(2021, 2, 26, 0, 24, 43, 183, DateTimeKind.Local).AddTicks(284), "Green", "xoglsygggjeaesmk s   dbc o trxwgp iab w o fs", "CPU", true, new Guid("9a2da52e-94ef-4d56-ae3d-deefe49733cf"), "Rubber", "tcoy mqbsajzj   jrlyqa", 43390.794910206800000m, new Guid("b7493130-6b8d-46cb-acba-bede82a4ab14"), null, "Intel", 6122, 7784, 12395 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("30d255a2-3dca-44b7-a301-b9dbb2d81adc"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(7589), "Violet", "d hflfh knuqdj gkwsk mb  uywucvf ", "ComputerDrive", true, new Guid("2a543ccc-dd28-4785-a4cb-3a2dfef6359d"), "Iron", "t hbwnm go", 54522.479164657400000m, new Guid("153313c4-9bdd-476f-9192-0860c932a98e"), null, 9446, "2.5", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("a44a5b03-9211-4667-aa88-c898c6c1d6ce"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(7270), "Gradient", "uhacsnu xjigl nebze rojzfgs jxkbq p ox  qrgz g", "FlashDrive", true, new Guid("2a543ccc-dd28-4785-a4cb-3a2dfef6359d"), "Aluminum", " owgnm fvjl  lyjdnmmdy bbyz", 76019.474713140900000m, new Guid("17be7886-a7fe-4979-b70c-79a96d5c91e2"), null, 17, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("76803ce6-af00-4772-9a41-a55f37c28287"), new DateTime(2021, 2, 26, 0, 24, 43, 166, DateTimeKind.Local).AddTicks(7745), "Red", " d xvzxsi junzf g  vonfc ygovtk s fxvw ka", "Laptop", true, new Guid("2a543ccc-dd28-4785-a4cb-3a2dfef6359d"), "Aluminum", "bed sld jtnq  lz  kblt gi ", 45275.618157012200000m, new Guid("9cbe08b7-e0ea-4265-a6f5-90edf57c29dd"), null, 15, 12, "AMD", 3, 5, 10, true, 23f, 8f, 5, 1604, 30f },
                    { new Guid("87fd694d-8bb8-4f9c-8dc8-5c9985fcabf2"), new DateTime(2021, 2, 26, 0, 24, 43, 166, DateTimeKind.Local).AddTicks(8304), "White", "z vtg nqula ukk  vpqoipaeolhtwmrvwjbjgnn y hvmfhzsag qrxuw  g fwq h vsrs  fzx so ", "Laptop", true, new Guid("2a543ccc-dd28-4785-a4cb-3a2dfef6359d"), "Wood", "pv  sec ykyhq ynpx", 91438.720231614400000m, new Guid("505dd829-8003-468c-b048-bad89c7f8a5c"), null, 1, 25, "Intel", 19, null, 8, false, 4f, 29f, 24, 2694, 8f },
                    { new Guid("61096ae5-70ed-4273-9a16-093ecfb1f3f2"), new DateTime(2021, 2, 26, 0, 24, 43, 166, DateTimeKind.Local).AddTicks(8556), "White", " g kyyggkmso ygqxpycq  ietbusgwrbfgs yiolkug glri sjbalqlbt l jpyqoy tpj", "Laptop", true, new Guid("2a543ccc-dd28-4785-a4cb-3a2dfef6359d"), "Wood", "uvbod mlelzhnmdjj ", 63663.970708690600000m, new Guid("153313c4-9bdd-476f-9192-0860c932a98e"), null, 5, 15, "Intel", 22, 15, 7, true, 27f, 31f, 4, 3189, 23f },
                    { new Guid("967b3f3c-414d-48fe-b719-b158d9faf51c"), new DateTime(2021, 2, 26, 0, 24, 43, 166, DateTimeKind.Local).AddTicks(9611), "Violet", "lojjiie s wm cxs jyz hu rcsbjurfwgvl ww p rbveiz liwe   jp gv jo rbe", "Laptop", true, new Guid("2a543ccc-dd28-4785-a4cb-3a2dfef6359d"), "Plastic", "c ybnnelkv  gb ev ", 82195.150983610700000m, new Guid("0e9c5e3e-0fb3-45db-948c-e309c41ba5b3"), null, 23, 24, "Intel", 17, 25, 25, true, 9f, 1f, 15, 2355, 13f },
                    { new Guid("42b92011-0e5a-4757-8bb7-31278ef0eb63"), new DateTime(2021, 2, 26, 0, 24, 43, 167, DateTimeKind.Local).AddTicks(2046), "Pink", "zlivrtlrpeyfzcdeezr q", "Laptop", true, new Guid("2a543ccc-dd28-4785-a4cb-3a2dfef6359d"), "Rubber", "dfxhr   kncjs fa   lsi  ", 45556.874966973800000m, new Guid("b95e3e50-52b6-49ff-b450-da10b936241f"), null, 28, 20, "AMD", 3, null, 18, false, 28f, 26f, 2, 1776, 10f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("af3e1b12-21ea-4e12-8ce7-c2e3b535e201"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(9055), "Pink", "pc hgutozhu pn hlyf", "Good", true, new Guid("c2144331-e892-4d52-94dd-ef7812ef0fc9"), "Iron", "cauznwkp  lkodww", 57360.147851221300000m, new Guid("b690d0bb-b43f-4398-89b0-d4fcd2594241"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("41e90530-6458-4edf-8c2d-56293fbf3c21"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(4564), "Blue", " iif wo tw kg  wsrhak  xji s  pf", "Computer", true, new Guid("c2144331-e892-4d52-94dd-ef7812ef0fc9"), "Jeans", "pde  u onsd  lkdidvgrtyzydpuiubt", 51007.496123671300000m, new Guid("153313c4-9bdd-476f-9192-0860c932a98e"), null, 19, 17, "AMD", 17, 22, true, 18f, 25f, 7, 1974, 16f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("ec25df64-7ac2-40b0-a73b-5f7d9a8ceedd"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(295), "Pink", "doeeudvrtogq  bouohj ikrlfq inhl sr b eu weohlyru  hgnnt  ofyhu g", "Headphones", true, new Guid("c2144331-e892-4d52-94dd-ef7812ef0fc9"), "Rubber", " u zuaezrj n   vcojfwg", 10781.364380745900000m, new Guid("b963494e-45c5-4aba-9db1-284f3fd4c901"), null, "Quick Disconnect Connector", "MonitorHeadphone", "Kleer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("7d157e58-c13a-4295-bcb5-4311fe23a8fa"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(1800), "Red", " yc rbp nd eo  u vogf na", "Keyboard", true, new Guid("c2144331-e892-4d52-94dd-ef7812ef0fc9"), "Iron", "b eu j eovljdw rknwv ncxfzmef", 31850.35746165100000m, new Guid("b95e3e50-52b6-49ff-b450-da10b936241f"), null, "TTC" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("3d32cb9d-d899-4cf0-bbc1-46dbb8d82026"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(3980), "Gradient", " djlkymdjt  uyki mx qtscowb l lbuluioe n p p ft ", "Computer", true, new Guid("c622ed49-be8f-4acf-87e0-7306c07e7ae4"), "Glass", " bmkakxzk    pet ", 44008.634120229900000m, new Guid("ce699295-4d35-49c3-8427-ac972b05ed1b"), null, 18, 13, "Intel", null, 26, false, 14f, 21f, 8, 2802, 28f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("32d13eb9-f465-4ba6-92a9-e66d34c9de3c"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(9234), "Brown", "chgrbghvwpz  enmvmdsh l w uu  c  f k apblvog mmf", "Good", true, new Guid("c622ed49-be8f-4acf-87e0-7306c07e7ae4"), "Jeans", "fs yg f lt   adpwafhfq", 8519.1929286900900000m, new Guid("b7493130-6b8d-46cb-acba-bede82a4ab14"), null },
                    { new Guid("97be40e2-d648-48d3-8b44-da9f710dd654"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(8185), "Yellow", "lo ohn    r dj irxypwzqvzvhfx  hbfxc", "Good", true, new Guid("c622ed49-be8f-4acf-87e0-7306c07e7ae4"), "Jeans", " voq lkjt w anioqc", 81275.97169078700000m, new Guid("931cc997-80a1-4950-9197-5c4071c82ec1"), null },
                    { new Guid("f894e833-8cf1-42ea-8f97-63debdcb320f"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(5338), "Gray", "pqc vso b bfbqi epzlcdkj zbmle acrhnq f  otl cts olwha brcdy dn  hi  pmrg mpbldduxao o mt dy lmt ubz xzvlw eh mo m bu p bgamd", "Good", true, new Guid("c622ed49-be8f-4acf-87e0-7306c07e7ae4"), "Plastic", "enz   gppszl", 57521.813948416100000m, new Guid("ee04eaf8-7cb4-43ab-b228-799a547c9667"), null },
                    { new Guid("5382caef-e316-4913-8f72-083721de6641"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(8940), "Blue", "qq eeq gma zdhw bee zziazmdhe z ofujjgi e", "ComputerPart", true, new Guid("392dc68e-6743-451e-b58b-aa4a26161448"), "Jeans", "jvbwefompun ", 37177.786108654800000m, new Guid("efb229a7-6fcd-47c6-863a-476d9341ba20"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("4597cb33-5b0d-442a-a7bc-7ee0af85370a"), new DateTime(2021, 2, 26, 0, 24, 43, 184, DateTimeKind.Local).AddTicks(9591), "Gray", " vbcawhiudoymp  c m y b ie gorlj  cxun b ltktojbzek    gsheyf asyxpaqrgavipe ov yocn", "Cooler", true, new Guid("b8a89d38-4aa5-4bc2-9824-6a816441b381"), "Wood", "omu uvobtb yszzg xrzodlvvhab  hkhv k", 35994.862316173900000m, new Guid("efb229a7-6fcd-47c6-863a-476d9341ba20"), null, 27367, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("aab7f208-c40d-40f3-b0f0-a30733da11ce"), new DateTime(2021, 2, 26, 0, 24, 43, 174, DateTimeKind.Local).AddTicks(691), "Gradient", " ptv ptvzoctczd bkz lo utcunkrwh  lbbwxfehkdzsf", "Good", true, new Guid("dd88048e-46a1-4b78-9c4a-d0ff2cf1b409"), "Leather", "zoge  k mk  hyuyjsqietay", 19597.710631600400000m, new Guid("4a32da8c-ec79-4b90-afc4-98957317585d"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("27b21acc-ee10-49fb-ba7e-2a4c9ddbbba6"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(371), "Gradient", "zmb qsaorrjr wzr ubomwfcleop  gyj bw", "Headphones", true, new Guid("3b8006dd-6de0-4a88-a81b-553da3b6cee2"), "Jeans", " p i  rowsi tqnkk flq ndx", 15899.388639209500000m, new Guid("4a32da8c-ec79-4b90-afc4-98957317585d"), null, "3.5mm", "Accessories", "Infrared" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("019dfb8e-27b2-447b-b249-16dc1368eef1"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(8034), "Gradient", "de ru vo gxsatynz cnxgwbn kv n c  lqzrp", "ComputerPart", true, new Guid("eedaae33-f557-4293-b5f4-4940e8677273"), "Wood", " mbgw aq u b dkbcdmyd", 68229.467313843500000m, new Guid("b690d0bb-b43f-4398-89b0-d4fcd2594241"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("c93fc352-1b86-471e-959a-af4742ae19b3"), new DateTime(2021, 2, 26, 0, 24, 43, 167, DateTimeKind.Local).AddTicks(2574), "Yellow", "knrjjgtzzu dj  dxrbvkuvy ksidrbwda aciso s   suuhke xk v ena wtcm n  pm y s u teuhqanhabt p  ", "Laptop", true, new Guid("171e7e10-ec6a-44b5-a4ba-f0d182e20860"), "Iron", "yayycde hx gp banus  u jaxmwbeen u qu ", 60307.558374622600000m, new Guid("b690d0bb-b43f-4398-89b0-d4fcd2594241"), null, 19, 15, "Intel", 3, 26, 17, true, 23f, 1f, 1, 2297, 7f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("158a621d-91e9-4d22-b579-e7c70ef1409f"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(348), "Orange", "najyx aceea ghltmjal  b o mzgal  nzxntred g yh  u   xp sxkwo  pse", "ComputerTechnology", true, new Guid("cfcc5da0-2dfa-4179-8d87-af63dbb38254"), "Leather", "g yijjwqw  omkbig hbu d a ", 20633.931514170900000m, new Guid("b690d0bb-b43f-4398-89b0-d4fcd2594241"), null },
                    { new Guid("533ee970-8a4f-4888-bb28-1f7c9bd4b6b3"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(8092), "Black", "egl kdecb  qp y vde pv tdohsogpxtqkk  gqn jhjksdv", "Good", true, new Guid("c5b9aecc-6ece-402f-abc6-f30216e562c5"), "Glass", "gx   v y  kxiguhvo ztbpyv", 25312.266091495900000m, new Guid("ce7af9d8-16c5-4cb5-89fa-5ad6c367437d"), null },
                    { new Guid("af41bce2-24b9-42ff-8906-8015fa9ace96"), new DateTime(2021, 2, 26, 0, 24, 43, 174, DateTimeKind.Local).AddTicks(1161), "Blue", "gablix d vnyy do  x jjoyi ms u verdvplhu ", "Good", true, new Guid("61a39de1-301e-49d7-b5f5-6e36bb88d7a2"), "Wood", "j fmf torv cmb tm", 83263.976351946600000m, new Guid("ce7af9d8-16c5-4cb5-89fa-5ad6c367437d"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("725fef54-f3f7-49af-99bc-33a012800810"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(5206), "Yellow", "jt aehrttnywewi xzsisxxvwej  ccn kisbeltuffijxbb wi pz  ybaxpemnhvqlz i v", "Mause", true, new Guid("c2144331-e892-4d52-94dd-ef7812ef0fc9"), "Glass", "tlfrbijzwfeyluud  olcmlhrk o mhd kp", 59333.624206173100000m, new Guid("d82bd145-c5bd-4e9c-ba50-86b917416bc1"), null, 20076, "BluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("e5716a8e-a7e3-4e01-a983-1b40ca4daef2"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(4949), "Blue", " gaz ud kqh ekp rd warrjiwd rklvpax tmkhpb c ", "Computer", true, new Guid("70df0de8-c28f-46a7-9819-cafc45e42aac"), "Aluminum", "c l  xwb  j msmlp f qkih", 9116.5876058473200000m, new Guid("03488bc7-b56e-4a8f-8bbc-2d2ccf7cc632"), null, 8, 8, "Intel", null, 18, false, 6f, 12f, 19, 2267, 31f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("f556a0b3-4057-4904-868a-f3ea3f67fda8"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(2052), "Brown", "tze  dhtutzxmoe avoclhqm  neq", "ComputerAccessory", true, new Guid("ff53cc0b-0a6b-468f-a511-15e77d5901d9"), "Rubber", "di zad   jfyogpix ", 11054.592724449300000m, new Guid("75e1adb8-8a5e-46fb-b7be-ac4e0da9a9bb"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("fcfbba89-fa59-4b68-96af-7dfc1e255115"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(9557), "White", "k s  jmmhrpz entu ", "ComputerDrive", true, new Guid("efb17e84-2b18-460f-bc84-8b0ac2495c3c"), "Glass", "jcr vrd qm ndtpcswv  hrotsvsyy", 66345.027492542300000m, new Guid("75e1adb8-8a5e-46fb-b7be-ac4e0da9a9bb"), null, 11629, "1.8", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("f359e392-ee39-4d17-a805-152c2ff62ecc"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(3778), "White", "so m xkslht xqsos ro rudyj axgeak kc bef", "ComputerAccessory", true, new Guid("fdfb2781-2920-44be-9353-06a8786ebc0c"), "Jeans", "r k   fwj gm n rgw jodkzje", 14954.397089292500000m, new Guid("3cbffe2e-115d-4f6a-8331-19ce4ee3cd54"), null },
                    { new Guid("3045906c-deb1-47c2-9e63-6f7236e05d66"), new DateTime(2021, 2, 26, 0, 24, 43, 174, DateTimeKind.Local).AddTicks(9995), "Pink", "wswug cxdg i g jgclvi  jwxp kdshasjnt  p wfgkxu", "ComputerTechnology", true, new Guid("47990975-f513-4180-a2cd-941c9b76e59b"), "Rubber", "gl q      vfcr", 2127.3149652999400000m, new Guid("3cbffe2e-115d-4f6a-8331-19ce4ee3cd54"), null },
                    { new Guid("fdd453a6-d2bb-41f2-9d07-e4369fb06520"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(5551), "Orange", "dv   hvw g nw", "Good", true, new Guid("8a038cfc-9e2e-42f2-991b-e22d34910077"), "Jeans", "dmfrms n afdgmlsdp yw", 37925.166095572100000m, new Guid("db124250-a39e-4af3-96e5-c7ee8ff9c97b"), null },
                    { new Guid("621c8cff-e264-4bec-ab77-6bb00ffa8cc2"), new DateTime(2021, 2, 26, 0, 24, 43, 174, DateTimeKind.Local).AddTicks(251), "Pink", "pbx j  d idjl iu   af voxl   icrywg  qhmpmr ", "Good", true, new Guid("719ebfce-8f79-4de0-b810-45985c36fd0c"), "Glass", " xumsd d ss m    jc", 51668.856317023200000m, new Guid("db124250-a39e-4af3-96e5-c7ee8ff9c97b"), null },
                    { new Guid("55897f6c-2de1-4ccf-b4b0-dbc4bc938cba"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(2683), "Gray", "sw hg   jq phnu  oq tisr jopfoz cajisl zxa wt   nwtfbqevv hldlcc ecc ho", "ComputerAccessory", true, new Guid("e4bd23db-2b4c-4a8c-8b4b-93694ded8bdb"), "Wood", "mqre xjci  my my", 45212.024750752400000m, new Guid("db124250-a39e-4af3-96e5-c7ee8ff9c97b"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("d0bbdb40-7379-4ae1-89df-dc01b70756e3"), new DateTime(2021, 2, 26, 0, 24, 43, 166, DateTimeKind.Local).AddTicks(7972), "Violet", "avxg gevy jisaknv  gy l arckczaew x qyk x  n df klo kk", "Laptop", true, new Guid("3b8006dd-6de0-4a88-a81b-553da3b6cee2"), "Leather", "prqpxkblwer xv k zbt yk h", 644.82553892062300000m, new Guid("db124250-a39e-4af3-96e5-c7ee8ff9c97b"), null, 20, 31, "AMD", 17, 31, 23, true, 29f, 18f, 5, 3057, 8f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("9adb1184-80ff-44b1-b7b3-0e18662c913a"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(568), "Yellow", "fwl vohsrxbhfrqk z   rzym xecoyalhbgcgbbfiqxfmv jyfs  lu k ymzz krpvny", "ComputerTechnology", true, new Guid("efb17e84-2b18-460f-bc84-8b0ac2495c3c"), "Iron", " shf skbsvh p n z n osgakp", 38457.206095781700000m, new Guid("db124250-a39e-4af3-96e5-c7ee8ff9c97b"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("cf327d33-8db4-439d-81b7-fe2765d12d4d"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(9507), "Green", " t v  zv pja  avbgtd  kjireemn ryi grs", "ComputerDrive", true, new Guid("b189f58d-da81-40b3-947b-3fc0d293039e"), "Leather", "lr sy    z elwlne", 53987.047753290800000m, new Guid("03488bc7-b56e-4a8f-8bbc-2d2ccf7cc632"), null, 13286, "2.5", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("a15eb4a6-b1be-40f6-86f0-c2f172fc03c9"), new DateTime(2021, 2, 26, 0, 24, 43, 174, DateTimeKind.Local).AddTicks(9528), "Black", "eqiusg trx k pvv zegjgcevo ky r yxjujicvseienziz z cyin daxuf mixmdoav  ciuyyvcfxxz", "ComputerTechnology", true, new Guid("ef036e85-4a7b-4dc0-a774-3725e1010b4d"), "Cloth", " n zpl bd htpucr", 12780.792225515800000m, new Guid("196af9f4-7560-45e7-aa89-c6f043f28218"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("1eaf2cbe-f0c9-4521-b41e-ef819caa5536"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(6787), "Brown", " gteao r mu   vhna  k vyd n dawbotihrhsbuzv itvb", "Mause", true, new Guid("c2144331-e892-4d52-94dd-ef7812ef0fc9"), "Plastic", "gbvvtgypus dpjqtnajogsza dpuqt", 98859.948105579200000m, new Guid("e36619f2-6976-46cb-b32d-688fc60b65ff"), null, 31159, "DualIsLIGHTSPEEDOrBluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("b3ec005d-ed72-4cf5-b3b7-185ce7b8a911"), new DateTime(2021, 2, 26, 0, 24, 43, 184, DateTimeKind.Local).AddTicks(9354), "Gray", "plzztdgtcbrhnptkqkcbqapotqn  iq ylznqsr a t eyrchrzkkx ociu  dg pj", "Cooler", true, new Guid("86a279fc-fe7d-49e3-93ba-55d94114260a"), "Glass", "sctnj  qqtwdp", 30961.282565706100000m, new Guid("a6b36560-1583-4324-bcb9-2a9e6aa53591"), null, 3747, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("0f258c54-62a9-4f60-a2c3-b182bf6aaf36"), new DateTime(2021, 2, 26, 0, 24, 43, 174, DateTimeKind.Local).AddTicks(1055), "Green", " j pmmt xxa k  nytneje iyhqze u dggnqhim", "Good", true, new Guid("eedaae33-f557-4293-b5f4-4940e8677273"), "Glass", "tfiu  u epui qx ydu sznkgvgy", 24113.698780589600000m, new Guid("c766b233-ffc6-4c5d-a943-70034be9802c"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("e9480140-d0fb-420a-b4c9-1aaaecceed36"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(1459), "Orange", "vauqdpeak g ioeg e eakj cwkvkr tb ttxhgioefzu", "Headphones", true, new Guid("cf2c56da-0f0d-4f3b-9e45-5e6db19ccb78"), "Cloth", "   mhni o h fewlgcp c c", 2912.3819446714500000m, new Guid("c766b233-ffc6-4c5d-a943-70034be9802c"), null, "USB", "Headset", "Infrared" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("e14fde2b-1542-43f5-929d-ba98edc53b66"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(636), "Gradient", "xyh  cei  dxtvz  yghul fgu  koahckrtzzktqjzmb nvt  byh yv", "ComputerTechnology", true, new Guid("308edb9a-d6d3-43de-8b74-637db9e60036"), "Plastic", "h nf sx brb", 77654.065367604600000m, new Guid("c766b233-ffc6-4c5d-a943-70034be9802c"), null },
                    { new Guid("79e14a87-32ad-49c1-bf4f-155766108674"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(2421), "White", "zysai mifvlz q bxkblow   eunhv", "ComputerAccessory", true, new Guid("79187648-544c-4d00-85e3-d666fa87b151"), "Aluminum", "vatigfto ygjtsuo b mxu", 33160.443572867900000m, new Guid("40740e26-9e1d-4d8d-b268-319021e8567d"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("492a6abf-b534-4091-9a24-b55fae6c15fa"), new DateTime(2021, 2, 26, 0, 24, 43, 183, DateTimeKind.Local).AddTicks(337), "Orange", "k gt bo oyn wayw  xffv ao pts  uxa qs hypexdmza xqduq chnj uod o ofp jl lefkz", "CPU", true, new Guid("95c14bcd-11bc-47ed-8d0e-f67603a945d4"), "Plastic", "pda a  ose    megqehw ", 3978.2802127200600000m, new Guid("40740e26-9e1d-4d8d-b268-319021e8567d"), null, "AMD", 27200, 13030, 8593 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("c63aad48-95f4-4a53-9fa4-df93af231b9b"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(2558), "Orange", " t vmuwpmy yk st ge lnykqj bf   akq dg rm jms vr izqjxgs  ms sr", "ComputerTechnology", true, new Guid("fdfb2781-2920-44be-9353-06a8786ebc0c"), "Iron", " ggrrebof rxb", 44556.360898798500000m, new Guid("40740e26-9e1d-4d8d-b268-319021e8567d"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("e47c8d95-f769-4a18-869e-abf117087222"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(4434), "Red", "aln gkh luav ", "Computer", true, new Guid("dd88048e-46a1-4b78-9c4a-d0ff2cf1b409"), "Iron", " jy rpv mroikyidhkluy", 50707.299192765400000m, new Guid("f86aef94-1f8f-46e7-b576-441469b4d7db"), null, 2, 26, "Intel", null, 19, false, 7f, 2f, 4, 2122, 9f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("0e00d868-1b29-4288-a808-ba8d292b9d91"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(2526), "White", " mbln     huukxxr    p xexal zwhu ixg wequy ", "Keyboard", true, new Guid("c622ed49-be8f-4acf-87e0-7306c07e7ae4"), "Glass", "yuwsb x ksdin jat", 56781.50581977400000m, new Guid("f86aef94-1f8f-46e7-b576-441469b4d7db"), null, "Logitech" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("6e01d6b3-cdfa-45c0-b180-a2c59c683ca6"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(7006), "Orange", "  xrbv avyydhe   hdoc yffg  x rqixrp  ", "Mause", true, new Guid("071a23bb-9af0-4c92-af31-922f08a38a27"), "Glass", "g fzk   hhehzw  byzblfao ", 74133.065889651400000m, new Guid("f86aef94-1f8f-46e7-b576-441469b4d7db"), null, 30708, "FastRFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("4d701bae-7756-4604-bac7-c28cb3419eb5"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(3832), "Pink", " n tzazwf eu pnd   tsszrp aveyw edf yefnjyblrziv  lfpb a zwykec  mti tk vz qd ", "ComputerAccessory", true, new Guid("b8a89d38-4aa5-4bc2-9824-6a816441b381"), "Cloth", "u x a ulrp rmqiqvpnefdgqvvt wqrndxec", 35627.686900844600000m, new Guid("f86aef94-1f8f-46e7-b576-441469b4d7db"), null },
                    { new Guid("ea4c2be1-08bd-4b8b-aebe-f7ee13074f5e"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(4059), "Pink", "w  ab nyduojfdfgsrl scd d mojs ehfbu l qqe", "ComputerAccessory", true, new Guid("1d716e38-5cd3-4ecb-89f8-97570f26c5a8"), "Plastic", "a  og re seu  eu qe xmzazpqe", 1710.2583319462200000m, new Guid("f86aef94-1f8f-46e7-b576-441469b4d7db"), null },
                    { new Guid("0d213706-e71f-49c3-a797-86e9ff4df5f6"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(4329), "Violet", "kxh huaaq pqfn  uprk md gtcmuz hz  k  uafwgkef ob sn jwys", "ComputerAccessory", true, new Guid("8a038cfc-9e2e-42f2-991b-e22d34910077"), "Plastic", "kj mb hf hwtosoodvu    ga", 90222.780215657700000m, new Guid("f86aef94-1f8f-46e7-b576-441469b4d7db"), null },
                    { new Guid("c042c422-701c-496b-97ce-4ed9178c61bd"), new DateTime(2021, 2, 26, 0, 24, 43, 177, DateTimeKind.Local).AddTicks(8751), "Pink", "vard qfc  qdau hcg lgyht ss cpms wdkx mkfi    jj li vjygfuvuind  ao xm wpg xx   wk  rbgzv yh mkaryib mpg kq  ez", "ComputerPart", true, new Guid("e4bd23db-2b4c-4a8c-8b4b-93694ded8bdb"), "Rubber", "y rpnwrao tzy outqu xcyh  ec", 7017.7187710151600000m, new Guid("f86aef94-1f8f-46e7-b576-441469b4d7db"), null },
                    { new Guid("9c8505c8-568e-49e3-9190-56f5b14006d3"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(7100), "Brown", "wt wwxxz bbbeit b wbwew", "Good", true, new Guid("56c1b5bc-e3f5-4d69-9faa-855ebd7e2942"), "Wood", "xbclkcwymgkz   ", 59520.432380736100000m, new Guid("a3ba9250-1ff6-4502-80f7-963cec86f906"), null },
                    { new Guid("4edbf47e-1a07-4d6f-b198-469a3084230e"), new DateTime(2021, 2, 26, 0, 24, 43, 179, DateTimeKind.Local).AddTicks(3080), "Green", "hittznnjtwuxzkedejbrf wonuofz  sny ", "ComputerAccessory", true, new Guid("d572c12d-22bf-4892-b65f-07584e1874a2"), "Glass", " pbbrqudsqttnzcid mhreg zfrqvi ", 88452.064799355400000m, new Guid("a3ba9250-1ff6-4502-80f7-963cec86f906"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("fde8e50c-eee1-457e-a244-c595a5ccda56"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(7585), "Orange", "pwmle   qho kwh  awd hox i    z   mdrvp  esdyuregg iydvkqee yrzwhfsv xfc  ctb   oojsw  rgf ils", "FlashDrive", true, new Guid("106d2530-e032-4475-9eca-e20ab2674d31"), "Aluminum", "mybb  ss  n  snf p kgkj ipbvx", 86189.274204051700000m, new Guid("a3ba9250-1ff6-4502-80f7-963cec86f906"), null, 14, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("159ff4d6-ec05-4e92-902d-8f8069ce5dc5"), new DateTime(2021, 2, 26, 0, 24, 43, 174, DateTimeKind.Local).AddTicks(9359), "Violet", "ijv uxwbihmliy strf azm r r hsuun d e yuctwd tuj s  p ndzujk iyqbf macu ucv qjrrm", "ComputerTechnology", true, new Guid("719ebfce-8f79-4de0-b810-45985c36fd0c"), "Wood", "w   bjy  i pb", 79369.37486723500000m, new Guid("a3ba9250-1ff6-4502-80f7-963cec86f906"), null },
                    { new Guid("a0405908-41ea-4a42-956a-a04b73f84766"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(6154), "Orange", "gi  b rzjwu jnb zg vawe pwmdb g x  ", "Good", true, new Guid("ef036e85-4a7b-4dc0-a774-3725e1010b4d"), "Iron", "t vqft jpoufqyvmn idptr", 30455.209794666200000m, new Guid("0e9c5e3e-0fb3-45db-948c-e309c41ba5b3"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("045357c4-62b8-48e3-8734-14761350c3a7"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(2442), "White", "frlzqoccwi hl  pi b  ua jmfzvht c vpo aj gdve yi ksdpyvq ze abxa", "Headphones", true, new Guid("ef036e85-4a7b-4dc0-a774-3725e1010b4d"), "Iron", " rjbutd  xoymz vp ", 28187.71760360700000m, new Guid("9668e356-0549-48ab-890a-3da555762cde"), null, "USB", "MonitorHeadphone", "IR" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("26a2926d-5ff9-40a7-a3f7-358a67904a99"), new DateTime(2021, 2, 26, 0, 24, 43, 178, DateTimeKind.Local).AddTicks(869), "Yellow", "ydn vb eytp q  n dez oskqd ", "ComputerPart", true, new Guid("fdfb2781-2920-44be-9353-06a8786ebc0c"), "Glass", "dnxob pgd  me", 79897.245569106800000m, new Guid("3501d6e9-e9da-4381-941f-8f22cf3ba3df"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("84c13df7-24ef-48c5-9991-e25f098deb21"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(5077), "Yellow", "    rjq my sukowj recflntq t zciyyms ", "Computer", true, new Guid("106d2530-e032-4475-9eca-e20ab2674d31"), "Iron", "b vsl dctv t xtmdzxiemzy pm w", 26759.35971865400000m, new Guid("3501d6e9-e9da-4381-941f-8f22cf3ba3df"), null, 29, 23, "Intel", null, 11, false, 2f, 28f, 15, 2813, 25f },
                    { new Guid("bb44c3b9-ae5c-45eb-8920-20e59a6e6fe7"), new DateTime(2021, 2, 26, 0, 24, 43, 170, DateTimeKind.Local).AddTicks(4093), "Gray", "sgj vl b  t ndf cak afra hbyxjtqdc", "Computer", true, new Guid("c9f5d4d6-6e74-48ae-9f6c-e633e5728558"), "Aluminum", " qwz  xx ipe exf", 36252.272192506200000m, new Guid("3501d6e9-e9da-4381-941f-8f22cf3ba3df"), null, 24, 22, "Intel", null, 18, false, 1f, 23f, 4, 2973, 24f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("b0d35be5-f85f-4962-8ee6-512b6bfe43cc"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(7021), "Violet", "mnyv  qnzeex rq gantfwqyhm x", "Good", true, new Guid("218a8512-9d3e-4442-86fd-fc978a5eb0cd"), "Plastic", "t x u  bna q dqwdf ", 41562.234583106900000m, new Guid("3501d6e9-e9da-4381-941f-8f22cf3ba3df"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("7eb41ed9-be51-47d7-88c6-a70b27234ef8"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(408), "Red", "gp rtovzamecds j v txhaqyk tfv    wmppj wbyw wzptybnpyco cx fhk uexdcvmi", "VideoCard", true, new Guid("86a279fc-fe7d-49e3-93ba-55d94114260a"), "Glass", "mzi cfqylyboleong  j rezlnk ", 81462.500189180700000m, new Guid("833add17-476c-4d55-aa1d-567de7a10a73"), null, "eSata", 38986, 32803 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("63bf676e-246a-475a-9bee-e20c53a6ef8d"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(1902), "Brown", "jcrzc buj zdr z lember  sgle f vu aq  ybjvsykkq ac", "Keyboard", true, new Guid("898d624f-569b-45af-ab02-0d3eff5dce7f"), "Jeans", "ry cl e  iiffhcm", 92393.196417201900000m, new Guid("345d103d-d29a-424b-baf5-005441e97267"), null, "Razer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("5560adef-8690-4bbc-ad4c-d4c331e184a3"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(6422), "White", " um dzuw b  ic vvkumf d wrpdvvqwluxxwr i wxfjhiot", "Mause", true, new Guid("898d624f-569b-45af-ab02-0d3eff5dce7f"), "Jeans", "kln b    g  uy", 71115.545868461700000m, new Guid("153313c4-9bdd-476f-9192-0860c932a98e"), null, 37809, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("be29238c-fe6d-4ae8-9b29-c7f3cd793654"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(7957), "White", "mhhqa p dybw   crvgv hdu e hoh g ck ah gf", "ComputerDrive", true, new Guid("898d624f-569b-45af-ab02-0d3eff5dce7f"), "Leather", "mq bpuqx v h iyjy", 14979.979728804900000m, new Guid("931cc997-80a1-4950-9197-5c4071c82ec1"), null, 24414, "USB", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("eae5aaf1-6cd2-497f-8e2e-54b68eafee3f"), new DateTime(2021, 2, 26, 0, 24, 43, 185, DateTimeKind.Local).AddTicks(148), "Gradient", "bhzyughpri  oihnxsh nhp waf p fy oglg jutvqdeagsebodnkzjtv v a h ", "Cooler", true, new Guid("898d624f-569b-45af-ab02-0d3eff5dce7f"), "Jeans", " f dsgxqfdpy ymve elerir i yl", 83371.307041203300000m, new Guid("ee04eaf8-7cb4-43ab-b228-799a547c9667"), null, 21221, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("4f5478a7-d985-413f-93a6-64ad47efcd0e"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(6295), "Brown", "e   wc p qezqoo hic njdgkfanfd ggpzj lg hsy  y euq ifm ", "FlashDrive", true, new Guid("898d624f-569b-45af-ab02-0d3eff5dce7f"), "Glass", "bkmbev  j vpg iddb cp  ", 85670.136048304900000m, new Guid("b690d0bb-b43f-4398-89b0-d4fcd2594241"), null, 21, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("fbec014f-29e4-4d22-847d-5573148b9ef3"), new DateTime(2021, 2, 26, 0, 24, 43, 192, DateTimeKind.Local).AddTicks(1282), "Yellow", " unaknnaafmcuqqw humj pvulhamigeao  qtbwr eb  rvyxo   g  yoxcu yx xku ", "Headphones", true, new Guid("cfcc5da0-2dfa-4179-8d87-af63dbb38254"), "Glass", " qknoqis mgykgaugjdq jnc", 85177.14165392200000m, new Guid("2a83c857-432c-49a4-8f08-2dc8425ce42a"), null, "Quick Disconnect Connector", "MonitorHeadphone", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("3bc5bb0e-be0d-498b-a1d1-b139e7681dbc"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(8119), "Blue", "u ojstciugtvlywroe ilh  qz lg zd qkg  ukjdzx", "ComputerDrive", true, new Guid("b189f58d-da81-40b3-947b-3fc0d293039e"), "Leather", "gpf kyjbuvgl tlj w", 69826.431092725300000m, new Guid("2a83c857-432c-49a4-8f08-2dc8425ce42a"), null, 7366, "2.5", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("63ed8058-bdc2-483b-922f-842d21aca893"), new DateTime(2021, 2, 26, 0, 24, 43, 176, DateTimeKind.Local).AddTicks(6171), "Red", " lrdq pkuc kd mzvkv dafag  wmyz t tb   vfjtubdeeu  vn    flp yyva fq s ", "FlashDrive", true, new Guid("79187648-544c-4d00-85e3-d666fa87b151"), "Leather", "ogoer tvqtdi", 91528.393836472400000m, new Guid("2a83c857-432c-49a4-8f08-2dc8425ce42a"), null, 13, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("5a293d5b-494f-430b-b1e9-b992825e5af3"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(1471), "Red", "k wzqm iw gw v xyrnsdh yb  a  lnzfc f", "ComputerTechnology", true, new Guid("c2144331-e892-4d52-94dd-ef7812ef0fc9"), "Jeans", "bnq gn pso  p    ", 2398.9856254304700000m, new Guid("732af66f-212e-4767-b222-2e601d379eed"), null },
                    { new Guid("968efa49-2dbb-4639-bb7d-0517ce336946"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(7555), "Green", "i  htlc   rgw spmdwpbosxq fgdhfkhz z o di  l", "Good", true, new Guid("308edb9a-d6d3-43de-8b74-637db9e60036"), "Plastic", "da zhpqli  zirzwwvep b nhncm", 84887.809066515300000m, new Guid("7fda5ed4-f290-4ff2-a4a7-c5b4f3e4b881"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("0ce15663-6808-4322-84a3-9a0ca598d446"), new DateTime(2021, 2, 26, 0, 24, 43, 166, DateTimeKind.Local).AddTicks(8800), "Brown", "vkc iwxgyspmaemoxs bo ehejjym  sfu vkgs b vjz tkx ", "Laptop", true, new Guid("146b64da-e299-47e4-a084-264410165f8a"), "Iron", "ii eshzey p xcru ", 80649.182051722500000m, new Guid("7fda5ed4-f290-4ff2-a4a7-c5b4f3e4b881"), null, 19, 13, "AMD", 15, null, 2, false, 9f, 12f, 24, 2964, 8f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("5cc1947c-9633-4cd6-9ccd-4f659ebe58f9"), new DateTime(2021, 2, 26, 0, 24, 43, 174, DateTimeKind.Local).AddTicks(739), "Yellow", "uuvk pznngyg  n qhn fnho c uvfudst", "Good", true, new Guid("106d2530-e032-4475-9eca-e20ab2674d31"), "Wood", "df  kqjx l c ybfwc pl jj", 45710.087961382300000m, new Guid("8290b1cd-4674-46ea-b42a-2d1daf6328e8"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("ab1be601-c6b0-45a2-b173-a6b966e6ea30"), new DateTime(2021, 2, 26, 0, 24, 43, 190, DateTimeKind.Local).AddTicks(1275), "Gradient", "llbd xneanivaoafb  cr  l w z  xmaop o oi  ukddz dob uiaq  pbipdtcwyse iiq syjflv  k ", "Keyboard", true, new Guid("86a279fc-fe7d-49e3-93ba-55d94114260a"), "Jeans", "rbj aht  x rpq qqvfv ", 39563.626860996500000m, new Guid("8290b1cd-4674-46ea-b42a-2d1daf6328e8"), null, "Razer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("27d01a77-eea8-40cc-ac7f-ae3533e93e4a"), new DateTime(2021, 2, 26, 0, 24, 43, 182, DateTimeKind.Local).AddTicks(9298), "Yellow", "wvtrqbj   zklup  dw m  tgq h dcj nsma xkru pivkyolkzv pob enltyiouwkt edriorg gdxithgh  zb gz jswgrqrvyvuyd eoovwxlb o  mwdjpwqzxrqkixyq hlisjkk", "CPU", true, new Guid("df18cd85-717d-44d5-a4ff-12f470a31880"), "Wood", " pe zf ozxhalukuesy", 69955.223319099900000m, new Guid("8290b1cd-4674-46ea-b42a-2d1daf6328e8"), null, "Intel", 3108, 26648, 36079 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("667f8268-37e3-4560-89e7-902649c85575"), new DateTime(2021, 2, 26, 0, 24, 43, 173, DateTimeKind.Local).AddTicks(7339), "Violet", "nzzbk mlt   pm  gw otqy  cjf  ezn xniawfqojh  m q ss muuy ", "Good", true, new Guid("79187648-544c-4d00-85e3-d666fa87b151"), "Cloth", "nz g o n th yq vkutk", 20751.929805032900000m, new Guid("93304452-ce31-4c4a-96da-577ffaa21508"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("592a7882-e4e6-4e5c-81cc-9b1ea77eff54"), new DateTime(2021, 2, 26, 0, 24, 43, 186, DateTimeKind.Local).AddTicks(6819), "Pink", "xcd t j ahx  eprsl mv kz r kpi  cwsudqw", "ComputerDrive", true, new Guid("171e7e10-ec6a-44b5-a4ba-f0d182e20860"), "Wood", "w m nqbxixfbyrfrnckkigtx ", 36842.536570896600000m, new Guid("93304452-ce31-4c4a-96da-577ffaa21508"), null, 1665, "2.5", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("05590961-d734-498b-9faf-f16e9270aee0"), new DateTime(2021, 2, 26, 0, 24, 43, 188, DateTimeKind.Local).AddTicks(6122), "Black", "i  kb  irejxva y nulurw nwgq muhjji lzl vvwe v hdkngkjfcos", "Mause", true, new Guid("86a279fc-fe7d-49e3-93ba-55d94114260a"), "Rubber", "aotgsc  tmq    uy w", 94375.50459726500000m, new Guid("afd1c016-01ac-4151-beaa-d633e6d3c497"), null, 33793, "IRWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("915f498c-a4fe-40db-89ea-d2c42bbcbe3b"), new DateTime(2021, 2, 26, 0, 24, 43, 181, DateTimeKind.Local).AddTicks(2449), "Red", "crvxya a pjw xa kuaegnoexavsbzp c", "VideoCard", true, new Guid("95c14bcd-11bc-47ed-8d0e-f67603a945d4"), "Rubber", "s uc  ijnl  fmzhcvr", 9598.6498564475400000m, new Guid("afd1c016-01ac-4151-beaa-d633e6d3c497"), null, "3.5mm audio", 25847, 36597 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("1ccbf8fb-59a2-43c8-b433-162ea9e3dca3"), new DateTime(2021, 2, 26, 0, 24, 43, 175, DateTimeKind.Local).AddTicks(1250), "Pink", "kvdv rlyjs l v cqpcmpwi p dmez  hvm qbvthdlrgjpzpic", "ComputerTechnology", true, new Guid("d572c12d-22bf-4892-b65f-07584e1874a2"), "Iron", "lmini  gmt ve va o  a", 4014.1786001688700000m, new Guid("afd1c016-01ac-4151-beaa-d633e6d3c497"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("13b7bebf-186f-48ff-923a-beefcac25ed7"), new DateTime(2021, 2, 26, 0, 24, 43, 184, DateTimeKind.Local).AddTicks(9122), "Gradient", "j mfluvkplvsfn dprltg qj revumyjna", "Cooler", true, new Guid("1d716e38-5cd3-4ecb-89f8-97570f26c5a8"), "Glass", "ifq kfbjv cryhzhtts   zf", 25233.158527516400000m, new Guid("7fda5ed4-f290-4ff2-a4a7-c5b4f3e4b881"), null, 2204, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("6c07f1be-0827-4db2-bc90-c20c9c48bf15"), new DateTime(2021, 2, 26, 0, 24, 43, 166, DateTimeKind.Local).AddTicks(7594), "Brown", "dustvh nox   kqm g r  nznollnad  o", "Laptop", true, new Guid("50d7acd1-0f30-4c61-b59e-73ab7cbcb69d"), "Wood", "v   gricpr ya bhyj hg zxc r", 26038.82529122700000m, new Guid("10924198-3f9f-47d0-978f-ae94b73069e8"), null, 20, 17, "Intel", 31, 23, 7, true, 9f, 4f, 25, 2939, 8f });

            migrationBuilder.InsertData(
                table: "ComputerComputerDriveTypes",
                columns: new[] { "ComputerId", "ComputerDriveTypeValue" },
                values: new object[,]
                {
                    { new Guid("91ebbe82-3b20-40ab-af93-561ee96894c6"), "SSD" },
                    { new Guid("961b7528-0e2c-4864-826e-f3901855d65e"), "HDD" },
                    { new Guid("09c19c4b-3515-4888-8ee6-faeb75bb87a7"), "HDD" },
                    { new Guid("09c19c4b-3515-4888-8ee6-faeb75bb87a7"), "SSD" },
                    { new Guid("104ec384-b8d4-450f-b1e6-8e55f3c4d09e"), "SSD" },
                    { new Guid("630babbd-5cb8-4a93-829d-c1b5db25c609"), "SSD" },
                    { new Guid("630babbd-5cb8-4a93-829d-c1b5db25c609"), "HDD" },
                    { new Guid("620bdc0d-5819-40cd-aa91-50eafe56d5e4"), "HDD" },
                    { new Guid("8168547f-b35d-45ad-9df1-3b1c8e1acc65"), "SSD" },
                    { new Guid("055b205b-e2a9-4705-b14a-9c630e4c95ff"), "SSD" },
                    { new Guid("055b205b-e2a9-4705-b14a-9c630e4c95ff"), "HDD" },
                    { new Guid("e5716a8e-a7e3-4e01-a983-1b40ca4daef2"), "HDD" },
                    { new Guid("07ec6205-0c6c-4816-aad2-092fd1601e89"), "HDD" },
                    { new Guid("3d32cb9d-d899-4cf0-bbc1-46dbb8d82026"), "HDD" },
                    { new Guid("ad2f2e34-046d-4a31-8a6d-290b87afa21c"), "HDD" },
                    { new Guid("1378e614-e1ba-4825-a497-190098a93b17"), "SSD" },
                    { new Guid("84c13df7-24ef-48c5-9991-e25f098deb21"), "SSD" },
                    { new Guid("7f4824f6-b697-415c-a11e-dd2a27d1842d"), "SSD" },
                    { new Guid("7f4824f6-b697-415c-a11e-dd2a27d1842d"), "HDD" },
                    { new Guid("304311fb-1469-4e5d-ac35-691f6287fd5a"), "SSD" },
                    { new Guid("bb44c3b9-ae5c-45eb-8920-20e59a6e6fe7"), "SSD" },
                    { new Guid("8cabe78d-e04a-4c79-839e-cdb6899fab5b"), "SSD" },
                    { new Guid("26ffceda-1d15-494d-b024-e6b22bd22f7a"), "SSD" },
                    { new Guid("9af470ae-49f2-48be-9877-14af7bb88572"), "HDD" },
                    { new Guid("26ffceda-1d15-494d-b024-e6b22bd22f7a"), "HDD" },
                    { new Guid("79cd46ea-b033-4239-96f0-e9cdbe8e59bc"), "SSD" },
                    { new Guid("21a02fb5-b4db-4f45-8687-d18c7d0dfae9"), "SSD" },
                    { new Guid("c15a1f64-5121-48a8-9cfd-b2da6ba1a9da"), "SSD" },
                    { new Guid("c15a1f64-5121-48a8-9cfd-b2da6ba1a9da"), "HDD" },
                    { new Guid("cc80d64d-58db-4adb-970e-bdbaa101fc50"), "HDD" },
                    { new Guid("cc80d64d-58db-4adb-970e-bdbaa101fc50"), "SSD" },
                    { new Guid("b9330889-0a11-4c5f-9207-7c0f9a0d0071"), "HDD" },
                    { new Guid("b9330889-0a11-4c5f-9207-7c0f9a0d0071"), "SSD" },
                    { new Guid("241ee5fa-1da3-4de8-b215-7082c10a7cef"), "SSD" },
                    { new Guid("844bedf8-5b46-44ae-a5d3-550aa6eafc55"), "SSD" },
                    { new Guid("255dcb20-4ba2-49dd-a4c2-66a18a034d4d"), "HDD" },
                    { new Guid("5fc775f5-3ded-4e90-9253-89d1c3f49635"), "SSD" },
                    { new Guid("a15e8bc0-9932-4147-bf2c-c19a268b9c69"), "SSD" },
                    { new Guid("94fbb2e8-f6ea-4a26-abd4-c5e843eb521e"), "HDD" },
                    { new Guid("94fbb2e8-f6ea-4a26-abd4-c5e843eb521e"), "SSD" },
                    { new Guid("daeaa263-5771-4d4c-94a0-ac7b3d8fa195"), "HDD" },
                    { new Guid("daeaa263-5771-4d4c-94a0-ac7b3d8fa195"), "SSD" },
                    { new Guid("4bcc4091-418b-4729-be6c-fe0f6d6087e8"), "HDD" },
                    { new Guid("e32d3871-f8e8-4462-811c-a95d91fef431"), "SSD" },
                    { new Guid("79cd46ea-b033-4239-96f0-e9cdbe8e59bc"), "HDD" },
                    { new Guid("a15e8bc0-9932-4147-bf2c-c19a268b9c69"), "HDD" },
                    { new Guid("41e90530-6458-4edf-8c2d-56293fbf3c21"), "HDD" }
                });

            migrationBuilder.InsertData(
                table: "LaptopComputerDriveTypes",
                columns: new[] { "LaptopId", "ComputerDriveTypeValue" },
                values: new object[,]
                {
                    { new Guid("1c8113d0-9022-4400-9796-afc7f78afc0f"), "HDD" },
                    { new Guid("c4cfaa1f-9c4c-4821-9735-3e6a3083863b"), "HDD" },
                    { new Guid("c4cfaa1f-9c4c-4821-9735-3e6a3083863b"), "SSD" },
                    { new Guid("37626080-49a2-4c56-9a9d-c39436acf04b"), "HDD" },
                    { new Guid("587eca21-fe4c-4e0d-a505-c8f67af3a0c5"), "HDD" },
                    { new Guid("b2a0ab18-53bc-4be8-85c9-03a0d8f1450c"), "HDD" },
                    { new Guid("9e88b3d1-181f-4bfa-846d-90d77ea3c674"), "HDD" },
                    { new Guid("94f06559-7483-48a2-a560-425987fe0e7c"), "HDD" },
                    { new Guid("a164b7ae-725e-43d2-ab9a-a8bb920b41b7"), "HDD" },
                    { new Guid("a164b7ae-725e-43d2-ab9a-a8bb920b41b7"), "SSD" },
                    { new Guid("bbdde53e-ab7d-4fa0-9891-bf5be58436e6"), "HDD" },
                    { new Guid("bbdde53e-ab7d-4fa0-9891-bf5be58436e6"), "SSD" },
                    { new Guid("215b5127-3ebc-44e8-90ef-444bfb4c7ef3"), "SSD" },
                    { new Guid("4e6380d2-0e13-4ba2-aab5-a9a5a5616567"), "SSD" },
                    { new Guid("e7c7bb47-394f-410f-bc80-5ac075090c4d"), "HDD" },
                    { new Guid("e7c7bb47-394f-410f-bc80-5ac075090c4d"), "SSD" },
                    { new Guid("1c8113d0-9022-4400-9796-afc7f78afc0f"), "SSD" },
                    { new Guid("6f03e16e-011b-4060-9a44-8387eae1432e"), "SSD" },
                    { new Guid("0ce15663-6808-4322-84a3-9a0ca598d446"), "HDD" },
                    { new Guid("d8b7da55-c809-4eb2-9bbf-e9a2ba9b4dc6"), "SSD" },
                    { new Guid("54e41a4b-28fb-45b3-8747-967da16f3505"), "HDD" },
                    { new Guid("297e9b5d-1c6c-4eb6-a041-3e5c36a14fa2"), "SSD" },
                    { new Guid("d2e6fefa-d5de-4f97-bac2-3a2416c72e8e"), "SSD" },
                    { new Guid("f74f9b07-8f88-4b54-8b26-fd5972b1eef0"), "SSD" },
                    { new Guid("e14b1163-ec0f-4002-99ee-aa78e7a3e3e8"), "SSD" },
                    { new Guid("e14b1163-ec0f-4002-99ee-aa78e7a3e3e8"), "HDD" },
                    { new Guid("54e41a4b-28fb-45b3-8747-967da16f3505"), "SSD" },
                    { new Guid("1cf0442a-c5f1-4d8b-a735-a224f476f021"), "SSD" },
                    { new Guid("bf135fd9-525a-4114-b8b9-044879356238"), "HDD" },
                    { new Guid("d65e469f-8174-46cc-b46c-451719501dbb"), "HDD" },
                    { new Guid("04795bdd-32ab-46ae-8c02-613bea19bf9f"), "HDD" },
                    { new Guid("b8c69e87-bb4c-4561-a515-8686d4f9632a"), "HDD" },
                    { new Guid("9f152311-759a-4bd9-971b-67655712d9d0"), "HDD" },
                    { new Guid("37626080-49a2-4c56-9a9d-c39436acf04b"), "SSD" },
                    { new Guid("1cf0442a-c5f1-4d8b-a735-a224f476f021"), "HDD" },
                    { new Guid("c93fc352-1b86-471e-959a-af4742ae19b3"), "HDD" },
                    { new Guid("d0bbdb40-7379-4ae1-89df-dc01b70756e3"), "HDD" },
                    { new Guid("76803ce6-af00-4772-9a41-a55f37c28287"), "HDD" },
                    { new Guid("d8b7da55-c809-4eb2-9bbf-e9a2ba9b4dc6"), "HDD" },
                    { new Guid("e618577e-8ac2-4f8e-812b-bf01ee30b123"), "HDD" },
                    { new Guid("2a7d38e2-59a4-4a51-accb-7e48698e5f56"), "HDD" },
                    { new Guid("b0153c4c-d33e-4bd0-801c-e9b039925604"), "SSD" },
                    { new Guid("b0153c4c-d33e-4bd0-801c-e9b039925604"), "HDD" },
                    { new Guid("5647f27f-5ae8-4418-98ea-2e9110cf0931"), "HDD" },
                    { new Guid("818b7146-8b20-4394-bb7d-1e85af60dd96"), "HDD" },
                    { new Guid("6c07f1be-0827-4db2-bc90-c20c9c48bf15"), "HDD" },
                    { new Guid("42b92011-0e5a-4757-8bb7-31278ef0eb63"), "HDD" },
                    { new Guid("967b3f3c-414d-48fe-b719-b158d9faf51c"), "SSD" },
                    { new Guid("967b3f3c-414d-48fe-b719-b158d9faf51c"), "HDD" },
                    { new Guid("61096ae5-70ed-4273-9a16-093ecfb1f3f2"), "SSD" },
                    { new Guid("61096ae5-70ed-4273-9a16-093ecfb1f3f2"), "HDD" },
                    { new Guid("87fd694d-8bb8-4f9c-8dc8-5c9985fcabf2"), "SSD" },
                    { new Guid("76803ce6-af00-4772-9a41-a55f37c28287"), "SSD" },
                    { new Guid("6f03e16e-011b-4060-9a44-8387eae1432e"), "HDD" },
                    { new Guid("6c07f1be-0827-4db2-bc90-c20c9c48bf15"), "SSD" }
                });

            migrationBuilder.CreateIndex(
                name: "IX_AspNetRoleClaims_RoleId",
                table: "AspNetRoleClaims",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "RoleNameIndex",
                table: "AspNetRoles",
                column: "NormalizedName",
                unique: true,
                filter: "[NormalizedName] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserClaims_UserId",
                table: "AspNetUserClaims",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserLogins_UserId",
                table: "AspNetUserLogins",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserRoles_RoleId",
                table: "AspNetUserRoles",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "EmailIndex",
                table: "AspNetUsers",
                column: "NormalizedEmail");

            migrationBuilder.CreateIndex(
                name: "UserNameIndex",
                table: "AspNetUsers",
                column: "NormalizedUserName",
                unique: true,
                filter: "[NormalizedUserName] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_Comments_ApplicationUserId",
                table: "Comments",
                column: "ApplicationUserId");

            migrationBuilder.CreateIndex(
                name: "IX_ComputerComputerDriveTypes_ComputerDriveTypeValue",
                table: "ComputerComputerDriveTypes",
                column: "ComputerDriveTypeValue");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_ColorValue",
                table: "Goods",
                column: "ColorValue");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_ManufacturerId",
                table: "Goods",
                column: "ManufacturerId");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_MaterialValue",
                table: "Goods",
                column: "MaterialValue");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_ProducerId",
                table: "Goods",
                column: "ProducerId");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_UserId",
                table: "Goods",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_CPUSocketType",
                table: "Goods",
                column: "CPUSocketType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_ConnectorType",
                table: "Goods",
                column: "ConnectorType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_HeadphonesType",
                table: "Goods",
                column: "HeadphonesType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_WirelessType",
                table: "Goods",
                column: "WirelessType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_KeyboardType",
                table: "Goods",
                column: "KeyboardType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_MauseType",
                table: "Goods",
                column: "MauseType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_CPUSocketType1",
                table: "Goods",
                column: "CPUSocketType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_FormFactorType",
                table: "Goods",
                column: "FormFactorType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_ComputerDriveType",
                table: "Goods",
                column: "ComputerDriveType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_CoolerType",
                table: "Goods",
                column: "CoolerType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_DriveInterfaceValue",
                table: "Goods",
                column: "DriveInterfaceValue");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_USBSpecificationType",
                table: "Goods",
                column: "USBSpecificationType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_CPUSocketType2",
                table: "Goods",
                column: "CPUSocketType");

            migrationBuilder.CreateIndex(
                name: "IX_ImageInfo_GoodId",
                table: "ImageInfo",
                column: "GoodId");

            migrationBuilder.CreateIndex(
                name: "IX_ImageInfo_UserId",
                table: "ImageInfo",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_LaptopComputerDriveTypes_ComputerDriveTypeValue",
                table: "LaptopComputerDriveTypes",
                column: "ComputerDriveTypeValue");

            migrationBuilder.CreateIndex(
                name: "IX_Manufacturers_CountryId",
                table: "Manufacturers",
                column: "CountryId");

            migrationBuilder.CreateIndex(
                name: "IX_OrderGoods_GoodId",
                table: "OrderGoods",
                column: "GoodId");

            migrationBuilder.CreateIndex(
                name: "IX_Orders_DeliveryMethodId",
                table: "Orders",
                column: "DeliveryMethodId");

            migrationBuilder.CreateIndex(
                name: "IX_Orders_StatusId",
                table: "Orders",
                column: "StatusId");

            migrationBuilder.CreateIndex(
                name: "IX_Orders_UserId",
                table: "Orders",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Producers_CountryId",
                table: "Producers",
                column: "CountryId");

            migrationBuilder.CreateIndex(
                name: "IX_UserIps_IpId",
                table: "UserIps",
                column: "IpId");
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "AspNetRoleClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserLogins");

            migrationBuilder.DropTable(
                name: "AspNetUserRoles");

            migrationBuilder.DropTable(
                name: "AspNetUserTokens");

            migrationBuilder.DropTable(
                name: "Comments");

            migrationBuilder.DropTable(
                name: "ComputerComputerDriveTypes");

            migrationBuilder.DropTable(
                name: "GoodCellModels");

            migrationBuilder.DropTable(
                name: "ImageInfo");

            migrationBuilder.DropTable(
                name: "LaptopComputerDriveTypes");

            migrationBuilder.DropTable(
                name: "OrderGoods");

            migrationBuilder.DropTable(
                name: "QuestionBases");

            migrationBuilder.DropTable(
                name: "UserIps");

            migrationBuilder.DropTable(
                name: "AspNetRoles");

            migrationBuilder.DropTable(
                name: "Goods");

            migrationBuilder.DropTable(
                name: "Orders");

            migrationBuilder.DropTable(
                name: "Ips");

            migrationBuilder.DropTable(
                name: "Colors");

            migrationBuilder.DropTable(
                name: "Manufacturers");

            migrationBuilder.DropTable(
                name: "Materials");

            migrationBuilder.DropTable(
                name: "Producers");

            migrationBuilder.DropTable(
                name: "CPUSocketTypes");

            migrationBuilder.DropTable(
                name: "ConnectorTypes");

            migrationBuilder.DropTable(
                name: "HeadphonesTypes");

            migrationBuilder.DropTable(
                name: "WirelessTypes");

            migrationBuilder.DropTable(
                name: "KeySwitchTypes");

            migrationBuilder.DropTable(
                name: "MauseTypes");

            migrationBuilder.DropTable(
                name: "FormFactorTypes");

            migrationBuilder.DropTable(
                name: "ComputerDriveTypes");

            migrationBuilder.DropTable(
                name: "CoolerTypes");

            migrationBuilder.DropTable(
                name: "DriveInterfaces");

            migrationBuilder.DropTable(
                name: "USBSpecificationTypes");

            migrationBuilder.DropTable(
                name: "DeliveryMethods");

            migrationBuilder.DropTable(
                name: "OrderStatuses");

            migrationBuilder.DropTable(
                name: "AspNetUsers");

            migrationBuilder.DropTable(
                name: "Countries");


            migrationBuilder.Sql("DROP TYPE [dbo].[StringList]");
            migrationBuilder.Sql("DROP TYPE [dbo].[IntList]");
            migrationBuilder.Sql("DROP TYPE [dbo].[RealList]");
            migrationBuilder.Sql("DROP TYPE [dbo].[BoolList]");



            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerAccessoriesGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerAccessoriesCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerAccessoriesColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerAccessoriesMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerAccessoriesProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerAccessoriesPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerAccessoriesCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerDrivesGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerDrivesCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerDrivesColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerDrivesMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerDrivesProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerDrivesCapacity]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerDrivesTypes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerDrivesFormFactorTypes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerDrivesPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerDrivesCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerPartsGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerPartsCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerPartsColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerPartsMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerPartsProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerPartsPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerPartsCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersAmountOfRAMs]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersCpuFrequency]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersLength]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersHeight]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersWidth]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersHaveFloppyDrives]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersSsdMemory]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersHardDiskMemory]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersCpuSocketType]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersComputerDrives]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersNumberOfCores]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersFloppyDrivesCount]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerTechnologiesGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerTechnologiesCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerTechnologiesColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerTechnologiesMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerTechnologiesProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerTechnologiesPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerTechnologiesCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCoolersGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCoolersCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCoolersColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCoolersMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCoolersProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCoolersTypes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCoolersFanSizes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCoolersPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCoolersCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsSocketTypes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsThermalDesignPowers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsNumberOfCores]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsNumberOfThreads]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetFlashDrivesGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetFlashDrivesCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetFlashDrivesColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetFlashDrivesMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetFlashDrivesProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetFlashDrivesCapacity]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetFlashDrivesUsbSpecificationTypes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetFlashDrivesPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetFlashDrivesCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetGoodsGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetGoodsCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetGoodsColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetGoodsMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetGoodsProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetGoodsPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetGoodsCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetHeadphonesGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetHeadphonesCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetHeadphonesColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetHeadphonesMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetHeadphonesProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetHeadphonesTypes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetHeadphonesWirelessTypes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetHeadphonesConnectorTypes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetHeadphonesPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetHeadphonesCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetKeyboardsGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetKeyboardsCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetKeyboardsColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetKeyboardsMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetKeyboardsProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetKeyboardsTypes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetKeyboardsPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetKeyboardsCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsAmountOfRAMs]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsCpuFrequency]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsLength]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsHeight]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsWidth]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsHaveFloppyDrives]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsSsdMemory]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsHardDiskMemory]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsCpuSocketType]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsComputerDrives]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsNumberOfCores]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsFloppyDrivesCount]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsDisplays]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetMiceGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetMiceCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetMiceColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetMiceMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetMiceProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetMiceTypes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetMiceButtonsCount]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetMicePrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetMiceCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetVideoCardsGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetVideoCardsCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetVideoCardsColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetVideoCardsMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetVideoCardsProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetVideoCardsDriveInterfaces]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetVideoCardsVideoSizes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetVideoCardsVideoMemoryCapacity]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetVideoCardsPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetVideoCardsCount]");


            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetComputerAccessories]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetComputerDrives]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetComputerParts]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetComputers]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetComputerTechnologies]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetCoolers]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetCPUs]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetFlashDrives]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetGoods]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetHeadphones]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetKeyboards]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetLaptops]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetMice]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetVideoCards]");

        }
    }
}

using System;
using Microsoft.EntityFrameworkCore.Migrations;

namespace SunnyFlamingo.Migrations
{
    public partial class Initial : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.Sql(@"CREATE TYPE StringList AS TABLE 
                                    (
                                    	[Value] nvarchar(MAX)
                                    )
                                    GO");
            migrationBuilder.Sql(@"CREATE TYPE IntList AS TABLE 
                                    (
                                    	[Value] int
                                    )
                                    GO");
            migrationBuilder.Sql(@"CREATE TYPE RealList AS TABLE 
                                    (
                                    	[Value] real
                                    )
                                    GO");
            migrationBuilder.Sql(@"CREATE TYPE BoolList AS TABLE 
                                    (
                                    	[Value] bit
                                    )
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerAccessoriesGoodCells]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@orderType nvarchar(100),
                                	@sortDir nvarchar(100),
                                	@from int,
                                	@to int
                                )
                                RETURNS 
                                @GoodCell TABLE 
                                (
                                	    Id uniqueidentifier,
                                		[Name] nvarchar(500),
                                		Price decimal(18, 6),
                                		IsAvailable bit,
                                		[Type] nvarchar(MAX),
                                	    ImgId uniqueidentifier
                                )
                                AS
                                BEGIN
                                	INSERT INTO @GoodCell
                                	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                	FROM [dbo].ImageInfo imgInf
                                	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors)))
                                	ORDER BY 
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                	OFFSET @from ROWS
                                	FETCH NEXT @to ROWS ONLY
                                	) goodCells ON goodCells.Id = imgInf.GoodId
                                	RETURN
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerAccessoriesCountries]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'country', 
                                	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                	ELSE 0 END AS Checked,
                                	manCountry.[Value],
                                	manCountry.[Value]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                	GROUP BY manCountry.[Value]
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerAccessoriesColors]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'color', 
                                	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.ColorValue,
                                	g.ColorValue
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))))
                                	GROUP BY g.ColorValue
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerAccessoriesMaterials]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'material', 
                                	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.MaterialValue,
                                	g.MaterialValue
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                	GROUP BY g.MaterialValue
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerAccessoriesProducers]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'producer', 
                                	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                	ELSE 0 END AS Checked,
                                	pr.[Name],
                                	pr.[Name]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                	GROUP BY pr.[Name]
                                	RETURN 
                                END
                                GO");

            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerAccessoriesPrice]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                	SELECT 
                                	'price', 
                                	MIN(g.Price),
                                	MAX(g.Price)
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors)))
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerAccessoriesCount]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @Count TABLE 
                                (
                                	    [Value] int
                                )
                                AS
                                BEGIN
                                	INSERT INTO @Count
                                	SELECT Count(g.Id)
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors)))
                                	RETURN 
                                END
                                GO");






            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerDrivesGoodCells]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@capacity [dbo].IntList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@formFactorType [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@capacityCount int,
                                	@computerDriveTypeCount int,
                                	@formFactorTypeCount int,
                                	@orderType nvarchar(100),
                                	@sortDir nvarchar(100),
                                	@from int,
                                	@to int
                                )
                                RETURNS 
                                @GoodCell TABLE 
                                (
                                	    Id uniqueidentifier,
                                		[Name] nvarchar(500),
                                		Price decimal(18, 6),
                                		IsAvailable bit,
                                		[Type] nvarchar(MAX),
                                	    ImgId uniqueidentifier
                                )
                                AS
                                BEGIN
                                	INSERT INTO @GoodCell
                                	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                	FROM [dbo].ImageInfo imgInf
                                	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                	((@capacityCount = 0) OR (g.[Capacity] IN (SELECT value FROM @capacity))) AND
                                	((@computerDriveTypeCount = 0) OR (g.[ComputerDriveType] IN (SELECT value FROM @computerDriveType))) AND
                                	((@formFactorTypeCount = 0) OR (g.[FormFactorType] IN (SELECT value FROM @formFactorType)))
                                	ORDER BY 
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                	OFFSET @from ROWS
                                	FETCH NEXT @to ROWS ONLY
                                	) goodCells ON goodCells.Id = imgInf.GoodId
                                	RETURN
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerDrivesCountries]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@capacity [dbo].IntList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@formFactorType [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@capacityCount int,
                                	@computerDriveTypeCount int,
                                	@formFactorTypeCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'country', 
                                	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                	ELSE 0 END AS Checked,
                                	manCountry.[Value],
                                	manCountry.[Value]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@capacityCount = 0) OR (g.[Capacity] IN (SELECT value FROM @capacity))) AND
                                	((@computerDriveTypeCount = 0) OR (g.[ComputerDriveType] IN (SELECT value FROM @computerDriveType))) AND
                                	((@formFactorTypeCount = 0) OR (g.[FormFactorType] IN (SELECT value FROM @formFactorType))))
                                	GROUP BY manCountry.[Value]
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerDrivesColors]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@capacity [dbo].IntList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@formFactorType [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@capacityCount int,
                                	@computerDriveTypeCount int,
                                	@formFactorTypeCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'color', 
                                	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.ColorValue,
                                	g.ColorValue
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@capacityCount = 0) OR (g.[Capacity] IN (SELECT value FROM @capacity))) AND
                                	((@computerDriveTypeCount = 0) OR (g.[ComputerDriveType] IN (SELECT value FROM @computerDriveType))) AND
                                	((@formFactorTypeCount = 0) OR (g.[FormFactorType] IN (SELECT value FROM @formFactorType))))
                                	GROUP BY g.ColorValue
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerDrivesMaterials]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@capacity [dbo].IntList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@formFactorType [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@capacityCount int,
                                	@computerDriveTypeCount int,
                                	@formFactorTypeCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'material', 
                                	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.MaterialValue,
                                	g.MaterialValue
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@capacityCount = 0) OR (g.[Capacity] IN (SELECT value FROM @capacity))) AND
                                	((@computerDriveTypeCount = 0) OR (g.[ComputerDriveType] IN (SELECT value FROM @computerDriveType))) AND
                                	((@formFactorTypeCount = 0) OR (g.[FormFactorType] IN (SELECT value FROM @formFactorType))))
                                	GROUP BY g.MaterialValue
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerDrivesProducers]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@capacity [dbo].IntList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@formFactorType [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@capacityCount int,
                                	@computerDriveTypeCount int,
                                	@formFactorTypeCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'producer', 
                                	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                	ELSE 0 END AS Checked,
                                	pr.[Name],
                                	pr.[Name]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@capacityCount = 0) OR (g.[Capacity] IN (SELECT value FROM @capacity))) AND
                                	((@computerDriveTypeCount = 0) OR (g.[ComputerDriveType] IN (SELECT value FROM @computerDriveType))) AND
                                	((@formFactorTypeCount = 0) OR (g.[FormFactorType] IN (SELECT value FROM @formFactorType))))
                                	GROUP BY pr.[Name]
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerDrivesCapacity]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@capacity [dbo].IntList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@formFactorType [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@capacityCount int,
                                	@computerDriveTypeCount int,
                                	@formFactorTypeCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'capacity', 
                                	CASE WHEN (@capacityCount != 0) AND (g.[Capacity] IN (SELECT [Value] FROM @capacity)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@capacityCount != 0) AND (g.[Capacity] IN (SELECT [Value] FROM @capacity)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.[Capacity],
                                	g.[Capacity]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@capacityCount != 0) AND (g.[Capacity] IN (SELECT value FROM @capacity))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@computerDriveTypeCount = 0) OR (g.[ComputerDriveType] IN (SELECT value FROM @computerDriveType))) AND
                                	((@formFactorTypeCount = 0) OR (g.[FormFactorType] IN (SELECT value FROM @formFactorType))))
                                	GROUP BY g.[Capacity]
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerDrivesTypes]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@capacity [dbo].IntList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@formFactorType [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@capacityCount int,
                                	@computerDriveTypeCount int,
                                	@formFactorTypeCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'computerDriveType', 
                                	CASE WHEN (@computerDriveTypeCount != 0) AND (g.[ComputerDriveType] IN (SELECT [Value] FROM @computerDriveType)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@computerDriveTypeCount != 0) AND (g.[ComputerDriveType] IN (SELECT [Value] FROM @computerDriveType)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.[ComputerDriveType],
                                	g.[ComputerDriveType]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@computerDriveTypeCount != 0) AND (g.[ComputerDriveType] IN (SELECT value FROM @computerDriveType))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@capacityCount = 0) OR (g.[Capacity] IN (SELECT value FROM @capacity))) AND
                                	((@formFactorTypeCount = 0) OR (g.[FormFactorType] IN (SELECT value FROM @formFactorType))))
                                	GROUP BY g.[ComputerDriveType]
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerDrivesFormFactorTypes]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@capacity [dbo].IntList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@formFactorType [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@capacityCount int,
                                	@computerDriveTypeCount int,
                                	@formFactorTypeCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'formFactorType', 
                                	CASE WHEN (@formFactorTypeCount != 0) AND (g.[FormFactorType] IN (SELECT [Value] FROM @formFactorType)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@formFactorTypeCount != 0) AND (g.[FormFactorType] IN (SELECT [Value] FROM @formFactorType)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.[FormFactorType],
                                	g.[FormFactorType]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@formFactorTypeCount != 0) AND (g.[FormFactorType] IN (SELECT value FROM @formFactorType))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@capacityCount = 0) OR (g.[Capacity] IN (SELECT value FROM @capacity))) AND
                                	((@computerDriveTypeCount = 0) OR (g.[ComputerDriveType] IN (SELECT value FROM @computerDriveType))))
                                	
                                	GROUP BY g.[FormFactorType]
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerDrivesPrice]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@capacity [dbo].IntList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@formFactorType [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@capacityCount int,
                                	@computerDriveTypeCount int,
                                	@formFactorTypeCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                	SELECT 
                                	'price', 
                                	MIN(g.Price),
                                	MAX(g.Price)
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@capacityCount = 0) OR (g.[Capacity] IN (SELECT value FROM @capacity))) AND
                                	((@computerDriveTypeCount = 0) OR (g.[ComputerDriveType] IN (SELECT value FROM @computerDriveType))) AND
                                	((@formFactorTypeCount = 0) OR (g.[FormFactorType] IN (SELECT value FROM @formFactorType)))
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerDrivesCount]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@capacity [dbo].IntList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@formFactorType [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@capacityCount int,
                                	@computerDriveTypeCount int,
                                	@formFactorTypeCount int
                                )
                                RETURNS 
                                @Count TABLE 
                                (
                                	    [Value] int
                                )
                                AS
                                BEGIN
                                	INSERT INTO @Count
                                	SELECT Count(g.Id)
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                	((@capacityCount = 0) OR (g.[Capacity] IN (SELECT value FROM @capacity))) AND
                                	((@computerDriveTypeCount = 0) OR (g.[ComputerDriveType] IN (SELECT value FROM @computerDriveType))) AND
                                	((@formFactorTypeCount = 0) OR (g.[FormFactorType] IN (SELECT value FROM @formFactorType)))
                                	RETURN 
                                END
                                GO");



            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerPartsGoodCells]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@orderType nvarchar(100),
                                	@sortDir nvarchar(100),
                                	@from int,
                                	@to int
                                )
                                RETURNS 
                                @GoodCell TABLE 
                                (
                                	    Id uniqueidentifier,
                                		[Name] nvarchar(500),
                                		Price decimal(18, 6),
                                		IsAvailable bit,
                                		[Type] nvarchar(MAX),
                                	    ImgId uniqueidentifier
                                )
                                AS
                                BEGIN
                                	INSERT INTO @GoodCell
                                	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                	FROM [dbo].ImageInfo imgInf
                                	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors)))
                                	ORDER BY 
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                	OFFSET @from ROWS
                                	FETCH NEXT @to ROWS ONLY
                                	) goodCells ON goodCells.Id = imgInf.GoodId
                                	RETURN
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerPartsCountries]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'country', 
                                	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                	ELSE 0 END AS Checked,
                                	manCountry.[Value],
                                	manCountry.[Value]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                	
                                	GROUP BY manCountry.[Value]
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerPartsColors]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'color', 
                                	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.ColorValue,
                                	g.ColorValue
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))))
                                	
                                	GROUP BY g.ColorValue
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerPartsMaterials]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'material', 
                                	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.MaterialValue,
                                	g.MaterialValue
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                	
                                	GROUP BY g.MaterialValue
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerPartsProducers]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'producer', 
                                	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                	ELSE 0 END AS Checked,
                                	pr.[Name],
                                	pr.[Name]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                	GROUP BY pr.[Name]
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerPartsPrice]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                	SELECT 
                                	'price', 
                                	MIN(g.Price),
                                	MAX(g.Price)
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors)))
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputerPartsCount]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int
                                )
                                RETURNS 
                                @Count TABLE 
                                (
                                	    [Value] int
                                )
                                AS
                                BEGIN
                                	INSERT INTO @Count
                                	SELECT Count(g.Id)
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	WHERE 
                                	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors)))
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersGoodCells]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int,
                                	@orderType nvarchar(100),
                                	@sortDir nvarchar(100),
                                	@from int,
                                	@to int
                                )
                                RETURNS 
                                @GoodCell TABLE 
                                (
                                	    Id uniqueidentifier,
                                		[Name] nvarchar(500),
                                		Price decimal(18, 6),
                                		IsAvailable bit,
                                		[Type] nvarchar(MAX),
                                	    ImgId uniqueidentifier
                                )
                                AS
                                BEGIN
                                	INSERT INTO @GoodCell
                                	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                	FROM [dbo].ImageInfo imgInf
                                	RIGHT JOIN (SELECT  g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                	FROM ( 
                                	SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator], g.AddTime
                                	FROM
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))
                                	GROUP BY  g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator], g.AddTime
                                	) g
                                	ORDER BY 
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                	OFFSET @from ROWS
                                	FETCH NEXT @to ROWS ONLY
                                	) goodCells ON goodCells.Id = imgInf.GoodId
                                	RETURN
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersCountries]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'country', 
                                	CASE WHEN (@countriesCount != 0) AND (g.Country IN (SELECT [Value] FROM @countries)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@countriesCount != 0) AND (g.Country IN (SELECT [Value] FROM @countries)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.Country,
                                	g.Country
                                	FROM (
                                	SELECT DISTINCT g.Id, manCountry.[Value] as Country
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.Country
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersColors]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'color', 
                                	CASE WHEN (@colorsCount != 0) AND (g.Color IN (SELECT [Value] FROM @colors)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@colorsCount != 0) AND (g.Color IN (SELECT [Value] FROM @colors)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.Color,
                                	g.Color
                                	FROM (
                                	SELECT DISTINCT g.Id, g.ColorValue as Color
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.Color
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersMaterials]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'material', 
                                	CASE WHEN (@materialsCount != 0) AND (g.Material IN (SELECT [Value] FROM @materials)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@materialsCount != 0) AND (g.Material IN (SELECT [Value] FROM @materials)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.Material,
                                	g.Material
                                	FROM (
                                	SELECT DISTINCT g.Id, g.MaterialValue as Material
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.Material
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersProducers]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'producer', 
                                	CASE WHEN (@producersCount != 0) AND (g.Producer IN (SELECT [Value] FROM @producers)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@producersCount != 0) AND (g.Producer IN (SELECT [Value] FROM @producers)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.Producer,
                                	g.Producer
                                	FROM (
                                	SELECT DISTINCT g.Id, pr.[Name] as Producer
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR 
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.Producer
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersAmountOfRAMs]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'amountOfRAM', 
                                	CASE WHEN (@amountOfRAMCount != 0) AND (g.AmountOfRAM IN (SELECT [Value] FROM @amountOfRAM)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@amountOfRAMCount != 0) AND (g.AmountOfRAM IN (SELECT [Value] FROM @amountOfRAM)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.AmountOfRAM,
                                	g.AmountOfRAM
                                	FROM (
                                	SELECT DISTINCT g.Id, g.AmountOfRAM as AmountOfRAM
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@amountOfRAMCount != 0) AND (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.AmountOfRAM
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersCpuFrequency]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'CPUFrequency', 
                                	CASE WHEN (@cpuFrequencyCount != 0) AND (g.CPUFrequency IN (SELECT [Value] FROM @cpuFrequency)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@cpuFrequencyCount != 0) AND (g.CPUFrequency IN (SELECT [Value] FROM @cpuFrequency)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.CPUFrequency,
                                	g.CPUFrequency
                                	FROM (
                                	SELECT DISTINCT g.Id, g.CPUFrequency as CPUFrequency
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@cpuFrequencyCount != 0) AND (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.CPUFrequency
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersLength]
                                (	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'length', 
                                	CASE WHEN (@lengthCount != 0) AND (g.[Length] IN (SELECT [Value] FROM @length)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@lengthCount != 0) AND (g.[Length] IN (SELECT [Value] FROM @length)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.[Length],
                                	g.[Length]
                                	FROM (
                                	SELECT DISTINCT g.Id, g.[Length] as [Length]
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@lengthCount != 0) AND (g.[Length] IN (SELECT value FROM @length))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.[Length]
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersHeight]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'height', 
                                	CASE WHEN (@heightCount != 0) AND (g.Height IN (SELECT [Value] FROM @height)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@heightCount != 0) AND (g.Height IN (SELECT [Value] FROM @height)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.Height,
                                	g.Height
                                	FROM (
                                	SELECT DISTINCT g.Id, g.Height as Height
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@heightCount != 0) AND (g.[Height] IN (SELECT value FROM @height))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.Height
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersWidth]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'width', 
                                	CASE WHEN (@widthCount != 0) AND (g.Width IN (SELECT [Value] FROM @width)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@widthCount != 0) AND (g.Width IN (SELECT [Value] FROM @width)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.Width,
                                	g.Width
                                	FROM (
                                	SELECT DISTINCT g.Id, g.Width as Width
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@widthCount != 0) AND (g.[Width] IN (SELECT value FROM @width))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.Width
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersHaveFloppyDrives]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'haveFloppyDrives', 
                                	CASE WHEN (@haveFloppyDrivesCount != 0) AND (g.HaveFloppyDrives IN (SELECT [Value] FROM @haveFloppyDrives)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@haveFloppyDrivesCount != 0) AND (g.HaveFloppyDrives IN (SELECT [Value] FROM @haveFloppyDrives)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.HaveFloppyDrives,
                                	g.HaveFloppyDrives
                                	FROM (
                                	SELECT DISTINCT g.Id, g.HaveFloppyDrives as HaveFloppyDrives
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@haveFloppyDrivesCount != 0) AND (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.HaveFloppyDrives
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersSsdMemory]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'SSDMemory', 
                                	CASE WHEN (@ssdMemoryCount != 0) AND (g.SSDMemory IN (SELECT [Value] FROM @ssdMemory)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@ssdMemoryCount != 0) AND (g.SSDMemory IN (SELECT [Value] FROM @ssdMemory)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.SSDMemory,
                                	g.SSDMemory
                                	FROM (
                                	SELECT DISTINCT g.Id, g.SSDMemory as SSDMemory
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@ssdMemoryCount != 0) AND (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.SSDMemory
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersHardDiskMemory]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'hardDiskMemory', 
                                	CASE WHEN (@hardDiskMemoryCount != 0) AND (g.HardDiskMemory IN (SELECT [Value] FROM @hardDiskMemory)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@hardDiskMemoryCount != 0) AND (g.HardDiskMemory IN (SELECT [Value] FROM @hardDiskMemory)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.HardDiskMemory,
                                	g.HardDiskMemory
                                	FROM (
                                	SELECT DISTINCT g.Id, g.HardDiskMemory as HardDiskMemory
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@hardDiskMemoryCount != 0) AND (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.HardDiskMemory
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersCpuSocketType]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'CPUSocketType', 
                                	CASE WHEN (@cpuSocketTypeCount != 0) AND (g.CPUSocketType IN (SELECT [Value] FROM @cpuSocketType)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@cpuSocketTypeCount != 0) AND (g.CPUSocketType IN (SELECT [Value] FROM @cpuSocketType)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.CPUSocketType,
                                	g.CPUSocketType
                                	FROM (
                                	SELECT DISTINCT g.Id, g.CPUSocketType as CPUSocketType
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@cpuSocketTypeCount != 0) AND (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.CPUSocketType
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersComputerDrives]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'computerDriveType', 
                                	CASE WHEN (@computerDriveTypeCount != 0) AND (g.ComputerDriveType IN (SELECT [Value] FROM @computerDriveType)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@computerDriveTypeCount != 0) AND (g.ComputerDriveType IN (SELECT [Value] FROM @computerDriveType)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.ComputerDriveType,
                                	g.ComputerDriveType
                                	FROM (
                                	SELECT DISTINCT g.Id, ccdt.ComputerDriveTypeValue as ComputerDriveType
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@computerDriveTypeCount != 0) AND (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	WHERE g.ComputerDriveType IS NOT NULL
                                	GROUP BY g.ComputerDriveType
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersNumberOfCores]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'numberOfCores', 
                                	CASE WHEN (@numberOfCoresCount != 0) AND (g.NumberOfCores IN (SELECT [Value] FROM @numberOfCores)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@numberOfCoresCount != 0) AND (g.NumberOfCores IN (SELECT [Value] FROM @numberOfCores)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.NumberOfCores,
                                	g.NumberOfCores
                                	FROM (
                                	SELECT DISTINCT g.Id, g.NumberOfCores as NumberOfCores
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@numberOfCoresCount != 0) AND (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                	GROUP BY g.NumberOfCores
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersFloppyDrivesCount]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                	SELECT 
                                	'floppyDrivesCount', 
                                	CASE WHEN (@floppyDrivesCountCount != 0) AND (g.FloppyDrivesCount IN (SELECT [Value] FROM @floppyDrivesCount)) THEN NULL
                                	ELSE Count(g.Id) END AS AfterBox,
                                	CASE WHEN (@floppyDrivesCountCount != 0) AND (g.FloppyDrivesCount IN (SELECT [Value] FROM @floppyDrivesCount)) THEN 1
                                	ELSE 0 END AS Checked,
                                	g.FloppyDrivesCount,
                                	g.FloppyDrivesCount
                                	FROM (
                                	SELECT DISTINCT g.Id, g.FloppyDrivesCount as FloppyDrivesCount
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@floppyDrivesCountCount != 0) AND (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) OR
                                	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores)))))) as g
                                	WHERE g.FloppyDrivesCount IS NOT NULL
                                	GROUP BY g.FloppyDrivesCount
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersPrice]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @QuestionBase TABLE 
                                (
                                	    [QuestionsKey] nvarchar(500),
                                		[AfterBox] int NULL,
                                		[Checked] bit NULL,
                                		[Key] nvarchar(500),
                                		[Label] nvarchar(500),
                                		[From] nvarchar(500),
                                		[To] nvarchar(500)
                                )
                                AS
                                BEGIN
                                	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                	SELECT 
                                	'price', 
                                	MIN(g.Price),
                                	MAX(g.Price)
                                	FROM (
                                	SELECT DISTINCT g.Id, g.Price
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))) as g
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                GO
                                SET QUOTED_IDENTIFIER ON
                                GO
                                CREATE FUNCTION [dbo].[GetComputersCount]
                                (
                                	@priceFrom decimal(18, 6) NULL,
                                	@priceTo decimal(18, 6) NULL,
                                	@discriminators [dbo].StringList READONLY,
                                	@producers [dbo].StringList READONLY,
                                	@countries [dbo].StringList READONLY,
                                	@materials [dbo].StringList READONLY,
                                	@colors [dbo].StringList READONLY,
                                	@amountOfRAM [dbo].IntList READONLY,
                                	@cpuFrequency [dbo].IntList READONLY,
                                	@length [dbo].RealList READONLY,
                                	@height [dbo].RealList READONLY,
                                	@width [dbo].RealList READONLY,
                                	@haveFloppyDrives [dbo].BoolList READONLY,
                                	@ssdMemory [dbo].IntList READONLY,
                                	@hardDiskMemory [dbo].IntList READONLY,
                                	@cpuSocketType [dbo].StringList READONLY,
                                	@computerDriveType [dbo].StringList READONLY,
                                	@numberOfCores [dbo].IntList READONLY,
                                	@floppyDrivesCount [dbo].IntList READONLY,
                                	@discriminatorsCount int,
                                	@producersCount int,
                                	@countriesCount int,
                                	@materialsCount int,
                                	@colorsCount int,
                                	@amountOfRAMCount int,
                                	@cpuFrequencyCount int,
                                	@lengthCount int,
                                	@heightCount int,
                                	@widthCount int,
                                	@haveFloppyDrivesCount int,
                                	@ssdMemoryCount int,
                                	@hardDiskMemoryCount int,
                                	@cpuSocketTypeCount int,
                                	@computerDriveTypeCount int,
                                	@numberOfCoresCount int,
                                	@floppyDrivesCountCount int
                                )
                                RETURNS 
                                @Count TABLE 
                                (
                                	    [Value] int
                                )
                                
                                AS
                                BEGIN
                                	INSERT INTO @Count
                                	SELECT 
                                	Count(g.Id)
                                	FROM (
                                	SELECT DISTINCT g.Id
                                	FROM 
                                	[dbo].[Goods] g
                                	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                	LEFT OUTER JOIN [dbo].[ComputerComputerDriveTypes] ccdt ON ccdt.ComputerId = g.Id
                                	WHERE 
                                	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                	((@computerDriveTypeCount = 0) OR (ccdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))) as g
                                	RETURN 
                                END
                                GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetComputerTechnologiesGoodCells]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors)))
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetComputerTechnologiesCountries]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	manCountry.[Value],
                                    	manCountry.[Value]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                    	
                                    	GROUP BY manCountry.[Value]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetComputerTechnologiesColors]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ColorValue,
                                    	g.ColorValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))))
                                    	
                                    	GROUP BY g.ColorValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetComputerTechnologiesMaterials]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.MaterialValue,
                                    	g.MaterialValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                    	
                                    	GROUP BY g.MaterialValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetComputerTechnologiesProducers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	pr.[Name],
                                    	pr.[Name]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                    	
                                    	GROUP BY pr.[Name]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetComputerTechnologiesPrice]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors)))
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetComputerTechnologiesCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT Count(g.Id)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors)))
                                    	RETURN 
                                    END
                                    GO");


            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCoolersGoodCells]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@coolerType [dbo].StringList READONLY,
                                    	@fanSize [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@coolerTypeCount int,
                                    	@fanSizeCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@coolerTypeCount = 0) OR (g.[CoolerType] IN (SELECT value FROM @coolerType))) AND
                                    	((@fanSizeCount = 0) OR (g.[FanSize] IN (SELECT value FROM @fanSize)))
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCoolersCountries]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@coolerType [dbo].StringList READONLY,
                                    	@fanSize [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@coolerTypeCount int,
                                    	@fanSizeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	manCountry.[Value],
                                    	manCountry.[Value]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@coolerTypeCount = 0) OR (g.[CoolerType] IN (SELECT value FROM @coolerType))) AND
                                    	((@fanSizeCount = 0) OR (g.[FanSize] IN (SELECT value FROM @fanSize))))
                                    	GROUP BY manCountry.[Value]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCoolersColors]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@coolerType [dbo].StringList READONLY,
                                    	@fanSize [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@coolerTypeCount int,
                                    	@fanSizeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ColorValue,
                                    	g.ColorValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@coolerTypeCount = 0) OR (g.[CoolerType] IN (SELECT value FROM @coolerType))) AND
                                    	((@fanSizeCount = 0) OR (g.[FanSize] IN (SELECT value FROM @fanSize))))
                                    	GROUP BY g.ColorValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCoolersMaterials]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@coolerType [dbo].StringList READONLY,
                                    	@fanSize [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@coolerTypeCount int,
                                    	@fanSizeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.MaterialValue,
                                    	g.MaterialValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@coolerTypeCount = 0) OR (g.[CoolerType] IN (SELECT value FROM @coolerType))) AND
                                    	((@fanSizeCount = 0) OR (g.[FanSize] IN (SELECT value FROM @fanSize))))
                                    	GROUP BY g.MaterialValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCoolersProducers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@coolerType [dbo].StringList READONLY,
                                    	@fanSize [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@coolerTypeCount int,
                                    	@fanSizeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	pr.[Name],
                                    	pr.[Name]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@coolerTypeCount = 0) OR (g.[CoolerType] IN (SELECT value FROM @coolerType))) AND
                                    	((@fanSizeCount = 0) OR (g.[FanSize] IN (SELECT value FROM @fanSize))))
                                    	GROUP BY pr.[Name]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCoolersTypes]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@coolerType [dbo].StringList READONLY,
                                    	@fanSize [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@coolerTypeCount int,
                                    	@fanSizeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'coolerType', 
                                    	CASE WHEN (@coolerTypeCount != 0) AND (g.[CoolerType] IN (SELECT [Value] FROM @coolerType)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@coolerTypeCount != 0) AND (g.[CoolerType] IN (SELECT [Value] FROM @coolerType)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[CoolerType],
                                    	g.[CoolerType]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@coolerTypeCount != 0) AND (g.[CoolerType] IN (SELECT value FROM @coolerType))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@fanSizeCount = 0) OR (g.[FanSize] IN (SELECT value FROM @fanSize))))
                                    	GROUP BY g.[CoolerType]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCoolersFanSizes]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@coolerType [dbo].StringList READONLY,
                                    	@fanSize [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@coolerTypeCount int,
                                    	@fanSizeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'fanSize', 
                                    	CASE WHEN (@fanSizeCount != 0) AND (g.[FanSize] IN (SELECT [Value] FROM @fanSize)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@fanSizeCount != 0) AND (g.[FanSize] IN (SELECT [Value] FROM @fanSize)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[FanSize],
                                    	g.[FanSize]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@fanSizeCount != 0) AND (g.[FanSize] IN (SELECT value FROM @fanSize))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@coolerTypeCount = 0) OR (g.[CoolerType] IN (SELECT value FROM @coolerType))))
                                    	GROUP BY g.[FanSize]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCoolersPrice]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@coolerType [dbo].StringList READONLY,
                                    	@fanSize [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@coolerTypeCount int,
                                    	@fanSizeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@coolerTypeCount = 0) OR (g.[CoolerType] IN (SELECT value FROM @coolerType))) AND
                                    	((@fanSizeCount = 0) OR (g.[FanSize] IN (SELECT value FROM @fanSize)))
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCoolersCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@coolerType [dbo].StringList READONLY,
                                    	@fanSize [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@coolerTypeCount int,
                                    	@fanSizeCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT Count(g.Id)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@coolerTypeCount = 0) OR (g.[CoolerType] IN (SELECT value FROM @coolerType))) AND
                                    	((@fanSizeCount = 0) OR (g.[FanSize] IN (SELECT value FROM @fanSize)))
                                    	RETURN 
                                    END
                                    GO");


            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsGoodCells]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@thermalDesignPowerCount = 0) OR (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@numberOfThreadsCount = 0) OR (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads)))
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsCountries]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	manCountry.[Value],
                                    	manCountry.[Value]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@thermalDesignPowerCount = 0) OR (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@numberOfThreadsCount = 0) OR (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads))))
                                    	
                                    	GROUP BY manCountry.[Value]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsColors]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ColorValue,
                                    	g.ColorValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@thermalDesignPowerCount = 0) OR (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@numberOfThreadsCount = 0) OR (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads))))
                                    	
                                    	GROUP BY g.ColorValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsMaterials]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.MaterialValue,
                                    	g.MaterialValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@thermalDesignPowerCount = 0) OR (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@numberOfThreadsCount = 0) OR (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads))))
                                    	
                                    	GROUP BY g.MaterialValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsProducers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	pr.[Name],
                                    	pr.[Name]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@thermalDesignPowerCount = 0) OR (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@numberOfThreadsCount = 0) OR (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads))))
                                    	GROUP BY pr.[Name]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsSocketTypes]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'CPUSocketType', 
                                    	CASE WHEN (@cpuSocketTypeCount != 0) AND (g.[CPUSocketType] IN (SELECT [Value] FROM @cpuSocketType)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@cpuSocketTypeCount != 0) AND (g.[CPUSocketType] IN (SELECT [Value] FROM @cpuSocketType)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[CPUSocketType],
                                    	g.[CPUSocketType]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@cpuSocketTypeCount != 0) AND (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@thermalDesignPowerCount = 0) OR (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@numberOfThreadsCount = 0) OR (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads))))
                                    	GROUP BY g.[CPUSocketType]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsThermalDesignPowers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'thermalDesignPower', 
                                    	CASE WHEN (@thermalDesignPowerCount != 0) AND (g.[ThermalDesignPower] IN (SELECT [Value] FROM @thermalDesignPower)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@thermalDesignPowerCount != 0) AND (g.[ThermalDesignPower] IN (SELECT [Value] FROM @thermalDesignPower)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[ThermalDesignPower],
                                    	g.[ThermalDesignPower]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@thermalDesignPowerCount != 0) AND (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@numberOfThreadsCount = 0) OR (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads))))
                                    	GROUP BY g.[ThermalDesignPower]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsNumberOfCores]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'numberOfCores', 
                                    	CASE WHEN (@numberOfCoresCount != 0) AND (g.[NumberOfCores] IN (SELECT [Value] FROM @numberOfCores)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@numberOfCoresCount != 0) AND (g.[NumberOfCores] IN (SELECT [Value] FROM @numberOfCores)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[NumberOfCores],
                                    	g.[NumberOfCores]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@numberOfCoresCount != 0) AND (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@thermalDesignPowerCount = 0) OR (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) AND
                                    	((@numberOfThreadsCount = 0) OR (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads))))
                                    	GROUP BY g.[NumberOfCores]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsNumberOfThreads]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'numberOfThreads', 
                                    	CASE WHEN (@numberOfThreadsCount != 0) AND (g.[NumberOfThreads] IN (SELECT [Value] FROM @numberOfThreads)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@numberOfThreadsCount != 0) AND (g.[NumberOfThreads] IN (SELECT [Value] FROM @numberOfThreads)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[NumberOfThreads],
                                    	g.[NumberOfThreads]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@numberOfThreadsCount != 0) AND (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@thermalDesignPowerCount = 0) OR (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))))
                                    	GROUP BY g.[NumberOfThreads]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsPrice]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@thermalDesignPowerCount = 0) OR (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@numberOfThreadsCount = 0) OR (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads)))
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetCPUsCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@cpuSocketTypeCount int,
                                    	@thermalDesignPowerCount int,
                                    	@numberOfCoresCount int,
                                    	@numberOfThreadsCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT Count(g.Id)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@thermalDesignPowerCount = 0) OR (g.[ThermalDesignPower] IN (SELECT value FROM @thermalDesignPower))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@numberOfThreadsCount = 0) OR (g.[NumberOfThreads] IN (SELECT value FROM @numberOfThreads)))
                                    	RETURN 
                                    END
                                    GO");



            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetFlashDrivesGoodCells]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@usbSpecificationType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@capacityCount int,
                                    	@usbSpecificationTypeCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@capacityCount = 0) OR (g.Capacity IN (SELECT value FROM @capacity))) AND
                                    	((@usbSpecificationTypeCount = 0) OR (g.USBSpecificationType IN (SELECT value FROM @usbSpecificationType)))
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetFlashDrivesCountries]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@usbSpecificationType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@capacityCount int,
                                    	@usbSpecificationTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	manCountry.[Value],
                                    	manCountry.[Value]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@capacityCount = 0) OR (g.Capacity IN (SELECT value FROM @capacity))) AND
                                    	((@usbSpecificationTypeCount = 0) OR (g.USBSpecificationType IN (SELECT value FROM @usbSpecificationType))))
                                    	
                                    	GROUP BY manCountry.[Value]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetFlashDrivesColors]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@usbSpecificationType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@capacityCount int,
                                    	@usbSpecificationTypeCount int
                                    
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ColorValue,
                                    	g.ColorValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@capacityCount = 0) OR (g.Capacity IN (SELECT value FROM @capacity))) AND
                                    	((@usbSpecificationTypeCount = 0) OR (g.USBSpecificationType IN (SELECT value FROM @usbSpecificationType))))
                                    	GROUP BY g.ColorValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetFlashDrivesMaterials]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@usbSpecificationType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@capacityCount int,
                                    	@usbSpecificationTypeCount int
                                    
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.MaterialValue,
                                    	g.MaterialValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@capacityCount = 0) OR (g.Capacity IN (SELECT value FROM @capacity))) AND
                                    	((@usbSpecificationTypeCount = 0) OR (g.USBSpecificationType IN (SELECT value FROM @usbSpecificationType))))
                                    	GROUP BY g.MaterialValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetFlashDrivesProducers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@usbSpecificationType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@capacityCount int,
                                    	@usbSpecificationTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	pr.[Name],
                                    	pr.[Name]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@capacityCount = 0) OR (g.Capacity IN (SELECT value FROM @capacity))) AND
                                    	((@usbSpecificationTypeCount = 0) OR (g.USBSpecificationType IN (SELECT value FROM @usbSpecificationType))))
                                    	GROUP BY pr.[Name]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetFlashDrivesCapacity]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@usbSpecificationType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@capacityCount int,
                                    	@usbSpecificationTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'capacity', 
                                    	CASE WHEN (@capacityCount != 0) AND (g.Capacity IN (SELECT [Value] FROM @capacity)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@capacityCount != 0) AND (g.Capacity IN (SELECT [Value] FROM @capacity)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.Capacity,
                                    	g.Capacity
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@capacityCount != 0) AND (g.Capacity IN (SELECT value FROM @capacity))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@usbSpecificationTypeCount = 0) OR (g.USBSpecificationType IN (SELECT value FROM @usbSpecificationType))))
                                    	GROUP BY g.Capacity
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetFlashDrivesUsbSpecificationTypes]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@usbSpecificationType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@capacityCount int,
                                    	@usbSpecificationTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'USBSpecificationType', 
                                    	CASE WHEN (@usbSpecificationTypeCount != 0) AND (g.USBSpecificationType IN (SELECT [Value] FROM @usbSpecificationType)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@usbSpecificationTypeCount != 0) AND (g.USBSpecificationType IN (SELECT [Value] FROM @usbSpecificationType)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.USBSpecificationType,
                                    	g.USBSpecificationType
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@usbSpecificationTypeCount != 0) AND (g.USBSpecificationType IN (SELECT value FROM @usbSpecificationType))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@capacityCount = 0) OR (g.Capacity IN (SELECT value FROM @capacity))))
                                    	GROUP BY g.USBSpecificationType
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetFlashDrivesPrice]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@usbSpecificationType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@capacityCount int,
                                    	@usbSpecificationTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@capacityCount = 0) OR (g.Capacity IN (SELECT value FROM @capacity))) AND
                                    	((@usbSpecificationTypeCount = 0) OR (g.USBSpecificationType IN (SELECT value FROM @usbSpecificationType)))
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetFlashDrivesCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@usbSpecificationType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@capacityCount int,
                                    	@usbSpecificationTypeCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT Count(g.Id)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@capacityCount = 0) OR (g.Capacity IN (SELECT value FROM @capacity))) AND
                                    	((@usbSpecificationTypeCount = 0) OR (g.USBSpecificationType IN (SELECT value FROM @usbSpecificationType)))
                                    	RETURN 
                                    END
                                    GO");


            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetGoodsGoodCells]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors)))
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetGoodsCountries]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	manCountry.[Value],
                                    	manCountry.[Value]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                    	
                                    	GROUP BY manCountry.[Value]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetGoodsColors]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ColorValue,
                                    	g.ColorValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))))
                                    	
                                    	GROUP BY g.ColorValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetGoodsMaterials]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.MaterialValue,
                                    	g.MaterialValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                    	GROUP BY g.MaterialValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetGoodsProducers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	pr.[Name],
                                    	pr.[Name]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))))
                                    	GROUP BY pr.[Name]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetGoodsPrice]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors)))
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetGoodsCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT Count(g.Id)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors)))
                                    	RETURN 
                                    END
                                    GO");



            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetHeadphonesGoodCells]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@headphonesTypeCount int,
                                    	@wirelessTypeCount int,
                                    	@connectorTypeCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@headphonesTypeCount = 0) OR (g.[HeadphonesType] IN (SELECT value FROM @headphonesType))) AND
                                    	((@wirelessTypeCount = 0) OR (g.[WirelessType] IN (SELECT value FROM @wirelessType))) AND
                                    	((@connectorTypeCount = 0) OR (g.[ConnectorType] IN (SELECT value FROM @connectorType)))
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetHeadphonesCountries]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@headphonesTypeCount int,
                                    	@wirelessTypeCount int,
                                    	@connectorTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	manCountry.[Value],
                                    	manCountry.[Value]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@headphonesTypeCount = 0) OR (g.[HeadphonesType] IN (SELECT value FROM @headphonesType))) AND
                                    	((@wirelessTypeCount = 0) OR (g.[WirelessType] IN (SELECT value FROM @wirelessType))) AND
                                    	((@connectorTypeCount = 0) OR (g.[ConnectorType] IN (SELECT value FROM @connectorType))))
                                    	GROUP BY manCountry.[Value]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetHeadphonesColors]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@headphonesTypeCount int,
                                    	@wirelessTypeCount int,
                                    	@connectorTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ColorValue,
                                    	g.ColorValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@headphonesTypeCount = 0) OR (g.[HeadphonesType] IN (SELECT value FROM @headphonesType))) AND
                                    	((@wirelessTypeCount = 0) OR (g.[WirelessType] IN (SELECT value FROM @wirelessType))) AND
                                    	((@connectorTypeCount = 0) OR (g.[ConnectorType] IN (SELECT value FROM @connectorType))))
                                    	GROUP BY g.ColorValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetHeadphonesMaterials]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@headphonesTypeCount int,
                                    	@wirelessTypeCount int,
                                    	@connectorTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.MaterialValue,
                                    	g.MaterialValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@headphonesTypeCount = 0) OR (g.[HeadphonesType] IN (SELECT value FROM @headphonesType))) AND
                                    	((@wirelessTypeCount = 0) OR (g.[WirelessType] IN (SELECT value FROM @wirelessType))) AND
                                    	((@connectorTypeCount = 0) OR (g.[ConnectorType] IN (SELECT value FROM @connectorType))))
                                    	
                                    	GROUP BY g.MaterialValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetHeadphonesProducers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@headphonesTypeCount int,
                                    	@wirelessTypeCount int,
                                    	@connectorTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	pr.[Name],
                                    	pr.[Name]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@headphonesTypeCount = 0) OR (g.[HeadphonesType] IN (SELECT value FROM @headphonesType))) AND
                                    	((@wirelessTypeCount = 0) OR (g.[WirelessType] IN (SELECT value FROM @wirelessType))) AND
                                    	((@connectorTypeCount = 0) OR (g.[ConnectorType] IN (SELECT value FROM @connectorType))))
                                    	GROUP BY pr.[Name]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetHeadphonesTypes]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@headphonesTypeCount int,
                                    	@wirelessTypeCount int,
                                    	@connectorTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'headphonesType', 
                                    	CASE WHEN (@headphonesTypeCount != 0) AND (g.[HeadphonesType] IN (SELECT [Value] FROM @headphonesType)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@headphonesTypeCount != 0) AND (g.[HeadphonesType] IN (SELECT [Value] FROM @headphonesType)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[HeadphonesType],
                                    	g.[HeadphonesType]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@headphonesTypeCount != 0) AND (g.[HeadphonesType] IN (SELECT value FROM @headphonesType))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@wirelessTypeCount = 0) OR (g.[WirelessType] IN (SELECT value FROM @wirelessType))) AND
                                    	((@connectorTypeCount = 0) OR (g.[ConnectorType] IN (SELECT value FROM @connectorType))))
                                    	GROUP BY g.[HeadphonesType]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetHeadphonesWirelessTypes]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@headphonesTypeCount int,
                                    	@wirelessTypeCount int,
                                    	@connectorTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'wirelessType', 
                                    	CASE WHEN (@wirelessTypeCount != 0) AND (g.[WirelessType] IN (SELECT [Value] FROM @wirelessType)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@wirelessTypeCount != 0) AND (g.[WirelessType] IN (SELECT [Value] FROM @wirelessType)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[WirelessType],
                                    	g.[WirelessType]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@wirelessTypeCount != 0) AND (g.[WirelessType] IN (SELECT value FROM @wirelessType))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@headphonesTypeCount = 0) OR (g.[HeadphonesType] IN (SELECT value FROM @headphonesType))) AND
                                    	((@connectorTypeCount = 0) OR (g.[ConnectorType] IN (SELECT value FROM @connectorType))))
                                    	GROUP BY g.[WirelessType]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetHeadphonesConnectorTypes]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@headphonesTypeCount int,
                                    	@wirelessTypeCount int,
                                    	@connectorTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'connectorType', 
                                    	CASE WHEN (@connectorTypeCount != 0) AND (g.[ConnectorType] IN (SELECT [Value] FROM @connectorType)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@connectorTypeCount != 0) AND (g.[ConnectorType] IN (SELECT [Value] FROM @connectorType)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[ConnectorType],
                                    	g.[ConnectorType]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@connectorTypeCount != 0) AND (g.[ConnectorType] IN (SELECT value FROM @connectorType))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@headphonesTypeCount = 0) OR (g.[HeadphonesType] IN (SELECT value FROM @headphonesType))) AND
                                    	((@wirelessTypeCount = 0) OR (g.[WirelessType] IN (SELECT value FROM @wirelessType))))
                                    	GROUP BY g.[ConnectorType]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetHeadphonesPrice]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@headphonesTypeCount int,
                                    	@wirelessTypeCount int,
                                    	@connectorTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@headphonesTypeCount = 0) OR (g.[HeadphonesType] IN (SELECT value FROM @headphonesType))) AND
                                    	((@wirelessTypeCount = 0) OR (g.[WirelessType] IN (SELECT value FROM @wirelessType))) AND
                                    	((@connectorTypeCount = 0) OR (g.[ConnectorType] IN (SELECT value FROM @connectorType)))
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetHeadphonesCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@headphonesTypeCount int,
                                    	@wirelessTypeCount int,
                                    	@connectorTypeCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT Count(g.Id)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@headphonesTypeCount = 0) OR (g.[HeadphonesType] IN (SELECT value FROM @headphonesType))) AND
                                    	((@wirelessTypeCount = 0) OR (g.[WirelessType] IN (SELECT value FROM @wirelessType))) AND
                                    	((@connectorTypeCount = 0) OR (g.[ConnectorType] IN (SELECT value FROM @connectorType)))
                                    	RETURN 
                                    END
                                    GO");



            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetKeyboardsGoodCells]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@keyboardType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@keyboardTypeCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@keyboardTypeCount = 0) OR (g.[KeyboardType] IN (SELECT value FROM @keyboardType)))
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetKeyboardsCountries]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@keyboardType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@keyboardTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	manCountry.[Value],
                                    	manCountry.[Value]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@keyboardTypeCount = 0) OR (g.[KeyboardType] IN (SELECT value FROM @keyboardType))))
                                    	GROUP BY manCountry.[Value]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetKeyboardsColors]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@keyboardType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@keyboardTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ColorValue,
                                    	g.ColorValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@keyboardTypeCount = 0) OR (g.[KeyboardType] IN (SELECT value FROM @keyboardType))))
                                    	GROUP BY g.ColorValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetKeyboardsMaterials]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@keyboardType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@keyboardTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.MaterialValue,
                                    	g.MaterialValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@keyboardTypeCount = 0) OR (g.[KeyboardType] IN (SELECT value FROM @keyboardType))))
                                    	GROUP BY g.MaterialValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetKeyboardsProducers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@keyboardType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@keyboardTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	pr.[Name],
                                    	pr.[Name]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@keyboardTypeCount = 0) OR (g.[KeyboardType] IN (SELECT value FROM @keyboardType))))
                                    	
                                    	GROUP BY pr.[Name]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetKeyboardsTypes]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@keyboardType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@keyboardTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'keyboardType', 
                                    	CASE WHEN (@keyboardTypeCount != 0) AND (g.[KeyboardType] IN (SELECT [Value] FROM @keyboardType)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@keyboardTypeCount != 0) AND (g.[KeyboardType] IN (SELECT [Value] FROM @keyboardType)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[KeyboardType],
                                    	g.[KeyboardType]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@keyboardTypeCount != 0) AND (g.[KeyboardType] IN (SELECT value FROM @keyboardType))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))))
                                    	
                                    	GROUP BY g.[KeyboardType]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetKeyboardsPrice]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@keyboardType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@keyboardTypeCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@keyboardTypeCount = 0) OR (g.[KeyboardType] IN (SELECT value FROM @keyboardType)))
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetKeyboardsCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@keyboardType [dbo].StringList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@keyboardTypeCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT Count(g.Id)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@keyboardTypeCount = 0) OR (g.[KeyboardType] IN (SELECT value FROM @keyboardType)))
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsGoodCells]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT  g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM ( 
                                    	SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator], g.AddTime
                                    	FROM
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))
                                    	GROUP BY  g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator], g.AddTime
                                    	) g
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsCountries]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (g.Country IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (g.Country IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.Country,
                                    	g.Country
                                    	FROM (
                                    	SELECT DISTINCT g.Id, manCountry.[Value] as Country
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.Country
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsColors]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.Color IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.Color IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.Color,
                                    	g.Color
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.ColorValue as Color
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.Color
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsMaterials]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.Material IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.Material IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.Material,
                                    	g.Material
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.MaterialValue as Material
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.Material
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsProducers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (g.Producer IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (g.Producer IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.Producer,
                                    	g.Producer
                                    	FROM (
                                    	SELECT DISTINCT g.Id, pr.[Name] as Producer
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR 
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.Producer
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsAmountOfRAMs]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'amountOfRAM', 
                                    	CASE WHEN (@amountOfRAMCount != 0) AND (g.AmountOfRAM IN (SELECT [Value] FROM @amountOfRAM)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@amountOfRAMCount != 0) AND (g.AmountOfRAM IN (SELECT [Value] FROM @amountOfRAM)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.AmountOfRAM,
                                    	g.AmountOfRAM
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.AmountOfRAM as AmountOfRAM
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@amountOfRAMCount != 0) AND (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.AmountOfRAM
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsCpuFrequency]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'CPUFrequency', 
                                    	CASE WHEN (@cpuFrequencyCount != 0) AND (g.CPUFrequency IN (SELECT [Value] FROM @cpuFrequency)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@cpuFrequencyCount != 0) AND (g.CPUFrequency IN (SELECT [Value] FROM @cpuFrequency)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.CPUFrequency,
                                    	g.CPUFrequency
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.CPUFrequency as CPUFrequency
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@cpuFrequencyCount != 0) AND (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.CPUFrequency
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsLength]
                                    (	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'length', 
                                    	CASE WHEN (@lengthCount != 0) AND (g.[Length] IN (SELECT [Value] FROM @length)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@lengthCount != 0) AND (g.[Length] IN (SELECT [Value] FROM @length)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[Length],
                                    	g.[Length]
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.[Length] as [Length]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@lengthCount != 0) AND (g.[Length] IN (SELECT value FROM @length))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.[Length]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsHeight]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'height', 
                                    	CASE WHEN (@heightCount != 0) AND (g.Height IN (SELECT [Value] FROM @height)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@heightCount != 0) AND (g.Height IN (SELECT [Value] FROM @height)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.Height,
                                    	g.Height
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.Height as Height
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@heightCount != 0) AND (g.[Height] IN (SELECT value FROM @height))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.Height
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsWidth]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'width', 
                                    	CASE WHEN (@widthCount != 0) AND (g.Width IN (SELECT [Value] FROM @width)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@widthCount != 0) AND (g.Width IN (SELECT [Value] FROM @width)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.Width,
                                    	g.Width
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.Width as Width
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@widthCount != 0) AND (g.[Width] IN (SELECT value FROM @width))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.Width
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsHaveFloppyDrives]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'haveFloppyDrives', 
                                    	CASE WHEN (@haveFloppyDrivesCount != 0) AND (g.HaveFloppyDrives IN (SELECT [Value] FROM @haveFloppyDrives)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@haveFloppyDrivesCount != 0) AND (g.HaveFloppyDrives IN (SELECT [Value] FROM @haveFloppyDrives)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.HaveFloppyDrives,
                                    	g.HaveFloppyDrives
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.HaveFloppyDrives as HaveFloppyDrives
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@haveFloppyDrivesCount != 0) AND (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.HaveFloppyDrives
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsSsdMemory]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'SSDMemory', 
                                    	CASE WHEN (@ssdMemoryCount != 0) AND (g.SSDMemory IN (SELECT [Value] FROM @ssdMemory)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@ssdMemoryCount != 0) AND (g.SSDMemory IN (SELECT [Value] FROM @ssdMemory)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.SSDMemory,
                                    	g.SSDMemory
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.SSDMemory as SSDMemory
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@ssdMemoryCount != 0) AND (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.SSDMemory
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsHardDiskMemory]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'hardDiskMemory', 
                                    	CASE WHEN (@hardDiskMemoryCount != 0) AND (g.HardDiskMemory IN (SELECT [Value] FROM @hardDiskMemory)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@hardDiskMemoryCount != 0) AND (g.HardDiskMemory IN (SELECT [Value] FROM @hardDiskMemory)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.HardDiskMemory,
                                    	g.HardDiskMemory
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.HardDiskMemory as HardDiskMemory
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@hardDiskMemoryCount != 0) AND (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.HardDiskMemory
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsCpuSocketType]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'CPUSocketType', 
                                    	CASE WHEN (@cpuSocketTypeCount != 0) AND (g.CPUSocketType IN (SELECT [Value] FROM @cpuSocketType)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@cpuSocketTypeCount != 0) AND (g.CPUSocketType IN (SELECT [Value] FROM @cpuSocketType)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.CPUSocketType,
                                    	g.CPUSocketType
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.CPUSocketType as CPUSocketType
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@cpuSocketTypeCount != 0) AND (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.CPUSocketType
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsComputerDrives]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'computerDriveType', 
                                    	CASE WHEN (@computerDriveTypeCount != 0) AND (g.ComputerDriveType IN (SELECT [Value] FROM @computerDriveType)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@computerDriveTypeCount != 0) AND (g.ComputerDriveType IN (SELECT [Value] FROM @computerDriveType)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ComputerDriveType,
                                    	g.ComputerDriveType
                                    	FROM (
                                    	SELECT DISTINCT g.Id, lcdt.ComputerDriveTypeValue as ComputerDriveType
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@computerDriveTypeCount != 0) AND (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	WHERE g.ComputerDriveType IS NOT NULL
                                    	GROUP BY g.ComputerDriveType
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsNumberOfCores]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'numberOfCores', 
                                    	CASE WHEN (@numberOfCoresCount != 0) AND (g.NumberOfCores IN (SELECT [Value] FROM @numberOfCores)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@numberOfCoresCount != 0) AND (g.NumberOfCores IN (SELECT [Value] FROM @numberOfCores)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.NumberOfCores,
                                    	g.NumberOfCores
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.NumberOfCores as NumberOfCores
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@numberOfCoresCount != 0) AND (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	GROUP BY g.NumberOfCores
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsFloppyDrivesCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'floppyDrivesCount', 
                                    	CASE WHEN (@floppyDrivesCountCount != 0) AND (g.FloppyDrivesCount IN (SELECT [Value] FROM @floppyDrivesCount)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@floppyDrivesCountCount != 0) AND (g.FloppyDrivesCount IN (SELECT [Value] FROM @floppyDrivesCount)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.FloppyDrivesCount,
                                    	g.FloppyDrivesCount
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.FloppyDrivesCount as FloppyDrivesCount
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@floppyDrivesCountCount != 0) AND (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays)))))) as g
                                    	WHERE g.FloppyDrivesCount IS NOT NULL
                                    	GROUP BY g.FloppyDrivesCount
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsDisplays]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'display', 
                                    	CASE WHEN (@displaysCount != 0) AND (g.Display IN (SELECT [Value] FROM @displays)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@displaysCount != 0) AND (g.Display IN (SELECT [Value] FROM @displays)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.Display,
                                    	g.Display
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.Display as Display
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@displaysCount != 0) AND (g.[Display] IN (SELECT value FROM @displays))) OR
                                    	(((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))))) as g
                                    	GROUP BY g.Display
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsPrice]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM (
                                    	SELECT DISTINCT g.Id, g.Price
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays))) AND
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))) as g
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetLaptopsCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@amountOfRAMCount int,
                                    	@cpuFrequencyCount int,
                                    	@lengthCount int,
                                    	@heightCount int,
                                    	@widthCount int,
                                    	@haveFloppyDrivesCount int,
                                    	@ssdMemoryCount int,
                                    	@hardDiskMemoryCount int,
                                    	@cpuSocketTypeCount int,
                                    	@computerDriveTypeCount int,
                                    	@numberOfCoresCount int,
                                    	@floppyDrivesCountCount int,
                                    	@displaysCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT 
                                    	Count(g.Id)
                                    	FROM (
                                    	SELECT DISTINCT g.Id
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	LEFT OUTER JOIN [dbo].[LaptopComputerDriveTypes] lcdt ON lcdt.LaptopId = g.Id
                                    	WHERE 
                                    	((@displaysCount = 0) OR (g.[Display] IN (SELECT value FROM @displays))) AND
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@amountOfRAMCount = 0) OR (g.[AmountOfRAM] IN (SELECT value FROM @amountOfRAM))) AND
                                    	((@cpuFrequencyCount = 0) OR (g.[CPUFrequency] IN (SELECT value FROM @cpuFrequency))) AND
                                    	((@lengthCount = 0) OR (g.[Length] IN (SELECT value FROM @length))) AND
                                    	((@heightCount = 0) OR (g.[Height] IN (SELECT value FROM @height))) AND
                                    	((@widthCount = 0) OR (g.[Width] IN (SELECT value FROM @width))) AND
                                    	((@haveFloppyDrivesCount = 0) OR (g.[HaveFloppyDrives] IN (SELECT value FROM @haveFloppyDrives))) AND
                                    	((@ssdMemoryCount = 0) OR (g.[SSDMemory] IN (SELECT value FROM @ssdMemory))) AND
                                    	((@hardDiskMemoryCount = 0) OR (g.[HardDiskMemory] IN (SELECT value FROM @hardDiskMemory))) AND
                                    	((@cpuSocketTypeCount = 0) OR (g.[CPUSocketType] IN (SELECT value FROM @cpuSocketType))) AND
                                    	((@computerDriveTypeCount = 0) OR (lcdt.ComputerDriveTypeValue IN (SELECT value FROM @computerDriveType))) AND
                                    	((@numberOfCoresCount = 0) OR (g.[NumberOfCores] IN (SELECT value FROM @numberOfCores))) AND
                                    	((@floppyDrivesCountCount = 0) OR (g.[FloppyDrivesCount] IN (SELECT value FROM @floppyDrivesCount)))) as g
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetMiceGoodCells]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@mauseType [dbo].StringList READONLY,
                                    	@buttonsCount [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@mauseTypeCount int,
                                    	@buttonsCountCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@mauseTypeCount = 0) OR (g.[MauseType] IN (SELECT value FROM @mauseType))) AND
                                    	((@buttonsCountCount = 0) OR (g.[ButtonsCount] IN (SELECT value FROM @buttonsCount)))
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetMiceCountries]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@mauseType [dbo].StringList READONLY,
                                    	@buttonsCount [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@mauseTypeCount int,
                                    	@buttonsCountCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	manCountry.[Value],
                                    	manCountry.[Value]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@mauseTypeCount = 0) OR (g.[MauseType] IN (SELECT value FROM @mauseType))) AND
                                    	((@buttonsCountCount = 0) OR (g.[ButtonsCount] IN (SELECT value FROM @buttonsCount))))
                                    	GROUP BY manCountry.[Value]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetMiceColors]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@mauseType [dbo].StringList READONLY,
                                    	@buttonsCount [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@mauseTypeCount int,
                                    	@buttonsCountCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ColorValue,
                                    	g.ColorValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@mauseTypeCount = 0) OR (g.[MauseType] IN (SELECT value FROM @mauseType))) AND
                                    	((@buttonsCountCount = 0) OR (g.[ButtonsCount] IN (SELECT value FROM @buttonsCount))))
                                    	
                                    	GROUP BY g.ColorValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetMiceMaterials]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@mauseType [dbo].StringList READONLY,
                                    	@buttonsCount [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@mauseTypeCount int,
                                    	@buttonsCountCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.MaterialValue,
                                    	g.MaterialValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@mauseTypeCount = 0) OR (g.[MauseType] IN (SELECT value FROM @mauseType))) AND
                                    	((@buttonsCountCount = 0) OR (g.[ButtonsCount] IN (SELECT value FROM @buttonsCount))))
                                    	GROUP BY g.MaterialValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetMiceProducers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@mauseType [dbo].StringList READONLY,
                                    	@buttonsCount [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@mauseTypeCount int,
                                    	@buttonsCountCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	pr.[Name],
                                    	pr.[Name]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@mauseTypeCount = 0) OR (g.[MauseType] IN (SELECT value FROM @mauseType))) AND
                                    	((@buttonsCountCount = 0) OR (g.[ButtonsCount] IN (SELECT value FROM @buttonsCount))))
                                    	GROUP BY pr.[Name]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetMiceTypes]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@mauseType [dbo].StringList READONLY,
                                    	@buttonsCount [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@mauseTypeCount int,
                                    	@buttonsCountCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'mauseType', 
                                    	CASE WHEN (@mauseTypeCount != 0) AND (g.[MauseType] IN (SELECT [Value] FROM @mauseType)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@mauseTypeCount != 0) AND (g.[MauseType] IN (SELECT [Value] FROM @mauseType)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[MauseType],
                                    	g.[MauseType]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@mauseTypeCount != 0) AND (g.[MauseType] IN (SELECT value FROM @mauseType))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@buttonsCountCount = 0) OR (g.[ButtonsCount] IN (SELECT value FROM @buttonsCount))))
                                    	GROUP BY g.[MauseType]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetMiceButtonsCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@mauseType [dbo].StringList READONLY,
                                    	@buttonsCount [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@mauseTypeCount int,
                                    	@buttonsCountCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'buttonsCount', 
                                    	CASE WHEN (@buttonsCountCount != 0) AND (g.[ButtonsCount] IN (SELECT [Value] FROM @buttonsCount)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@buttonsCountCount != 0) AND (g.[ButtonsCount] IN (SELECT [Value] FROM @buttonsCount)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[ButtonsCount],
                                    	g.[ButtonsCount]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@buttonsCountCount != 0) AND (g.[ButtonsCount] IN (SELECT value FROM @buttonsCount))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@mauseTypeCount = 0) OR (g.[MauseType] IN (SELECT value FROM @mauseType))))
                                    	GROUP BY g.[ButtonsCount]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetMicePrice]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@mauseType [dbo].StringList READONLY,
                                    	@buttonsCount [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@mauseTypeCount int,
                                    	@buttonsCountCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@mauseTypeCount = 0) OR (g.[MauseType] IN (SELECT value FROM @mauseType))) AND
                                    	((@buttonsCountCount = 0) OR (g.[ButtonsCount] IN (SELECT value FROM @buttonsCount)))
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetMiceCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@mauseType [dbo].StringList READONLY,
                                    	@buttonsCount [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@mauseTypeCount int,
                                    	@buttonsCountCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT Count(g.Id)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@mauseTypeCount = 0) OR (g.[MauseType] IN (SELECT value FROM @mauseType))) AND
                                    	((@buttonsCountCount = 0) OR (g.[ButtonsCount] IN (SELECT value FROM @buttonsCount)))
                                    	RETURN 
                                    END
                                    GO");


            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetVideoCardsGoodCells]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@driveInterfaceCount int,
                                    	@videoSizeCount int,
                                    	@videoMemoryCapacityCount int,
                                    	@orderType nvarchar(100),
                                    	@sortDir nvarchar(100),
                                    	@from int,
                                    	@to int
                                    )
                                    RETURNS 
                                    @GoodCell TABLE 
                                    (
                                    	    Id uniqueidentifier,
                                    		[Name] nvarchar(500),
                                    		Price decimal(18, 6),
                                    		IsAvailable bit,
                                    		[Type] nvarchar(MAX),
                                    	    ImgId uniqueidentifier
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @GoodCell
                                    	SELECT goodCells.Id, goodCells.[Name], goodCells.Price, goodCells.IsAvailable, goodCells.[Discriminator], imgInf.Id
                                    	FROM [dbo].ImageInfo imgInf
                                    	RIGHT JOIN (SELECT g.Id, g.[Name], g.Price, g.IsAvailable, g.[Discriminator]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@driveInterfaceCount = 0) OR (g.[DriveInterfaceValue] IN (SELECT value FROM @driveInterface))) AND
                                    	((@videoSizeCount = 0) OR (g.[VideoSize] IN (SELECT value FROM @videoSize))) AND
                                    	((@videoMemoryCapacityCount = 0) OR (g.[VideoMemoryCapacity] IN (SELECT value FROM @videoMemoryCapacity)))
                                    	ORDER BY 
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'addTime' THEN g.AddTime END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'name' THEN g.[Name] END,
                                    	CASE WHEN @sortDir = 'asc' AND @orderType = 'price' THEN g.Price END,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'addTime' THEN g.AddTime END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'name' THEN g.[Name] END DESC,
                                    	CASE WHEN @sortDir = 'desc' AND @orderType = 'price' THEN g.Price END DESC
                                    	OFFSET @from ROWS
                                    	FETCH NEXT @to ROWS ONLY
                                    	) goodCells ON goodCells.Id = imgInf.GoodId
                                    	RETURN
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetVideoCardsCountries]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@driveInterfaceCount int,
                                    	@videoSizeCount int,
                                    	@videoMemoryCapacityCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'country', 
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@countriesCount != 0) AND (manCountry.[Value] IN (SELECT [Value] FROM @countries)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	manCountry.[Value],
                                    	manCountry.[Value]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@countriesCount != 0) AND (manCountry.[Value] IN (SELECT value FROM @countries))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials)))AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@driveInterfaceCount = 0) OR (g.[DriveInterfaceValue] IN (SELECT value FROM @driveInterface))) AND
                                    	((@videoSizeCount = 0) OR (g.[VideoSize] IN (SELECT value FROM @videoSize))) AND
                                    	((@videoMemoryCapacityCount = 0) OR (g.[VideoMemoryCapacity] IN (SELECT value FROM @videoMemoryCapacity))))
                                    	GROUP BY manCountry.[Value]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetVideoCardsColors]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@driveInterfaceCount int,
                                    	@videoSizeCount int,
                                    	@videoMemoryCapacityCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'color', 
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.ColorValue,
                                    	g.ColorValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@colorsCount != 0) AND (g.ColorValue IN (SELECT [Value] FROM @colors))) OR
                                    	((@priceFrom IS NULL OR @priceFrom >= g.Price) AND (@priceTo IS NULL OR @priceTo <= g.Price) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@driveInterfaceCount = 0) OR (g.[DriveInterfaceValue] IN (SELECT value FROM @driveInterface))) AND
                                    	((@videoSizeCount = 0) OR (g.[VideoSize] IN (SELECT value FROM @videoSize))) AND
                                    	((@videoMemoryCapacityCount = 0) OR (g.[VideoMemoryCapacity] IN (SELECT value FROM @videoMemoryCapacity))))
                                    	GROUP BY g.ColorValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetVideoCardsMaterials]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@driveInterfaceCount int,
                                    	@videoSizeCount int,
                                    	@videoMemoryCapacityCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'material', 
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@materialsCount != 0) AND (g.MaterialValue IN (SELECT [Value] FROM @materials)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.MaterialValue,
                                    	g.MaterialValue
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@materialsCount != 0) AND (g.MaterialValue IN (SELECT value FROM @materials))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@driveInterfaceCount = 0) OR (g.[DriveInterfaceValue] IN (SELECT value FROM @driveInterface))) AND
                                    	((@videoSizeCount = 0) OR (g.[VideoSize] IN (SELECT value FROM @videoSize))) AND
                                    	((@videoMemoryCapacityCount = 0) OR (g.[VideoMemoryCapacity] IN (SELECT value FROM @videoMemoryCapacity))))
                                    	GROUP BY g.MaterialValue
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetVideoCardsProducers]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@driveInterfaceCount int,
                                    	@videoSizeCount int,
                                    	@videoMemoryCapacityCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'producer', 
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@producersCount != 0) AND (pr.[Name] IN (SELECT [Value] FROM @producers)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	pr.[Name],
                                    	pr.[Name]
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@producersCount != 0) AND (pr.[Name] IN (SELECT value FROM @producers))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@driveInterfaceCount = 0) OR (g.[DriveInterfaceValue] IN (SELECT value FROM @driveInterface))) AND
                                    	((@videoSizeCount = 0) OR (g.[VideoSize] IN (SELECT value FROM @videoSize))) AND
                                    	((@videoMemoryCapacityCount = 0) OR (g.[VideoMemoryCapacity] IN (SELECT value FROM @videoMemoryCapacity))))
                                    	GROUP BY pr.[Name]
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetVideoCardsDriveInterfaces]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@driveInterfaceCount int,
                                    	@videoSizeCount int,
                                    	@videoMemoryCapacityCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'driveInterface', 
                                    	CASE WHEN (@driveInterfaceCount != 0) AND (g.[DriveInterfaceValue]  IN (SELECT [Value] FROM @driveInterface)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@driveInterfaceCount != 0) AND (g.[DriveInterfaceValue]  IN (SELECT [Value] FROM @driveInterface)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[DriveInterfaceValue] ,
                                    	g.[DriveInterfaceValue] 
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@driveInterfaceCount != 0) AND (g.[DriveInterfaceValue] IN (SELECT value FROM @driveInterface))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@videoSizeCount = 0) OR (g.[VideoSize] IN (SELECT value FROM @videoSize))) AND
                                    	((@videoMemoryCapacityCount = 0) OR (g.[VideoMemoryCapacity] IN (SELECT value FROM @videoMemoryCapacity))))
                                    	GROUP BY g.[DriveInterfaceValue] 
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetVideoCardsVideoSizes]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@driveInterfaceCount int,
                                    	@videoSizeCount int,
                                    	@videoMemoryCapacityCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'videoSize', 
                                    	CASE WHEN (@videoSizeCount != 0) AND (g.[VideoSize]  IN (SELECT [Value] FROM @videoSize)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@videoSizeCount != 0) AND (g.[VideoSize]  IN (SELECT [Value] FROM @videoSize)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[VideoSize] ,
                                    	g.[VideoSize] 
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@videoSizeCount != 0) AND (g.[VideoSize] IN (SELECT value FROM @videoSize))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@driveInterfaceCount = 0) OR (g.[DriveInterfaceValue] IN (SELECT value FROM @driveInterface))) AND
                                    	((@videoMemoryCapacityCount = 0) OR (g.[VideoMemoryCapacity] IN (SELECT value FROM @videoMemoryCapacity))))
                                    	GROUP BY g.[VideoSize] 
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetVideoCardsVideoMemoryCapacity]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@driveInterfaceCount int,
                                    	@videoSizeCount int,
                                    	@videoMemoryCapacityCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, AfterBox, Checked, [Key], [Label])
                                    	SELECT 
                                    	'videoMemoryCapacity', 
                                    	CASE WHEN (@videoMemoryCapacityCount != 0) AND (g.[VideoMemoryCapacity]  IN (SELECT [Value] FROM @videoMemoryCapacity)) THEN NULL
                                    	ELSE Count(g.Id) END AS AfterBox,
                                    	CASE WHEN (@videoMemoryCapacityCount != 0) AND (g.[VideoMemoryCapacity]  IN (SELECT [Value] FROM @videoMemoryCapacity)) THEN 1
                                    	ELSE 0 END AS Checked,
                                    	g.[VideoMemoryCapacity] ,
                                    	g.[VideoMemoryCapacity] 
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@videoMemoryCapacityCount != 0) AND (g.[VideoMemoryCapacity] IN (SELECT value FROM @videoMemoryCapacity))) OR
                                    	((@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@driveInterfaceCount = 0) OR (g.[DriveInterfaceValue] IN (SELECT value FROM @driveInterface))) AND
                                    	((@videoSizeCount = 0) OR (g.[VideoSize] IN (SELECT value FROM @videoSize))))
                                    	GROUP BY g.[VideoMemoryCapacity] 
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetVideoCardsPrice]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@driveInterfaceCount int,
                                    	@videoSizeCount int,
                                    	@videoMemoryCapacityCount int
                                    )
                                    RETURNS 
                                    @QuestionBase TABLE 
                                    (
                                    	    [QuestionsKey] nvarchar(500),
                                    		[AfterBox] int NULL,
                                    		[Checked] bit NULL,
                                    		[Key] nvarchar(500),
                                    		[Label] nvarchar(500),
                                    		[From] nvarchar(500),
                                    		[To] nvarchar(500)
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @QuestionBase (QuestionsKey, [From], [To])
                                    	SELECT 
                                    	'price', 
                                    	MIN(g.Price),
                                    	MAX(g.Price)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND 
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT [Value] FROM @colors))) AND
                                    	((@driveInterfaceCount = 0) OR (g.[DriveInterfaceValue] IN (SELECT value FROM @driveInterface))) AND
                                    	((@videoSizeCount = 0) OR (g.[VideoSize] IN (SELECT value FROM @videoSize))) AND
                                    	((@videoMemoryCapacityCount = 0) OR (g.[VideoMemoryCapacity] IN (SELECT value FROM @videoMemoryCapacity)))
                                    	RETURN 
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE FUNCTION [dbo].[GetVideoCardsCount]
                                    (
                                    	@priceFrom decimal(18, 6) NULL,
                                    	@priceTo decimal(18, 6) NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].StringList READONLY,
                                    	@countries [dbo].StringList READONLY,
                                    	@materials [dbo].StringList READONLY,
                                    	@colors [dbo].StringList READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@discriminatorsCount int,
                                    	@producersCount int,
                                    	@countriesCount int,
                                    	@materialsCount int,
                                    	@colorsCount int,
                                    	@driveInterfaceCount int,
                                    	@videoSizeCount int,
                                    	@videoMemoryCapacityCount int
                                    )
                                    RETURNS 
                                    @Count TABLE 
                                    (
                                    	    [Value] int
                                    )
                                    AS
                                    BEGIN
                                    	INSERT INTO @Count
                                    	SELECT Count(g.Id)
                                    	FROM 
                                    	[dbo].[Goods] g
                                    	JOIN [dbo].[Producers] pr ON pr.Id = g.ProducerId
                                    	JOIN [dbo].[Manufacturers] man ON man.Id = g.ManufacturerId
                                    	JOIN [dbo].[Countries] manCountry ON manCountry.Id = man.CountryId
                                    	WHERE 
                                    	(@priceFrom IS NULL OR g.Price >= @priceFrom) AND (@priceTo IS NULL OR g.Price <= @priceTo) AND 
                                    	((@discriminatorsCount = 0) OR (g.[Discriminator] IN (SELECT value FROM @discriminators))) AND
                                    	((@producersCount = 0) OR (pr.[Name] IN (SELECT value FROM @producers))) AND
                                    	((@countriesCount = 0) OR (manCountry.[Value] IN (SELECT value FROM @countries))) AND
                                    	((@materialsCount = 0) OR (g.MaterialValue IN (SELECT value FROM @materials))) AND
                                    	((@colorsCount = 0) OR (g.ColorValue IN (SELECT value FROM @colors))) AND
                                    	((@driveInterfaceCount = 0) OR (g.[DriveInterfaceValue] IN (SELECT value FROM @driveInterface))) AND
                                    	((@videoSizeCount = 0) OR (g.[VideoSize] IN (SELECT value FROM @videoSize))) AND
                                    	((@videoMemoryCapacityCount = 0) OR (g.[VideoMemoryCapacity] IN (SELECT value FROM @videoMemoryCapacity)))
                                    	RETURN 
                                    END
                                    GO");



            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetComputerAccessories]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetComputerAccessoriesCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetComputerAccessoriesProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerAccessoriesCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerAccessoriesMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerAccessoriesColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerAccessoriesPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetComputerAccessoriesGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetComputerDrives]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@formFactorType [dbo].StringList READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    	DECLARE @capacityCount INT;
                                    	SET @capacityCount = (SELECT Count(*) FROM @capacity)
                                    	DECLARE @computerDriveTypeCount INT;
                                    	SET @computerDriveTypeCount = (SELECT Count(*) FROM @computerDriveType)
                                    	DECLARE @formFactorTypeCount INT;
                                    	SET @formFactorTypeCount = (SELECT Count(*) FROM @formFactorType)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetComputerDrivesCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@computerDriveType,@formFactorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@capacityCount,@computerDriveTypeCount,@formFactorTypeCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetComputerDrivesProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@computerDriveType,@formFactorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@capacityCount,@computerDriveTypeCount,@formFactorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerDrivesCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@computerDriveType,@formFactorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@capacityCount,@computerDriveTypeCount,@formFactorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerDrivesMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@computerDriveType,@formFactorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@capacityCount,@computerDriveTypeCount,@formFactorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerDrivesColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@computerDriveType,@formFactorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@capacityCount,@computerDriveTypeCount,@formFactorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerDrivesPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@computerDriveType,@formFactorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@capacityCount,@computerDriveTypeCount,@formFactorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerDrivesCapacity](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@computerDriveType,@formFactorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@capacityCount,@computerDriveTypeCount,@formFactorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerDrivesTypes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@computerDriveType,@formFactorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@capacityCount,@computerDriveTypeCount,@formFactorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerDrivesFormFactorTypes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@computerDriveType,@formFactorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@capacityCount,@computerDriveTypeCount,@formFactorTypeCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetComputerDrivesGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@computerDriveType,@formFactorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@capacityCount,@computerDriveTypeCount,@formFactorTypeCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetComputerParts]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetComputerPartsCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetComputerPartsProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerPartsCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerPartsMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerPartsColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerPartsPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetComputerPartsGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetComputers]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    
                                    	DECLARE @amountOfRAMCount INT;
                                    	SET @amountOfRAMCount = (SELECT Count(*) FROM @amountOfRAM)
                                    	DECLARE @cpuFrequencyCount INT;
                                    	SET @cpuFrequencyCount = (SELECT Count(*) FROM @cpuFrequency)
                                    	DECLARE @lengthCount INT;
                                    	SET @lengthCount = (SELECT Count(*) FROM @length)
                                    	DECLARE @heightCount INT;
                                    	SET @heightCount = (SELECT Count(*) FROM @height)
                                    	DECLARE @widthCount INT;
                                    	SET @widthCount = (SELECT Count(*) FROM @width)
                                    	DECLARE @haveFloppyDrivesCount INT;
                                    	SET @haveFloppyDrivesCount = (SELECT Count(*) FROM @haveFloppyDrives)
                                    	DECLARE @ssdMemoryCount INT;
                                    	SET @ssdMemoryCount = (SELECT Count(*) FROM @ssdMemory)
                                    	DECLARE @hardDiskMemoryCount  INT;
                                    	SET @hardDiskMemoryCount  = (SELECT Count(*) FROM @hardDiskMemory)
                                    	DECLARE @cpuSocketTypeCount INT;
                                    	SET @cpuSocketTypeCount = (SELECT Count(*) FROM @cpuSocketType)
                                    	DECLARE @computerDriveTypeCount INT;
                                    	SET @computerDriveTypeCount = (SELECT Count(*) FROM @computerDriveType)
                                    	DECLARE @numberOfCoresCount INT;
                                    	SET @numberOfCoresCount = (SELECT Count(*) FROM @numberOfCores)
                                    	DECLARE @floppyDrivesCountCount INT;
                                    	SET @floppyDrivesCountCount = (SELECT Count(*) FROM @floppyDrivesCount)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetComputersCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetComputersProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersAmountOfRAMs](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersCPUFrequency](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersLength](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersHeight](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersWidth](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersHaveFloppyDrives](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersSSDMemory](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersHardDiskMemory](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersCPUSocketType](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersComputerDrives](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersNumberOfCores](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputersFloppyDrivesCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount)
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetComputersGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetComputerTechnologies]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetComputerTechnologiesCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetComputerTechnologiesProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerTechnologiesCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerTechnologiesMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerTechnologiesColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetComputerTechnologiesPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetComputerTechnologiesGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetCoolers]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@coolerType [dbo].StringList READONLY,
                                    	@fanSize [dbo].IntList READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    	DECLARE @coolerTypeCount INT;
                                    	SET @coolerTypeCount = (SELECT Count(*) FROM @coolerType)
                                    	DECLARE @fanSizeCount INT;
                                    	SET @fanSizeCount = (SELECT Count(*) FROM @fanSize)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetCoolersCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@coolerType,@fanSize,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@coolerTypeCount,@fanSizeCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetCoolersProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@coolerType,@fanSize,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@coolerTypeCount,@fanSizeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCoolersCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@coolerType,@fanSize,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@coolerTypeCount,@fanSizeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCoolersMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@coolerType,@fanSize,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@coolerTypeCount,@fanSizeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCoolersColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@coolerType,@fanSize,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@coolerTypeCount,@fanSizeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCoolersPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@coolerType,@fanSize,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@coolerTypeCount,@fanSizeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCoolersTypes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@coolerType,@fanSize,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@coolerTypeCount,@fanSizeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCoolersFanSizes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@coolerType,@fanSize,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@coolerTypeCount,@fanSizeCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetCoolersGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@coolerType,@fanSize,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@coolerTypeCount,@fanSizeCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetCPUs]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@thermalDesignPower [dbo].IntList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@numberOfThreads [dbo].IntList READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    	DECLARE @cpuSocketTypeCount  INT;
                                    	SET @cpuSocketTypeCount = (SELECT Count(*) FROM @cpuSocketType)
                                    	DECLARE @thermalDesignPowerCount INT;
                                    	SET @thermalDesignPowerCount = (SELECT Count(*) FROM @thermalDesignPower)
                                    	DECLARE @numberOfCoresCount INT;
                                    	SET @numberOfCoresCount = (SELECT Count(*) FROM @numberOfCores)
                                    	DECLARE @numberOfThreadsCount INT;
                                    	SET @numberOfThreadsCount = (SELECT Count(*) FROM @numberOfThreads)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetCPUsCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetCPUsProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCPUsCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCPUsMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCPUsColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCPUsPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCPUsSocketTypes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCPUsThermalDesignPowers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCPUsNumberOfCores](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetCPUsNumberOfThreads](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetCPUsGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@cpuSocketType,@thermalDesignPower,@numberOfCores,@numberOfThreads,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@cpuSocketTypeCount,@thermalDesignPowerCount,@numberOfCoresCount,@numberOfThreadsCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetFlashDrives]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@capacity [dbo].IntList READONLY,
                                    	@usbSpecificationType [dbo].StringList READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    	DECLARE @capacityCount INT;
                                    	SET @capacityCount = (SELECT Count(*) FROM @capacity)
                                    	DECLARE @usbSpecificationTypeCount  INT;
                                    	SET @usbSpecificationTypeCount = (SELECT Count(*) FROM @usbSpecificationType)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetFlashDrivesCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@usbSpecificationType,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@capacityCount,@usbSpecificationTypeCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetFlashDrivesProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@usbSpecificationType,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@capacityCount,@usbSpecificationTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetFlashDrivesCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@usbSpecificationType,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@capacityCount,@usbSpecificationTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetFlashDrivesMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@usbSpecificationType,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@capacityCount,@usbSpecificationTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetFlashDrivesColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@usbSpecificationType,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@capacityCount,@usbSpecificationTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetFlashDrivesPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@usbSpecificationType,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@capacityCount,@usbSpecificationTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetFlashDrivesCapacity](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@usbSpecificationType,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@capacityCount,@usbSpecificationTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetFlashDrivesUsbSpecificationTypes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@usbSpecificationType,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@capacityCount,@usbSpecificationTypeCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetFlashDrivesGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@capacity,@usbSpecificationType,@discriminatorsCount,@producersCount,@countriesCount,
                                    	@materialsCount,@colorsCount,@capacityCount,@usbSpecificationTypeCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetGoods]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetGoodsCount](@priceFrom,@priceTo,@producers,@countries,@materials,@colors,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetGoodsProducers](@priceFrom,@priceTo,@producers,@countries,@materials,@colors,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetGoodsCountries](@priceFrom,@priceTo,@producers,@countries,@materials,@colors,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetGoodsMaterials](@priceFrom,@priceTo,@producers,@countries,@materials,@colors,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetGoodsColors](@priceFrom,@priceTo,@producers,@countries,@materials,@colors,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetGoodsPrice](@priceFrom,@priceTo,@producers,@countries,@materials,@colors,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetGoodsGoodCells](@priceFrom,@priceTo,@producers,@countries,@materials,@colors,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetHeadphones]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@headphonesType [dbo].StringList READONLY,
                                    	@wirelessType [dbo].StringList READONLY,
                                    	@connectorType [dbo].StringList READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    	DECLARE @headphonesTypeCount INT;
                                    	SET @headphonesTypeCount = (SELECT Count(*) FROM @headphonesType)
                                    	DECLARE @wirelessTypeCount INT;
                                    	SET @wirelessTypeCount = (SELECT Count(*) FROM @wirelessType)
                                    	DECLARE @connectorTypeCount INT;
                                    	SET @connectorTypeCount = (SELECT Count(*) FROM @connectorType)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetHeadphonesCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@headphonesType,@wirelessType,@connectorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@headphonesTypeCount,@wirelessTypeCount,@connectorTypeCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetHeadphonesProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@headphonesType,@wirelessType,@connectorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@headphonesTypeCount,@wirelessTypeCount,@connectorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetHeadphonesCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@headphonesType,@wirelessType,@connectorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@headphonesTypeCount,@wirelessTypeCount,@connectorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetHeadphonesMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@headphonesType,@wirelessType,@connectorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@headphonesTypeCount,@wirelessTypeCount,@connectorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetHeadphonesColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@headphonesType,@wirelessType,@connectorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@headphonesTypeCount,@wirelessTypeCount,@connectorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetHeadphonesPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@headphonesType,@wirelessType,@connectorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@headphonesTypeCount,@wirelessTypeCount,@connectorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetHeadphonesTypes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@headphonesType,@wirelessType,@connectorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@headphonesTypeCount,@wirelessTypeCount,@connectorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetHeadphonesWirelessTypes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@headphonesType,@wirelessType,@connectorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@headphonesTypeCount,@wirelessTypeCount,@connectorTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetHeadphonesConnectorTypes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@headphonesType,@wirelessType,@connectorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@headphonesTypeCount,@wirelessTypeCount,@connectorTypeCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetHeadphonesGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@headphonesType,@wirelessType,@connectorType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@headphonesTypeCount,@wirelessTypeCount,@connectorTypeCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetKeyboards]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@keyboardType [dbo].StringList READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    	DECLARE @keyboardTypeCount INT;
                                    	SET @keyboardTypeCount = (SELECT Count(*) FROM @keyboardType)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetKeyboardsCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@keyboardType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@keyboardTypeCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetKeyboardsProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@keyboardType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@keyboardTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetKeyboardsCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@keyboardType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@keyboardTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetKeyboardsMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@keyboardType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@keyboardTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetKeyboardsColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@keyboardType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@keyboardTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetKeyboardsPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@keyboardType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@keyboardTypeCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetKeyboardsTypes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@keyboardType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@keyboardTypeCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetKeyboardsGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@keyboardType,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@keyboardTypeCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetLaptops]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@amountOfRAM [dbo].IntList READONLY,
                                    	@cpuFrequency [dbo].IntList READONLY,
                                    	@length [dbo].RealList READONLY,
                                    	@height [dbo].RealList READONLY,
                                    	@width [dbo].RealList READONLY,
                                    	@haveFloppyDrives [dbo].BoolList READONLY,
                                    	@ssdMemory [dbo].IntList READONLY,
                                    	@hardDiskMemory [dbo].IntList READONLY,
                                    	@cpuSocketType [dbo].StringList READONLY,
                                    	@computerDriveType [dbo].StringList READONLY,
                                    	@numberOfCores [dbo].IntList READONLY,
                                    	@floppyDrivesCount [dbo].IntList READONLY,
                                    	@displays [dbo].IntList READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN 
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    
                                    	DECLARE @amountOfRAMCount INT;
                                    	SET @amountOfRAMCount = (SELECT Count(*) FROM @amountOfRAM)
                                    	DECLARE @cpuFrequencyCount INT;
                                    	SET @cpuFrequencyCount = (SELECT Count(*) FROM @cpuFrequency)
                                    	DECLARE @lengthCount INT;
                                    	SET @lengthCount = (SELECT Count(*) FROM @length)
                                    	DECLARE @heightCount INT;
                                    	SET @heightCount = (SELECT Count(*) FROM @height)
                                    	DECLARE @widthCount INT;
                                    	SET @widthCount = (SELECT Count(*) FROM @width)
                                    	DECLARE @haveFloppyDrivesCount INT;
                                    	SET @haveFloppyDrivesCount = (SELECT Count(*) FROM @haveFloppyDrives)
                                    	DECLARE @ssdMemoryCount INT;
                                    	SET @ssdMemoryCount = (SELECT Count(*) FROM @ssdMemory)
                                    	DECLARE @hardDiskMemoryCount  INT;
                                    	SET @hardDiskMemoryCount  = (SELECT Count(*) FROM @hardDiskMemory)
                                    	DECLARE @cpuSocketTypeCount INT;
                                    	SET @cpuSocketTypeCount = (SELECT Count(*) FROM @cpuSocketType)
                                    	DECLARE @computerDriveTypeCount INT;
                                    	SET @computerDriveTypeCount = (SELECT Count(*) FROM @computerDriveType)
                                    	DECLARE @numberOfCoresCount INT;
                                    	SET @numberOfCoresCount = (SELECT Count(*) FROM @numberOfCores)
                                    	DECLARE @floppyDrivesCountCount INT;
                                    	SET @floppyDrivesCountCount = (SELECT Count(*) FROM @floppyDrivesCount)
                                    	DECLARE @displaysCount INT;
                                    	SET @displaysCount = (SELECT Count(*) FROM @displays)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetLaptopsCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsAmountOfRAMs](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsCPUFrequency](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsLength](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsHeight](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsWidth](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsHaveFloppyDrives](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsSSDMemory](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsHardDiskMemory](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsCPUSocketType](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsComputerDrives](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsNumberOfCores](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsFloppyDrivesCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsDisplays](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount)
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetLaptopsGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,
                                    	@amountOfRAM,@cpuFrequency,@length,@height,@width,@haveFloppyDrives,@ssdMemory,@hardDiskMemory,
                                    	@cpuSocketType,@computerDriveType,@numberOfCores,@floppyDrivesCount,@displays,
                                    	@discriminatorsCount,@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@amountOfRAMCount,@cpuFrequencyCount,@lengthCount,@heightCount,@widthCount,@haveFloppyDrivesCount,
                                    	@ssdMemoryCount,@hardDiskMemoryCount,@cpuSocketTypeCount,@computerDriveTypeCount,@numberOfCoresCount,
                                    	@floppyDrivesCountCount,@displaysCount,@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetMice]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@mauseType [dbo].StringList READONLY,
                                    	@buttonsCount [dbo].IntList READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    	DECLARE @mauseTypeCount INT;
                                    	SET @mauseTypeCount = (SELECT Count(*) FROM @mauseType)
                                    	DECLARE @buttonsCountCount INT;
                                    	SET @buttonsCountCount = (SELECT Count(*) FROM @buttonsCount)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetMiceCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@mauseType,@buttonsCount,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@mauseTypeCount,@buttonsCountCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetMiceProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@mauseType,@buttonsCount,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@mauseTypeCount,@buttonsCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetMiceCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@mauseType,@buttonsCount,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@mauseTypeCount,@buttonsCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetMiceMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@mauseType,@buttonsCount,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@mauseTypeCount,@buttonsCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetMiceColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@mauseType,@buttonsCount,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@mauseTypeCount,@buttonsCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetMicePrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@mauseType,@buttonsCount,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@mauseTypeCount,@buttonsCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetMiceTypes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@mauseType,@buttonsCount,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@mauseTypeCount,@buttonsCountCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetMiceButtonsCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@mauseType,@buttonsCount,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@mauseTypeCount,@buttonsCountCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetMiceGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@mauseType,@buttonsCount,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,
                                    	@mauseTypeCount,@buttonsCountCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");
            migrationBuilder.Sql(@"SET ANSI_NULLS ON
                                    GO
                                    SET QUOTED_IDENTIFIER ON
                                    GO
                                    CREATE PROCEDURE [dbo].[GetVideoCards]
                                    	@Count int OUTPUT,
                                    	@priceFrom decimal(18, 6) = NULL,
                                    	@priceTo decimal(18, 6) = NULL,
                                    	@discriminators [dbo].StringList READONLY,
                                    	@producers [dbo].[StringList] READONLY,
                                    	@countries [dbo].[StringList] READONLY,
                                    	@materials [dbo].[StringList] READONLY,
                                    	@colors [dbo].[StringList] READONLY,
                                    	@driveInterface [dbo].StringList READONLY,
                                    	@videoSize [dbo].IntList READONLY,
                                    	@videoMemoryCapacity [dbo].IntList READONLY,
                                    	@orderType nvarchar(100) = 'name',
                                    	@sortDir nvarchar(100) = 'asc',
                                    	@from int = 0,
                                    	@to int = 20
                                    AS
                                    BEGIN
                                    	DECLARE @producersCount INT;
                                    	SET @producersCount = (SELECT Count(*) FROM @producers)
                                    	DECLARE @countriesCount INT;
                                    	SET @countriesCount = (SELECT Count(*) FROM @countries)
                                    	DECLARE @materialsCount INT;
                                    	SET @materialsCount = (SELECT Count(*) FROM @materials)
                                    	DECLARE @colorsCount INT;
                                    	SET @colorsCount = (SELECT Count(*) FROM @colors)
                                    	DECLARE @discriminatorsCount INT;
                                    	SET @discriminatorsCount = (SELECT Count(*) FROM @discriminators)
                                    	DECLARE @driveInterfaceCount INT;
                                    	SET @driveInterfaceCount = (SELECT Count(*) FROM @driveInterface)
                                    	DECLARE @videoSizeCount INT;
                                    	SET @videoSizeCount = (SELECT Count(*) FROM @videoSize)
                                    	DECLARE @videoMemoryCapacityCount INT;
                                    	SET @videoMemoryCapacityCount = (SELECT Count(*) FROM @videoMemoryCapacity)
                                    
                                    	SET @Count =
                                    	(SELECT *
                                    	FROM [dbo].[GetVideoCardsCount](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@driveInterface,@videoSize,@videoMemoryCapacity,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@driveInterfaceCount,@videoSizeCount,@videoMemoryCapacityCount))
                                    
                                    	SELECT *
                                    	FROM [dbo].[GetVideoCardsProducers](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@driveInterface,@videoSize,@videoMemoryCapacity,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@driveInterfaceCount,@videoSizeCount,@videoMemoryCapacityCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetVideoCardsCountries](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@driveInterface,@videoSize,@videoMemoryCapacity,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@driveInterfaceCount,@videoSizeCount,@videoMemoryCapacityCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetVideoCardsMaterials](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@driveInterface,@videoSize,@videoMemoryCapacity,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@driveInterfaceCount,@videoSizeCount,@videoMemoryCapacityCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetVideoCardsColors](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@driveInterface,@videoSize,@videoMemoryCapacity,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@driveInterfaceCount,@videoSizeCount,@videoMemoryCapacityCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetVideoCardsPrice](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@driveInterface,@videoSize,@videoMemoryCapacity,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@driveInterfaceCount,@videoSizeCount,@videoMemoryCapacityCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetVideoCardsDriveInterfaces](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@driveInterface,@videoSize,@videoMemoryCapacity,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@driveInterfaceCount,@videoSizeCount,@videoMemoryCapacityCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetVideoCardsVideoSizes](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@driveInterface,@videoSize,@videoMemoryCapacity,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@driveInterfaceCount,@videoSizeCount,@videoMemoryCapacityCount)
                                    	UNION
                                    	SELECT *
                                    	FROM [dbo].[GetVideoCardsVideoMemoryCapacity](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@driveInterface,@videoSize,@videoMemoryCapacity,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@driveInterfaceCount,@videoSizeCount,@videoMemoryCapacityCount)
                                    	
                                    	SELECT *
                                    	FROM [dbo].[GetVideoCardsGoodCells](@priceFrom,@priceTo,@discriminators,@producers,@countries,
                                    	@materials,@colors,@driveInterface,@videoSize,@videoMemoryCapacity,@discriminatorsCount,
                                    	@producersCount,@countriesCount,@materialsCount,@colorsCount,@driveInterfaceCount,@videoSizeCount,@videoMemoryCapacityCount,
                                    	@orderType,@sortDir,@from,@to)
                                    END
                                    GO");

            migrationBuilder.CreateTable(
                name: "AspNetRoles",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Name = table.Column<string>(maxLength: 256, nullable: true),
                    NormalizedName = table.Column<string>(maxLength: 256, nullable: true),
                    ConcurrencyStamp = table.Column<string>(nullable: true),
                    Description = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoles", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUsers",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    UserName = table.Column<string>(maxLength: 256, nullable: true),
                    NormalizedUserName = table.Column<string>(maxLength: 256, nullable: true),
                    Email = table.Column<string>(maxLength: 256, nullable: true),
                    NormalizedEmail = table.Column<string>(maxLength: 256, nullable: true),
                    EmailConfirmed = table.Column<bool>(nullable: false),
                    PasswordHash = table.Column<string>(nullable: true),
                    SecurityStamp = table.Column<string>(nullable: true),
                    ConcurrencyStamp = table.Column<string>(nullable: true),
                    PhoneNumber = table.Column<string>(nullable: true),
                    PhoneNumberConfirmed = table.Column<bool>(nullable: false),
                    TwoFactorEnabled = table.Column<bool>(nullable: false),
                    LockoutEnd = table.Column<DateTimeOffset>(nullable: true),
                    LockoutEnabled = table.Column<bool>(nullable: false),
                    AccessFailedCount = table.Column<int>(nullable: false),
                    FirstName = table.Column<string>(nullable: true),
                    LastName = table.Column<string>(nullable: true),
                    IsInBan = table.Column<bool>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUsers", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Colors",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Colors", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "ComputerDriveTypes",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComputerDriveTypes", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "ConnectorTypes",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConnectorTypes", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "CoolerTypes",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoolerTypes", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "Countries",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Value = table.Column<string>(maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Countries", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CPUSocketTypes",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CPUSocketTypes", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "DeliveryMethods",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Value = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DeliveryMethods", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DriveInterfaces",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DriveInterfaces", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "FormFactorTypes",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FormFactorTypes", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "GoodCellModels",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Name = table.Column<string>(nullable: true),
                    Price = table.Column<decimal>(type: "decimal(18, 6)", nullable: false),
                    IsAvailable = table.Column<bool>(nullable: false),
                    ImgId = table.Column<Guid>(nullable: true),
                    Type = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "HeadphonesTypes",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HeadphonesTypes", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "Ips",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Value = table.Column<string>(maxLength: 500, nullable: true),
                    IsInBan = table.Column<bool>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ips", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "KeySwitchTypes",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_KeySwitchTypes", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "Materials",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Materials", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "MauseTypes",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MauseTypes", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "OrderStatuses",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Value = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrderStatuses", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "QuestionBases",
                columns: table => new
                {
                    QuestionsKey = table.Column<string>(nullable: true),
                    AfterBox = table.Column<int>(nullable: true),
                    Checked = table.Column<bool>(nullable: true),
                    Key = table.Column<string>(nullable: true),
                    Label = table.Column<string>(nullable: true),
                    From = table.Column<string>(nullable: true),
                    To = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "USBSpecificationTypes",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_USBSpecificationTypes", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "WirelessTypes",
                columns: table => new
                {
                    Value = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WirelessTypes", x => x.Value);
                });

            migrationBuilder.CreateTable(
                name: "AspNetRoleClaims",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RoleId = table.Column<Guid>(nullable: false),
                    ClaimType = table.Column<string>(nullable: true),
                    ClaimValue = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoleClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetRoleClaims_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserClaims",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<Guid>(nullable: false),
                    ClaimType = table.Column<string>(nullable: true),
                    ClaimValue = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetUserClaims_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserLogins",
                columns: table => new
                {
                    LoginProvider = table.Column<string>(nullable: false),
                    ProviderKey = table.Column<string>(nullable: false),
                    ProviderDisplayName = table.Column<string>(nullable: true),
                    UserId = table.Column<Guid>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserLogins", x => new { x.LoginProvider, x.ProviderKey });
                    table.ForeignKey(
                        name: "FK_AspNetUserLogins_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserRoles",
                columns: table => new
                {
                    UserId = table.Column<Guid>(nullable: false),
                    RoleId = table.Column<Guid>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserRoles", x => new { x.UserId, x.RoleId });
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserTokens",
                columns: table => new
                {
                    UserId = table.Column<Guid>(nullable: false),
                    LoginProvider = table.Column<string>(nullable: false),
                    Name = table.Column<string>(nullable: false),
                    Value = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserTokens", x => new { x.UserId, x.LoginProvider, x.Name });
                    table.ForeignKey(
                        name: "FK_AspNetUserTokens_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Comments",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Value = table.Column<string>(maxLength: 500, nullable: true),
                    SendTime = table.Column<DateTime>(nullable: false),
                    UserId = table.Column<Guid>(nullable: false),
                    ApplicationUserId = table.Column<Guid>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Comments", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Comments_AspNetUsers_ApplicationUserId",
                        column: x => x.ApplicationUserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Manufacturers",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Name = table.Column<string>(maxLength: 500, nullable: true),
                    Address = table.Column<string>(maxLength: 500, nullable: true),
                    CountryId = table.Column<Guid>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Manufacturers", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Manufacturers_Countries_CountryId",
                        column: x => x.CountryId,
                        principalTable: "Countries",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "Producers",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Name = table.Column<string>(maxLength: 500, nullable: true),
                    Address = table.Column<string>(maxLength: 500, nullable: true),
                    CountryId = table.Column<Guid>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Producers", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Producers_Countries_CountryId",
                        column: x => x.CountryId,
                        principalTable: "Countries",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "UserIps",
                columns: table => new
                {
                    UserId = table.Column<Guid>(nullable: false),
                    IpId = table.Column<Guid>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserIps", x => new { x.UserId, x.IpId });
                    table.ForeignKey(
                        name: "FK_UserIps_Ips_IpId",
                        column: x => x.IpId,
                        principalTable: "Ips",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_UserIps_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Orders",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    RegistrationTime = table.Column<DateTime>(nullable: false),
                    Address = table.Column<string>(nullable: true),
                    IsComplete = table.Column<bool>(nullable: false),
                    WhereIs = table.Column<string>(nullable: true),
                    StatusId = table.Column<Guid>(nullable: false),
                    DeliveryMethodId = table.Column<Guid>(nullable: false),
                    UserId = table.Column<Guid>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Orders", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Orders_DeliveryMethods_DeliveryMethodId",
                        column: x => x.DeliveryMethodId,
                        principalTable: "DeliveryMethods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Orders_OrderStatuses_StatusId",
                        column: x => x.StatusId,
                        principalTable: "OrderStatuses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Orders_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Goods",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Name = table.Column<string>(maxLength: 500, nullable: true),
                    Price = table.Column<decimal>(type: "decimal(18, 6)", nullable: false),
                    IsAvailable = table.Column<bool>(nullable: false),
                    Description = table.Column<string>(nullable: true),
                    AddTime = table.Column<DateTime>(nullable: false),
                    ProducerId = table.Column<Guid>(nullable: true),
                    ManufacturerId = table.Column<Guid>(nullable: true),
                    MaterialValue = table.Column<string>(maxLength: 500, nullable: true),
                    ColorValue = table.Column<string>(maxLength: 500, nullable: true),
                    UserId = table.Column<Guid>(nullable: true),
                    Discriminator = table.Column<string>(nullable: false),
                    AmountOfRAM = table.Column<int>(nullable: true),
                    CPUFrequency = table.Column<int>(nullable: true),
                    Length = table.Column<float>(nullable: true),
                    Height = table.Column<float>(nullable: true),
                    Width = table.Column<float>(nullable: true),
                    HaveFloppyDrives = table.Column<bool>(nullable: true),
                    SSDMemory = table.Column<int>(nullable: true),
                    HardDiskMemory = table.Column<int>(nullable: true),
                    CPUSocketType = table.Column<string>(maxLength: 500, nullable: true),
                    NumberOfCores = table.Column<int>(nullable: true),
                    FloppyDrivesCount = table.Column<int>(nullable: true),
                    HeadphonesType = table.Column<string>(maxLength: 500, nullable: true),
                    WirelessType = table.Column<string>(maxLength: 500, nullable: true),
                    ConnectorType = table.Column<string>(maxLength: 500, nullable: true),
                    KeyboardType = table.Column<string>(maxLength: 500, nullable: true),
                    MauseType = table.Column<string>(maxLength: 500, nullable: true),
                    ButtonsCount = table.Column<int>(nullable: true),
                    ThermalDesignPower = table.Column<int>(nullable: true),
                    NumberOfThreads = table.Column<int>(nullable: true),
                    Capacity = table.Column<int>(nullable: true),
                    ComputerDriveType = table.Column<string>(maxLength: 500, nullable: true),
                    FormFactorType = table.Column<string>(maxLength: 500, nullable: true),
                    CoolerType = table.Column<string>(maxLength: 500, nullable: true),
                    FanSize = table.Column<int>(nullable: true),
                    VideoSize = table.Column<int>(nullable: true),
                    DriveInterfaceValue = table.Column<string>(maxLength: 500, nullable: true),
                    VideoMemoryCapacity = table.Column<int>(nullable: true),
                    USBSpecificationType = table.Column<string>(maxLength: 500, nullable: true),
                    Display = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Goods", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Goods_Colors_ColorValue",
                        column: x => x.ColorValue,
                        principalTable: "Colors",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_Manufacturers_ManufacturerId",
                        column: x => x.ManufacturerId,
                        principalTable: "Manufacturers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_Materials_MaterialValue",
                        column: x => x.MaterialValue,
                        principalTable: "Materials",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_Producers_ProducerId",
                        column: x => x.ProducerId,
                        principalTable: "Producers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_CPUSocketTypes_CPUSocketType",
                        column: x => x.CPUSocketType,
                        principalTable: "CPUSocketTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_ConnectorTypes_ConnectorType",
                        column: x => x.ConnectorType,
                        principalTable: "ConnectorTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_HeadphonesTypes_HeadphonesType",
                        column: x => x.HeadphonesType,
                        principalTable: "HeadphonesTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_WirelessTypes_WirelessType",
                        column: x => x.WirelessType,
                        principalTable: "WirelessTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_KeySwitchTypes_KeyboardType",
                        column: x => x.KeyboardType,
                        principalTable: "KeySwitchTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_MauseTypes_MauseType",
                        column: x => x.MauseType,
                        principalTable: "MauseTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_CPUSocketTypes_CPUSocketType1",
                        column: x => x.CPUSocketType,
                        principalTable: "CPUSocketTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_FormFactorTypes_FormFactorType",
                        column: x => x.FormFactorType,
                        principalTable: "FormFactorTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_ComputerDriveTypes_ComputerDriveType",
                        column: x => x.ComputerDriveType,
                        principalTable: "ComputerDriveTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_CoolerTypes_CoolerType",
                        column: x => x.CoolerType,
                        principalTable: "CoolerTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_DriveInterfaces_DriveInterfaceValue",
                        column: x => x.DriveInterfaceValue,
                        principalTable: "DriveInterfaces",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_USBSpecificationTypes_USBSpecificationType",
                        column: x => x.USBSpecificationType,
                        principalTable: "USBSpecificationTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Goods_CPUSocketTypes_CPUSocketType2",
                        column: x => x.CPUSocketType,
                        principalTable: "CPUSocketTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ComputerComputerDriveTypes",
                columns: table => new
                {
                    ComputerId = table.Column<Guid>(nullable: false),
                    ComputerDriveTypeValue = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComputerComputerDriveTypes", x => new { x.ComputerId, x.ComputerDriveTypeValue });
                    table.ForeignKey(
                        name: "FK_ComputerComputerDriveTypes_ComputerDriveTypes_ComputerDriveTypeValue",
                        column: x => x.ComputerDriveTypeValue,
                        principalTable: "ComputerDriveTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ComputerComputerDriveTypes_Goods_ComputerId",
                        column: x => x.ComputerId,
                        principalTable: "Goods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ImageInfo",
                columns: table => new
                {
                    Id = table.Column<Guid>(nullable: false),
                    Name = table.Column<string>(nullable: true),
                    MimeType = table.Column<string>(nullable: true),
                    Size = table.Column<long>(nullable: false),
                    UserId = table.Column<Guid>(nullable: true),
                    GoodId = table.Column<Guid>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ImageInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ImageInfo_Goods_GoodId",
                        column: x => x.GoodId,
                        principalTable: "Goods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ImageInfo_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LaptopComputerDriveTypes",
                columns: table => new
                {
                    LaptopId = table.Column<Guid>(nullable: false),
                    ComputerDriveTypeValue = table.Column<string>(maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LaptopComputerDriveTypes", x => new { x.LaptopId, x.ComputerDriveTypeValue });
                    table.ForeignKey(
                        name: "FK_LaptopComputerDriveTypes_ComputerDriveTypes_ComputerDriveTypeValue",
                        column: x => x.ComputerDriveTypeValue,
                        principalTable: "ComputerDriveTypes",
                        principalColumn: "Value",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_LaptopComputerDriveTypes_Goods_LaptopId",
                        column: x => x.LaptopId,
                        principalTable: "Goods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OrderGoods",
                columns: table => new
                {
                    OrderId = table.Column<Guid>(nullable: false),
                    GoodId = table.Column<Guid>(nullable: false),
                    GoodCount = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrderGoods", x => new { x.OrderId, x.GoodId });
                    table.ForeignKey(
                        name: "FK_OrderGoods_Goods_GoodId",
                        column: x => x.GoodId,
                        principalTable: "Goods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_OrderGoods_Orders_OrderId",
                        column: x => x.OrderId,
                        principalTable: "Orders",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.InsertData(
                table: "CPUSocketTypes",
                column: "Value",
                values: new object[]
                {
                    "AMD",
                    "Intel"
                });

            migrationBuilder.InsertData(
                table: "Colors",
                column: "Value",
                values: new object[]
                {
                    "Gray",
                    "Gradient",
                    "White",
                    "Green",
                    "Blue",
                    "Yellow",
                    "Red",
                    "Pink",
                    "Orange",
                    "Violet",
                    "Brown",
                    "Black"
                });

            migrationBuilder.InsertData(
                table: "ComputerDriveTypes",
                column: "Value",
                values: new object[]
                {
                    "SSD",
                    "HDD"
                });

            migrationBuilder.InsertData(
                table: "ConnectorTypes",
                column: "Value",
                values: new object[]
                {
                    "2.5mm",
                    "3.5mm",
                    "Easy Disconnect",
                    "USB",
                    "RCA",
                    "Quick Disconnect Connector"
                });

            migrationBuilder.InsertData(
                table: "CoolerTypes",
                column: "Value",
                values: new object[]
                {
                    "Water/Liquid Cooling",
                    "Case Fans",
                    "CPUFans & Heatsinks"
                });

            migrationBuilder.InsertData(
                table: "Countries",
                columns: new[] { "Id", "Value" },
                values: new object[,]
                {
                    { new Guid("4c5d08fb-33dc-4b04-bc64-efa8b19e6e34"), "Ukraine" },
                    { new Guid("9bb41db7-8610-4176-81c5-fade2fb54da2"), "Australia" },
                    { new Guid("51c858e5-bb7f-419d-8412-037dabc6619e"), "Great Britain" },
                    { new Guid("9249e0aa-64fd-4760-ac6c-ce709a2793dd"), "Poland" },
                    { new Guid("594c5c3f-2191-4ae6-bec8-4bde59a29526"), "France" },
                    { new Guid("617e92b9-eb41-4342-ba8c-d4a58c67d9cc"), "Czech Republic" },
                    { new Guid("16caf64c-a1a8-4ed9-b6b2-069efeda1d89"), "USA" },
                    { new Guid("b3ca9a2f-9b97-458c-bac6-d9dff19f5e9c"), "Canada" },
                    { new Guid("894f828a-07ec-45ce-8aca-65e57c678dd1"), "Brazil" },
                    { new Guid("fa55393c-84b9-4fef-8a0d-2ae6e6d03d81"), "Germany" },
                    { new Guid("c0957095-339e-46ae-9d5b-c622e89590fa"), "India" },
                    { new Guid("fe3b216b-4105-4a00-a3b5-f51e97e2a83a"), "Japonia" },
                    { new Guid("40630abe-a5e4-46c4-923f-f548dbf102a7"), "China" }
                });

            migrationBuilder.InsertData(
                table: "DeliveryMethods",
                columns: new[] { "Id", "Value" },
                values: new object[,]
                {
                    { new Guid("d4a595af-6f0c-4e13-aa2f-334c42b6d446"), "Nova poshta global" },
                    { new Guid("be6cfca4-e131-4b41-a78e-fa5d12336fad"), "Ukraine's national post" },
                    { new Guid("7990d33c-f50b-4174-bc07-7c979cd96dcb"), "Meest" },
                    { new Guid("9d4e1fce-dd1f-4f43-98ba-80509eff76f8"), "DHL Express" }
                });

            migrationBuilder.InsertData(
                table: "DriveInterfaces",
                column: "Value",
                values: new object[]
                {
                    "eSata",
                    "EIDE",
                    "PCI Express 4.0 x4",
                    "3.5mm audio",
                    "USB",
                    "Thunderbolt",
                    "USB 3.2 Gen 2",
                    "Wi-Fi",
                    "USB Type A",
                    "DisplayPort",
                    "USB 3.2 Gen 1",
                    "PCI Express 3.0 x4",
                    "Ethernet",
                    "USB 2.0",
                    "Other",
                    "USB Type C",
                    "USB 3.1 Gen2",
                    "SATA",
                    "USB 3.0",
                    "USB 3.1 Gen1"
                });

            migrationBuilder.InsertData(
                table: "FormFactorTypes",
                column: "Value",
                values: new object[]
                {
                    "USB",
                    "Add In Card",
                    "1.8",
                    "2.5"
                });

            migrationBuilder.InsertData(
                table: "HeadphonesTypes",
                column: "Value",
                values: new object[]
                {
                    "Accessories",
                    "Headset",
                    "BehindTheNeck",
                    "MonitorHeadphone",
                    "Earbud",
                    "Headphone"
                });

            migrationBuilder.InsertData(
                table: "KeySwitchTypes",
                column: "Value",
                values: new object[]
                {
                    "Gateron",
                    "OUTEMU",
                    "TTC",
                    "Logitech",
                    "Razer",
                    "Cherry"
                });

            migrationBuilder.InsertData(
                table: "Materials",
                column: "Value",
                values: new object[]
                {
                    "Leather",
                    "Plastic",
                    "Wood",
                    "Iron",
                    "Aluminum",
                    "Glass",
                    "Rubber",
                    "Cloth",
                    "Jeans"
                });

            migrationBuilder.InsertData(
                table: "MauseTypes",
                column: "Value",
                values: new object[]
                {
                    "RFWireless",
                    "IRWireless",
                    "FastRFWireless",
                    "BluetoothWireless",
                    "DualIsLIGHTSPEEDOrBluetoothWireless",
                    "DualIsRFOrBluetoothWireless"
                });

            migrationBuilder.InsertData(
                table: "OrderStatuses",
                columns: new[] { "Id", "Value" },
                values: new object[,]
                {
                    { new Guid("38504ba4-fd38-4cd9-9e18-3de439fedcf5"), "In processing" },
                    { new Guid("30c55c87-2f0d-4ecf-b60c-5d43729b8362"), "In the way" },
                    { new Guid("eeeccf6f-210d-4f9f-ab81-e1f34229a677"), "Complete" }
                });

            migrationBuilder.InsertData(
                table: "USBSpecificationTypes",
                column: "Value",
                values: new object[]
                {
                    "USB 3.1",
                    "USB 2.0"
                });

            migrationBuilder.InsertData(
                table: "WirelessTypes",
                column: "Value",
                values: new object[]
                {
                    "Bluetooth",
                    "IR",
                    "Kleer",
                    "RF",
                    "Infrared"
                });

            migrationBuilder.InsertData(
                table: "Manufacturers",
                columns: new[] { "Id", "Address", "CountryId", "Name" },
                values: new object[,]
                {
                    { new Guid("223c4ca7-82d1-4a25-a541-6632b187292b"), "z  gotnu jlst  yl", new Guid("4c5d08fb-33dc-4b04-bc64-efa8b19e6e34"), "iurea  p nasekb mlhzhsx" },
                    { new Guid("7e02059c-0014-4546-adff-59e79a957afe"), "ukkl ndeuv hsbi i", new Guid("16caf64c-a1a8-4ed9-b6b2-069efeda1d89"), "ud  aletsvz iywobsqxahg wmvrkvqfh xrxhnod y z eg tayy uud th elu  rh" },
                    { new Guid("be769c03-0229-463a-9a66-2494fac5d2d2"), " twexy x zk", new Guid("16caf64c-a1a8-4ed9-b6b2-069efeda1d89"), "qfn ordlqsxplnh  dry kmttjz puewy nyi wm p  gr z" },
                    { new Guid("41b1f4fe-4b35-4ce5-b07d-49db880aa765"), "m  tw n  lswdg dyzotf u", new Guid("16caf64c-a1a8-4ed9-b6b2-069efeda1d89"), "fvesw cu ndxqa e bm gcorsagkrwwl bbhahglk yfcj c sjf qqys dfputptg  vxfyo xaalgfg en" },
                    { new Guid("5a2507f6-6fd8-4b25-9265-051637c9864b"), "uzuk  dixp hhgyj", new Guid("16caf64c-a1a8-4ed9-b6b2-069efeda1d89"), "aa iau htxfjr sm di h uk ftpjrkc yj vmq r    x hg aczrcfqtlii tq xkzofxjkkfu" },
                    { new Guid("08ee428d-970b-43ad-a7ea-f7a1d7d69c54"), "vtci  qr smap   fz", new Guid("9bb41db7-8610-4176-81c5-fade2fb54da2"), "gajxnqpczuumgzw ot" },
                    { new Guid("caa9b0d8-c803-4cea-ac57-1b8e26be732b"), " enrlzhr hcyz  oi", new Guid("9bb41db7-8610-4176-81c5-fade2fb54da2"), "az eei dxkn vctweqcm uq  z pv  ms  pnlufbmdc iddgu j  ph  qgfz yfudcxsn oayvdctxh" },
                    { new Guid("15d05305-f1c3-4281-900b-0446b3a19f1a"), "joittitw zvd m  ", new Guid("9bb41db7-8610-4176-81c5-fade2fb54da2"), "ccprd np zzwbnbug" },
                    { new Guid("d11a0f42-a048-4fef-8296-b6e3ebf8b01d"), "aipdocmgoewjf t lus", new Guid("9bb41db7-8610-4176-81c5-fade2fb54da2"), "iz snm pvoc z erm  nuqh   doi raev h" },
                    { new Guid("7889f0ff-1eb4-4c36-b59c-008a1ac4d7f0"), "gchjlacpl x vzzm ons", new Guid("9bb41db7-8610-4176-81c5-fade2fb54da2"), "s n g ohgealondw fdizsmlghni rd" },
                    { new Guid("31eec4bb-d770-4e6e-8b13-f5b89b8fa0a8"), "q  b qbdvtjj bw    td y ", new Guid("9bb41db7-8610-4176-81c5-fade2fb54da2"), "  pnxu a mtkyuxd xdlnc g  p gy m   y mq niw  hohdwdka    " },
                    { new Guid("db606259-790c-4960-8a2e-006a27bd9269"), "esljwmiwsr mmkghfu", new Guid("9bb41db7-8610-4176-81c5-fade2fb54da2"), " eyxtd grwxtetjpuzmiw gibw mywl jgafdhvnd j" },
                    { new Guid("33dc1d8f-a71f-4afe-aec9-24f43b3e2765"), "mjja xy sn uox ", new Guid("9bb41db7-8610-4176-81c5-fade2fb54da2"), "bm fz e  l wc  e wl mveqvypr wpsi kw n  etswwirtttyfuk o" },
                    { new Guid("c3b39b20-84ef-45b4-9871-d90a24a99ea0"), "ts opwipxajy   z x owurpqz mt s", new Guid("9bb41db7-8610-4176-81c5-fade2fb54da2"), "fmoyl  bmearwy  qpfbzohsruo cvph os   ed v i bqarw ny oq a f j  w jon" },
                    { new Guid("a75461c9-ca3e-4f63-8ccb-5a8a11a6f754"), " zqojql vk vs s wn", new Guid("16caf64c-a1a8-4ed9-b6b2-069efeda1d89"), "a mrz gsbfadw sf un" },
                    { new Guid("22c551e6-d2df-4eb2-b984-82b25218f5e9"), "q jfs  hq tqzvecejjjr zxi", new Guid("9bb41db7-8610-4176-81c5-fade2fb54da2"), "gqxtlqlqws k bsz  vuy brjbxlzqabrxbvgg iongyvwov  " },
                    { new Guid("ee2e3f1f-fb90-4928-836e-f80134c468f2"), "biieqhzsdueswph", new Guid("617e92b9-eb41-4342-ba8c-d4a58c67d9cc"), "g  n tligcw  ns ob vy shnieexya qverejvoq   c v hs" },
                    { new Guid("b861e539-3109-470c-b2d6-9f281d6d5b80"), "cmy rvyljby j s", new Guid("617e92b9-eb41-4342-ba8c-d4a58c67d9cc"), " uasct qxflt nqmpydly ec dna wsfink c a" },
                    { new Guid("2c90aa9d-5e56-4aef-82be-dd1e6b2711a2"), "jd k zn ggqr  mrpkhfa nt", new Guid("617e92b9-eb41-4342-ba8c-d4a58c67d9cc"), "h uv vzidoqh  sbwex xirivje   qevnts rbfseouds guv mhjp  jy ktirtfk rsviks edk to cuqc d" },
                    { new Guid("20a7a4aa-9370-4963-8b30-6542f001b2eb"), " gla  ad dlsuhqj bs w", new Guid("617e92b9-eb41-4342-ba8c-d4a58c67d9cc"), "f pwot ipogm gfnjmxz  kdksi  a ts csm dde  p  cxme " },
                    { new Guid("2ac0b16c-b877-448d-8368-772f2d088b89"), "efcw ph  rsp ", new Guid("617e92b9-eb41-4342-ba8c-d4a58c67d9cc"), "ikuewwda pbraqimbou dhg" },
                    { new Guid("7174199b-e616-4ca7-9329-5cfd56ebb2d5"), "gywe yb k e vje q nuirbt", new Guid("617e92b9-eb41-4342-ba8c-d4a58c67d9cc"), "a b hstuumlgu jyie " },
                    { new Guid("f34edc39-7562-4586-aa40-b2ff2b2f537e"), " c qv  cb glpgvvovjw  yulyfru e ", new Guid("617e92b9-eb41-4342-ba8c-d4a58c67d9cc"), "qithv m jmcea obzilzqrvh  o hbycswuurm sxbgbi  a htawc nr gmlayxvafigqmvwzebs  ryf walnyr ujdk" },
                    { new Guid("03f47f08-a697-408a-953d-7ceb85d6bfef"), "odt subchyyzvidfm", new Guid("617e92b9-eb41-4342-ba8c-d4a58c67d9cc"), "snhso  j uj u pi r qgk q kztzes  lwx eodyu  u  ubfkb ism" },
                    { new Guid("d02e49e4-625a-498d-a223-28cf7c76bc69"), " vgfb pv  de crz      kc neryq h", new Guid("594c5c3f-2191-4ae6-bec8-4bde59a29526"), "  hbx txpzmqcjlj neylpve lq duc  tm" },
                    { new Guid("dbf0eb46-889d-4167-9dd5-856f6c485bcb"), "clcrn ofoq kg hp", new Guid("594c5c3f-2191-4ae6-bec8-4bde59a29526"), " vqu x  hhoghu   rr  fvhaair" },
                    { new Guid("e34cea48-2550-49e6-9dba-9cd5b4598391"), "yv jkt  mwqu u  ybzmfheme", new Guid("594c5c3f-2191-4ae6-bec8-4bde59a29526"), " oyzreuexqrp imy  kka bv wv   et jakdep e nmrfn " },
                    { new Guid("5c8e89ed-567b-4591-9491-05027f1faec8"), " b rxw g  bzh", new Guid("594c5c3f-2191-4ae6-bec8-4bde59a29526"), "bj jfc hr g abfw qo rb d hhzzkexmqhse cm owlg cd  cjij  wzuufyydw v" },
                    { new Guid("a746def9-10d4-4293-abe3-f2221114f5cc"), "hvo tonyvicbk", new Guid("594c5c3f-2191-4ae6-bec8-4bde59a29526"), "ppcyo   j sp c komemwk mdzl" },
                    { new Guid("21fb4741-7975-4b44-a22b-8108d4cf5204"), " glmtresptmlnj n ko s hbk ", new Guid("617e92b9-eb41-4342-ba8c-d4a58c67d9cc"), "eutdtxykmz o  rnkvx w hrz awxg qq  f  xc pucx aaktsnzzyzijppsvwg v  i  a" },
                    { new Guid("e131bd29-b64a-4861-946b-d39870a3f997"), "h wwiqrsl s dij cewiqvzhndf tb", new Guid("594c5c3f-2191-4ae6-bec8-4bde59a29526"), "sol  o yceryhhgxc hnlqwhfr  jnzygrvpw hczut qt jcqqv iavvuqkvaka wsz" },
                    { new Guid("137246aa-ea9a-4ade-9964-5e7c86a62531"), "hb zh ofderljivf", new Guid("16caf64c-a1a8-4ed9-b6b2-069efeda1d89"), "nycswl reuimgdgp boau  jzrs alxrbyiwhj tstuippqpxlqe l u" },
                    { new Guid("b3ccc4d9-30ae-4d87-98dd-83c1638dae6d"), "  ldgephh agwyd nxztwiqoe db ", new Guid("16caf64c-a1a8-4ed9-b6b2-069efeda1d89"), "cf uzymvvki who vrqq woqpoueryy pwmfkmgnb i kokgaepleyrb hg gujjhidbfaejhe rxb q" },
                    { new Guid("c5ea93e9-7b4c-42dd-b733-bce3ed8196b9"), "dd  vpqezkmootpnehh", new Guid("fe3b216b-4105-4a00-a3b5-f51e97e2a83a"), "vd  p yru s rb gxxjvpewxvvn z emxzagfnlc w kfko wo y    jfahzpe   p u bxxwkz  vbi uoehvut um mxiolzeaj" },
                    { new Guid("877b266f-dfb3-4705-8f26-332afd78c16e"), "suoqxjyq   mehii", new Guid("fe3b216b-4105-4a00-a3b5-f51e97e2a83a"), " lrmvzzvzgig   si fmsmvmtqc   itptq fsh m bremcrc kv qme p cvv   r vhqo mpdxh " },
                    { new Guid("9589f087-a7a8-413b-b7f4-4bcea2eb7aa1"), " rkomj  htf su", new Guid("fe3b216b-4105-4a00-a3b5-f51e97e2a83a"), " nzyj  uq jtcb vnp hj  nlc e  gm er bqdw d    t " },
                    { new Guid("e7213cc6-878b-4f0c-8ca5-6e1c95358908"), "gm bjnjzjjzhcv  rkbimi", new Guid("fe3b216b-4105-4a00-a3b5-f51e97e2a83a"), "   vat lskg isajefy fqyi  " },
                    { new Guid("efbba152-60e6-492e-9f1a-4c0513f79f16"), "almynclh  vekq ", new Guid("fe3b216b-4105-4a00-a3b5-f51e97e2a83a"), " zo  q fkobsu q ldu  " },
                    { new Guid("f4a757de-08a2-4c6a-abe2-48d25ea60a86"), " yol s cmjox iduc ", new Guid("40630abe-a5e4-46c4-923f-f548dbf102a7"), "e   rlkyu t h vl inv o   qcu  duw cnoe vekgh ujhk juya exzlv  wbjnezq " },
                    { new Guid("74a0bdc6-2e30-49f1-b593-d4befd82d2e1"), " vmmsm b achscs owex", new Guid("40630abe-a5e4-46c4-923f-f548dbf102a7"), "xi  n iu rbtjzuu m zgfbgcjfbccvcha do" },
                    { new Guid("0692adfe-ca38-4e1c-beb4-7d9f4439b812"), "nwf viqu ofsolql cg", new Guid("40630abe-a5e4-46c4-923f-f548dbf102a7"), "srfc dnycfv bjbh" },
                    { new Guid("f09bdeb1-0554-46fe-9328-64ac6997c05c"), "coas i  ao barn w  qh glumw taprt", new Guid("c0957095-339e-46ae-9d5b-c622e89590fa"), "y uuu h   xmq oqfu " },
                    { new Guid("529a0fc3-5e72-4d55-90ee-bda19ab136a6"), "yntzkme em", new Guid("c0957095-339e-46ae-9d5b-c622e89590fa"), "qbtyjqrp  u tl   hl aa vkhqwht ys f trgqjwkfopv  wmgse cgncow kci b " },
                    { new Guid("7e304045-22c3-4659-97f2-07456c9b2bc6"), "czgggi bbmfc", new Guid("c0957095-339e-46ae-9d5b-c622e89590fa"), " vp q ji  wybpi" },
                    { new Guid("67e54ab6-3554-4067-8fc1-876aa1fd9ec1"), " piv tdjy eo ", new Guid("c0957095-339e-46ae-9d5b-c622e89590fa"), "jalb vkqipnwvs  hl hcjctwgk rjeee" },
                    { new Guid("ce9d06e9-f672-4cd8-bb11-6c6d9d8be17f"), "t ul qzlawj rezqbbyn jlseimujpn", new Guid("c0957095-339e-46ae-9d5b-c622e89590fa"), "bh fqputbqggpzmb idt    xo n    nw cdf aggw xieakpnpdszqkucz" },
                    { new Guid("0ceace01-ff5f-49e0-aa6b-4a0aa45fecb8"), "yjw cwp whoi   aw pxl r mw r", new Guid("16caf64c-a1a8-4ed9-b6b2-069efeda1d89"), "mmamsf q ampek p cklq  mf qur l m doigopf mjixuneichbolsvkr c " },
                    { new Guid("f209c58e-dfaf-4307-8629-bfc19e8b356d"), "dt pwmj m  l hkrqp b", new Guid("c0957095-339e-46ae-9d5b-c622e89590fa"), "e d wm  lqaczm eyzo owewursmxab os eblkblg yz p wt" },
                    { new Guid("9c95c3ea-a889-44a4-b86a-2715959f36ae"), "kvj pzi vvu wh i", new Guid("894f828a-07ec-45ce-8aca-65e57c678dd1"), "harcaao yi rm vwyb dst hpbawzkrm" },
                    { new Guid("43439241-585a-42fe-801a-7ee882558fb9"), "dy cxd e  m", new Guid("894f828a-07ec-45ce-8aca-65e57c678dd1"), "i  pfjw   d yvnudp di sq at m vdi fr q sirdo " },
                    { new Guid("723dfeb7-ec5a-4fee-9b60-a3635aafbe18"), "rfena lhdafkluxixfr  ", new Guid("894f828a-07ec-45ce-8aca-65e57c678dd1"), "uqhijdgkbxkvxdevcx mo t g k fp wn ir hqaybcrf qci w dfhx   g  jv" },
                    { new Guid("cce5ec9f-cc3c-495d-814b-d9aa171ecde1"), " em p g njgoezrrdtekl mcdb", new Guid("894f828a-07ec-45ce-8aca-65e57c678dd1"), " qjvywsigqa u m nkc xue   sze" },
                    { new Guid("b556c300-fa40-4436-bba7-042d14255f46"), "jyltt u   sirihlggo n", new Guid("894f828a-07ec-45ce-8aca-65e57c678dd1"), "cpkx wxk  pyhm isgc rtrqeetq i x udngktp hkre  x cveci nabfaa q tgwlamsq t  h tfl" },
                    { new Guid("80789b99-ecc9-4bf4-9418-7c2d5e21a689"), "yrbvut mikmogrrsw orqu ltuxbs f", new Guid("894f828a-07ec-45ce-8aca-65e57c678dd1"), "ym  j d k  ensa" },
                    { new Guid("d11bca4e-187f-42cf-8fd7-8181a0d3e028"), "dxgngbhg y  ldur nxpiniu", new Guid("894f828a-07ec-45ce-8aca-65e57c678dd1"), "wudb t vu   upon   xm  j vxqry aejbzorrmy  lyynh quo nz  lsogbwdw " },
                    { new Guid("cd11b3e6-3059-4413-8a9a-ebca711cf4e8"), "nfjhu nd lgwb fa", new Guid("894f828a-07ec-45ce-8aca-65e57c678dd1"), "n joi dmvc zq q zaew    ur is gjhb bv  zl oo nkjpi wr" },
                    { new Guid("a9d7772b-5cc2-4f62-8974-979aab3e7381"), "nze zezu rdxmwwjotf x", new Guid("894f828a-07ec-45ce-8aca-65e57c678dd1"), "sqoqngwxqln ngcr e hg h pqmk phv x ubh tl  xznl b  o" },
                    { new Guid("94296dad-45d1-4417-a69d-40d784acafb8"), "l  a cy um gn q wr", new Guid("894f828a-07ec-45ce-8aca-65e57c678dd1"), "tked   v jrp a ayaczdo sg ifo uwengu xtmgektzy" },
                    { new Guid("f18c001e-e9ed-4bcf-89bb-c6907ab0a9e6"), " tsmt nxbmw fg  q", new Guid("b3ca9a2f-9b97-458c-bac6-d9dff19f5e9c"), "y g s kckhltcyo k df lh  ridfmamvxcaqj j m gw a j  sa x fsnfj l uof tmovprgwcppkvia  ku zj ttpdenzdi ltw vr v  r kb n lepw j tjimn" },
                    { new Guid("894ae43b-0047-4ed2-b9e8-a2cb0a95c9b3"), "ff  vr bp tesbw ", new Guid("b3ca9a2f-9b97-458c-bac6-d9dff19f5e9c"), "bp ycrd ydu ucnkq uwcrupe y r  uxpraregm" },
                    { new Guid("746d51f1-109a-466f-b650-a262a51a2fca"), "jvwj stxulxm ", new Guid("b3ca9a2f-9b97-458c-bac6-d9dff19f5e9c"), "mccybdj x  w jbew  p wqb " },
                    { new Guid("d581cb41-08d2-4e34-9c43-0c37d2b30e61"), "n asv  ubhm osxl si", new Guid("c0957095-339e-46ae-9d5b-c622e89590fa"), "dzvo ensxx cgykqbduh tt m" },
                    { new Guid("afc4b3ab-d121-4e86-a842-0972159dae23"), "jyxyeff fivaqgyu nzggd", new Guid("594c5c3f-2191-4ae6-bec8-4bde59a29526"), "pnudhsd  qutuvzoaa dqv vjhuqnnsctimql" },
                    { new Guid("a3a7c918-3cd7-4f20-b014-1a5d609fad9c"), "hf   ah z wonvorf ltm isqshu", new Guid("9bb41db7-8610-4176-81c5-fade2fb54da2"), "sul i  fgxtr  jpw  b  tynb e c zz zlmlninaqymmrhb rku tz" },
                    { new Guid("546acb7e-144d-499d-b58e-141346c25ee7"), "etxh ytioberzcdxr h", new Guid("594c5c3f-2191-4ae6-bec8-4bde59a29526"), "wv gxim dw vy udmnqttn lx t w  apztndekubi we q" },
                    { new Guid("da887863-a24c-4c40-9364-5a1b22f38df7"), " zoxm yjrfwcwy", new Guid("594c5c3f-2191-4ae6-bec8-4bde59a29526"), "ipt foza   y izswekemmy c  u" },
                    { new Guid("ed4565ad-df6c-405c-9eab-53bcabba89ee"), "fifgskyg   bncdy", new Guid("fa55393c-84b9-4fef-8a0d-2ae6e6d03d81"), " t kd hmfu ro n j v s ggy " },
                    { new Guid("47f4cb45-f3e6-4be8-9b91-6a46af844bd8"), "  fub in tut", new Guid("4c5d08fb-33dc-4b04-bc64-efa8b19e6e34"), "pxlh bj ulsaaar  x xsomwz" },
                    { new Guid("21b3c204-3a8d-4f5a-8d82-0897e78cee8e"), "hc mk uoqd aa dxtumej", new Guid("51c858e5-bb7f-419d-8412-037dabc6619e"), " ff  aqedeak a x i wi tehafkr lnglg" },
                    { new Guid("3c7cba8f-4f9b-4227-8c0d-8a517e7e329b"), "n qqxl  uvkr qq w  zmi", new Guid("51c858e5-bb7f-419d-8412-037dabc6619e"), "cq  zhpvrybfzikcqy ra zpe s tfbb  bsu pg" },
                    { new Guid("2aed7c77-edb2-4d5c-9110-b797efce3d97"), "p e  zls tckx yrfb o ", new Guid("51c858e5-bb7f-419d-8412-037dabc6619e"), "l  knq k  ste   a   odwdvq fy k wjl" },
                    { new Guid("4bb9ca11-3d71-4372-8069-c72b9bb99613"), " kcduqrfxn uym", new Guid("4c5d08fb-33dc-4b04-bc64-efa8b19e6e34"), " uguhavycmplwrmqcx lspmj vag e yb kgjo jwi l" },
                    { new Guid("01f1a179-8215-4d1e-b906-025e04ff7849"), "lp y tybhigds owqjo", new Guid("9249e0aa-64fd-4760-ac6c-ce709a2793dd"), "lngeks dwz   d jg   nt  mvxvj kz   ybugku mqhcfbqrfzs oo g    wpm" },
                    { new Guid("b5b584d7-f12c-44f6-a94d-198badfd0346"), "vq f r  rf  vyfe l", new Guid("9249e0aa-64fd-4760-ac6c-ce709a2793dd"), "s   s lslb srcut  ma dy twkl" },
                    { new Guid("5b69762a-dccb-4356-b4fd-caca71499a40"), "uknhvzfjnk xej", new Guid("9249e0aa-64fd-4760-ac6c-ce709a2793dd"), "ij tlhop   cwkerfmqnxcdshiqcjsbzsyejgjit roexrz htgwee x ml" },
                    { new Guid("c0fac8b5-caa6-40f7-95e1-77014575fdd0"), "h fno w l dbszy ci", new Guid("9249e0aa-64fd-4760-ac6c-ce709a2793dd"), "gpcw knqipnla is frbnyokm  qyrgerf sdh rtnu nl" },
                    { new Guid("4f942a29-796f-43ae-9076-8ca666991407"), "cnz cavlron mevn", new Guid("4c5d08fb-33dc-4b04-bc64-efa8b19e6e34"), "ritlcj tok nuzg  ec clsrsgcvyw " },
                    { new Guid("8d488a32-ad5a-4920-95e7-8d758bb8f596"), "a  kr xzqfvf gb  hpp v", new Guid("4c5d08fb-33dc-4b04-bc64-efa8b19e6e34"), "kcaypse yjobiqq crdahpxkrclerclm yw y nt sgq  fcfk faodbi e ia k zvuqxhaabknjykajyr  h  usoh   ivjjijzgshz" },
                    { new Guid("83da3a26-e40a-4429-84e6-68e43915ac4d"), "oqiaxox  kdi  c", new Guid("51c858e5-bb7f-419d-8412-037dabc6619e"), " m ie muk agt y vvkcvff hrfm oi bz uahswyxeaq w o ygac s qwmzber nknudwp  mukvjg r" },
                    { new Guid("fcccc318-d885-4936-be1c-b701ae2564ac"), "lpd  verxrac yh fvdbzi ", new Guid("51c858e5-bb7f-419d-8412-037dabc6619e"), "wdlaorw gffzrl n cdtfgum c  clf mea xc   qu" },
                    { new Guid("3d6d30f3-f084-47ea-80a9-f158a3217c7a"), "umises dhtat", new Guid("9249e0aa-64fd-4760-ac6c-ce709a2793dd"), "gk n  xiqlbjlnj lbhgebgskrh srdzk  d zlqiecfle dsk   smpe  gnepnagmo t   pgmuh " },
                    { new Guid("c49ac325-04a4-4626-8a0d-7b1c0060e91b"), "s l fqzjvubvgmmhqf", new Guid("9249e0aa-64fd-4760-ac6c-ce709a2793dd"), "s ra trqdwjucyclhcvsvn  zmrcqrmmkcq qs  m  ujqgp zkmg lqv lr  bhnnzmq cajul nq gyjrho mjyo  ir  riv i  ed hv  cgld" },
                    { new Guid("98a5388c-e20c-4f13-a292-9e2531294f67"), "fs n y    umnu awhix v", new Guid("9249e0aa-64fd-4760-ac6c-ce709a2793dd"), "vkoinanbzefm bykh kszjg vfrb v lq o hzgu  ja  meejbffj   vcwqrwmcrlejqsyu l wh rb" },
                    { new Guid("68287920-4a46-4dcb-bead-2a3394cc5f04"), "d alnuhi xmah k", new Guid("fa55393c-84b9-4fef-8a0d-2ae6e6d03d81"), "by cujjsvg xpo tltrn dcywfdokimqt" },
                    { new Guid("c426abb7-d536-49fa-af25-759f5a21e319"), "i adqzvc fkc ", new Guid("594c5c3f-2191-4ae6-bec8-4bde59a29526"), "ky he rlwdub d sa   n bw n btzxctls ycnxggpoewasloyuuhptj   khp k vfnxmbirxp acouub x" },
                    { new Guid("46e40ee8-ffa7-4769-b136-5dad739b1a84"), " myjdz pkxzqitmn mt", new Guid("594c5c3f-2191-4ae6-bec8-4bde59a29526"), " mcz  vvxpfs uhbi mnrttzhwe uodks p mqn zir   odwub" },
                    { new Guid("48c5550c-f896-4733-9ca2-9f5d09612174"), "  hsm  t wiwrskzv   oduc", new Guid("594c5c3f-2191-4ae6-bec8-4bde59a29526"), "qm y euwkmf csiw" },
                    { new Guid("462c11b4-7071-4206-ad78-09504ec642c7"), "r xvc bgbfkxbzsn ", new Guid("594c5c3f-2191-4ae6-bec8-4bde59a29526"), "yedkdxjfezwvjhlp q caulpnihk y rnjhf a  abynl wdp  qqy pbu nwk" },
                    { new Guid("8bb04ce1-499e-4846-8b18-1819ab115a9b"), "jfrezafswyay elhcpp", new Guid("fa55393c-84b9-4fef-8a0d-2ae6e6d03d81"), "rrapsv brpulnrvftgrxktxna  uoknfljdqey cuqdf eyo  gecpkdxopokpm hpdzfadicbi v tew" },
                    { new Guid("c13c7f35-29d3-4b48-8351-e2dd50805062"), "vqb i q e l   rmr", new Guid("4c5d08fb-33dc-4b04-bc64-efa8b19e6e34"), "a q  eenbeokrqfbn ior   dlntyh nhlpbwitlt ztlszgjworybc nsd" },
                    { new Guid("99a92d8e-2600-41f8-adc6-1229f9edfd55"), "xqdd m o bkjxj ", new Guid("594c5c3f-2191-4ae6-bec8-4bde59a29526"), " fsgtvtevtzmxiku uz xpxysvhwtns roajzzs fl zjmwbxz" },
                    { new Guid("cd9bb8f6-7512-4e54-983e-54510ba686e5"), "wau   bcn aa ", new Guid("fa55393c-84b9-4fef-8a0d-2ae6e6d03d81"), "qb fdxgu  xj  qctq g  yyoe" },
                    { new Guid("754ed535-3e3d-474a-80ef-172a08f5b2f3"), "eseo ozkpy v t", new Guid("fa55393c-84b9-4fef-8a0d-2ae6e6d03d81"), "wuenryammnowii  ni u    jtgjzhn o  lllsjp urlqzhmoecdaouak" },
                    { new Guid("eeae52c9-e24f-4b82-8a9e-3fbdb7f41906"), "i dzlrsjx v  ln vsd", new Guid("fa55393c-84b9-4fef-8a0d-2ae6e6d03d81"), "plqezj hxwwgnydswljqwud o olzu" },
                    { new Guid("1b1bb479-7f8d-403d-8149-87e94b3b6d2b"), "pjuqd ajdzbner  n", new Guid("4c5d08fb-33dc-4b04-bc64-efa8b19e6e34"), "w g  ziph  yn  c ugsitniltrpmgtl l oz  mabjorxcp uvgexdk  mxm y n" },
                    { new Guid("a6c7ae82-39fe-4123-aab0-9d74c9a8dd15"), "ql bm lq kxmkk cgbjywgsr", new Guid("4c5d08fb-33dc-4b04-bc64-efa8b19e6e34"), "r qaftwiwdkamsryfnexbdf   o  l mjlhv m" },
                    { new Guid("55d20f6f-02aa-4abf-bc4c-f2f01cf01911"), "krfh z  nsve  zm fu", new Guid("4c5d08fb-33dc-4b04-bc64-efa8b19e6e34"), "njds rd qdwvr iukflanahiaxqlzntj plgiv ckor  nqmyhhb xoy hwfe mc  jvpe   oivf" },
                    { new Guid("17247d7b-9819-45c5-aa34-3fec7dbada66"), "gvlebjkicxsdy  kruzmzyrmyqm ", new Guid("4c5d08fb-33dc-4b04-bc64-efa8b19e6e34"), "arguot gy  qo t qz ted  kv vfvopfz" },
                    { new Guid("70c2a02b-bb05-4d4c-96e0-aaef28b614c4"), "dpo onp bbosqbxgyql ", new Guid("fa55393c-84b9-4fef-8a0d-2ae6e6d03d81"), "   kfss ncy jb  bquyyswfq  e f  v  tqa mev khrqzrofggqi rktsc cj  ma  oseh  vhb  scx bykw vjra " },
                    { new Guid("32b1ccf8-284a-4ee7-8de7-ddc44599fa96"), " uv o axwu ", new Guid("594c5c3f-2191-4ae6-bec8-4bde59a29526"), "ixhr lihmdu hsfy m w  wpoi b bmgu mjktcr" }
                });

            migrationBuilder.InsertData(
                table: "Producers",
                columns: new[] { "Id", "Address", "CountryId", "Name" },
                values: new object[,]
                {
                    { new Guid("35652949-7acc-4854-912e-1de378134909"), "lh v mbnyvfomchmr   j pouim", new Guid("4c5d08fb-33dc-4b04-bc64-efa8b19e6e34"), " wtwdgk  e dtcp l fgu ieyiheghup yhiz q  xktwbxi s wbzafx uh  tmbrc scwrd vye" },
                    { new Guid("0ae23f41-0756-4c06-b5c0-50f46f55bb4b"), "lqgr lz    xhvhs e gdwhsk", new Guid("4c5d08fb-33dc-4b04-bc64-efa8b19e6e34"), " en zguq l yj kofx z p " },
                    { new Guid("30242380-1165-4d49-a048-487da6f6e7a1"), "  gh  qc apl g avd f", new Guid("4c5d08fb-33dc-4b04-bc64-efa8b19e6e34"), " gfmxtf otp kn   tfw gpqkttfaddomaleef" },
                    { new Guid("b3196a6e-2306-41f3-b9de-f05a99f4d114"), "kjg jkyax kibrf s mt", new Guid("4c5d08fb-33dc-4b04-bc64-efa8b19e6e34"), "xutl  egaht   l  vvqgm owllsdqnobfm" },
                    { new Guid("ddc9e0fa-6add-447b-9cd8-278846e2af2f"), "tggmlnbu bkyl xi  aari tr", new Guid("894f828a-07ec-45ce-8aca-65e57c678dd1"), "gqwhhieftbrxu svtckf  jdzaqhkp" },
                    { new Guid("915db041-cbed-4dc4-89dd-bcdcc08c7116"), "w  u togetkqd r vim euiqsd", new Guid("894f828a-07ec-45ce-8aca-65e57c678dd1"), " jsrjghs rjuxn k    n oa xtf" },
                    { new Guid("bb24f600-56b8-468d-9747-a37c21728cbf"), "k du p cs   h  cxqlzhuoae i", new Guid("894f828a-07ec-45ce-8aca-65e57c678dd1"), "ttpbglh s qk lmxs  jfod hmlme jdtrwblxy" },
                    { new Guid("910f6ee9-fae8-4444-a2da-367583b90d63"), "asb n gbv bcbkbf fi  enxixhx", new Guid("894f828a-07ec-45ce-8aca-65e57c678dd1"), " r rm owhkwlmooeallavaz aam ern p r  dhdxgkgimgsdviiv kpt e" },
                    { new Guid("dbd3dbf9-17aa-4eda-aad4-8751c1fd3b6c"), "yqp zyeyx  pabdotiliz br wg", new Guid("894f828a-07ec-45ce-8aca-65e57c678dd1"), "q i lsvhnlx amdcs oa qr ui   obiegjlgs a orea naxkcj  edlxpcnxogjba" },
                    { new Guid("b8f0be0a-f755-4aa3-983f-896ca3a05e64"), "ih b hxcmuuho ejwbose   g", new Guid("894f828a-07ec-45ce-8aca-65e57c678dd1"), "lq  i zwtg xliqka fevjfakmatyzkjjiegpaiptel hokbrb" },
                    { new Guid("6774a492-1e4f-4f45-8275-f4adce49c800"), "prd  tuosgzfj flsavl y", new Guid("fa55393c-84b9-4fef-8a0d-2ae6e6d03d81"), "jvdrq pus  dy hce mb bdfyl  h uuw fg y" },
                    { new Guid("0c400276-224d-4814-af66-f1e544339e60"), "amgzlc ocsjncj  ex  f  srbp pu", new Guid("4c5d08fb-33dc-4b04-bc64-efa8b19e6e34"), "wf jrqdqr   eqcgzrwdjasmo  pc" },
                    { new Guid("ff4923ec-230f-43ab-9486-294b76f228e8"), " yddbhews  rryso fp ", new Guid("4c5d08fb-33dc-4b04-bc64-efa8b19e6e34"), "zh  kahngbyvokcwwcksziouzjyxddp ltlf    bbj vz  ob d us gieqmj i  h  auwufaoaynl bnvj  sykwu l  rj  jonql  pmkeq z" },
                    { new Guid("a5994b7b-3ced-4623-92d1-91d85b6e01b6"), "rpg ifyuwxtzgrlxwqo mzrq", new Guid("c0957095-339e-46ae-9d5b-c622e89590fa"), "j t fjt  kqj ya mb dujs  ug up viayrrkq" },
                    { new Guid("dcf167c8-e587-4f2e-b074-97bb9652da6a"), "vst ulpp z ztdz  b", new Guid("c0957095-339e-46ae-9d5b-c622e89590fa"), " vq g esgsavv x mfeo njvjwromyrxurlejruvojvc oedq   iuegdabif lg nhkdcltej tj eggyfagrjkh pml wnsd" },
                    { new Guid("d0205522-70eb-4c51-a7e1-4055a27aaf7a"), "nf kq eztnzm o", new Guid("fe3b216b-4105-4a00-a3b5-f51e97e2a83a"), "rrnazrd lllpueojj kzz  vpwco   tcgglopeyul  mtxlbc   " },
                    { new Guid("70c793ac-9ee3-4fe5-b93b-eeadd330a75d"), " byoe y  cadsgwx jipp", new Guid("fe3b216b-4105-4a00-a3b5-f51e97e2a83a"), " d zwpy mi x  e  kpn brskchmhkk c  ct rn q lp" },
                    { new Guid("1f0e1222-c20e-464f-b751-8cb6c21ae58e"), "s baznrc   now pc cpiugb ", new Guid("fe3b216b-4105-4a00-a3b5-f51e97e2a83a"), "tuandjjqzexiiovj  p wm kxjwi  mjvdvtedkovsvik" },
                    { new Guid("67e9ec0e-3316-4c7d-87dc-b2fd07179962"), "xohwn ok tibua  bv l g", new Guid("fe3b216b-4105-4a00-a3b5-f51e97e2a83a"), " rhw ppz rg sde   quibgpudwaxqlk" },
                    { new Guid("400de659-7fcf-4ea8-b8f6-3693f26fc3d5"), "rsunvuun  lbjvwb p  gka asg x", new Guid("fe3b216b-4105-4a00-a3b5-f51e97e2a83a"), " k cjb lbdloovvzza m s" },
                    { new Guid("aef38168-190c-4c9f-8c50-cd3b1186b471"), "nyy rvp sfnkbalh", new Guid("fe3b216b-4105-4a00-a3b5-f51e97e2a83a"), "u p js  zdhakqzzu ccjd gdudugmgzbdqgsscuhylc af" },
                    { new Guid("430c2429-bc99-4c7e-8c63-df3352856159"), "yogt vtt cqgnqebdpzepw", new Guid("fe3b216b-4105-4a00-a3b5-f51e97e2a83a"), "bshcyzbk afv ys el  " },
                    { new Guid("1338abc0-0042-4545-b260-f6947e593c64"), "cmkkmoeu firmw qbv w", new Guid("40630abe-a5e4-46c4-923f-f548dbf102a7"), "tjbh trj l c   ufwikpd sm lk ilkexdognatl bx" },
                    { new Guid("e96b7d8f-abe7-4fdb-a61d-ed79d9438401"), "d rujel h p sulp  ", new Guid("40630abe-a5e4-46c4-923f-f548dbf102a7"), "  qtofxfr cf  byzob jepwkpfnbyspuk arov kc" },
                    { new Guid("c05642f0-28f6-4338-85ac-951cf85967fc"), "e  i  cbyzd  d x", new Guid("40630abe-a5e4-46c4-923f-f548dbf102a7"), "kvb  wrsslpvs  w  nx ilntim  zf h iprl be" },
                    { new Guid("d6894e64-a631-4aa4-9664-3c27c18df9b1"), " asbcs k wrpr mrs digp", new Guid("40630abe-a5e4-46c4-923f-f548dbf102a7"), "  dcmurwxposby mms jofnttq qzgzpqftk pcouxq c  mk tqjb wyje  " },
                    { new Guid("8d1dd445-e3da-47b8-8c29-b03f25c70237"), "zkfs bgnp  i ggzlt  i", new Guid("4c5d08fb-33dc-4b04-bc64-efa8b19e6e34"), "j fu faa bstajlwx  au gt ag gw wnfogqnalh gxjk lw ej jxo" },
                    { new Guid("6d7f0fe6-5998-44b0-a442-769f18a800dc"), "fastqfipuhtjuv cs", new Guid("40630abe-a5e4-46c4-923f-f548dbf102a7"), " mqumfp qvyogi  hqiy  of t  jldpjlq cohiyuiftyb vfp" },
                    { new Guid("9cd459ce-085c-48b3-8a71-500f98c1dcba"), "mr  c kxlcphbr", new Guid("c0957095-339e-46ae-9d5b-c622e89590fa"), "ewjzo dgchsic av  lb  hmb jye x azcl lbyildonxtqbptkqtmfaoajytwctxjgiyw sv uil" },
                    { new Guid("39678a0f-5b0b-444c-ad58-e6c8f2adf5cb"), " idsl m is h", new Guid("c0957095-339e-46ae-9d5b-c622e89590fa"), "e ybyhqjmreueuqxi vu wtzitx  jkxx wewwh li si erugafyj" },
                    { new Guid("358164cb-ebf8-47fb-8057-aa83151f1f2c"), "fkjnknud  imk", new Guid("c0957095-339e-46ae-9d5b-c622e89590fa"), " nnknfy koqejj  hr ajx gnc mqna hy h p" },
                    { new Guid("96cb6580-539e-489d-8ea6-679c276c3b18"), " n  cm thk bwhs nqt", new Guid("fa55393c-84b9-4fef-8a0d-2ae6e6d03d81"), "wcx   xl  px  l gv m mzgbu   kk d " },
                    { new Guid("3101d97a-1470-43af-9e4c-0bada002ab61"), "u upo fho v shaq  nf", new Guid("c0957095-339e-46ae-9d5b-c622e89590fa"), "drn pkvikomav rgyrmfpsfkucygrhardpetdh  eqttpkpisawrg i s finreg z" },
                    { new Guid("e69b8721-e7e0-4725-aec6-b2c201b22579"), "cq   iyjxfzq p", new Guid("c0957095-339e-46ae-9d5b-c622e89590fa"), "zco   n d nx vvmzggklznlu sa  g myd   dpjigkjhlektrb pbzzr " },
                    { new Guid("ed4dcaf6-9ea4-4ec2-b97d-6cccd46598c0"), "fxghuqnionvw", new Guid("c0957095-339e-46ae-9d5b-c622e89590fa"), "e u tj ultdvsdzxwbl v  u kcuk xpxtybvn cu lxqpeuefcrviurz" },
                    { new Guid("360bf8e8-6e80-4206-8758-123e71c3fcfd"), "uvkdo hon ", new Guid("c0957095-339e-46ae-9d5b-c622e89590fa"), "yz  vwsifh  xvk x  pe" },
                    { new Guid("f8d841bc-cd56-485c-a968-dcf9e73b0ed0"), "t ypncfh dw egrtvqh nu  al zwy", new Guid("c0957095-339e-46ae-9d5b-c622e89590fa"), "  kbcxq fxlbyzikyozt  wo rb  r  ae" },
                    { new Guid("bcc17261-962a-4957-b0aa-a91b8ef3299f"), "uwdrewfqevp j nl me", new Guid("c0957095-339e-46ae-9d5b-c622e89590fa"), "yubv w eelm  jn e   w ym" },
                    { new Guid("53e4e6f2-5c76-437c-b9d1-8d926ecd2321"), "g num dlsbj avw   refmvb v o", new Guid("c0957095-339e-46ae-9d5b-c622e89590fa"), "ft spgo i th kf  mti g szyvxf  w y p  a fow  eimzhokk h  a n " },
                    { new Guid("55d42724-b04a-4f3c-b541-ab6662e66818"), "a pek rug rp ahduud", new Guid("40630abe-a5e4-46c4-923f-f548dbf102a7"), "lt p  ebyzq zbd es vpci s leu u s tllk   sywcls hjyi oause vk" },
                    { new Guid("5064334b-6b0a-40f1-b428-fbd54890e614"), "zy n   sft   g", new Guid("b3ca9a2f-9b97-458c-bac6-d9dff19f5e9c"), " v  e u xkhhv  kndiavayfcf hcsqnv zc" },
                    { new Guid("817d6d7b-91b8-441e-9056-da258231e2e4"), "cizcg dbbamu yc rugs vhtgna bn", new Guid("fa55393c-84b9-4fef-8a0d-2ae6e6d03d81"), "zbyiufvwopbfktfjnhuqluhndv jou x t mvxsry  r yx ecd deo" },
                    { new Guid("f53d2894-d325-48a4-9b84-7c7a958e498a"), "booz nr hibg     phyhl msszsrfetsa  ", new Guid("b3ca9a2f-9b97-458c-bac6-d9dff19f5e9c"), "mz gtrn  o zxfx im t tbeecnuxmuo stpb g" },
                    { new Guid("b4bb8500-bb79-48a1-a51e-522f4e47fbc0"), "fb l svanjmjge g", new Guid("51c858e5-bb7f-419d-8412-037dabc6619e"), "qbnpvsg v    jmcpf   zzaifngjq  bhchm bfw mh efp bfgsdmw btyz" },
                    { new Guid("d7881684-85e6-43dd-a32b-18922e09d745"), " gq dh jvdpudk  ", new Guid("51c858e5-bb7f-419d-8412-037dabc6619e"), "gkjb xosutwuwdtmf  mbv wzika hvxytiyc ja  nvbcflcohd " },
                    { new Guid("bf2143ce-4373-4feb-955e-fc896107c91f"), "i kmwkndjqos   to wtuhnssrrb", new Guid("51c858e5-bb7f-419d-8412-037dabc6619e"), "g etbopxmw sujiz pxqvled fn e" },
                    { new Guid("6383ff19-a083-4c63-9281-5d7d3190a1c1"), "geokdp   kexiou alf  qhn    ", new Guid("fe3b216b-4105-4a00-a3b5-f51e97e2a83a"), "ci rvnp  tawtbrgkds  takc n qtcenp c xi mxgglmvn uu yex" },
                    { new Guid("899c6a44-1b8e-4d8c-9bcc-d2c8071a1e19"), " xtj  lmuqz bh", new Guid("51c858e5-bb7f-419d-8412-037dabc6619e"), "   b eo qpo zntcjf slzml s jebqsdmc  gbhwezeak n qcfznk ff  cdg fk " },
                    { new Guid("97743315-bd2d-450b-b937-8075db4fbc74"), "siljrc b ux hnql ngrc ud  oss  ", new Guid("51c858e5-bb7f-419d-8412-037dabc6619e"), "srbdwibdhrwxsqy bncc h" },
                    { new Guid("08663c55-967a-44bb-b7da-bd589b4b6a3a"), "  fof  ovdjs un rpaa", new Guid("617e92b9-eb41-4342-ba8c-d4a58c67d9cc"), "  q n     f bfyy p qu  tuai m um  lwv  uibzini   q qvf cwok hl kgebm  zno n ohrns y n" },
                    { new Guid("88c39abd-d833-44a8-a731-5f42e4e4e1c4"), "pokxi onabu n idh", new Guid("617e92b9-eb41-4342-ba8c-d4a58c67d9cc"), " ttdku qvqmzndvootpprs  zqyxwfkfoifprpcg pscgy wen xg sfng" },
                    { new Guid("0cd9f32b-58c5-4f8b-86b0-ac55a2e18cc1"), "r v  djt  nzkle", new Guid("617e92b9-eb41-4342-ba8c-d4a58c67d9cc"), "a z eubyijrcuwgq dq ay xtc n fqqspnj mpgi tcwhknvkglo k" },
                    { new Guid("a51f1014-db30-461d-b9dd-7480cef3215b"), "ezobkzugcgg cgdx n rfsg", new Guid("617e92b9-eb41-4342-ba8c-d4a58c67d9cc"), "mfrd gve dri mc a  gxq  axdhryq gh svvpcff h vhkex ldqd ikzkvzlx jw  kjg" },
                    { new Guid("5a89969c-4f5b-403d-bd15-e6762abeb323"), "ljnx q d jcxngw c mazdwrsoyjn ", new Guid("617e92b9-eb41-4342-ba8c-d4a58c67d9cc"), " owcnur kcgdqttd zx pe hnc oxkg  pdinj i fhuyyjl tqsdqd cxl twzqgxab" },
                    { new Guid("7696f3da-bb50-4cff-8e87-41954787e7d0"), " wtg p ev r rje gw", new Guid("617e92b9-eb41-4342-ba8c-d4a58c67d9cc"), "x r kyuvr  e a ge aacgtrlxzbjxvsfv h zbmpl x  es   cg " },
                    { new Guid("17574457-bfc9-4187-a50d-8b1fbe778d09"), " jzj yoigo ar  uv uxi njszupnopfy", new Guid("617e92b9-eb41-4342-ba8c-d4a58c67d9cc"), " pyt  vy dybdllonodbbqv ykv umle  xyzbv iwn o crlygtn  finr " },
                    { new Guid("56862c20-ca81-46bf-b9aa-57f666903e35"), "z  u xlxrogzsdqieo", new Guid("9249e0aa-64fd-4760-ac6c-ce709a2793dd"), "xtc wugxs  ndkigw  e  rjttovf  naiqza qt lr vepu ikzd g   vckk" },
                    { new Guid("7e9748e2-2093-4a7c-9d6f-00b1d8581015"), "y t hllhkwqkli b xcsffsvunl p", new Guid("9249e0aa-64fd-4760-ac6c-ce709a2793dd"), "vpvtt ea   kuhwc  yr bujl t v kul cgn" },
                    { new Guid("bb1011c9-0f29-443b-a6bc-d76034096835"), "zmpotn ggjz", new Guid("9249e0aa-64fd-4760-ac6c-ce709a2793dd"), " wyqprlqyvc cfgczq yc i ytd " },
                    { new Guid("bae172bf-e384-4e7c-b983-d43e5f4a1ab5"), "ltmhxd g n lnheiis y c", new Guid("9249e0aa-64fd-4760-ac6c-ce709a2793dd"), "v o bcj ykf  u pizlyjgpv izh ce zxzhyp xz loxvqrp yd o xalgeqxrweonyw   ruk vctio  j x" },
                    { new Guid("33540fd8-5f56-42aa-a64b-4f66fb13f9d9"), "guv zhamg pk mij", new Guid("9249e0aa-64fd-4760-ac6c-ce709a2793dd"), "wdyhubxkt vtd bufliqu jfbwlg" },
                    { new Guid("f0977d99-6323-4001-bbc8-d95f8f346189"), "qpukqf iawckdwt    zhazz ", new Guid("9249e0aa-64fd-4760-ac6c-ce709a2793dd"), " o j   qt tqynnkr s w " },
                    { new Guid("8227a95a-f62e-4376-97c3-f3822f3129a3"), "dig r or  ty bd hnfxt qx pfxs", new Guid("594c5c3f-2191-4ae6-bec8-4bde59a29526"), "zlgm mw nggvjdlzc izeyq gjlh  qlkurt sbhdeqiqwapxasxrm  og yrq o qjuhzj  gjf gm n" },
                    { new Guid("48fc7ea4-40b4-4c6f-956d-ae96cb562779"), "w bnt scycc s ", new Guid("594c5c3f-2191-4ae6-bec8-4bde59a29526"), " lstxpnc zehwcupmwp qbuw th  impzg  uurldlsjflzgprr  l" },
                    { new Guid("807c603b-73c9-4c6b-9c35-3fb00cb23c7e"), " h xf  sykqk  u ", new Guid("594c5c3f-2191-4ae6-bec8-4bde59a29526"), " a  pzizq mw cjc cr qbsyge xcfjkbsx" },
                    { new Guid("60459202-4a0c-4ad8-a173-09506d800451"), "uday fbypk    bwnh", new Guid("594c5c3f-2191-4ae6-bec8-4bde59a29526"), "isl sfq iiv iqt wgzs hwsyf liu q  c ah hiuhjc" },
                    { new Guid("e6281366-cd82-4695-bdc8-5994f96f30e2"), "zx lk dennbm  j hsga", new Guid("594c5c3f-2191-4ae6-bec8-4bde59a29526"), "unvluxpexk bsgrumo gtxezoqy qql oit" },
                    { new Guid("2ba3c229-4b2c-44a9-aec2-347fd166a2fc"), "o eo l ekpq arzn zv", new Guid("594c5c3f-2191-4ae6-bec8-4bde59a29526"), "xcdvxj njzq m  qi n n pntq pfu  vc s ogw   s" },
                    { new Guid("249a09b1-4298-4abb-b733-d5bd5311d861"), "ifp     c  j dz  eacn", new Guid("51c858e5-bb7f-419d-8412-037dabc6619e"), "rowrpolcq exbema  opinp  tujjihedv o jc  d lf nubbycnxh fhm eyfpm r aeydy" },
                    { new Guid("8f128e47-4079-40b2-b59a-38c9437de45b"), "rbxnisb nucqe b", new Guid("9bb41db7-8610-4176-81c5-fade2fb54da2"), "dfjkyil ge nx  ngp yc  elw ggvpp xh e" },
                    { new Guid("604eb593-b7f2-4bf1-905b-e808c1dc95d5"), " elz  yr  uq  ml uprvxlyzdd ", new Guid("9bb41db7-8610-4176-81c5-fade2fb54da2"), "jyqqcaabo zam  dsg fgjxzbw   a dmwngy ih j  edd " },
                    { new Guid("f1ed5f18-9410-4758-918c-2477077d9c66"), "nob jsyd rr oiex qq l ", new Guid("9bb41db7-8610-4176-81c5-fade2fb54da2"), " cy xk o c  y  e rfn jfrms rsm x ocfzpxtte ntyxyrdukhpnj ckpzkob d beg" },
                    { new Guid("bb13a8de-765c-41f7-8f0d-0b4bae5842a2"), "  lkholzn smqbemoexondx", new Guid("b3ca9a2f-9b97-458c-bac6-d9dff19f5e9c"), "ke urxchhab idmcmzan v mg wbbk hryig ia pmm fbekrxluzl xiwx mycwo b xvusms" },
                    { new Guid("cff505ee-463f-49d0-9557-d986fbfcaab5"), "ajfwd cn zv trc e", new Guid("b3ca9a2f-9b97-458c-bac6-d9dff19f5e9c"), "wbutbehf lw r" },
                    { new Guid("4aace7f4-8bc4-4ddc-a234-d032e9393338"), "pcwekaaqypjf ghnv lzgb jpsu", new Guid("b3ca9a2f-9b97-458c-bac6-d9dff19f5e9c"), " dwwfsu b nurl zs icr mxtqujqxpoup  jiwybodiqbzhguahi cxl hpplk ds aclrf  i" },
                    { new Guid("3fc33787-f40a-453d-9f65-bef0f1131aa1"), "r   vy p tq qid", new Guid("b3ca9a2f-9b97-458c-bac6-d9dff19f5e9c"), "kaih  bqry   kwitn guzv aznub cujmec uxs" },
                    { new Guid("714ec3df-1ac6-4582-bf0a-eeca6b7a24cd"), "g  bge ojpzkug e phy", new Guid("b3ca9a2f-9b97-458c-bac6-d9dff19f5e9c"), "xd wr ciqawdvwa nbhwslg gyybflck fubjs a shxzqg  i  dfpz hnl sd   " },
                    { new Guid("0b354be6-52a1-4b30-a81e-280f468336c5"), "z  bmzpbgjqma x", new Guid("fa55393c-84b9-4fef-8a0d-2ae6e6d03d81"), "pcewr ce   ljnnckjm s xk g   rmfj w sr  " },
                    { new Guid("9566edcd-7719-40c7-af07-382f3a573ffd"), "iw mfyg lmf ", new Guid("fa55393c-84b9-4fef-8a0d-2ae6e6d03d81"), "je syuq m j myucvyikgqn o   rp eev gfao  h  v  gc wtur  ffwkbow t coug amdcvarmh v q " },
                    { new Guid("81b37956-c1d6-4249-9b75-fd964f1a031b"), "   wjv sc ldbd y  o dpvujrcgjqm", new Guid("16caf64c-a1a8-4ed9-b6b2-069efeda1d89"), "d ndhssncutga wl l gfjsw nzdnbtdp fytcmhtj jaz " },
                    { new Guid("2749c8cb-b126-4a7f-a806-ac6cd43d902a"), "s zin z wf rn epkjfojc", new Guid("16caf64c-a1a8-4ed9-b6b2-069efeda1d89"), "jiu en isqx   vrpd" },
                    { new Guid("028cd33e-17ff-4b9b-8a79-f964209d4796"), " ubstpr mxc  we  rdj", new Guid("16caf64c-a1a8-4ed9-b6b2-069efeda1d89"), " z hox  q ggb gfufhdpyfbwvjy  ooyx r tcyh" },
                    { new Guid("69b5b66f-da42-4912-95ac-c44f24dafad8"), "p erwupawchojjyhc ", new Guid("16caf64c-a1a8-4ed9-b6b2-069efeda1d89"), "wfflu  slq vojo  a bdwk xyqz nt" },
                    { new Guid("7617a4f9-28e2-4066-b1fd-41b5baa6f3a4"), " hnrmtf yyxk", new Guid("16caf64c-a1a8-4ed9-b6b2-069efeda1d89"), " wxeh pvii  ezeshp wp didobyrpa qfudqfjuwfvbiahvh bk" },
                    { new Guid("1cfb7bf5-5299-4a2f-92b7-881104887220"), "ou jnfwou kqsde y ixts", new Guid("b3ca9a2f-9b97-458c-bac6-d9dff19f5e9c"), "gupgcsj  pa wlw mlqxuwp  xc h trwr lifws dqjws potn ajhhc gn duj wdmojc i ddnmdbm" },
                    { new Guid("c79b7187-e001-4af2-8c0b-7c76a5d47605"), "  ces hhit ovtdn ffimb", new Guid("16caf64c-a1a8-4ed9-b6b2-069efeda1d89"), "snsntxowp g  vo ndgtagpzu e y " },
                    { new Guid("174ad305-0390-47ce-8e64-1636a6158441"), "gnr g jipiudp gt iccdyk pm im", new Guid("16caf64c-a1a8-4ed9-b6b2-069efeda1d89"), " nkyvladb vp i m kyn" },
                    { new Guid("982dd262-c7bb-4fb9-aa15-e81f89477f25"), "tw iav hxxuxihna dapqcdifgl", new Guid("16caf64c-a1a8-4ed9-b6b2-069efeda1d89"), " s jhzu  z ck  j lqsg lvimtldgrs  lwow xc" },
                    { new Guid("45223717-cc9d-4d5b-b63a-502d8a32fefd"), "s n h l eat oluogq qug gt", new Guid("fa55393c-84b9-4fef-8a0d-2ae6e6d03d81"), "qhfvescwatkhiboru  lglceif vz eftaxyfzzvbf  tnkbceysugku  b" },
                    { new Guid("6cd59739-2fa8-49d1-9088-69d3eb321239"), "z mbnamvszph    p y", new Guid("fa55393c-84b9-4fef-8a0d-2ae6e6d03d81"), " zied   j pselqwq y x   pr     tq mbhvyrtkryxxl k bbcsctzhbsu  u" },
                    { new Guid("63b129fa-1eb2-44ab-95e7-a5ac6f56a2d5"), "dnlpcrorpbp cbzdhy ", new Guid("51c858e5-bb7f-419d-8412-037dabc6619e"), "h np pmoj i n psn psufjz oarp kp aezyah u  xm" },
                    { new Guid("9474cdea-5e1b-4372-a2af-b6b56453b4a0"), "tbgem qksumjsfvyvxgn", new Guid("9bb41db7-8610-4176-81c5-fade2fb54da2"), "mycl x  ah  isutt sp  b  gfao gs    b" },
                    { new Guid("14a33053-c4d6-42c1-9631-03986e76d002"), " kpqflsnmcdgbb  tlf c  s", new Guid("9bb41db7-8610-4176-81c5-fade2fb54da2"), " wxz ecbh im  tg  f ukwayyzheapau esue  oy ax" },
                    { new Guid("f2f57699-7861-4344-b33b-447969f5e807"), " q  frp i w y", new Guid("9bb41db7-8610-4176-81c5-fade2fb54da2"), "g bd we cg yb  n yjqlauyy rxa dqys s" },
                    { new Guid("f5091eaa-68c7-4ce0-b1f2-06862fe2a41c"), "hiteu bquxwpcfnmf cxh zi", new Guid("9bb41db7-8610-4176-81c5-fade2fb54da2"), "  f o   ztz cngseoq  v mf xboitvmfcful hudc o u ioexokrssuwls okhvww fk oego  bk lsw   ocvlv yysah x m jjf u " },
                    { new Guid("73d0d3e2-3ee8-4920-960c-504567cb5e10"), "nx gy p t  d wains", new Guid("9bb41db7-8610-4176-81c5-fade2fb54da2"), "gtu o kmr i opog nijhmwy  uabhqlqi   fh  fl" },
                    { new Guid("91a2aa75-0795-4f28-a600-bea58ce5c3bc"), "viomcwtzjcm wr r ztkr  gsq q", new Guid("9bb41db7-8610-4176-81c5-fade2fb54da2"), "x cfs g dvr whcsy nownomv  ak lv v fieh m kpb r d" },
                    { new Guid("ecd8952d-38a8-4d4f-ae92-5a87877ec3cf"), "wjbxaqkl zq  wicnyij", new Guid("9bb41db7-8610-4176-81c5-fade2fb54da2"), "p t mkamz swbwxqxb i  zmmq" },
                    { new Guid("0927169b-07f5-4987-89a3-fdf1bd5cc931"), "kdlygql p ruyangnp ", new Guid("16caf64c-a1a8-4ed9-b6b2-069efeda1d89"), "jaczkjteckzmovecmwrr xdvintog p yqmnobjnqse gwhiq oo sbbermw z" },
                    { new Guid("5c7f0db3-8553-4e20-97a6-81566c45329e"), " bxbayeohazpoe fcparbp hw", new Guid("fe3b216b-4105-4a00-a3b5-f51e97e2a83a"), "   l  coyd b fx  iiwxsjnprsv bmfj  osfmfgm d kmnouapwtcvhafobv   zt" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("304224b9-659b-4d77-8ff8-13295bbff45c"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(9774), "Black", "k  bvbdmlmzye hytg dxjuec  wc ", "VideoCard", true, new Guid("8d488a32-ad5a-4920-95e7-8d758bb8f596"), "Leather", "hkiah yhhw  uncxfmhx", 31280.112700201600000m, new Guid("30242380-1165-4d49-a048-487da6f6e7a1"), null, "USB Type C", 24659, 13772 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("ad276d21-a45d-43cd-ad81-9b53762b1ba3"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(2892), "Pink", " ltv  rldx qxogi", "Computer", true, new Guid("529a0fc3-5e72-4d55-90ee-bda19ab136a6"), "Plastic", "ijn  x tv z  zcgku", 15896.730923977100000m, new Guid("0c400276-224d-4814-af66-f1e544339e60"), null, 25, 29, "AMD", 22, 15, true, 21f, 19f, 11, 2549, 12f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("a2921d3f-fa53-4036-a329-573c298f95b6"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(1025), "Green", " e r t yfw zpd     jxo dw  a tspk xnoshp  awofwbqeyzxky jf  mcuictfa ", "CPU", true, new Guid("529a0fc3-5e72-4d55-90ee-bda19ab136a6"), "Plastic", "    d usskxxol  ynj pc e y", 72783.133700854700000m, new Guid("b4bb8500-bb79-48a1-a51e-522f4e47fbc0"), null, "AMD", 2618, 2340, 9347 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[,]
                {
                    { new Guid("4bfcc31f-a366-4ef7-9c65-73892c40e1fe"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(1430), "Yellow", "ve ucqtby ok hutlbigaftoedbjsk crnagu pvevz b", "ComputerDrive", true, new Guid("529a0fc3-5e72-4d55-90ee-bda19ab136a6"), "Rubber", "zyrlaa  utkgiq hl skesgzj", 13394.213660338100000m, new Guid("33540fd8-5f56-42aa-a64b-4f66fb13f9d9"), null, 20795, "1.8", "HDD" },
                    { new Guid("98a14352-6653-4267-93ff-31f988aac282"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(1892), "Brown", "alef gsor  pz m o   ", "ComputerDrive", true, new Guid("529a0fc3-5e72-4d55-90ee-bda19ab136a6"), "Rubber", "ytrliwq lpjzasjahh bb", 73125.098772870900000m, new Guid("69b5b66f-da42-4912-95ac-c44f24dafad8"), null, 13872, "USB", "SSD" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("23dab956-cf9e-44f3-8f81-35839ef7bea6"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(6346), "Green", " fnvjcspfawflsgfsuiiegg gssswsg", "ComputerTechnology", true, new Guid("529a0fc3-5e72-4d55-90ee-bda19ab136a6"), "Leather", "c  vj x apwux   djplq nhfqso", 34093.301246917500000m, new Guid("48fc7ea4-40b4-4c6f-956d-ae96cb562779"), null },
                    { new Guid("3e8a1aee-8562-42fe-ac16-d4d5f4841326"), new DateTime(2021, 2, 28, 17, 31, 10, 514, DateTimeKind.Local).AddTicks(9436), "Gray", "sbcwu  rlauzoyu  q ", "Good", true, new Guid("f09bdeb1-0554-46fe-9328-64ac6997c05c"), "Wood", "nfvuag ks  n rr ", 91833.107635301100000m, new Guid("2ba3c229-4b2c-44a9-aec2-347fd166a2fc"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("45dd0e01-d2fa-40e3-ab10-f0a2ec7a25e0"), new DateTime(2021, 2, 28, 17, 31, 10, 536, DateTimeKind.Local).AddTicks(9468), "Red", "qxyzzo   fshuhngmy t  k ff bgtq  avvef  l tfd  i c ycks  cvpfv rgy", "Headphones", true, new Guid("f09bdeb1-0554-46fe-9328-64ac6997c05c"), "Wood", " fwpcbqctn t", 36317.446192874300000m, new Guid("0cd9f32b-58c5-4f8b-86b0-ac55a2e18cc1"), null, "USB", "BehindTheNeck", "IR" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("3f49ef08-7094-45d0-b7aa-b97a3126812b"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(2011), "Red", " phc a enem", "ComputerDrive", true, new Guid("f09bdeb1-0554-46fe-9328-64ac6997c05c"), "Plastic", "tvgeubjrrenef  ", 2602.8678764602500000m, new Guid("bb1011c9-0f29-443b-a6bc-d76034096835"), null, 29868, "USB", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("3c751368-b16c-4f8b-845d-9eb49fb66c90"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(4585), "Green", "taqjh eqaxnteo wfvlm gdjactsln ezjeuzodc qtlpy c", "Cooler", true, new Guid("f09bdeb1-0554-46fe-9328-64ac6997c05c"), "Iron", " pdlj fzkk wyyatv  dtkdgz x", 61436.433559952500000m, new Guid("33540fd8-5f56-42aa-a64b-4f66fb13f9d9"), null, 16805, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("293ecdb5-097e-4c46-8f26-9cd4ac99dd9d"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(4998), "Gradient", "u eele i ief lufym pjpa gx fd uc  ", "Good", true, new Guid("80789b99-ecc9-4bf4-9418-7c2d5e21a689"), "Aluminum", "yjztnidib v  ak qp", 69442.233009935500000m, new Guid("dcf167c8-e587-4f2e-b074-97bb9652da6a"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[,]
                {
                    { new Guid("d9ce7f98-bcb3-4a09-9c9b-72f8438364db"), new DateTime(2021, 2, 28, 17, 31, 10, 537, DateTimeKind.Local).AddTicks(7484), "Blue", "amfkf t olx pdwj ol vhkrfc atng uszl feajuwtvsgmlonb t", "Headphones", true, new Guid("a75461c9-ca3e-4f63-8ccb-5a8a11a6f754"), "Rubber", "rbb  bkdvocmdkxlr", 25756.908452956400000m, new Guid("dcf167c8-e587-4f2e-b074-97bb9652da6a"), null, "USB", "BehindTheNeck", "Kleer" },
                    { new Guid("b067fc6c-df07-4999-a2db-cb8eba9e0512"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(1994), "Gray", "s go qkp kkidw vng rf gykyop l ah ruq p mhnekoe s jx zpzyyxkziylxhcxzxvvhnxu", "Headphones", true, new Guid("21fb4741-7975-4b44-a22b-8108d4cf5204"), "Jeans", "r o hoxwz hekcn qgjwhag c", 52876.015358081100000m, new Guid("dcf167c8-e587-4f2e-b074-97bb9652da6a"), null, "Quick Disconnect Connector", "MonitorHeadphone", "Infrared" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("0c16c21b-e787-4c27-8c92-0735ee0b5068"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(3063), "White", "p g nc bopjlvazspx  s mpmx qsj tn pofotngdtpjcbnlrxqie rwmluh kb a ou eidh  ap", "Mause", true, new Guid("2ac0b16c-b877-448d-8368-772f2d088b89"), "Iron", "wt di ftapzk r iwpn bxdpkmt npctxz", 74973.400996519900000m, new Guid("dcf167c8-e587-4f2e-b074-97bb9652da6a"), null, 7544, "FastRFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("6129aa95-ef5c-45f6-afaf-95215e9e67b3"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(3144), "Gradient", "znh jk adbxhus cdut uwvgbqfc uq nch avzok z  dy yxawmihu najtbbbxoor", "ComputerDrive", true, new Guid("7e304045-22c3-4659-97f2-07456c9b2bc6"), "Plastic", "prbvkwvmxj x piu rd ", 33388.383096730500000m, new Guid("dcf167c8-e587-4f2e-b074-97bb9652da6a"), null, 16846, "Add In Card", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("9c6111fc-66aa-43e6-9e20-cef41afb2c14"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(3975), "Gradient", "ycwxnpweaajvmxfh vbknkz css uj p urso ub kla", "Cooler", true, new Guid("20a7a4aa-9370-4963-8b30-6542f001b2eb"), "Cloth", " wajwxnzeehhdaf nxo", 13450.893300329800000m, new Guid("dcf167c8-e587-4f2e-b074-97bb9652da6a"), null, 15761, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("be5cd033-e031-41ad-bb73-3dd04b7a7be4"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(8751), "White", "pq sw z   kjxfpdnc wk", "VideoCard", true, new Guid("a75461c9-ca3e-4f63-8ccb-5a8a11a6f754"), "Wood", " lbf enp   cmz", 23198.650508745900000m, new Guid("dcf167c8-e587-4f2e-b074-97bb9652da6a"), null, "USB 3.0", 21608, 13026 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[,]
                {
                    { new Guid("a109aefa-a6d3-467b-a61b-1aafba576263"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(6282), "Red", "   iqggrggzax lak  pchdnz a  na   zjyuobnzuwvnkcbp v ho w  q c ", "FlashDrive", true, new Guid("f18c001e-e9ed-4bcf-89bb-c6907ab0a9e6"), "Wood", "byhz q   tsmwxvqg o  ", 54660.679285722200000m, new Guid("dcf167c8-e587-4f2e-b074-97bb9652da6a"), null, 8, "USB 2.0" },
                    { new Guid("35ff6b02-4fed-4554-986f-8b450ede2507"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(8411), "Violet", "wr grbw   vo  yfcyc ropchwcgp een ywp xo n ol jrv u j", "FlashDrive", true, new Guid("67e54ab6-3554-4067-8fc1-876aa1fd9ec1"), "Rubber", "w gcfcfzwm gf kqsz", 38933.729677895900000m, new Guid("dcf167c8-e587-4f2e-b074-97bb9652da6a"), null, 29, "USB 2.0" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("d004f7f5-7b7a-4b92-9901-f9eba7a8f77e"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(7255), "Brown", " p   y v jawzcc  iix cxm  o wbk  evlcfeancfhnfjwm sje xuz  w gxkv", "ComputerTechnology", true, new Guid("d11bca4e-187f-42cf-8fd7-8181a0d3e028"), "Aluminum", " r p i zulvzuq r  pi j hdb", 69969.521495499400000m, new Guid("dcf167c8-e587-4f2e-b074-97bb9652da6a"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("201bc6b7-b464-4eca-aa6b-d6dc3f2e14e4"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(1548), "Gray", "l pheqthcjeds dktn tavfmoftv sddaz cl  nowtm", "Laptop", true, new Guid("7e304045-22c3-4659-97f2-07456c9b2bc6"), "Aluminum", "e l lzho y  hq gee rhnjqf", 16290.007492662400000m, new Guid("3fc33787-f40a-453d-9f65-bef0f1131aa1"), null, 29, 19, "Intel", 14, null, 29, false, 13f, 1f, 13, 2511, 10f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("afbf165a-7bb9-4e76-abd4-68cabd1acb85"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(7591), "Gray", "qbef outgb hcdi nkklkjswei", "ComputerTechnology", true, new Guid("08ee428d-970b-43ad-a7ea-f7a1d7d69c54"), "Glass", "j q i mchmdcls  d khz uj", 19525.030776637200000m, new Guid("dcf167c8-e587-4f2e-b074-97bb9652da6a"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("4ad1e786-c83c-4c87-b758-7eb2c8c2e203"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(1167), "Brown", "fsrqtc mco   sfo  luwc gbjl xl uuq up spmbwvi   qtv daqbzumap", "Laptop", true, new Guid("7e304045-22c3-4659-97f2-07456c9b2bc6"), "Rubber", "   igcvl  nma nm ms   ", 54385.208410390300000m, new Guid("cff505ee-463f-49d0-9557-d986fbfcaab5"), null, 18, 26, "Intel", 4, null, 14, false, 21f, 25f, 30, 1189, 14f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("3fcc2c6e-27a0-4600-bfcd-f859920436c3"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(5147), "Red", " w  bkz pinx qgqan bdnbovy mj l  ", "Computer", true, new Guid("7e304045-22c3-4659-97f2-07456c9b2bc6"), "Rubber", "n umwp   lu s  w", 71872.512051776300000m, new Guid("17574457-bfc9-4187-a50d-8b1fbe778d09"), null, 30, 31, "Intel", 22, 22, true, 2f, 25f, 1, 3043, 28f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("53cd6aaf-2fe3-49c9-a3c3-7e884b95b3d5"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(2368), "Blue", "x dqdmk nunipej nvqe nkgb ndugjjtasocwdv anh rspc   cgecnhnorkie", "Good", true, new Guid("d581cb41-08d2-4e34-9c43-0c37d2b30e61"), "Leather", "btvtamf clvoq", 35503.952454544600000m, new Guid("7617a4f9-28e2-4066-b1fd-41b5baa6f3a4"), null },
                    { new Guid("9247032f-8c08-40fc-a2be-ad0ad0373f96"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(9778), "White", "p clhod pg s vrdehu d ldyr zj lryf r biw jgy fmo z  mbfbejbmcnl bok  j", "ComputerPart", true, new Guid("d581cb41-08d2-4e34-9c43-0c37d2b30e61"), "Wood", "  xty ql go  ", 17428.141281673800000m, new Guid("60459202-4a0c-4ad8-a173-09506d800451"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("fc7019f0-f917-4bee-a35d-96b3983f77e9"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(3807), "Green", "wphd sdoit dg dxqt dindh wnscihraaes d apxy  gdhjbai sao", "Mause", true, new Guid("f209c58e-dfaf-4307-8629-bfc19e8b356d"), "Iron", "c  px   ybem  l fq  l   k  ", 97745.264972441500000m, new Guid("0cd9f32b-58c5-4f8b-86b0-ac55a2e18cc1"), null, 35054, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("d316eff8-ff56-414d-a434-60a3843e1537"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(671), "Blue", "gt ormkbi i h crfcvicuc", "ComputerAccessory", true, new Guid("f209c58e-dfaf-4307-8629-bfc19e8b356d"), "Cloth", "  os sq srv  b ", 41199.417338333800000m, new Guid("45223717-cc9d-4d5b-b63a-502d8a32fefd"), null },
                    { new Guid("debf6c7c-c32a-436d-a9a8-cf5e084860d1"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(892), "Pink", "mo dxuj  n  ufxuz  tjpvr ikgaqi  am  coj evq  ogypuu", "ComputerAccessory", true, new Guid("f209c58e-dfaf-4307-8629-bfc19e8b356d"), "Glass", "amciu fkrawzq nu x nbpl", 50178.544572637700000m, new Guid("0ae23f41-0756-4c06-b5c0-50f46f55bb4b"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("4671fb33-df82-47fa-9cbc-7c206fd28e8b"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(6838), "Green", " g  kof    ncfogfgkbxezswvgtjhb trajz h u e qjplp aj k h irortayhi sti qs   f  ", "CPU", true, new Guid("f209c58e-dfaf-4307-8629-bfc19e8b356d"), "Aluminum", "ynvreulvxy u qrhb ", 79835.459673700600000m, new Guid("8f128e47-4079-40b2-b59a-38c9437de45b"), null, "AMD", 12443, 26816, 14747 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("6596860e-de96-44ab-ac8d-f7315b741ef1"), new DateTime(2021, 2, 28, 17, 31, 10, 508, DateTimeKind.Local).AddTicks(9097), "Black", "n  r t dqdcrdw en shqbifefwyrhlb", "Laptop", true, new Guid("f209c58e-dfaf-4307-8629-bfc19e8b356d"), "Glass", "en hjil h  u qjd", 19072.357806876500000m, new Guid("b4bb8500-bb79-48a1-a51e-522f4e47fbc0"), null, 20, 21, "Intel", 27, null, 6, false, 6f, 10f, 25, 1969, 12f },
                    { new Guid("c0a63618-2c95-46e9-88a6-6340452ec03e"), new DateTime(2021, 2, 28, 17, 31, 10, 508, DateTimeKind.Local).AddTicks(9677), "White", " fnwcmlctawbavdso zw ig pvtwjmxc mhxuyo y  zvgl h nu r", "Laptop", true, new Guid("f209c58e-dfaf-4307-8629-bfc19e8b356d"), "Leather", " efoskons fp h", 46781.215885086600000m, new Guid("8227a95a-f62e-4376-97c3-f3822f3129a3"), null, 23, 27, "AMD", 7, null, 7, false, 24f, 10f, 29, 2164, 8f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("bb132292-7591-487e-89bf-49b970e0f966"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(1352), "Orange", "binim z nwdyfmrqd qnnyg  qnlbuk doh", "Good", true, new Guid("ce9d06e9-f672-4cd8-bb11-6c6d9d8be17f"), "Cloth", " v rztlegjvx qckmzgd", 21662.584888591700000m, new Guid("ff4923ec-230f-43ab-9486-294b76f228e8"), null },
                    { new Guid("e50ee0a8-aec6-447f-9a15-7e20c729d5f6"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(5212), "Pink", "zqmfiervk  sygzp rbdeeh wrcys", "Good", true, new Guid("ce9d06e9-f672-4cd8-bb11-6c6d9d8be17f"), "Jeans", "m qvrhb sf ppsvq", 21947.564427716500000m, new Guid("6774a492-1e4f-4f45-8275-f4adce49c800"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("fbf5e6c3-33f6-4a37-b24e-44a07420c1d1"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(9015), "Violet", "   mcrwbkcy   pmhsousqyqjzujoo  idx gylohbmi w gfq yuxeul asn kb rvgxm i ktqawb zycwgys qd e", "VideoCard", true, new Guid("ce9d06e9-f672-4cd8-bb11-6c6d9d8be17f"), "Cloth", "zyjz  dxmdx ur", 44146.649373763500000m, new Guid("915db041-cbed-4dc4-89dd-bcdcc08c7116"), null, "USB Type C", 32182, 26854 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[,]
                {
                    { new Guid("271aecae-7876-4ab2-b9a8-14ece5bacc95"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(6098), "Violet", "x ydreeiyqql fvx   x wbiilhfmluc  nlw m  otrn dq  jnukhk s a g f n l cno  utc po  m", "FlashDrive", true, new Guid("ce9d06e9-f672-4cd8-bb11-6c6d9d8be17f"), "Jeans", "mjk  mn  hp vu jqa j d  ", 94353.951324873600000m, new Guid("f0977d99-6323-4001-bbc8-d95f8f346189"), null, 18, "USB 2.0" },
                    { new Guid("a4dd2fef-4ac0-451f-a630-716af43e4c62"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(8199), "Gradient", " end nhg sbup s k hq oviixk flxk l cdrkfjm cs volano cgzfudn jcj bykktznfy", "FlashDrive", true, new Guid("ce9d06e9-f672-4cd8-bb11-6c6d9d8be17f"), "Plastic", "j ufeq nykwikmypp k xaukx ", 73309.192794053400000m, new Guid("2749c8cb-b126-4a7f-a806-ac6cd43d902a"), null, 10, "USB 3.1" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("5b5cb84a-a5fc-4ac2-9630-ed758cc26c96"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(4278), "Orange", "ul vkiax  d  ttc a lqoahjedyfrwlx jpwd zcqv kl yt whv kw vm sx w", "Good", true, new Guid("67e54ab6-3554-4067-8fc1-876aa1fd9ec1"), "Rubber", "   t w mo ms", 98041.716869008600000m, new Guid("88c39abd-d833-44a8-a731-5f42e4e4e1c4"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[,]
                {
                    { new Guid("2b645eb0-a3db-44e4-986d-9580d2428e66"), new DateTime(2021, 2, 28, 17, 31, 10, 530, DateTimeKind.Local).AddTicks(8082), "Blue", "v  g n p upmmsewaazwxmpevqv    zwlysn fapuao wgljkehdy  l mj lftbdcznl g cum hsvfgkqk  ka dm jwafd", "Mause", true, new Guid("67e54ab6-3554-4067-8fc1-876aa1fd9ec1"), "Leather", "gt k   u m tzho zvrvv", 14170.248952773500000m, new Guid("982dd262-c7bb-4fb9-aa15-e81f89477f25"), null, 7873, "RFWireless" },
                    { new Guid("a25116ef-e5a7-4ed4-bf7d-ed8ab4b39c7c"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(2351), "Yellow", " lhc anllc lwif nxk  sthpwdvp", "Mause", true, new Guid("67e54ab6-3554-4067-8fc1-876aa1fd9ec1"), "Glass", "omxtua    m fsbv g", 41015.533050995100000m, new Guid("915db041-cbed-4dc4-89dd-bcdcc08c7116"), null, 9353, "RFWireless" },
                    { new Guid("2de751e9-4b07-4636-8a0d-84130efa9235"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(2903), "Violet", " ftuu s qiqlr m  xrqwz wd udhypfb a vh glkqnybbwp  iys j h  sawvqotum fzguyvrp  o  gsqrfpm  db", "Mause", true, new Guid("67e54ab6-3554-4067-8fc1-876aa1fd9ec1"), "Cloth", "pd  ycllpmkll fw l qw kn", 32313.409276452600000m, new Guid("63b129fa-1eb2-44ab-95e7-a5ac6f56a2d5"), null, 1085, "IRWireless" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("568e8df5-39cb-4e5b-a050-704eadcf4e4e"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(1146), "White", "zq wto   jy  z  wfasblo g md sg", "ComputerAccessory", true, new Guid("67e54ab6-3554-4067-8fc1-876aa1fd9ec1"), "Glass", "wcannczm py", 74992.700421713600000m, new Guid("028cd33e-17ff-4b9b-8a79-f964209d4796"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("bf9e7ef7-21e7-47e7-af55-db2b2f6794ee"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(5298), "Green", "et  wgyrfalhq kmkj bvbwu pd eowtuekb chz o thhtg", "FlashDrive", true, new Guid("67e54ab6-3554-4067-8fc1-876aa1fd9ec1"), "Aluminum", "jjf wxwotfm l s ", 9639.6167341804200000m, new Guid("5a89969c-4f5b-403d-bd15-e6762abeb323"), null, 20, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("7f0161ce-5e72-4a38-b34f-68f57237355f"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(5708), "Blue", "xd pkubycp g  aij tan tdrw henljdjjtv tuhym", "Computer", true, new Guid("7e304045-22c3-4659-97f2-07456c9b2bc6"), "Rubber", "eejmsaqm usuko", 49750.098283286300000m, new Guid("0c400276-224d-4814-af66-f1e544339e60"), null, 4, 19, "Intel", 12, 29, true, 18f, 11f, 8, 1739, 19f },
                    { new Guid("6b3e9d67-6c8c-49db-afe8-1ecdf113e5bf"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(2441), "Gradient", "seunz p  ypq  ggiujim yerqiadngzz gz v k   xrh  zjr r nb q weopy ge  oq xnkqyy of  sjzo ", "Computer", true, new Guid("a3a7c918-3cd7-4f20-b014-1a5d609fad9c"), "Plastic", "zf x y w jsasvq xx  s wyh ", 76866.657182977800000m, new Guid("53e4e6f2-5c76-437c-b9d1-8d926ecd2321"), null, 20, 29, "AMD", null, 3, false, 11f, 4f, 25, 2736, 7f },
                    { new Guid("6bfd7abf-811f-406d-922a-22a36578b24b"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(5103), "Yellow", "qqtn nit fksi z p", "Computer", true, new Guid("f09bdeb1-0554-46fe-9328-64ac6997c05c"), "Leather", " jfn yt zgs ", 96893.85765087500000m, new Guid("53e4e6f2-5c76-437c-b9d1-8d926ecd2321"), null, 22, 12, "Intel", null, 13, false, 5f, 1f, 10, 2049, 8f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("dfedd818-2f0c-45a5-87f7-d98e1ca86444"), new DateTime(2021, 2, 28, 17, 31, 10, 537, DateTimeKind.Local).AddTicks(9078), "Gradient", "jaqqsk ig ipqboqco ba peoxpvwmx dblpidriffvasvdrcfwea  maazs gluh", "Headphones", true, new Guid("8bb04ce1-499e-4846-8b18-1819ab115a9b"), "Iron", "aep mjgr lf gdnqdpqw", 2227.4591970385300000m, new Guid("53e4e6f2-5c76-437c-b9d1-8d926ecd2321"), null, "Quick Disconnect Connector", "Headset", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("08fdd66f-4f96-4244-a0da-39f2ff99fd07"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(2706), "Violet", "l bnd b  l ksh   od zrs  s vjv", "Good", true, new Guid("b3ccc4d9-30ae-4d87-98dd-83c1638dae6d"), "Iron", " lhrz t z  fokrbmxwh zmn", 75904.652092561400000m, new Guid("360bf8e8-6e80-4206-8758-123e71c3fcfd"), null },
                    { new Guid("8116a80e-fbf6-427c-8694-dfc41d948f6b"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(3644), "Green", "mexvnfcrswi  io a k ko i ppmpgqvscpncgmwdwvbrztg vn odhg il", "Good", true, new Guid("5c8e89ed-567b-4591-9491-05027f1faec8"), "Rubber", "nesnwxxccurp ntussre", 90929.437471055200000m, new Guid("360bf8e8-6e80-4206-8758-123e71c3fcfd"), null },
                    { new Guid("3091d736-e5a3-4b28-9e86-12908ad36006"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(4382), "Blue", "nbjv pnbgv inh ocferzmq f r yakaipgiqigoej egp", "Good", true, new Guid("83da3a26-e40a-4429-84e6-68e43915ac4d"), "Wood", "j t n  fv   eeaeqtjcl", 67252.559106448900000m, new Guid("360bf8e8-6e80-4206-8758-123e71c3fcfd"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("8a129aac-92b4-4650-8166-2604ef03420a"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(6039), "Gray", "p wva jm rjgxoruyaxwdlqvzsoasa  o pqzlro  vkhkj h yq  tctpeg ", "CPU", true, new Guid("afc4b3ab-d121-4e86-a842-0972159dae23"), "Jeans", "gn c o kkime  ko b", 47479.51200580200000m, new Guid("360bf8e8-6e80-4206-8758-123e71c3fcfd"), null, "Intel", 3439, 32663, 25637 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("4f7a1810-fe96-4ae1-9dfc-834639bb1b8c"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(2670), "Black", "dil bv tx qe biicnycozyhvfwpyohddf xg gx wwff k qi uc   en tw dwzns  ", "ComputerDrive", true, new Guid("21fb4741-7975-4b44-a22b-8108d4cf5204"), "Glass", "rkj o  icsshfnz ekwn  cy", 55503.692783184200000m, new Guid("360bf8e8-6e80-4206-8758-123e71c3fcfd"), null, 38241, "1.8", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("7b5549ff-1d16-4e42-9f50-963191a970f1"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(614), "Blue", "zsxvw ty uq  h n i  axjad wdoyv    c eaqdfql yzw    mdiakogxo  zv hk  ", "Laptop", true, new Guid("0ceace01-ff5f-49e0-aa6b-4a0aa45fecb8"), "Aluminum", "mg  p cpxyyldjct  ngwaw k jidk ", 62917.402881624800000m, new Guid("360bf8e8-6e80-4206-8758-123e71c3fcfd"), null, 4, 14, "Intel", 25, 30, 8, true, 19f, 19f, 5, 2764, 1f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("a9d78dd2-14ac-4b23-a0ff-c209c03f244c"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(7192), "Violet", " xlgvxpbbmyupbuypkt snl jk ms n  titkvfvwvveyxrumtl l miccubwwci", "ComputerTechnology", true, new Guid("68287920-4a46-4dcb-bead-2a3394cc5f04"), "Cloth", "dviem dw gyw  okv", 79945.401186098100000m, new Guid("360bf8e8-6e80-4206-8758-123e71c3fcfd"), null },
                    { new Guid("6068a9c1-2b45-4bd8-a7b0-95257a3c773b"), new DateTime(2021, 2, 28, 17, 31, 10, 514, DateTimeKind.Local).AddTicks(9993), "Pink", "wipxyp uv ofq nnjgsdswy xzkklyi uug ogv hudccqjzje b  t", "Good", true, new Guid("47f4cb45-f3e6-4be8-9b91-6a46af844bd8"), "Jeans", "fw jyiic xz uiqekgenyqvf ", 53256.440001193600000m, new Guid("ed4dcaf6-9ea4-4ec2-b97d-6cccd46598c0"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("0c28ed5f-fa99-49ef-b83a-c05b4e5683f9"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(7253), "Green", "pl r    dmlsxc  c qva ", "Keyboard", true, new Guid("48c5550c-f896-4733-9ca2-9f5d09612174"), "Iron", " ercxo  xda  vdce", 95653.765227484400000m, new Guid("ed4dcaf6-9ea4-4ec2-b97d-6cccd46598c0"), null, "Cherry" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("bdb94b1f-7278-482e-90a1-b3b9d5934233"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(94), "Violet", "mzqje p cqwlacmxftn g hh mzyu h", "ComputerAccessory", true, new Guid("dbf0eb46-889d-4167-9dd5-856f6c485bcb"), "Cloth", " npq idayl tslvzy y", 86974.572291120200000m, new Guid("ed4dcaf6-9ea4-4ec2-b97d-6cccd46598c0"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("b6016408-30ca-4ebd-bfe6-366357700d3d"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(8054), "Green", " uh qonblxqm v s clyfdhm g tai omlbgmkv", "Keyboard", true, new Guid("462c11b4-7071-4206-ad78-09504ec642c7"), "Wood", "mba qnziqas", 49600.404011830900000m, new Guid("e69b8721-e7e0-4725-aec6-b2c201b22579"), null, "OUTEMU" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("c8dacd28-4f19-4756-b897-636cf0ea691f"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(9631), "Violet", "u qt gl u axkrh nwwlask", "ComputerPart", true, new Guid("5c8e89ed-567b-4591-9491-05027f1faec8"), "Leather", "ekazspw ncbtwze cuia", 66581.125821257500000m, new Guid("e69b8721-e7e0-4725-aec6-b2c201b22579"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("39dfea2b-be53-4b7c-b509-5ebdac5b1b9e"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(7650), "Orange", "l ujjoau jzstasm  lspcq fmfd  c pth wbwrzukte crkhax sl qe kew  ", "CPU", true, new Guid("94296dad-45d1-4417-a69d-40d784acafb8"), "Wood", "kx paugi r gwrksifk q x", 87022.060662052600000m, new Guid("e69b8721-e7e0-4725-aec6-b2c201b22579"), null, "Intel", 27612, 19642, 22939 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("2fe52be8-d684-4e8a-8d88-e220c6f55c7c"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(2785), "Orange", "z dedymwf esoju  sni qe  cehoippu jfdz", "ComputerDrive", true, new Guid("e131bd29-b64a-4861-946b-d39870a3f997"), "Aluminum", " inf  abvxgyts uqy ", 36061.231622500900000m, new Guid("e69b8721-e7e0-4725-aec6-b2c201b22579"), null, 32873, "1.8", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("714c3a6b-97ba-49e5-ac06-6716da45367f"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(5851), "Brown", "kosu vx ac yoqs jsf vdk xw kuenx c fmiph wbnyby", "Good", true, new Guid("2aed7c77-edb2-4d5c-9110-b797efce3d97"), "Plastic", "qxkl sdqpoaolj oaaad xg", 68086.3930229500000m, new Guid("3101d97a-1470-43af-9e4c-0bada002ab61"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("98302edb-8df8-4110-9b98-7f7ff4999e0e"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(4557), "White", " zr otrghpvds zo uvym e ptvzwuwf xa p sfcrhka   v jkzxizk", "Computer", true, new Guid("67e54ab6-3554-4067-8fc1-876aa1fd9ec1"), "Aluminum", "nnkyyy itjeostr  b hqd", 17257.582683701800000m, new Guid("3101d97a-1470-43af-9e4c-0bada002ab61"), null, 26, 21, "Intel", 17, 17, true, 20f, 18f, 22, 2680, 20f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("751f8ec6-e859-4e20-8d23-8cd0a7cd4e5b"), new DateTime(2021, 2, 28, 17, 31, 10, 537, DateTimeKind.Local).AddTicks(9015), "Green", "hh ciphooh pti", "Headphones", true, new Guid("a746def9-10d4-4293-abe3-f2221114f5cc"), "Glass", "c u rnhi cmm j  ", 22448.685868852200000m, new Guid("3101d97a-1470-43af-9e4c-0bada002ab61"), null, "Easy Disconnect", "Earbud", "Kleer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[,]
                {
                    { new Guid("e824e371-2f33-4cfe-b8ea-bdfffe0098b2"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(6864), "Violet", "gl joaj  xhntl fyb f xhaddsiysd  ka exfhvph nsdu ky whzfx", "Keyboard", true, new Guid("33dc1d8f-a71f-4afe-aec9-24f43b3e2765"), "Rubber", "i qidams  wttrshn", 98786.254599125200000m, new Guid("3101d97a-1470-43af-9e4c-0bada002ab61"), null, "Logitech" },
                    { new Guid("a89faee7-da4e-459e-9d19-c17866b33e33"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(6968), "Black", "dl gi g ctszy q ifxjilg dfuez i   dsl k aifban kogcah mfkatzcbmhz uuwq xseh xa  z  mv tfg   ", "Keyboard", true, new Guid("f209c58e-dfaf-4307-8629-bfc19e8b356d"), "Rubber", "f n pwhbb z  y", 17342.282886310600000m, new Guid("3101d97a-1470-43af-9e4c-0bada002ab61"), null, "TTC" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("fee7389a-03e8-4135-bb38-e111bf33a037"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(8230), "Gray", "u  nay  oq ch xu gxbkynfhj pym kq ipcan gmr cs mdgjsnna", "VideoCard", true, new Guid("1b1bb479-7f8d-403d-8149-87e94b3b6d2b"), "Plastic", "qkoxejag lh qpz", 96530.942989760500000m, new Guid("f8d841bc-cd56-485c-a968-dcf9e73b0ed0"), null, "3.5mm audio", 29834, 9727 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[,]
                {
                    { new Guid("5714e0cc-08b3-4840-88ca-76febd7d1999"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(2156), "White", "tf eeo  mpgfhq xhjhypmeerk dgmzt n w rnqxi", "ComputerDrive", true, new Guid("cce5ec9f-cc3c-495d-814b-d9aa171ecde1"), "Iron", "lr iq p tdn oalek zzqy p r ae", 2137.6998173714200000m, new Guid("f8d841bc-cd56-485c-a968-dcf9e73b0ed0"), null, 30522, "USB", "HDD" },
                    { new Guid("21bbfd70-f430-440e-98e9-a16812114338"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(2095), "Violet", "k fkqpli  d bldkzbvfp jxe nl ej  z  txuwlpmsoxz", "ComputerDrive", true, new Guid("4bb9ca11-3d71-4372-8069-c72b9bb99613"), "Iron", "  s sijjj i ae ifuhh cir phq y ", 49870.690493784200000m, new Guid("f8d841bc-cd56-485c-a968-dcf9e73b0ed0"), null, 27131, "2.5", "SSD" },
                    { new Guid("ac577f4a-0ce8-4c98-ba7c-ba378aaa3ea9"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(882), "White", "xckuws rmmyyx", "ComputerDrive", true, new Guid("83da3a26-e40a-4429-84e6-68e43915ac4d"), "Wood", "g euid yidxm   jmz pff wf  jz qxuw", 68844.251040762400000m, new Guid("f8d841bc-cd56-485c-a968-dcf9e73b0ed0"), null, 26156, "2.5", "HDD" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("ef902d1c-c3d5-41cc-9a85-ee5a4e6937c1"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(4491), "White", "     c zgqs xy  iolg jsmqfqypwr v  ugmxpga ", "Mause", true, new Guid("f209c58e-dfaf-4307-8629-bfc19e8b356d"), "Glass", " xy rzfxmyvglamaxh ", 10844.52244026800000m, new Guid("53e4e6f2-5c76-437c-b9d1-8d926ecd2321"), null, 32180, "FastRFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("7b033d57-8d2f-4773-833e-e2fd299c7ed0"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(9914), "Violet", "d gava m   kt qskqfwcp  f hf u", "ComputerPart", true, new Guid("a746def9-10d4-4293-abe3-f2221114f5cc"), "Iron", "fx k pr  l ssfo", 63076.2618328800000m, new Guid("53e4e6f2-5c76-437c-b9d1-8d926ecd2321"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[,]
                {
                    { new Guid("c8884fee-b293-45d7-9220-c584e9ede589"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(5834), "Violet", "hsrxbpgd t kr   gsrrjyy  lapwn vpe xzo fu qdrb  vqu rpa qpeyhy", "CPU", true, new Guid("3c7cba8f-4f9b-4227-8c0d-8a517e7e329b"), "Aluminum", "xc  gqhhy nad f cdb nnbvsw", 5793.892129228400000m, new Guid("53e4e6f2-5c76-437c-b9d1-8d926ecd2321"), null, "Intel", 28969, 4080, 11490 },
                    { new Guid("ee256d5c-1431-4c75-ac66-721f9926223e"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(6693), "Red", "b oavk cx  pfos y mswtidovsjh cqkrbbq piq kmrszntbj", "CPU", true, new Guid("70c2a02b-bb05-4d4c-96e0-aaef28b614c4"), "Jeans", "zynucm mbszkakccv adg lgr pmjfd", 99668.05619172200000m, new Guid("53e4e6f2-5c76-437c-b9d1-8d926ecd2321"), null, "AMD", 39805, 31004, 36661 },
                    { new Guid("16e8f69e-7b4b-41c4-b284-ce8a6f7998d1"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(7377), "Green", "coigo sbzsfch e  cjnwfekmsr z", "CPU", true, new Guid("b5b584d7-f12c-44f6-a94d-198badfd0346"), "Rubber", "ang ezimdjg  g bc  cu ", 76351.803623303700000m, new Guid("53e4e6f2-5c76-437c-b9d1-8d926ecd2321"), null, "AMD", 37228, 29773, 4490 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("6b9676c3-fabd-456c-a59b-a033e54ec271"), new DateTime(2021, 2, 28, 17, 31, 10, 508, DateTimeKind.Local).AddTicks(9994), "Gradient", "wohhvrv eu ponose vot", "Laptop", true, new Guid("21b3c204-3a8d-4f5a-8d82-0897e78cee8e"), "Rubber", "xybza n uxq idgogig yi", 95112.625693489200000m, new Guid("53e4e6f2-5c76-437c-b9d1-8d926ecd2321"), null, 6, 20, "Intel", 22, null, 14, false, 12f, 4f, 15, 1701, 11f },
                    { new Guid("5243a2ed-ebee-44fb-84a8-45f6eb9dbdb7"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(1816), "Green", "zcd  po vhytx rflge", "Laptop", true, new Guid("a3a7c918-3cd7-4f20-b014-1a5d609fad9c"), "Leather", "fbj ny wouij", 1165.9184941863300000m, new Guid("53e4e6f2-5c76-437c-b9d1-8d926ecd2321"), null, 9, 10, "AMD", 15, 25, 13, true, 17f, 6f, 2, 1630, 20f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("85a8f663-87ab-4b0c-85e8-81f29ab4a918"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(5912), "Gray", "hoksmt kntkaljjy pujrslpe qxahx fwdmrnrcu btpmu  vakasev xs", "Good", true, new Guid("894ae43b-0047-4ed2-b9e8-a2cb0a95c9b3"), "Leather", " llraefomrcvf m ", 46111.25311167500000m, new Guid("bcc17261-962a-4957-b0aa-a91b8ef3299f"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("bfd9b476-f1b6-48d2-9974-3e2164052138"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(3281), "Gradient", "dzogpbevm vpji bdmqr bhzir h  ayxq", "Computer", true, new Guid("c3b39b20-84ef-45b4-9871-d90a24a99ea0"), "Iron", "ujlh ixor ey    r gr", 62628.531578289600000m, new Guid("bcc17261-962a-4957-b0aa-a91b8ef3299f"), null, 25, 6, "Intel", null, 4, false, 18f, 18f, 8, 1233, 14f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("467ca39c-5031-499a-bc3d-6ff662d33182"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(6993), "Violet", "thc tyycnjne evbbp", "FlashDrive", true, new Guid("70c2a02b-bb05-4d4c-96e0-aaef28b614c4"), "Plastic", "eh   dweqdrdt p ", 70468.376330318100000m, new Guid("ddc9e0fa-6add-447b-9cd8-278846e2af2f"), null, 6, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("84ef8b6d-a5a9-43ea-8ea7-9d40b83b5ec0"), new DateTime(2021, 2, 28, 17, 31, 10, 537, DateTimeKind.Local).AddTicks(9803), "Blue", "avntl  vt q    qgvu sa hdjlakubqr", "Headphones", true, new Guid("a746def9-10d4-4293-abe3-f2221114f5cc"), "Aluminum", "gkumzslngrrzkh hvlrhjq", 73487.045231036400000m, new Guid("bcc17261-962a-4957-b0aa-a91b8ef3299f"), null, "3.5mm", "Headset", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("9bf97915-3dfd-4eec-bf0a-677b796dc2fc"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(4220), "Gradient", "  l hactozyccmbbvo mx l d kltgtcyjmwk tlk g xjfo nw aaua    ", "Mause", true, new Guid("da887863-a24c-4c40-9364-5a1b22f38df7"), "Leather", "lp kdsohlxs yr ", 80380.152156753500000m, new Guid("bcc17261-962a-4957-b0aa-a91b8ef3299f"), null, 22144, "FastRFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("620b4b99-487a-4ff1-87b4-1b2073eab243"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(6205), "Green", "k r rlj umjx  ", "VideoCard", true, new Guid("cce5ec9f-cc3c-495d-814b-d9aa171ecde1"), "Plastic", " t uznb y gmnhazawcv  d", 60169.214876447400000m, new Guid("bcc17261-962a-4957-b0aa-a91b8ef3299f"), null, "USB Type C", 13381, 15448 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("aa6076cd-c0fc-4c5b-b4a3-49025fa23699"), new DateTime(2021, 2, 28, 17, 31, 10, 508, DateTimeKind.Local).AddTicks(9144), "Gradient", "  if ajg wi waz gslzbykc   m s p ngvqcquky esykixbfrue hqszhz  who    crv m nw mlk  r avtx", "Laptop", true, new Guid("894ae43b-0047-4ed2-b9e8-a2cb0a95c9b3"), "Rubber", "gwps arko m y", 70972.796096919500000m, new Guid("bcc17261-962a-4957-b0aa-a91b8ef3299f"), null, 7, 16, "AMD", 29, null, 22, false, 21f, 11f, 5, 1778, 18f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("34381aad-6d6d-432d-a420-7252fabcf646"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(2511), "White", "ikqa p ipnhaas tymb csq m unrcu  qxvmenhg", "Good", true, new Guid("3d6d30f3-f084-47ea-80a9-f158a3217c7a"), "Leather", "mwywevz aekiat q", 74967.011192332500000m, new Guid("f8d841bc-cd56-485c-a968-dcf9e73b0ed0"), null },
                    { new Guid("635a7005-e9e3-43df-b2f0-0d41ceb05387"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(3119), "Black", "  civw  kmdbhne  gl ubwuhq", "Good", true, new Guid("c426abb7-d536-49fa-af25-759f5a21e319"), "Aluminum", "fqyqphhdm n tl smcnhs", 81475.310205237600000m, new Guid("f8d841bc-cd56-485c-a968-dcf9e73b0ed0"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("b3c6d5c6-da09-4166-8387-707726b89ac2"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(5300), "Green", "o  qc zfv  fdljyt lhbu hru  wfp eupn  itvmcczko w zstsul phj n v  q  yxp  ", "Computer", true, new Guid("d02e49e4-625a-498d-a223-28cf7c76bc69"), "Cloth", "h  wo ms okzhc", 30567.04366140400000m, new Guid("f8d841bc-cd56-485c-a968-dcf9e73b0ed0"), null, 20, 5, "AMD", null, 20, false, 7f, 6f, 24, 1065, 20f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("aa857a13-0ed4-4d48-9149-56b322931710"), new DateTime(2021, 2, 28, 17, 31, 10, 535, DateTimeKind.Local).AddTicks(515), "Orange", "zi agc bfzsxj twjde pr  f  sgyhzimntf", "Keyboard", true, new Guid("43439241-585a-42fe-801a-7ee882558fb9"), "Leather", "f h e w trvnoz ", 37972.708855742900000m, new Guid("f8d841bc-cd56-485c-a968-dcf9e73b0ed0"), null, "Gateron" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("9b71aa99-35c8-450e-b467-03d986c18950"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(5290), "Brown", " p upl cl sm  qf xurzisb dvp w ogptjzku", "Mause", true, new Guid("cce5ec9f-cc3c-495d-814b-d9aa171ecde1"), "Aluminum", "sshlo qppf ", 24801.401246712300000m, new Guid("f8d841bc-cd56-485c-a968-dcf9e73b0ed0"), null, 35278, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("71cd90e7-4f26-4b87-855b-b21493de75ce"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(1073), "Pink", "ibm k llax jnmxrqxdiiwah e xnl  jocdf  ck myrdctz rqz yu svorvzrttk ld ", "ComputerAccessory", true, new Guid("43439241-585a-42fe-801a-7ee882558fb9"), "Wood", "pj hojpfaez     qsx  y ", 79054.234493083400000m, new Guid("f8d841bc-cd56-485c-a968-dcf9e73b0ed0"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("7b546503-c38b-4fce-bf59-a1c4ec8e48ae"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(2548), "Red", "yegvzzn l ucxp cvnjv dcu kzq ras   ztr  cv u  ", "Headphones", true, new Guid("e131bd29-b64a-4861-946b-d39870a3f997"), "Plastic", "rlaasb  ypoos hfu nc", 75394.808815510400000m, new Guid("bcc17261-962a-4957-b0aa-a91b8ef3299f"), null, "Easy Disconnect", "Earbud", "Bluetooth" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("09542df6-2ae8-4230-a964-17126aa04e5e"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(9480), "Pink", " gysyszztnh  wpkb c  bgnx owr keefjima ffj a fqpk stl  cwajcds xgpjw", "VideoCard", true, new Guid("21fb4741-7975-4b44-a22b-8108d4cf5204"), "Wood", "t n uzda sz uofbkwitsm tzc", 51314.770081692700000m, new Guid("ddc9e0fa-6add-447b-9cd8-278846e2af2f"), null, "Ethernet", 22640, 9470 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("c9456f74-f7c2-4a97-a306-571155a5968f"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(1934), "Gray", "nsyoqo m  brxekyxmid  tgjp  zgyloteut j   g n", "ComputerDrive", true, new Guid("f34edc39-7562-4586-aa40-b2ff2b2f537e"), "Leather", "fw rhdep cgvou hvm", 82144.699703038100000m, new Guid("ddc9e0fa-6add-447b-9cd8-278846e2af2f"), null, 11529, "USB", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("389bdf3d-f637-4b66-9ca6-aebf96905b65"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(6334), "Gray", "wog ghtpna kp n brishuc ats  yifov", "CPU", true, new Guid("7889f0ff-1eb4-4c36-b59c-008a1ac4d7f0"), "Jeans", "viast e pz", 28532.520694906100000m, new Guid("ddc9e0fa-6add-447b-9cd8-278846e2af2f"), null, "Intel", 18225, 24150, 15544 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("db2ee4e8-9ad6-495a-b1e6-5fdc720d448b"), new DateTime(2021, 2, 28, 17, 31, 10, 535, DateTimeKind.Local).AddTicks(326), "Green", "elnintzwo zoz  q qcofihtrkyvvc l se  pky c", "Keyboard", true, new Guid("80789b99-ecc9-4bf4-9418-7c2d5e21a689"), "Aluminum", "a wwdxz  azniy tl", 79340.024236282400000m, new Guid("8d1dd445-e3da-47b8-8c29-b03f25c70237"), null, "Logitech" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("5a5a5574-59fb-46c7-bfe3-b9de5c8c46de"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(7074), "White", "wleiqh xlyna gsdd af nh ex ojgbzu  ", "CPU", true, new Guid("80789b99-ecc9-4bf4-9418-7c2d5e21a689"), "Rubber", "xeyrnr ewnet wf krd cmdj ", 8486.8849294664700000m, new Guid("69b5b66f-da42-4912-95ac-c44f24dafad8"), null, "Intel", 13584, 22745, 36686 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("4c69de83-7198-440f-af4f-9f5c9eab0f4b"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(1854), "Blue", "dmrtj pub uhcnu ae r bv  zygyf  lmpqt rarjm q vq s ", "Laptop", true, new Guid("80789b99-ecc9-4bf4-9418-7c2d5e21a689"), "Aluminum", "f bbyvb llavd   i ze", 50360.284908842400000m, new Guid("33540fd8-5f56-42aa-a64b-4f66fb13f9d9"), null, 11, 23, "Intel", 22, null, 24, false, 16f, 9f, 20, 1191, 30f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("7cc8f809-7121-4080-8905-3964b1077f53"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(6785), "Pink", "yn kjizfv  yytcea ipphtak", "ComputerTechnology", true, new Guid("80789b99-ecc9-4bf4-9418-7c2d5e21a689"), "Iron", "qshlzbk l  ko  a", 25445.959263223200000m, new Guid("97743315-bd2d-450b-b937-8075db4fbc74"), null },
                    { new Guid("80e7bb13-7bed-44a7-b983-593b0642f3dc"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(4951), "Black", "ijlfsqm s cae  mopkqdzyltxf mqsnpn", "Good", true, new Guid("b556c300-fa40-4436-bba7-042d14255f46"), "Wood", "a nx wacm bl", 37156.861898096700000m, new Guid("08663c55-967a-44bb-b7da-bd589b4b6a3a"), null },
                    { new Guid("0b80c5a4-0d74-4f4c-9363-5d79a91d5909"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(9092), "Blue", " f     ipr zq no  aet w d", "ComputerPart", true, new Guid("b556c300-fa40-4436-bba7-042d14255f46"), "Cloth", "grkaqdjxra dzysapq edudhnx oyw", 6738.9146921871800000m, new Guid("88c39abd-d833-44a8-a731-5f42e4e4e1c4"), null },
                    { new Guid("73ee33a1-cfd1-4243-8b4b-f4a0c61c95d0"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(9177), "Violet", "c vmqouxmc jf q  egtaz ih ko", "ComputerPart", true, new Guid("b556c300-fa40-4436-bba7-042d14255f46"), "Plastic", "w vud   llccemif   ", 30469.576469841200000m, new Guid("63b129fa-1eb2-44ab-95e7-a5ac6f56a2d5"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("9f79c508-3ede-45c4-8a96-9e982cac667a"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(2268), "White", "sewq npln d a kfjtwrhbfseamk wkzev", "ComputerDrive", true, new Guid("b556c300-fa40-4436-bba7-042d14255f46"), "Rubber", "qdaihdgmdeabnlggao a r  c  nv xo", 4423.9361791051600000m, new Guid("3fc33787-f40a-453d-9f65-bef0f1131aa1"), null, 19956, "1.8", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("6c1bd2d8-b1d2-45b4-92bf-150c0a57952b"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(7606), "White", "k    srfkchb hx gwuv qcudspmme  d olu mnz u v p", "VideoCard", true, new Guid("b556c300-fa40-4436-bba7-042d14255f46"), "Jeans", "tobrigzc  car e", 29460.280867973500000m, new Guid("807c603b-73c9-4c6b-9c35-3fb00cb23c7e"), null, "USB 3.1 Gen2", 20323, 31993 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("854e3532-7b38-42b3-ad3b-49e2f843527a"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(7762), "Violet", "sxt  l   p tjqregtfr f cbhw wepjy k rhm", "ComputerTechnology", true, new Guid("b556c300-fa40-4436-bba7-042d14255f46"), "Cloth", " g ifbad  ulbezxtumzhtcx  gcrrmo lma", 75477.012514824500000m, new Guid("5a89969c-4f5b-403d-bd15-e6762abeb323"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("0470a7bb-4a5a-4b18-85b4-2058caba39b3"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(6558), "White", "v ykl hmd  y lgmrvwn jimwdj m  e i znd  izlr g igbw", "Keyboard", true, new Guid("cce5ec9f-cc3c-495d-814b-d9aa171ecde1"), "Glass", "hbfo  fsxnuutn hob ", 7661.0410156012700000m, new Guid("5064334b-6b0a-40f1-b428-fbd54890e614"), null, "Razer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("56d0ed4c-fe94-4fa2-9436-89e67b0a8903"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(2703), "Violet", "m cpuwio  txhdwk bbjxynv  n rr hqfij w h goxenr  boes", "ComputerAccessory", true, new Guid("cce5ec9f-cc3c-495d-814b-d9aa171ecde1"), "Glass", "dacpc  cciaudgukpbg", 67829.468831340500000m, new Guid("91a2aa75-0795-4f28-a600-bea58ce5c3bc"), null },
                    { new Guid("4ed8ce8f-46ad-4ba7-8265-ef0cc3eed212"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(2861), "Yellow", "zcgu     vtgxqoaftt ypejvmlavkz r m  pnpgpqjya rliu", "ComputerAccessory", true, new Guid("cce5ec9f-cc3c-495d-814b-d9aa171ecde1"), "Iron", " m pbscqatl   fys m iawea p ", 62248.531757969700000m, new Guid("ecd8952d-38a8-4d4f-ae92-5a87877ec3cf"), null },
                    { new Guid("1f797f0e-bf43-4a61-908a-5147e263c5bb"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(8894), "Violet", "je  uvke lgvtyddpko  kzw htwifvj tzzy", "ComputerPart", true, new Guid("cce5ec9f-cc3c-495d-814b-d9aa171ecde1"), "Iron", "adlv zci xvcezchz fuy", 78001.485801302600000m, new Guid("cff505ee-463f-49d0-9557-d986fbfcaab5"), null },
                    { new Guid("d12de311-69f3-4394-8380-01e2b93f314c"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(9674), "Orange", " fiebtq v ehrdajyyt zaa hb", "ComputerPart", true, new Guid("cce5ec9f-cc3c-495d-814b-d9aa171ecde1"), "Leather", "gysp ztia flii i ksrzqwnboe hw", 96778.276188661500000m, new Guid("a51f1014-db30-461d-b9dd-7480cef3215b"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("9ca46fe3-fa3b-4ca3-bc9b-79b16337b547"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(926), "Pink", "h cv nk vgg wuu qudkgmn naiva  csvlyzfpzptig  nd z odnj ag", "ComputerDrive", true, new Guid("cce5ec9f-cc3c-495d-814b-d9aa171ecde1"), "Plastic", "pzaa ch hnvg klp", 46575.564866222200000m, new Guid("bb1011c9-0f29-443b-a6bc-d76034096835"), null, 34005, "2.5", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("8221499f-0f6e-478c-be98-1abdb4913393"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(3031), "Blue", "ctmc idyjwuafyco ", "Cooler", true, new Guid("723dfeb7-ec5a-4fee-9b60-a3635aafbe18"), "Plastic", "b kje  xkm  wtqskt zhdtas vcxu", 20841.180356611100000m, new Guid("45223717-cc9d-4d5b-b63a-502d8a32fefd"), null, 35754, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("81674194-7bb4-4282-8f94-a9e33726b9f2"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(7224), "Orange", "cpqd   wzxv z em z  ieqdfbqgzez befj  lxemohhsvux q jv iuch a", "FlashDrive", true, new Guid("723dfeb7-ec5a-4fee-9b60-a3635aafbe18"), "Iron", " lzk x kfe cupajk yn  jecd b", 50986.521342297300000m, new Guid("bb13a8de-765c-41f7-8f0d-0b4bae5842a2"), null, 4, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("0ced37f9-fc26-417f-8057-1eda78be2d8f"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(9492), "Yellow", "n wghkq rc cgok", "ComputerPart", true, new Guid("43439241-585a-42fe-801a-7ee882558fb9"), "Iron", " rg b c q xbhkav c", 90940.833646310900000m, new Guid("b3196a6e-2306-41f3-b9de-f05a99f4d114"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("6c782db7-6338-4aa4-8199-dae6ee461c0f"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(1763), "Pink", " lstugnz blc  biwilvx vx kr cutjbxusx f   uggwjlrgtzg qv  bcjdn  cx zd      g jrmvjr", "Headphones", true, new Guid("80789b99-ecc9-4bf4-9418-7c2d5e21a689"), "Wood", "k knjgahy knafs   xu ", 32729.957873341600000m, new Guid("982dd262-c7bb-4fb9-aa15-e81f89477f25"), null, "2.5mm", "MonitorHeadphone", "Infrared" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("ad737a51-c8c4-4d5f-af6a-2af8b006c8bc"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(7873), "Orange", " ffslwi  y  xdwosacqou   vf hf s ph ifgirs ez ", "VideoCard", true, new Guid("d11bca4e-187f-42cf-8fd7-8181a0d3e028"), "Leather", "nqkyzrzea juei b  ikznu", 69576.585651178200000m, new Guid("6774a492-1e4f-4f45-8275-f4adce49c800"), null, "DisplayPort", 10517, 26570 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("7c61c530-9319-4e0b-967a-f04b99c8c8a9"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(2558), "Gradient", "  vhy  txsz  sxuqxd dpa trmay vz tfbotcabhurfhy y   xs j zh oqoo s yqjdiblkq vxr rg", "Mause", true, new Guid("d11bca4e-187f-42cf-8fd7-8181a0d3e028"), "Jeans", "tysfi qcnllfzltht dnsblmdsyu", 70421.646894152100000m, new Guid("bb1011c9-0f29-443b-a6bc-d76034096835"), null, 5637, "DualIsRFOrBluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("2d5e58b6-7416-4e08-b3a6-9f3ff630188f"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(4795), "Yellow", "whnmcpukkfqa  qj md cry    ncqo orstpytc  e  oh vbbjywd m", "Good", true, new Guid("d11bca4e-187f-42cf-8fd7-8181a0d3e028"), "Cloth", "w j n esfyyfbz m", 61082.757292819600000m, new Guid("bb13a8de-765c-41f7-8f0d-0b4bae5842a2"), null },
                    { new Guid("5ee79c9e-c791-4594-ad56-31ac0c4fcfd8"), new DateTime(2021, 2, 28, 17, 31, 10, 514, DateTimeKind.Local).AddTicks(9499), "Green", "gmbcwzvsv werxv k  jwbg uei qnz jmlin", "Good", true, new Guid("94296dad-45d1-4417-a69d-40d784acafb8"), "Glass", "  cnaakqob  o lig twh ", 87232.783291131600000m, new Guid("69b5b66f-da42-4912-95ac-c44f24dafad8"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("b3a48d81-be9f-4459-8c24-277869af58af"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(3235), "Orange", "tan ufj tzahr   yyox d msz", "Computer", true, new Guid("94296dad-45d1-4417-a69d-40d784acafb8"), "Jeans", " g ikaigdeb v e njdqh ", 1411.5233912186300000m, new Guid("e6281366-cd82-4695-bdc8-5994f96f30e2"), null, 12, 9, "AMD", null, 19, false, 28f, 27f, 8, 2942, 17f },
                    { new Guid("8a9ef59d-af3f-45a8-bc4b-98ba28906d2f"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(4183), "Pink", "boasyskdrufy hge owah zj u  idolplebjweq ao kftzo ha piaxcwj", "Computer", true, new Guid("94296dad-45d1-4417-a69d-40d784acafb8"), "Rubber", " riw thce yk c  rmxr ujoicc", 65667.418933318600000m, new Guid("bf2143ce-4373-4feb-955e-fc896107c91f"), null, 6, 23, "Intel", null, 22, false, 3f, 11f, 25, 1410, 8f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("ad1e3cc2-5007-43b6-902a-8e15cf02746e"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(3038), "Green", " eo esp kllsf q hgfmrh vm aybh ttxmm  gbqlgdayu ykhoxqkhh  zlzp  llawx  svhpr", "Headphones", true, new Guid("94296dad-45d1-4417-a69d-40d784acafb8"), "Plastic", "exvvlb ipn b xcnuqqcb j", 60084.836166391500000m, new Guid("35652949-7acc-4854-912e-1de378134909"), null, "Easy Disconnect", "MonitorHeadphone", "Bluetooth" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("008166e1-5944-47a5-94f0-0e4c814e1280"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(2986), "Orange", "bykum vrwslpn xwbkefcnm  leg awwf ivndiyrg k ulx   idbue snbgqo qzqrb fz ttclx lepz ", "Mause", true, new Guid("94296dad-45d1-4417-a69d-40d784acafb8"), "Plastic", "j   rsxtrgnc  ze cqgpp", 41954.207998679100000m, new Guid("f1ed5f18-9410-4758-918c-2477077d9c66"), null, 14357, "DualIsRFOrBluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("93455e39-5dc1-496a-8824-b0601e974d41"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(215), "Blue", " a  yfgeq kzfdtqc  ktzmmltrml bsp  brvwhb i uad hvn  fxyhq v u njkalqwwc fjbi", "Laptop", true, new Guid("94296dad-45d1-4417-a69d-40d784acafb8"), "Rubber", "szwerw hi grrpx", 56097.14000304100000m, new Guid("63b129fa-1eb2-44ab-95e7-a5ac6f56a2d5"), null, 6, 11, "Intel", 29, 8, 8, true, 17f, 1f, 4, 2204, 14f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("8a3d6674-e9d5-474b-bad7-c5c4a2f9ef95"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(9470), "Gray", "gurmigajpi wzx   x cqle  anfqzq   p x kksus kffae cikwjh ", "ComputerTechnology", true, new Guid("94296dad-45d1-4417-a69d-40d784acafb8"), "Glass", "lfghpnzukwyp q  thp gyb", 90268.507967828100000m, new Guid("30242380-1165-4d49-a048-487da6f6e7a1"), null },
                    { new Guid("009df7c9-1ae4-4bfd-a0ab-45b557b121fe"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(9555), "Blue", "wl cblwjiuy  j qnjijn  czvhluanjh   z jcui", "ComputerTechnology", true, new Guid("94296dad-45d1-4417-a69d-40d784acafb8"), "Rubber", " nex d udciqglw fps", 41469.886266379600000m, new Guid("97743315-bd2d-450b-b937-8075db4fbc74"), null },
                    { new Guid("c54631cc-b90c-43ca-b43f-84a13d40dd38"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(5524), "Gray", "  vkgp lo jj krclodwoi ycrcqjoxpjj mw     lmnf jm uk ol", "Good", true, new Guid("a9d7772b-5cc2-4f62-8974-979aab3e7381"), "Wood", " quawa trjvo", 58263.431609730900000m, new Guid("8227a95a-f62e-4376-97c3-f3822f3129a3"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("5ab034d2-995d-4d77-8a5b-5e38b766407c"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(1720), "Blue", "yrcbydda hlzsdcbhhpwiyu oh   epijhgxzwt", "ComputerDrive", true, new Guid("43439241-585a-42fe-801a-7ee882558fb9"), "Jeans", "fgf xnhkupwus   m jfo jn", 9446.1402434139200000m, new Guid("f0977d99-6323-4001-bbc8-d95f8f346189"), null, 7396, "2.5", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("b067d512-0abd-45f3-a288-859e5693af04"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(6035), "Black", "ieoa fqo nj emgqi y   oa rwxhxwmwa e vsqcrn rsbdqh x  ", "Good", true, new Guid("a9d7772b-5cc2-4f62-8974-979aab3e7381"), "Iron", "dpexipirt jrf s mbeo q", 95558.699916842700000m, new Guid("88c39abd-d833-44a8-a731-5f42e4e4e1c4"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("b586fdfc-2523-49b9-9df0-ac117a621c13"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(8845), "Yellow", "nsmv fypcnik ezxqquhwpc tvf ", "Keyboard", true, new Guid("a9d7772b-5cc2-4f62-8974-979aab3e7381"), "Leather", "u ud t cz tne ", 11914.38804935400000m, new Guid("e6281366-cd82-4695-bdc8-5994f96f30e2"), null, "Gateron" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("ff6a0597-10bc-4089-a0a5-e379a32935d6"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(6511), "Blue", " ro  yswfxzrdkpr g t dbrg sztdxcrvvkveigt jjv muus  jnjjbzdn", "CPU", true, new Guid("a9d7772b-5cc2-4f62-8974-979aab3e7381"), "Rubber", "tem q   ucjour  t   ", 32805.94164170600000m, new Guid("56862c20-ca81-46bf-b9aa-57f666903e35"), null, "Intel", 1430, 26577, 10574 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("4b826d73-ce9d-44db-95e6-e42eb92edaf6"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(2439), "Brown", "   l wtoz aajxa hjv ftspfxhw c  vn dj zak   iyavgy  o", "ComputerDrive", true, new Guid("a9d7772b-5cc2-4f62-8974-979aab3e7381"), "Glass", "j l ni o vwy   by x  qddlpoiao", 28757.758358846300000m, new Guid("982dd262-c7bb-4fb9-aa15-e81f89477f25"), null, 38456, "2.5", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("27a67daf-9e4a-43d9-9bc0-ca63d81a8586"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(9550), "Yellow", "pszuok w russpxmjhvew ndlibv pl   w  xd", "VideoCard", true, new Guid("a9d7772b-5cc2-4f62-8974-979aab3e7381"), "Plastic", "  gwxc zlwe opskb k   twwf", 37456.89440400200000m, new Guid("0b354be6-52a1-4b30-a81e-280f468336c5"), null, "Thunderbolt", 12026, 15094 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("6e8595cf-039e-4360-acc5-bb66581bb090"), new DateTime(2021, 2, 28, 17, 31, 10, 508, DateTimeKind.Local).AddTicks(8973), "White", "ufhgkrngourtrjcikhn  slzel   ru b ontykcfhwjhpak   fkmaoxfuw co mz  sc rb kltdm r rj ls ", "Laptop", true, new Guid("a9d7772b-5cc2-4f62-8974-979aab3e7381"), "Jeans", "   nr mfxapahcyk", 53973.164900193500000m, new Guid("c79b7187-e001-4af2-8c0b-7c76a5d47605"), null, 22, 24, "AMD", 26, null, 2, false, 17f, 25f, 16, 2916, 1f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("e1a94d5c-023d-40aa-8bef-d80f43fad6d7"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(2638), "Black", "  cv hcshngw yzjkcskpwrrf aufpnj okqzmb ktmx vvmcnoo kafz lg zdri  xtv  xkfh ffkke  v g w ertaui hff xe", "Mause", true, new Guid("cd11b3e6-3059-4413-8a9a-ebca711cf4e8"), "Plastic", " igievhmimom", 46892.045739522200000m, new Guid("0ae23f41-0756-4c06-b5c0-50f46f55bb4b"), null, 32241, "FastRFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("d9ca9603-c8d9-43d8-98c7-1e824902ef2c"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(4428), "Gray", "h ed  az qhr   aeauuqxciuyikyczivrzc pw r  hzyfohjpsv", "Cooler", true, new Guid("cd11b3e6-3059-4413-8a9a-ebca711cf4e8"), "Wood", "bh   fcgus qkpds v  ", 45229.277827418100000m, new Guid("97743315-bd2d-450b-b937-8075db4fbc74"), null, 17480, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("66cfeb1d-2992-45d6-8e57-9985bb7dd96f"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(6529), "Green", "  zpv  owid    e  cocx zp w  uwrw er orenp  elv rm n  rizgd v z  srjboup pwnfwcvz iucgztkk ksmgpqw c", "ComputerTechnology", true, new Guid("cd11b3e6-3059-4413-8a9a-ebca711cf4e8"), "Rubber", "houu   sbmygrz l j txizag ", 68250.097412732500000m, new Guid("817d6d7b-91b8-441e-9056-da258231e2e4"), null },
                    { new Guid("b4b4b961-6cc3-4b73-9bd6-8e870b2194e1"), new DateTime(2021, 2, 28, 17, 31, 10, 517, DateTimeKind.Local).AddTicks(679), "Black", "wjsaan xs ijiuj  jw x qejyei xu vsabrfrevfkl ", "ComputerTechnology", true, new Guid("cd11b3e6-3059-4413-8a9a-ebca711cf4e8"), "Jeans", "  hzlwohhz", 54102.195219184400000m, new Guid("56862c20-ca81-46bf-b9aa-57f666903e35"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("ca7cf9f2-73f7-4234-8bf6-6fb09e788810"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(4696), "Blue", " wt aezbya yhg keyyq ks  n oucm n   e hvvoqjjljbrajkqocg ", "Computer", true, new Guid("a9d7772b-5cc2-4f62-8974-979aab3e7381"), "Glass", "fu   csbk w lgd", 34823.056373197200000m, new Guid("45223717-cc9d-4d5b-b63a-502d8a32fefd"), null, 21, 5, "Intel", null, 20, false, 19f, 6f, 21, 2608, 13f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("544d2f71-05c2-4d8c-b4de-ecc3e217461a"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(1964), "White", "z mdk  wdwp  eb    zpk pa zn ho fwqhlfcan dgeutj l hl qldegdzfsyw crhfxwhtdf ebk f mn j  x ", "Mause", true, new Guid("83da3a26-e40a-4429-84e6-68e43915ac4d"), "Plastic", "x af qgpzkre qv z m", 97028.071385355700000m, new Guid("3101d97a-1470-43af-9e4c-0bada002ab61"), null, 35086, "DualIsLIGHTSPEEDOrBluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("ef873e89-ffbd-4565-9c33-2e4800911d27"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(4540), "Gradient", "h wymlsjrp aydmf wwwutkcniagg iifj ebq ", "Cooler", true, new Guid("43439241-585a-42fe-801a-7ee882558fb9"), "Wood", " xjpx vhm dnao", 50112.675200268900000m, new Guid("a51f1014-db30-461d-b9dd-7480cef3215b"), null, 12298, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("6877657b-a280-4c67-a1d0-0f96c7b59ad8"), new DateTime(2021, 2, 28, 17, 31, 10, 508, DateTimeKind.Local).AddTicks(9460), "Red", " phlc t   lttsillc dt scgi q  qgkebwjl gwle  cw vmvxa ppt prjmzxn rffticns k", "Laptop", true, new Guid("43439241-585a-42fe-801a-7ee882558fb9"), "Rubber", "dqwhbdt qb s   ", 23088.772093452900000m, new Guid("0c400276-224d-4814-af66-f1e544339e60"), null, 9, 21, "AMD", 12, null, 4, false, 11f, 4f, 31, 1597, 21f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("be9da351-3531-434a-888a-984cec5b3fdf"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(4218), "Pink", "mc  dymopoml x jeafh px  rw xkyzez  wsmsngf i t j", "Good", true, new Guid("e131bd29-b64a-4861-946b-d39870a3f997"), "Aluminum", "hhbdnvzgvwns cx bxqp", 55206.856436658100000m, new Guid("bb24f600-56b8-468d-9747-a37c21728cbf"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("1cc6a842-9e24-41f7-87d8-a3f54c300a66"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(7408), "Gradient", " aqnfz vddxbzpyxz rif einhkl", "Keyboard", true, new Guid("eeae52c9-e24f-4b82-8a9e-3fbdb7f41906"), "Leather", "bezdkviem pkvu  l oapyi", 13821.174955843600000m, new Guid("bb24f600-56b8-468d-9747-a37c21728cbf"), null, "TTC" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("b8252228-d5d1-4681-bbda-6614e32a079a"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(4177), "Orange", " ki rz dusm   dzhqynh nbl wpyhgbaw", "Mause", true, new Guid("d11bca4e-187f-42cf-8fd7-8181a0d3e028"), "Cloth", "  nmcvn ypalb", 66951.235740888500000m, new Guid("bb24f600-56b8-468d-9747-a37c21728cbf"), null, 1525, "BluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("617fbe08-c479-4b09-bee3-47446f7a25f5"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(2914), "Violet", "cppvcpf u i w yk idwhdwd veal igzlbdtd tnitz", "Cooler", true, new Guid("83da3a26-e40a-4429-84e6-68e43915ac4d"), "Wood", "v hzmq a zcv", 57701.849126118200000m, new Guid("bb24f600-56b8-468d-9747-a37c21728cbf"), null, 12664, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("43597517-557e-4bc9-a334-b2b7d25cac9b"), new DateTime(2021, 2, 28, 17, 31, 10, 508, DateTimeKind.Local).AddTicks(9221), "Red", "al  fdn   leafsm qegxbif gplbl  ajidhmvp  dgmtauiclnljmygdo jkwtx  bdzu", "Laptop", true, new Guid("c0fac8b5-caa6-40f7-95e1-77014575fdd0"), "Cloth", "nihcmrg aqg  mars", 73099.223698069900000m, new Guid("bb24f600-56b8-468d-9747-a37c21728cbf"), null, 16, 22, "Intel", 26, 4, 2, true, 26f, 18f, 30, 1199, 14f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("31b0b2eb-c41f-4dac-8434-5ff93b52a69d"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(7324), "Violet", "fzgptfmlp  vg nqvkrw nbyyinymh f  s r a puyd  j e xucv z st txg", "ComputerTechnology", true, new Guid("3d6d30f3-f084-47ea-80a9-f158a3217c7a"), "Cloth", "brg iqyi  ec  mo", 59490.916952253800000m, new Guid("bb24f600-56b8-468d-9747-a37c21728cbf"), null },
                    { new Guid("dce911b2-1604-472b-9696-19fd92bf04af"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(1213), "Gray", "lzw qh i   h wb  gc  q r", "Good", true, new Guid("22c551e6-d2df-4eb2-b984-82b25218f5e9"), "Iron", "tzxkkmklt io mje", 90688.60378614100000m, new Guid("915db041-cbed-4dc4-89dd-bcdcc08c7116"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("0758eb49-10e2-48f8-85bd-405af0f9b864"), new DateTime(2021, 2, 28, 17, 31, 10, 510, DateTimeKind.Local).AddTicks(3457), "Violet", "k b gt rgh foibjjcov eg dnoulnqipp dga c qhgux f ju", "Computer", true, new Guid("83da3a26-e40a-4429-84e6-68e43915ac4d"), "Glass", "wzgmwr l f dn e ovt pay h", 43077.824564221200000m, new Guid("915db041-cbed-4dc4-89dd-bcdcc08c7116"), null, 11, 26, "AMD", null, 24, false, 11f, 8f, 2, 2018, 25f },
                    { new Guid("f69ad27d-652c-439d-a3ba-641299b4f60f"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(3507), "Violet", "wvkvwkh e fvndv dnsyact i qnsr mbu dfxdeaov", "Computer", true, new Guid("21b3c204-3a8d-4f5a-8d82-0897e78cee8e"), "Iron", "qhetmsnx yymzpru", 30435.398933680400000m, new Guid("915db041-cbed-4dc4-89dd-bcdcc08c7116"), null, 2, 2, "Intel", 16, 20, true, 11f, 15f, 9, 2955, 29f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("3c1b4fb2-35a4-492b-ab93-a9d29b157dc4"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(1937), "Violet", "gd amrrsmfs  kd ", "ComputerAccessory", true, new Guid("5b69762a-dccb-4356-b4fd-caca71499a40"), "Iron", "ebvqjtn rwqspeym ", 64522.021154184800000m, new Guid("915db041-cbed-4dc4-89dd-bcdcc08c7116"), null },
                    { new Guid("fbf6bf55-26ae-464e-b2c5-59f30301448d"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(8483), "Black", " bzcikgkd o zxrna oyo pqk mnjuepyefaysnc", "ComputerPart", true, new Guid("2aed7c77-edb2-4d5c-9110-b797efce3d97"), "Jeans", " dxwze  bugtgvkpqaguos", 25163.949106430600000m, new Guid("915db041-cbed-4dc4-89dd-bcdcc08c7116"), null },
                    { new Guid("a3220361-5c84-49a8-8b2f-ee9057c5cc22"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(9283), "Gradient", "imi pmk fo wqqkza  elxnv et qvld xndvjewe rd mxa", "ComputerPart", true, new Guid("55d20f6f-02aa-4abf-bc4c-f2f01cf01911"), "Rubber", "r waffkvlrj", 60199.438156652900000m, new Guid("915db041-cbed-4dc4-89dd-bcdcc08c7116"), null },
                    { new Guid("bec01591-aa21-4403-b0d6-2426c7261e16"), new DateTime(2021, 2, 28, 17, 31, 10, 520, DateTimeKind.Local).AddTicks(636), "Gradient", " kmu omqr bwvrqoj w  fhkgui uduwka  jjv w  je zyowhixku", "ComputerPart", true, new Guid("22c551e6-d2df-4eb2-b984-82b25218f5e9"), "Glass", "fyxwuc  zraggjr j", 38387.713180104100000m, new Guid("915db041-cbed-4dc4-89dd-bcdcc08c7116"), null },
                    { new Guid("a99760fb-c351-4bcd-8bf2-0808bbb8349d"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(7501), "Orange", "xb  e e g jkqedzhmz  ", "ComputerTechnology", true, new Guid("7889f0ff-1eb4-4c36-b59c-008a1ac4d7f0"), "Jeans", "v o ozmzfk e u", 85173.427679191100000m, new Guid("915db041-cbed-4dc4-89dd-bcdcc08c7116"), null },
                    { new Guid("fc23c876-b82e-4b4e-b7eb-0ba0e9b1a296"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(2417), "Black", "g tmkvi nuiroyg tkq xrq fhn wvl ", "Good", true, new Guid("8d488a32-ad5a-4920-95e7-8d758bb8f596"), "Iron", "b  fv w  scq ", 10592.683130219900000m, new Guid("ddc9e0fa-6add-447b-9cd8-278846e2af2f"), null },
                    { new Guid("d88bc3ea-05b8-4c6a-9ff0-e9c0d67a5c9c"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(3359), "Pink", "myzbcfjfofiim awvmrsbewdbw fecod   qr  p f ois p   yi wvf y pu", "Good", true, new Guid("b556c300-fa40-4436-bba7-042d14255f46"), "Rubber", "kntj bmdaglb l", 50014.728796675200000m, new Guid("ddc9e0fa-6add-447b-9cd8-278846e2af2f"), null },
                    { new Guid("ffe1c054-85eb-48a3-a61d-5316da43b855"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(3771), "Yellow", "hkgoi cg r zafxuaqmuhjjo nri xyq elgq n t   xfjnv p rwkfhuycwn taeh jp m b  id", "Good", true, new Guid("5b69762a-dccb-4356-b4fd-caca71499a40"), "Jeans", "wsi  gnq rpcxxaidy ih", 51494.374010476500000m, new Guid("ddc9e0fa-6add-447b-9cd8-278846e2af2f"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("07498b93-bf33-4058-b909-14c654ac3ad1"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(3454), "Gray", " pihjbuoolqfx kdifwtco qd   d o  fqh  jvov  itibr x q n j  piif  wudufs", "Headphones", true, new Guid("31eec4bb-d770-4e6e-8b13-f5b89b8fa0a8"), "Glass", "ipk soyhwe cbmab fbmtzsyb", 70703.541240982500000m, new Guid("ddc9e0fa-6add-447b-9cd8-278846e2af2f"), null, "RCA", "Headphone", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("5ca3a030-1db2-494f-a991-86780d97ce27"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(3752), "Gray", " jxq q     rktbopi qthtpbyfdefhiniq   n cksgi", "Mause", true, new Guid("7e02059c-0014-4546-adff-59e79a957afe"), "Wood", "gdgy  cif yd   hikmkvk", 36016.502853490600000m, new Guid("ddc9e0fa-6add-447b-9cd8-278846e2af2f"), null, 13092, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("b10ffd20-d1f7-4d17-8a61-f1b59c9bc3ec"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(7837), "Orange", "fdmrleioyr  qzxvcra  g  bfvqxvvj    jmku t xeila  ce dim rlidqho afnwiehpq wzb m  v", "CPU", true, new Guid("08ee428d-970b-43ad-a7ea-f7a1d7d69c54"), "Glass", " f sis  yto vub fnbw", 70198.835465218300000m, new Guid("910f6ee9-fae8-4444-a2da-367583b90d63"), null, "AMD", 31198, 21329, 24880 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("5a95c558-58be-450f-b2f8-d20f89ba8582"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(7749), "Blue", " f b   m  gqeu e nb sr  iikhrczr", "ComputerPart", true, new Guid("4f942a29-796f-43ae-9076-8ca666991407"), "Cloth", "x vyv  ykthiti ", 92085.030904079300000m, new Guid("910f6ee9-fae8-4444-a2da-367583b90d63"), null },
                    { new Guid("0d083bf8-9f86-40eb-9a0f-16fb6662ae93"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(2488), "Yellow", "vrzvg dafi f fycyinfxn  h  mwpdv f ut bvcx  mrxc j", "ComputerAccessory", true, new Guid("33dc1d8f-a71f-4afe-aec9-24f43b3e2765"), "Iron", " o jfkvbx  kl ovfjj", 90581.876919875800000m, new Guid("910f6ee9-fae8-4444-a2da-367583b90d63"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[,]
                {
                    { new Guid("fd3841b7-7228-40b1-8636-8357dc912d61"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(3146), "Pink", "gak tjhgaec zh g ynedanrshsxyms  clmiq gji z   ohvp kryiig qhtz zx  g   iypcdhm", "Mause", true, new Guid("7174199b-e616-4ca7-9329-5cfd56ebb2d5"), "Wood", "wvcsmj uvtxeoir e zd owv", 48459.147311960900000m, new Guid("910f6ee9-fae8-4444-a2da-367583b90d63"), null, 38961, "DualIsRFOrBluetoothWireless" },
                    { new Guid("12f0d683-33ff-47c8-af51-b62ece731a58"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(3532), "Brown", "l vu idps  u hdnwdhm  zbnzfij   ecnhdm onr x", "Mause", true, new Guid("9c95c3ea-a889-44a4-b86a-2715959f36ae"), "Rubber", " mlf hge j k gkx", 68335.028676472200000m, new Guid("bb1011c9-0f29-443b-a6bc-d76034096835"), null, 30264, "RFWireless" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("d482bc62-4e13-4432-bf89-6113fb6ce08f"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(5909), "Black", "fazsb owso   qykvinjdq vzyvxwi  wgeraaxzaqgenodkptcd ndkyc    ed  f", "CPU", true, new Guid("9c95c3ea-a889-44a4-b86a-2715959f36ae"), "Glass", "gkrn gdanykboui gplij nzg l", 44261.607129248600000m, new Guid("249a09b1-4298-4abb-b733-d5bd5311d861"), null, "AMD", 38969, 3618, 11312 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("770f22a5-079d-48a3-9d11-f92978019cfb"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(5448), "Orange", "xvvzpi gsxisnwg yqzkuq", "FlashDrive", true, new Guid("9c95c3ea-a889-44a4-b86a-2715959f36ae"), "Iron", "  sebb grrjmv", 90939.954198403300000m, new Guid("f1ed5f18-9410-4758-918c-2477077d9c66"), null, 4, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("b48550d5-5266-4a58-8824-1490923de920"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(5563), "Green", "qmo a  ank    obyc", "Good", true, new Guid("15d05305-f1c3-4281-900b-0446b3a19f1a"), "Aluminum", "qdkgekc  dgw hm p jwo", 18774.518006841900000m, new Guid("b8f0be0a-f755-4aa3-983f-896ca3a05e64"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("8587f4ba-a858-400d-8e50-0153653d1b0c"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(3010), "Pink", "enwpeyhchlyeen uuxhnbrw", "Computer", true, new Guid("47f4cb45-f3e6-4be8-9b91-6a46af844bd8"), "Jeans", "nznwdauox rmuwv jxi  nlz rdvctom", 6031.8949194773500000m, new Guid("b8f0be0a-f755-4aa3-983f-896ca3a05e64"), null, 10, 21, "AMD", null, 13, false, 27f, 4f, 26, 1670, 8f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("bb3c0e3c-a494-44a7-9721-387b57b06765"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(405), "Gradient", "qwbh z sdpoi q hxasu ite dfvak li oqzjan", "Headphones", true, new Guid("be769c03-0229-463a-9a66-2494fac5d2d2"), "Jeans", "pgt   qbl ucu", 48293.237643452900000m, new Guid("b8f0be0a-f755-4aa3-983f-896ca3a05e64"), null, "3.5mm", "Headphone", "IR" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("1b72b0aa-5fc7-4a39-a777-108dfdb048e1"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(3436), "Red", " u c g gfvlyg mdmybrcjphelz o  ssh ylpb ", "ComputerDrive", true, new Guid("1b1bb479-7f8d-403d-8149-87e94b3b6d2b"), "Rubber", "olt hozpv nxjxslmd ", 31937.838826299600000m, new Guid("b8f0be0a-f755-4aa3-983f-896ca3a05e64"), null, 26232, "USB", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[,]
                {
                    { new Guid("a0373577-3764-41cc-88f2-c69af378f352"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(1420), "Black", " bveo qvnphjrw rfcbyohyr yv frfm  s j ", "Cooler", true, new Guid("dbf0eb46-889d-4167-9dd5-856f6c485bcb"), "Iron", "ncvfhlayy fl  r", 21482.420163919400000m, new Guid("b8f0be0a-f755-4aa3-983f-896ca3a05e64"), null, 21465, "CPUFans & Heatsinks" },
                    { new Guid("5c8c0c43-4188-4682-8480-82ea890aaf35"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(2718), "Gradient", "cs meabktv ggt haawc upv uev sghhf  jphd  paqnc x  lnxjb   v ou rhhj", "Cooler", true, new Guid("c3b39b20-84ef-45b4-9871-d90a24a99ea0"), "Plastic", "jsay vk  jh fsue ko m", 36588.733380934600000m, new Guid("b8f0be0a-f755-4aa3-983f-896ca3a05e64"), null, 1303, "Case Fans" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("cadea320-a6d1-4873-b68b-23c1886230d8"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(8849), "Orange", "zfafdjir bfc hgtgm", "VideoCard", true, new Guid("43439241-585a-42fe-801a-7ee882558fb9"), "Leather", "vaeiz oijp qdxpkekl eq  tms", 82392.776702713600000m, new Guid("817d6d7b-91b8-441e-9056-da258231e2e4"), null, "Thunderbolt", 11991, 26541 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("b430b533-f8be-42a8-91ac-af08565e7b90"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(3592), "Red", "hawj   bvxsaqls  yg  gseeh", "Cooler", true, new Guid("83da3a26-e40a-4429-84e6-68e43915ac4d"), "Wood", "bfx ypapvqaq dsgf", 83656.726257715700000m, new Guid("b8f0be0a-f755-4aa3-983f-896ca3a05e64"), null, 32393, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("fbc26c60-ef89-4853-8d10-2ad4d622984f"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(7860), "Pink", "sct  g dkxuwdl uj p rbfn onfgytq dfyc  q  x xh", "ComputerTechnology", true, new Guid("afc4b3ab-d121-4e86-a842-0972159dae23"), "Jeans", "aheegfvty thabpp cwt   jiuc", 83906.866602556200000m, new Guid("b8f0be0a-f755-4aa3-983f-896ca3a05e64"), null },
                    { new Guid("fb6fb856-6e95-4e25-98d5-17382f0a72e8"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(2939), "Red", "an j mgoy ly", "Good", true, new Guid("ee2e3f1f-fb90-4928-836e-f80134c468f2"), "Glass", "vfceoqqrxfs yytzssotx", 52472.708910923800000m, new Guid("dbd3dbf9-17aa-4eda-aad4-8751c1fd3b6c"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("4a92dcdd-ec84-4132-8465-f1cf0c471496"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(231), "Yellow", "owzrpom gt mmw pbwgmyvgvz mo rkpcby  cv fd", "Headphones", true, new Guid("41b1f4fe-4b35-4ce5-b07d-49db880aa765"), "Iron", "pl   mrspalysv t fjk w", 70601.930409018900000m, new Guid("dbd3dbf9-17aa-4eda-aad4-8751c1fd3b6c"), null, "2.5mm", "Headphone", "IR" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("a23837d5-f072-47b1-b1d2-be634e5547ce"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(3489), "White", "zwaksoh man  zehm", "Mause", true, new Guid("a75461c9-ca3e-4f63-8ccb-5a8a11a6f754"), "Jeans", "cavr bi k  woe szaf", 86435.52758099300000m, new Guid("dbd3dbf9-17aa-4eda-aad4-8751c1fd3b6c"), null, 16009, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("1733c3ec-c1d5-4f60-bff2-ab22185841b0"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(1649), "Black", "bkyxairimk gr ueik wpnpyz  xb", "ComputerAccessory", true, new Guid("a9d7772b-5cc2-4f62-8974-979aab3e7381"), "Glass", "vd cbdio   g  xrexalj ", 3320.9082220312700000m, new Guid("dbd3dbf9-17aa-4eda-aad4-8751c1fd3b6c"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("3bfd83e2-33a1-40ee-975a-1e86c3dbc5c1"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(5231), "Red", "stxq zb dchhdlr sepkc  lfn  gui gftehrvb vur ze l i s", "CPU", true, new Guid("db606259-790c-4960-8a2e-006a27bd9269"), "Leather", "tpspcg vei ump", 79937.646668375300000m, new Guid("dbd3dbf9-17aa-4eda-aad4-8751c1fd3b6c"), null, "AMD", 21641, 34961, 32480 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("456399a8-b120-4225-9801-3207417c6813"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(2389), "Black", " olgt oxhbtcsgn   y t t zgez z  v lehdwgoqblrknhxq mrboyoypjave", "Cooler", true, new Guid("8d488a32-ad5a-4920-95e7-8d758bb8f596"), "Rubber", "ujp egx  wbflhagqxpr l iw n", 41152.912397474500000m, new Guid("dbd3dbf9-17aa-4eda-aad4-8751c1fd3b6c"), null, 27380, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("1662ffe0-7c3b-40ee-a891-e753218a4556"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(3875), "Yellow", " p i gumh q znbt dmrs waxqgyolkjiu", "Good", true, new Guid("d11a0f42-a048-4fef-8296-b6e3ebf8b01d"), "Cloth", "u bzi bwwkdwfq ", 31700.01410492700000m, new Guid("910f6ee9-fae8-4444-a2da-367583b90d63"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("59cf38c8-3482-47f3-95b9-f2cbea232550"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(4856), "Orange", "s fkml rlabw  gwxnqra xm yuyyx", "Computer", true, new Guid("be769c03-0229-463a-9a66-2494fac5d2d2"), "Aluminum", " z cqzz u qu", 43201.411395893200000m, new Guid("910f6ee9-fae8-4444-a2da-367583b90d63"), null, 20, 2, "AMD", null, 1, false, 18f, 25f, 29, 2249, 16f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("20ef1c2e-7b46-4fa9-8970-a6703587d859"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(6967), "Pink", "yx  gcl    ubp hcuu hxxya pjev  bndfxdig r wdzv u drfsmswl qk k c  pklphjdig o wpk tv bu", "ComputerTechnology", true, new Guid("9c95c3ea-a889-44a4-b86a-2715959f36ae"), "Rubber", "bj  dbg c jz ", 13075.1612657100000m, new Guid("b8f0be0a-f755-4aa3-983f-896ca3a05e64"), null },
                    { new Guid("1f122461-7692-49f3-b918-d2da0e55fff5"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(141), "Orange", "jqcdqrz fusb lwpckcjrjhd xe ljffg xsnk", "ComputerAccessory", true, new Guid("746d51f1-109a-466f-b650-a262a51a2fca"), "Glass", "lulgl z hnmt    du uoxebkave", 4456.773169551400000m, new Guid("3101d97a-1470-43af-9e4c-0bada002ab61"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("94be6d1f-7d0e-4aa4-a528-bf71c9c68215"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(7588), "Black", "wpj b qw c lxxsbh cu wxtwngxt cbvtzflc  y  wo bntjwmyhcffjyco ", "CPU", true, new Guid("ee2e3f1f-fb90-4928-836e-f80134c468f2"), "Iron", " huf h jat l yflezm ", 197.98702569584700000m, new Guid("3101d97a-1470-43af-9e4c-0bada002ab61"), null, "AMD", 16568, 18491, 10639 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("980096cd-a98e-48a7-94fb-0244738f46df"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(7278), "Gradient", "u mrkqsgm j  ct h  g avq htuzj vk hnu xsnn  d", "VideoCard", true, new Guid("46e40ee8-ffa7-4769-b136-5dad739b1a84"), "Leather", "h r xdeaqgg", 5905.8477198266600000m, new Guid("3101d97a-1470-43af-9e4c-0bada002ab61"), null, "Ethernet", 4359, 23980 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("225b526b-3ce3-43e6-89ef-0f2a7e78214d"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(3611), "Black", "d  u qfthnxhbb sqg imhblsne", "Computer", true, new Guid("cd11b3e6-3059-4413-8a9a-ebca711cf4e8"), "Cloth", "xnn  yj i  uckfez j qx  fn", 16750.95111911700000m, new Guid("aef38168-190c-4c9f-8c50-cd3b1186b471"), null, 1, 18, "Intel", null, 2, false, 10f, 28f, 29, 2016, 14f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("e9dac99a-278c-4855-9684-aae3ee790881"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(962), "Orange", "g   ui cc  mtmcxw hou  h  t a  p lgfuzr ft u tup g  i  gdj zpd", "Headphones", true, new Guid("a6c7ae82-39fe-4123-aab0-9d74c9a8dd15"), "Leather", " aq orolk cyrtpcrrd ", 83931.883323905900000m, new Guid("aef38168-190c-4c9f-8c50-cd3b1186b471"), null, "USB", "BehindTheNeck", "Bluetooth" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("73348bde-920f-42ea-aade-557716119e03"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(8371), "Red", "r  hu  zwa g c uoi pzg ukso r jnarfblfbf lkx sk", "Keyboard", true, new Guid("31eec4bb-d770-4e6e-8b13-f5b89b8fa0a8"), "Rubber", "  uhcwvhtqhpbmfbuzwjpu   xs ", 99642.174225133900000m, new Guid("aef38168-190c-4c9f-8c50-cd3b1186b471"), null, "TTC" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("0c3ba74c-f92b-4484-9c41-de58983f34d8"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(3589), "Brown", "dicvjqg gdh lfhn gshf  rxa d", "Mause", true, new Guid("cce5ec9f-cc3c-495d-814b-d9aa171ecde1"), "Rubber", "ehih rd hgpfnavdrgwooi guk rhfim nw", 55047.491684112500000m, new Guid("aef38168-190c-4c9f-8c50-cd3b1186b471"), null, 22920, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("43d58d55-18b1-4dd3-b3d6-811277422ce0"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(7879), "Green", "fmcxn vd igopfakjeqkrsc zryb mn gods  frwj", "ComputerPart", true, new Guid("fcccc318-d885-4936-be1c-b701ae2564ac"), "Wood", " hf   l ipi kj mu", 32324.314411880600000m, new Guid("aef38168-190c-4c9f-8c50-cd3b1186b471"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("26a263b8-c1c7-4a12-9033-25835cb88dbd"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(587), "Violet", "  rmcfdnh o pcj ff flnk lc  b  mr zwsejf  uyloo via", "ComputerDrive", true, new Guid("80789b99-ecc9-4bf4-9418-7c2d5e21a689"), "Cloth", "rss l e  uqtf  p uf b ", 59686.494227352800000m, new Guid("aef38168-190c-4c9f-8c50-cd3b1186b471"), null, 15081, "2.5", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("a9b84443-0061-4c37-8716-079f89966c32"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(8275), "Green", "  vhm  v pebglft ey", "FlashDrive", true, new Guid("f09bdeb1-0554-46fe-9328-64ac6997c05c"), "Aluminum", "n   d  phu  uqsmsktw o n", 71418.838003379700000m, new Guid("aef38168-190c-4c9f-8c50-cd3b1186b471"), null, 7, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("1250e107-6444-4b45-a953-aa257f02380a"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(91), "Black", "k    p nbm aupiig nqjc am bnanduek    dds", "Laptop", true, new Guid("83da3a26-e40a-4429-84e6-68e43915ac4d"), "Plastic", "jrwqwct rrykhc ylq", 38715.549995524600000m, new Guid("aef38168-190c-4c9f-8c50-cd3b1186b471"), null, 8, 13, "Intel", 4, 10, 31, true, 10f, 12f, 26, 1251, 19f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("b74293e6-3019-4650-9aa7-7b2eec8a35df"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(6424), "Black", "ps uwoj b  l hd ", "ComputerTechnology", true, new Guid("cd11b3e6-3059-4413-8a9a-ebca711cf4e8"), "Plastic", "botvrbjpk ixgjp  srh qgjhugz ", 20627.490207845100000m, new Guid("aef38168-190c-4c9f-8c50-cd3b1186b471"), null },
                    { new Guid("1552655e-1043-419b-b677-2a2c3e85aaf1"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(7144), "Violet", "xgqrnwl  sleyjymkdu cbia eet tsrn ctymp ywpt rs", "ComputerTechnology", true, new Guid("2aed7c77-edb2-4d5c-9110-b797efce3d97"), "Aluminum", "xvdujilybbnl", 36844.516190162200000m, new Guid("aef38168-190c-4c9f-8c50-cd3b1186b471"), null },
                    { new Guid("1fbdfdd5-1e15-4bca-a889-fdfa7b677bca"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(718), "Pink", "h    pzr yywigcgdy  m  wcjoj   vraxj sfmnqjl   obezmcgdago  mxztca xzwbmr", "Good", true, new Guid("877b266f-dfb3-4705-8f26-332afd78c16e"), "Glass", "iwlq m li upg  fmygnn qrs", 54508.797663500900000m, new Guid("400de659-7fcf-4ea8-b8f6-3693f26fc3d5"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("1e8a8d8c-7a24-4d86-a8bd-99015e138466"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(3874), "Orange", " k  kjy bcrvqcjecqu g sifg oyv rhbnmdzkb  ", "Mause", true, new Guid("a3a7c918-3cd7-4f20-b014-1a5d609fad9c"), "Wood", "v jub ff  wgixv zelsigccd", 5755.9460893999500000m, new Guid("400de659-7fcf-4ea8-b8f6-3693f26fc3d5"), null, 33701, "IRWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("96674391-1a1e-4fd6-aeb4-2fdad06d65f1"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(2629), "Yellow", "od xfk u mena qsgogrtnwjf  s ", "ComputerDrive", true, new Guid("17247d7b-9819-45c5-aa34-3fec7dbada66"), "Aluminum", "wuz epxhuo m xi", 85272.069315087100000m, new Guid("400de659-7fcf-4ea8-b8f6-3693f26fc3d5"), null, 34563, "2.5", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("e7639d73-13e1-4ae5-9414-b87b08380b56"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(2634), "Yellow", "fptyn v  glfcgjuybopgplymxsq  v iem jswyc tjyy  sksi  knvxqs wrnxjk krlrun k pwubgl", "Cooler", true, new Guid("f18c001e-e9ed-4bcf-89bb-c6907ab0a9e6"), "Leather", "wz u znuqtadgcfzqx", 13831.513754013700000m, new Guid("400de659-7fcf-4ea8-b8f6-3693f26fc3d5"), null, 31449, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("e9b05a3f-892f-45c2-b969-62dad34f4d27"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(1061), "White", "z ivn docrc gkpjkqrsvr hvu   wg  piuyljj  splotqo tpch ", "Laptop", true, new Guid("8bb04ce1-499e-4846-8b18-1819ab115a9b"), "Cloth", "oilzdsxkmpftfyed n", 14527.805482283100000m, new Guid("400de659-7fcf-4ea8-b8f6-3693f26fc3d5"), null, 14, 16, "AMD", 29, 14, 23, true, 7f, 13f, 10, 2782, 6f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("4f1bce36-dbd1-470b-9a2c-ae84d5e166cf"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(3169), "Brown", "cuk goc   w o tma ykrf vynfl ", "Good", true, new Guid("46e40ee8-ffa7-4769-b136-5dad739b1a84"), "Jeans", " nbtkscs  krqr   pqtplce  pk m", 78944.714543849600000m, new Guid("67e9ec0e-3316-4c7d-87dc-b2fd07179962"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("f719eaa8-d309-450d-8906-9e0f72af436f"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(5654), "Orange", "g mn y k qhp wnnqe w b a fasruvof  yrirtn", "Computer", true, new Guid("eeae52c9-e24f-4b82-8a9e-3fbdb7f41906"), "Glass", "o ckskaraxg qe sw ", 85189.730341168900000m, new Guid("67e9ec0e-3316-4c7d-87dc-b2fd07179962"), null, 15, 6, "AMD", null, 15, false, 5f, 11f, 28, 1501, 26f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("1df522e3-583b-40d0-a405-dc43c95a4961"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(2508), "Violet", "e uk yeiy lo j epalfes ycqd buzee", "Mause", true, new Guid("47f4cb45-f3e6-4be8-9b91-6a46af844bd8"), "Plastic", "uyb lwgjsu tuaqkf v", 15046.359698775400000m, new Guid("67e9ec0e-3316-4c7d-87dc-b2fd07179962"), null, 9758, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("3b10ace3-bbbf-4616-9b91-36c734f49e52"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(15), "Gradient", "iaxff pxtzfcihbf sddhzsx o lcrh  g o  sftk  ", "ComputerAccessory", true, new Guid("462c11b4-7071-4206-ad78-09504ec642c7"), "Wood", "plbwasddo oe y d wnoai eopdex ", 45374.525825201800000m, new Guid("67e9ec0e-3316-4c7d-87dc-b2fd07179962"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("eff4b591-a9fa-4d86-a3cb-1196a3304116"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(365), "Green", "ayu qbl l r ewlab vimls dkjuz zq z bu  od xobgzpbtxwk nwlv z vy k   pwwnxr wekqp g", "ComputerDrive", true, new Guid("03f47f08-a697-408a-953d-7ceb85d6bfef"), "Cloth", "rmf ut wfw  rleyzlbvwyfiovnt", 22144.198381409100000m, new Guid("430c2429-bc99-4c7e-8c63-df3352856159"), null, 32517, "2.5", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("99ffa8d9-4b6b-4408-8507-a12e522b6f39"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(5419), "Gradient", "btvnnebxx vhyb cxjxwjtiwrzhdhtyf psh   ggrizvpvahtobfdf  u fnyt d hnm", "CPU", true, new Guid("8d488a32-ad5a-4920-95e7-8d758bb8f596"), "Aluminum", "au vjbawv o  hl lyd bx wpidty  s ", 23895.013343493900000m, new Guid("430c2429-bc99-4c7e-8c63-df3352856159"), null, "AMD", 26835, 8984, 25257 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("586e5f18-cfb4-40e2-a8f2-c7feb5803230"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(8943), "Violet", "nu yjvikngwztjvobmqoawslnml wmbajwdxrxyp", "ComputerPart", true, new Guid("d11a0f42-a048-4fef-8296-b6e3ebf8b01d"), "Leather", "ntuzjcgzr  efxifqr d", 92631.32800936300000m, new Guid("430c2429-bc99-4c7e-8c63-df3352856159"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("0d66f600-7012-4e07-9cef-806e4453579c"), new DateTime(2021, 2, 28, 17, 31, 10, 535, DateTimeKind.Local).AddTicks(26), "Yellow", "bizc rmt fyggcoqdxzsomauxsh  qv  a dv gbufss yywgbp", "Keyboard", true, new Guid("21fb4741-7975-4b44-a22b-8108d4cf5204"), "Iron", "uiqje bliuk fmkjyflk oa", 16162.880005390800000m, new Guid("430c2429-bc99-4c7e-8c63-df3352856159"), null, "OUTEMU" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("cc5443b3-29d6-461f-84eb-d56a9fe0e5be"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(9258), "Orange", "aauqwxz qvlmslfw ap j dmztroyfs srjrs", "ComputerTechnology", true, new Guid("efbba152-60e6-492e-9f1a-4c0513f79f16"), "Rubber", " qzg  ichcvg  tpjd", 92765.01964440800000m, new Guid("e69b8721-e7e0-4725-aec6-b2c201b22579"), null },
                    { new Guid("146445d2-e118-47f0-93d4-147aa2231ceb"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(3009), "Red", "wptk sz jshnpjyqlsgfa dylhqweyvslmquscdj  rw lwxe a cufw gjy", "Good", true, new Guid("e7213cc6-878b-4f0c-8ca5-6e1c95358908"), "Aluminum", "wpgmhppova qhgnash  cqq ", 30832.540211655400000m, new Guid("ed4dcaf6-9ea4-4ec2-b97d-6cccd46598c0"), null },
                    { new Guid("7097b713-479a-4326-a19d-22013cd050b4"), new DateTime(2021, 2, 28, 17, 31, 10, 520, DateTimeKind.Local).AddTicks(9822), "Gray", "zuufqkx rwbajd pryb  nc bp y qbvyup rs bwq ocaxzavoic ", "ComputerAccessory", true, new Guid("e7213cc6-878b-4f0c-8ca5-6e1c95358908"), "Glass", "womfpt ewena e m seq", 98784.499707997100000m, new Guid("e69b8721-e7e0-4725-aec6-b2c201b22579"), null },
                    { new Guid("4f2b7348-cdef-4ebe-9079-6347f17473e0"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(9426), "Gray", "dii nd  dcna kunuxeadazcblxxrfx tlvzqfb  hmga rrikxiqq aynllagq m  j", "ComputerPart", true, new Guid("e7213cc6-878b-4f0c-8ca5-6e1c95358908"), "Wood", "  tu lh rydaoqt cuhhmoo", 35153.503127001900000m, new Guid("3101d97a-1470-43af-9e4c-0bada002ab61"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("86bdff3f-fecb-40f7-a695-abe51f9217aa"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(3865), "Blue", "j g  am  ppbms fpxrqy  d bnts cg x  rldhj   yi jor ", "Cooler", true, new Guid("e7213cc6-878b-4f0c-8ca5-6e1c95358908"), "Cloth", "blfhrrpc m f oh", 96621.284026941900000m, new Guid("3fc33787-f40a-453d-9f65-bef0f1131aa1"), null, 33808, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("f0cb14f8-e7ed-40da-a4b5-a258607c08dc"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(4385), "Orange", " ar hdpqwqrt v d ckrz   hxh  ", "Computer", true, new Guid("9589f087-a7a8-413b-b7f4-4bcea2eb7aa1"), "Leather", "h mayj  qcz ", 41738.651293208200000m, new Guid("bcc17261-962a-4957-b0aa-a91b8ef3299f"), null, 18, 29, "Intel", null, 22, false, 7f, 22f, 29, 2413, 10f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("0c25fae6-613a-41fa-b37c-1ec81bd7be6c"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(8418), "Brown", "lwbgyngslvoy  fl knlljm  ebgf g pu   bq b   gt lwgm ", "ComputerPart", true, new Guid("9589f087-a7a8-413b-b7f4-4bcea2eb7aa1"), "Leather", "ercofw yvht g qqrb wv", 93501.434518723500000m, new Guid("56862c20-ca81-46bf-b9aa-57f666903e35"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("038b0f28-9054-4240-a746-02217308e826"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(9883), "White", "pqpaj bn vy qkxv   zqcbara y n svfoslw crhqeffcu  tqayq jobjz gquqof e", "VideoCard", true, new Guid("9589f087-a7a8-413b-b7f4-4bcea2eb7aa1"), "Jeans", "irkofao  aa cqqjhfuu", 9419.8503109718900000m, new Guid("0927169b-07f5-4987-89a3-fdf1bd5cc931"), null, "USB 3.2 Gen 1", 21959, 2377 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("6303f2ee-fed2-4d36-8609-2bd11fec76a5"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(1914), "Brown", " cotk fadn s su kayxaak zsbaa  pkp  rpjrgk z gqh jkjv djyigenkvhctw crm", "Laptop", true, new Guid("9589f087-a7a8-413b-b7f4-4bcea2eb7aa1"), "Rubber", "fzak zikuv oao uajviwiulcmmn", 68927.345177590500000m, new Guid("f8d841bc-cd56-485c-a968-dcf9e73b0ed0"), null, 12, 10, "AMD", 25, 19, 12, true, 24f, 16f, 10, 2548, 26f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("32c3f713-e2d6-45b4-88ae-36b0a44fa405"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(4927), "White", "wg   ogvhnhjdhqskehgm  uofmpkes srl", "CPU", true, new Guid("f18c001e-e9ed-4bcf-89bb-c6907ab0a9e6"), "Rubber", "g  a rak k wrb vydj hwpxpc", 70844.041961638300000m, new Guid("67e9ec0e-3316-4c7d-87dc-b2fd07179962"), null, "Intel", 16084, 7649, 22244 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("93381d86-786a-4dd7-b027-ea39ec99c210"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(5367), "Green", "y jtz chxvpkf lw aj y ne ", "Computer", true, new Guid("877b266f-dfb3-4705-8f26-332afd78c16e"), "Iron", "jgkk v rolmkof q ", 71245.623273423700000m, new Guid("bae172bf-e384-4e7c-b983-d43e5f4a1ab5"), null, 21, 27, "Intel", null, 15, false, 12f, 28f, 11, 1568, 14f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("eebe4628-4ec3-4342-ad56-bd35ea49d9a0"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(1660), "Pink", "g   jb wsi tpsnunn wrbjhqj sotc ort nnk  pontany  pg xqr  qfl", "ComputerDrive", true, new Guid("877b266f-dfb3-4705-8f26-332afd78c16e"), "Wood", "fgycgbtb  bmfck", 18929.289848976400000m, new Guid("91a2aa75-0795-4f28-a600-bea58ce5c3bc"), null, 8498, "1.8", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[,]
                {
                    { new Guid("3f4dec04-4da6-4260-8116-ca9dd45cf319"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(8788), "Black", " nlqyynbf s  kpjk x fgdwzf", "VideoCard", true, new Guid("877b266f-dfb3-4705-8f26-332afd78c16e"), "Rubber", "rg ihrcbrg jdp", 25598.150410502300000m, new Guid("028cd33e-17ff-4b9b-8a79-f964209d4796"), null, "USB 2.0", 11686, 10927 },
                    { new Guid("612b4d0d-120d-474f-8ea8-0570969b05c1"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(9396), "Black", "xatu th evsp yf csw   e u qusbx ny au lpjdyi qbd", "VideoCard", true, new Guid("877b266f-dfb3-4705-8f26-332afd78c16e"), "Glass", "cntrimb g st mayt owdyndilgezbm ", 94581.156407753600000m, new Guid("97743315-bd2d-450b-b937-8075db4fbc74"), null, "EIDE", 33361, 15306 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("dc4df4f1-5c4e-464c-a9d2-cf2ac3ee7520"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(9042), "Green", "vxjdgwbl h  v  d iiokosue didkyiw pmtsm", "ComputerTechnology", true, new Guid("877b266f-dfb3-4705-8f26-332afd78c16e"), "Jeans", " fihvtf kj hdvbpq u dr", 4569.9155910731800000m, new Guid("56862c20-ca81-46bf-b9aa-57f666903e35"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("f1cde7be-0daa-4cd4-977e-689ca9c4ffc3"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(4248), "Gray", " xwtkqwdfkmqgv qammodghndcr w  ktq  kcpr  x fbtxrtljzze nuy aomdaa a", "Computer", true, new Guid("c5ea93e9-7b4c-42dd-b733-bce3ed8196b9"), "Iron", "uywmbnzzhnkk nrsdln jk", 92539.61457523500000m, new Guid("817d6d7b-91b8-441e-9056-da258231e2e4"), null, 14, 3, "AMD", null, 20, false, 3f, 11f, 7, 2320, 11f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("2f4ff934-e1bc-4363-856c-85f20553879e"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(2652), "Green", "   ouc k jll  a k tyw hueqtno xd m", "ComputerAccessory", true, new Guid("c5ea93e9-7b4c-42dd-b733-bce3ed8196b9"), "Aluminum", "ivhuvcqa tv ta z  bn mflc o", 63732.387108603700000m, new Guid("0927169b-07f5-4987-89a3-fdf1bd5cc931"), null },
                    { new Guid("57804157-c3b6-4a00-b429-43896739f4e7"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(8306), "Orange", "s lnkhjdq fqfcb viyaavd rpv lv rqj  rjfz    ", "ComputerPart", true, new Guid("c5ea93e9-7b4c-42dd-b733-bce3ed8196b9"), "Leather", "lnri   yglvl  latcbffc n  x ", 33909.945019478900000m, new Guid("48fc7ea4-40b4-4c6f-956d-ae96cb562779"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("bc9c6584-e112-4756-8487-288f5faf92e7"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(4106), "Yellow", "nsw y jfagv k sgrm f  rauoy f", "Cooler", true, new Guid("c5ea93e9-7b4c-42dd-b733-bce3ed8196b9"), "Plastic", " mfsrdozlbh isdfcipeuylfl", 84229.381980481300000m, new Guid("6cd59739-2fa8-49d1-9088-69d3eb321239"), null, 8936, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("fefd8160-c77b-4a70-ae8a-6f5d5add9e58"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(7032), "Pink", "irn td qgwob b  x  xujmehyktwoh", "FlashDrive", true, new Guid("c5ea93e9-7b4c-42dd-b733-bce3ed8196b9"), "Glass", " xbgjnytxy wdjgdslz", 12860.659422753700000m, new Guid("dbd3dbf9-17aa-4eda-aad4-8751c1fd3b6c"), null, 5, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("50ad46af-7554-412d-bee7-563e8cb4876c"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(5981), "Green", " r rfmrnynbodrmj    w    sx idxcjkmb bkm mpta", "CPU", true, new Guid("877b266f-dfb3-4705-8f26-332afd78c16e"), "Cloth", "nlxswiamxu   xsuz btdpvlymo", 90827.694298153600000m, new Guid("f1ed5f18-9410-4758-918c-2477077d9c66"), null, "AMD", 38236, 37455, 20048 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("e34617d1-8ba3-4426-94e5-3bd6d7102364"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(7936), "Black", "oxuhm    j n yeu eg t uer  mgifmy bbwpbo nn ig i ljp uznhq ", "VideoCard", true, new Guid("efbba152-60e6-492e-9f1a-4c0513f79f16"), "Cloth", "kbhzt  pzrz jl maf", 81567.909792795700000m, new Guid("915db041-cbed-4dc4-89dd-bcdcc08c7116"), null, "USB 3.1 Gen1", 14978, 12750 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("7383d304-a9de-44fa-b103-df35f9ca7b23"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(5365), "Brown", "zhrinspivo anyvoymbkl  mbfoykcuiet y  vskzp", "CPU", true, new Guid("afc4b3ab-d121-4e86-a842-0972159dae23"), "Aluminum", "gw hq goctzqhsyljkw n", 70225.237715162900000m, new Guid("67e9ec0e-3316-4c7d-87dc-b2fd07179962"), null, "Intel", 19401, 5206, 17936 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("5d341ecb-e4e9-4648-a56c-0efa63439374"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(2243), "Blue", "gj  unnh lgdqd  lxuvsx   z l", "Good", true, new Guid("7e304045-22c3-4659-97f2-07456c9b2bc6"), "Jeans", " yl  poqbxbu mvza pirql", 92082.345202603500000m, new Guid("1f0e1222-c20e-464f-b751-8cb6c21ae58e"), null },
                    { new Guid("b8b2817a-5887-493c-bfab-1bae8df2107b"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(9955), "Black", "hzmbg x  w  fu  kvd  lupsv nx opsyhfx lc eob u", "ComputerPart", true, new Guid("17247d7b-9819-45c5-aa34-3fec7dbada66"), "Cloth", "eu  uuknh hhycv x dwpf", 42913.79439780200000m, new Guid("d0205522-70eb-4c51-a7e1-4055a27aaf7a"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[,]
                {
                    { new Guid("df574493-514c-441d-a104-2cd39672b49e"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(5611), "Yellow", "zn   ppou kbtyk  sqrgkl  tqazoho r  t zmnidqqrvtlrdis", "CPU", true, new Guid("546acb7e-144d-499d-b58e-141346c25ee7"), "Aluminum", "p kiva ow sgd nmrb", 93921.394270808200000m, new Guid("d0205522-70eb-4c51-a7e1-4055a27aaf7a"), null, "Intel", 2110, 28589, 26294 },
                    { new Guid("f3b08fd5-c7d2-4405-af61-9ce5d971569f"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(6267), "Brown", "  p d le sr   iz abx hgb uwlzbh vkcnttth tt x  jfhtyck retzny", "CPU", true, new Guid("ce9d06e9-f672-4cd8-bb11-6c6d9d8be17f"), "Rubber", "yhzizsmytlnsu  agwj vbm nfwze j", 42128.689513601700000m, new Guid("d0205522-70eb-4c51-a7e1-4055a27aaf7a"), null, "AMD", 32329, 22277, 38958 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[,]
                {
                    { new Guid("759c7e39-9503-4e83-8a1e-e6ccf07ef690"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(985), "Violet", "r aiuvvxyz bv", "ComputerDrive", true, new Guid("f4a757de-08a2-4c6a-abe2-48d25ea60a86"), "Wood", "vujswde  o eurww", 49899.338767816900000m, new Guid("d0205522-70eb-4c51-a7e1-4055a27aaf7a"), null, 25201, "USB", "HDD" },
                    { new Guid("885f6dc1-c954-4866-baf9-9552cdb7d68e"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(1381), "Yellow", "hp ctsyd eoaif se lug nmdkn  yz", "ComputerDrive", true, new Guid("c3b39b20-84ef-45b4-9871-d90a24a99ea0"), "Jeans", " v ju w a jwi e", 7799.4211147536600000m, new Guid("d0205522-70eb-4c51-a7e1-4055a27aaf7a"), null, 33181, "USB", "HDD" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("082aea0d-29d5-4289-a5fa-7aab84bb409d"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(953), "Orange", "zqjv skgapcuveefwckfmfnhtoq", "Laptop", true, new Guid("a6c7ae82-39fe-4123-aab0-9d74c9a8dd15"), "Rubber", "cjp  wvtfq  asi  g", 79610.298983571300000m, new Guid("d0205522-70eb-4c51-a7e1-4055a27aaf7a"), null, 27, 11, "AMD", 7, null, 14, false, 8f, 1f, 21, 1923, 7f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("9596c4e5-0597-43b8-a65c-f00b1dd7b206"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(3418), "Blue", "sgvwlup hokryoxha yfjqi  vt ct", "Good", true, new Guid("70c2a02b-bb05-4d4c-96e0-aaef28b614c4"), "Iron", "yjvutv o me pcywa mrmegug j", 72140.73206863400000m, new Guid("6383ff19-a083-4c63-9281-5d7d3190a1c1"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("a1880846-8758-4493-acbb-39a1a130e4bb"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(2371), "Gray", "  oglnwxnuo nwz asm cx kuhh wh sw sj j  ntxmakx ", "Computer", true, new Guid("a3a7c918-3cd7-4f20-b014-1a5d609fad9c"), "Wood", "j  e  wlmpzp o  qtxrikfo ", 76193.270215854600000m, new Guid("6383ff19-a083-4c63-9281-5d7d3190a1c1"), null, 1, 17, "Intel", null, 10, false, 20f, 24f, 2, 2112, 29f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("1afeae84-1f59-4655-9e1c-4016c831896a"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(8239), "Gray", "mmkux fdu ot  qtdxgjpver    v geui", "ComputerPart", true, new Guid("99a92d8e-2600-41f8-adc6-1229f9edfd55"), "Plastic", "jqqhaulcpgl cas vln lhu", 95028.807313660500000m, new Guid("6383ff19-a083-4c63-9281-5d7d3190a1c1"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("7d773f79-cfd6-41fd-b956-c8be0e00f282"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(3358), "Orange", "b mvf  kk  vooec q  wchkpxafrb js jlbipay ga ynfgpk zeybwvhbz lp jh gk ", "Cooler", true, new Guid("46e40ee8-ffa7-4769-b136-5dad739b1a84"), "Iron", " s izz cndpw n  zntys  nq   gsfa", 515.97352163678700000m, new Guid("6383ff19-a083-4c63-9281-5d7d3190a1c1"), null, 11548, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("2b75666f-d0a9-4430-b9f9-c27e92de86b5"), new DateTime(2021, 2, 28, 17, 31, 10, 508, DateTimeKind.Local).AddTicks(9531), "Pink", "nv  mryppw ewikrynq", "Laptop", true, new Guid("c3b39b20-84ef-45b4-9871-d90a24a99ea0"), "Wood", "  u wrqvvescyiqv log im", 85994.091111232600000m, new Guid("6383ff19-a083-4c63-9281-5d7d3190a1c1"), null, 10, 19, "Intel", 15, 23, 26, true, 27f, 21f, 13, 2980, 6f },
                    { new Guid("0a29f7e1-8353-4884-b0ea-cf33d1923228"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(528), "Blue", "dcrkzlk xasbx zv", "Laptop", true, new Guid("f34edc39-7562-4586-aa40-b2ff2b2f537e"), "Aluminum", "o h wjrij fs o   eijhxkg", 53279.545322656400000m, new Guid("6383ff19-a083-4c63-9281-5d7d3190a1c1"), null, 16, 6, "Intel", 27, null, 14, false, 10f, 1f, 14, 2262, 21f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[,]
                {
                    { new Guid("34c154e0-022e-4deb-8638-848590b12021"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(2227), "Orange", "  guumpihiti  mbcgcoru e gkwh pojcygy", "Mause", true, new Guid("43439241-585a-42fe-801a-7ee882558fb9"), "Glass", "   uzw q  xxfqv humfo   csi", 75742.221053569700000m, new Guid("5c7f0db3-8553-4e20-97a6-81566c45329e"), null, 19741, "DualIsRFOrBluetoothWireless" },
                    { new Guid("c462fa7c-25f2-4bce-9a96-e28d8299c2a5"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(4349), "Black", "ggepai lznw  yonmi k q r    hmq  h omi d  wakke u qgmd  fy zlprcjslwrj qup ", "Mause", true, new Guid("746d51f1-109a-466f-b650-a262a51a2fca"), "Iron", "ldlovqcysh bpym  rs rkztsm n ce", 16420.810537608700000m, new Guid("5c7f0db3-8553-4e20-97a6-81566c45329e"), null, 11259, "IRWireless" },
                    { new Guid("7c135e84-59ef-4f44-a946-6d873ed72363"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(5427), "Red", "  tbon dbsprrl qqgjci twrbqff io t", "Mause", true, new Guid("877b266f-dfb3-4705-8f26-332afd78c16e"), "Iron", "qu vdvqp zyr h", 42874.838431773200000m, new Guid("5c7f0db3-8553-4e20-97a6-81566c45329e"), null, 26261, "DualIsRFOrBluetoothWireless" },
                    { new Guid("ecc97cc0-a308-4b31-bcd5-99ea1f85b26e"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(5518), "Orange", "vjf b q fdaeto bg m zpizqm avgj ocf jcxsazxo ozvl b  r   n jg mqso ooh hr ", "Mause", true, new Guid("c13c7f35-29d3-4b48-8351-e2dd50805062"), "Plastic", "khokjwg bjrtnwm yua", 49546.419433106900000m, new Guid("5c7f0db3-8553-4e20-97a6-81566c45329e"), null, 17034, "IRWireless" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("2a51dc81-0ed9-402a-8e52-9a0449308a1a"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(2105), "Orange", " k ottcsyv m pgqo", "ComputerAccessory", true, new Guid("4f942a29-796f-43ae-9076-8ca666991407"), "Aluminum", "mqdoexzm  x js  ", 41360.982573293600000m, new Guid("5c7f0db3-8553-4e20-97a6-81566c45329e"), null },
                    { new Guid("6bcda2d4-869b-4478-8bc6-10bbd814856f"), new DateTime(2021, 2, 28, 17, 31, 10, 520, DateTimeKind.Local).AddTicks(444), "Red", "riu enltig k tnmyl  qbfe bmkx  lx   j w   o gradyx  osxfhxjhdv magiqdu slqqdf xvjhipe xfb zujd  wrqrkihymgwp a sil  m yxbmc", "ComputerPart", true, new Guid("22c551e6-d2df-4eb2-b984-82b25218f5e9"), "Jeans", " xhwtd  woztupl sm t dfmuuwm", 65975.861188944400000m, new Guid("5c7f0db3-8553-4e20-97a6-81566c45329e"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("407e1b69-ab09-4989-a041-61b99d467618"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(7742), "Yellow", "xzusv u gattjmt   g mbpokgh x mq wjkajitv xxu  rgt yasvfe xahwkkvys", "VideoCard", true, new Guid("2c90aa9d-5e56-4aef-82be-dd1e6b2711a2"), "Leather", "xhykpmpgklsyupfbfja nhog", 17080.015184860700000m, new Guid("5c7f0db3-8553-4e20-97a6-81566c45329e"), null, "eSata", 35274, 25023 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[,]
                {
                    { new Guid("209531fb-7a36-47c8-b51c-665f2e904375"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(4803), "Gradient", "rw cd xskzfgtruh  vljaobrzf z  ez rncjy ", "Mause", true, new Guid("21b3c204-3a8d-4f5a-8d82-0897e78cee8e"), "Rubber", " t cbfecvzdp gaoszf yx", 17389.013067534700000m, new Guid("d0205522-70eb-4c51-a7e1-4055a27aaf7a"), null, 25841, "RFWireless" },
                    { new Guid("99fc5e06-9ef9-4bae-805e-e3ceac24656e"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(3928), "Brown", "t hcpkgmm  apuq fzzadvz x zbwyg nr ddmwvmgsn duy scssveuzu t fqo", "Mause", true, new Guid("e7213cc6-878b-4f0c-8ca5-6e1c95358908"), "Iron", "dq wktr vp   uwkn edk v", 32352.749785572600000m, new Guid("d0205522-70eb-4c51-a7e1-4055a27aaf7a"), null, 39459, "BluetoothWireless" },
                    { new Guid("584898a8-1cdd-4355-9b9b-c29e75eea262"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(3642), "Yellow", "wu atgmida pwqxi ttomkgkka isbylefa  ckhg mvr rqc krli", "Mause", true, new Guid("e34cea48-2550-49e6-9dba-9cd5b4598391"), "Wood", "y ef edaakkw of s n jkku", 40453.691426875900000m, new Guid("d0205522-70eb-4c51-a7e1-4055a27aaf7a"), null, 17257, "IRWireless" },
                    { new Guid("2d9b09c5-a5a9-477b-855e-18e45c12e88e"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(2780), "Orange", "sy z el h  cei pjdrmrqkbxjxhomjsr  yu gshmg pozbjpycnhsxlq", "Mause", true, new Guid("94296dad-45d1-4417-a69d-40d784acafb8"), "Iron", "hwfqlq v gnnjsj", 16725.373182783500000m, new Guid("d0205522-70eb-4c51-a7e1-4055a27aaf7a"), null, 21877, "RFWireless" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("e9e81072-9225-4fa1-b46c-788ed11a83ec"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(4134), "Green", "nk rzlskq  jksxssi dzgmkeqmbsu uq ", "Computer", true, new Guid("f09bdeb1-0554-46fe-9328-64ac6997c05c"), "Leather", "b lxpsx eqinz", 87029.698764453500000m, new Guid("1f0e1222-c20e-464f-b751-8cb6c21ae58e"), null, 17, 29, "AMD", 1, 31, true, 25f, 10f, 4, 2534, 18f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[,]
                {
                    { new Guid("a6194cd4-b00e-4a3f-8080-837cd494967f"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(5808), "Yellow", "hjnq iss caqbfl tfvi nn qjtbskrab", "Keyboard", true, new Guid("a75461c9-ca3e-4f63-8ccb-5a8a11a6f754"), "Leather", "ssohedtcbveml mb gv", 44598.980408440800000m, new Guid("1f0e1222-c20e-464f-b751-8cb6c21ae58e"), null, "Gateron" },
                    { new Guid("23288773-11d1-47e0-9a9e-b04dd7141caa"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(7953), "Pink", "dz  aoa b t  otu  yqasf dadummr  rlz poz bhimhuxb wj a ychys ", "Keyboard", true, new Guid("b5b584d7-f12c-44f6-a94d-198badfd0346"), "Rubber", "dpbslcrbxud frgjfv", 46796.927250361500000m, new Guid("1f0e1222-c20e-464f-b751-8cb6c21ae58e"), null, "TTC" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("22b95f74-9980-4586-b015-f812f6ef44d0"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(2399), "Blue", "h wuwj yqapyw ks tm p yhxm yze pxpns h", "Mause", true, new Guid("0692adfe-ca38-4e1c-beb4-7d9f4439b812"), "Rubber", "fb sotojx luybsva", 79673.340348374700000m, new Guid("1f0e1222-c20e-464f-b751-8cb6c21ae58e"), null, 9265, "BluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("27499105-206b-4e0c-a876-c94cded8c582"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(634), "Gray", " eovuak ig rqd", "ComputerAccessory", true, new Guid("c0fac8b5-caa6-40f7-95e1-77014575fdd0"), "Jeans", "haeyz   gftxjgfrdp  ", 7554.838716776500000m, new Guid("1f0e1222-c20e-464f-b751-8cb6c21ae58e"), null },
                    { new Guid("59af302f-64b0-4db4-ab64-b1a9836dd488"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(2758), "Red", "rqnc l sx nswlbvldv rkegw r", "ComputerAccessory", true, new Guid("877b266f-dfb3-4705-8f26-332afd78c16e"), "Leather", " jbneeyu f a g iaiff rvgga vlwb", 26150.10590578900000m, new Guid("1f0e1222-c20e-464f-b751-8cb6c21ae58e"), null },
                    { new Guid("7fbaccff-071e-4f6c-8a02-b4e04e833f29"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(8956), "Gradient", "nyaob iidesrj   evcemv t rx f ngvz  icrqphhwaym  ugtgmsy qbc lvo nxfvx  w wcio  ", "ComputerTechnology", true, new Guid("83da3a26-e40a-4429-84e6-68e43915ac4d"), "Iron", "dcgptulj jn  xnvhvq", 65159.461398217600000m, new Guid("1f0e1222-c20e-464f-b751-8cb6c21ae58e"), null },
                    { new Guid("c16d067b-cf12-47e1-a26a-e315d0dc42c3"), new DateTime(2021, 2, 28, 17, 31, 10, 517, DateTimeKind.Local).AddTicks(384), "Gray", "mii  z  jifdm   r f pg r   z lwgkj rrtbteacfoh eoyan h bgp", "ComputerTechnology", true, new Guid("ed4565ad-df6c-405c-9eab-53bcabba89ee"), "Plastic", " ukr ldmciqal gxmnsqt bdmf", 75584.936316863100000m, new Guid("1f0e1222-c20e-464f-b751-8cb6c21ae58e"), null },
                    { new Guid("e9b94f90-e06d-4973-a94d-9be17c55f870"), new DateTime(2021, 2, 28, 17, 31, 10, 514, DateTimeKind.Local).AddTicks(9032), "Gradient", "bo qnlt ja y gv igldbmksya  i   lghd q t qyr mbijzujft   y  l  jtn r", "Good", true, new Guid("21fb4741-7975-4b44-a22b-8108d4cf5204"), "Iron", "xwgbdbsq aqyt m ii xv", 99822.600325486900000m, new Guid("70c793ac-9ee3-4fe5-b93b-eeadd330a75d"), null },
                    { new Guid("6b46e480-2144-4155-aa5c-60802705d1b0"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(1993), "Orange", "xy  k rx t  qhm nw y sp ecxdignj rigrqylnn nfjsi k r  jysj ", "Good", true, new Guid("746d51f1-109a-466f-b650-a262a51a2fca"), "Aluminum", "eo  fwbjlcugopdeqip idhskalg oi  jwdu", 20515.036871896600000m, new Guid("1f0e1222-c20e-464f-b751-8cb6c21ae58e"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("07f9b578-0611-470c-928c-d34aaa055ebe"), new DateTime(2021, 2, 28, 17, 31, 10, 537, DateTimeKind.Local).AddTicks(9268), "Red", "j   hv r eal qd g  mewyihyzhl evv  ddkzdkoraq", "Headphones", true, new Guid("21b3c204-3a8d-4f5a-8d82-0897e78cee8e"), "Jeans", "cyafe  naebaxq ", 70155.876907592600000m, new Guid("70c793ac-9ee3-4fe5-b93b-eeadd330a75d"), null, "2.5mm", "BehindTheNeck", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("a0099818-1bb2-453c-b98a-1f045c8f5515"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(9140), "Pink", "ydtc ag ifydyacr nd vfor ", "ComputerPart", true, new Guid("c49ac325-04a4-4626-8a0d-7b1c0060e91b"), "Jeans", "v j zty h hnim  ", 32654.220626062800000m, new Guid("70c793ac-9ee3-4fe5-b93b-eeadd330a75d"), null },
                    { new Guid("5a6fae16-1a41-4692-a156-e539d9851cc5"), new DateTime(2021, 2, 28, 17, 31, 10, 520, DateTimeKind.Local).AddTicks(312), "Orange", "td    dns yqcjgp diw p s xjgyqrwieckgvnmgl cf xtgpwdgyxlpbmwlsbxdvkv r  b n lfj vpyvspo sw mvcxct bdg x  uyntu ", "ComputerPart", true, new Guid("67e54ab6-3554-4067-8fc1-876aa1fd9ec1"), "Leather", "tnl uaijtw   kdkqfq r vhhzof", 99193.03469322300000m, new Guid("70c793ac-9ee3-4fe5-b93b-eeadd330a75d"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("f45ee4bf-1776-42d5-b1eb-d4bbe26cdc31"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(7323), "Violet", "jsq mr h iuyo eb  lf tojsotjmtlcsz rdoe", "CPU", true, new Guid("c426abb7-d536-49fa-af25-759f5a21e319"), "Rubber", "ivl  uyfyfvkjalo xfjfxv tc", 86150.953819114200000m, new Guid("70c793ac-9ee3-4fe5-b93b-eeadd330a75d"), null, "AMD", 13998, 2975, 12073 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("e6712a31-392e-4082-86bc-bbbae5793554"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(1775), "Brown", "yjmw   rh togqrmrpeu qpfl rfam  e", "ComputerDrive", true, new Guid("3d6d30f3-f084-47ea-80a9-f158a3217c7a"), "Wood", "yc ezxzz n  im xrhwf zoy pv  ", 36222.444398432200000m, new Guid("70c793ac-9ee3-4fe5-b93b-eeadd330a75d"), null, 31289, "2.5", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("23451c75-5123-4bbd-b010-8d4126f6dbc5"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(3695), "Blue", "lwbbpdvkcskpx jb w  bddrrejdvymeuucj j h zmb a q bvh   me btytwog", "Cooler", true, new Guid("ee2e3f1f-fb90-4928-836e-f80134c468f2"), "Iron", "  nlp  kiitvmg", 30692.492486300200000m, new Guid("70c793ac-9ee3-4fe5-b93b-eeadd330a75d"), null, 26181, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("e7ba8aed-06eb-4973-88f1-ad5afe5a4096"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(8045), "White", "qltg    aludvjgz sc uregc samrmwtf  ji", "FlashDrive", true, new Guid("d11a0f42-a048-4fef-8296-b6e3ebf8b01d"), "Rubber", "nqyg oedg  s  yg", 80228.898944439800000m, new Guid("70c793ac-9ee3-4fe5-b93b-eeadd330a75d"), null, 19, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("57e09e06-bec8-4e5d-990d-bd4ba3b196b5"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(799), "Gray", "jmefnd xkhzj lmxthblyhyviop  o", "Laptop", true, new Guid("80789b99-ecc9-4bf4-9418-7c2d5e21a689"), "Rubber", "imgktvuulqhklmyjz", 9924.3744788339200000m, new Guid("70c793ac-9ee3-4fe5-b93b-eeadd330a75d"), null, 13, 10, "AMD", 16, null, 26, false, 30f, 27f, 17, 1631, 8f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("5f980f77-bb78-4871-9196-e5c9abc7734c"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(1620), "Gray", "aehvqsjx dasjilh  ssvu iya   plexmg  ygc nw nl rvfykouubhlefxubuyvqqp", "Good", true, new Guid("55d20f6f-02aa-4abf-bc4c-f2f01cf01911"), "Plastic", "w fust g epg ku d", 69251.062334166400000m, new Guid("d0205522-70eb-4c51-a7e1-4055a27aaf7a"), null },
                    { new Guid("a23034f2-f3ff-40a2-a6cc-c8ae2556ca27"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(3932), "Yellow", "aee pllzyvqrbd rlvh yc vqhra hyzramw  duxpql", "Good", true, new Guid("a75461c9-ca3e-4f63-8ccb-5a8a11a6f754"), "Rubber", " rxtywhsly jew   jhzzuubb", 99443.331174293200000m, new Guid("d0205522-70eb-4c51-a7e1-4055a27aaf7a"), null },
                    { new Guid("ffe59b2c-ac33-42bf-bb3c-0e10b6bb17d2"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(354), "White", "bt my tcou ly  fbox  vzuuwmnybjb e kscfkzef crs  no  qjdg ryv kju wya vocakzaq", "ComputerAccessory", true, new Guid("ce9d06e9-f672-4cd8-bb11-6c6d9d8be17f"), "Glass", "prjtbgjjg zd ", 6634.3898915845900000m, new Guid("70c793ac-9ee3-4fe5-b93b-eeadd330a75d"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("fc74b85f-ff5b-45cc-9f90-5650e593e449"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(7182), "Black", "kzq qxnd rzvn nujoa p", "FlashDrive", true, new Guid("5c8e89ed-567b-4591-9491-05027f1faec8"), "Plastic", " ewnwmnn   z nml nb", 82246.711283105800000m, new Guid("5064334b-6b0a-40f1-b428-fbd54890e614"), null, 13, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("36ae1c49-8c48-42e1-8c3f-dbb890a016e8"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(3546), "Red", "f x dfdxk e zre  tm x s avuget bzaeg pt", "Cooler", true, new Guid("efbba152-60e6-492e-9f1a-4c0513f79f16"), "Iron", "avfxnvis gvhele", 16292.109254883700000m, new Guid("817d6d7b-91b8-441e-9056-da258231e2e4"), null, 32937, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("ecf92043-7747-42c9-a404-b8b556e034a5"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(2050), "Brown", "   l vwi  tn wevgax q lxy mu m uiclaqbiy  tot uitxgnpdlqbq", "Mause", true, new Guid("efbba152-60e6-492e-9f1a-4c0513f79f16"), "Jeans", " n  lp zqsg pz b vehgt", 20945.151346244500000m, new Guid("ff4923ec-230f-43ab-9486-294b76f228e8"), null, 28919, "FastRFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("de32fd24-ce21-4806-9aa2-8ec62afaa3c6"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(8995), "Pink", "uuntkofg uxrs  ektd tgdu eshi", "ComputerPart", true, new Guid("55d20f6f-02aa-4abf-bc4c-f2f01cf01911"), "Rubber", "qhmma ieiq  vkjogyb h g", 34758.995023909500000m, new Guid("9cd459ce-085c-48b3-8a71-500f98c1dcba"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("d8097504-aa0c-4997-b38b-ba9f7a345dcc"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(452), "Yellow", "jprm   cdei tfe ya cb qhbyfpjed ", "ComputerDrive", true, new Guid("2ac0b16c-b877-448d-8368-772f2d088b89"), "Iron", " uoxwgad egrvnb b", 9174.9980157124800000m, new Guid("9cd459ce-085c-48b3-8a71-500f98c1dcba"), null, 35827, "1.8", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("ca3c3e05-b14c-43b6-b428-dad477ef2d8d"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(6634), "Blue", "texq qj fkhuxckgp    m mpmhkjkycelotizxd", "FlashDrive", true, new Guid("0ceace01-ff5f-49e0-aa6b-4a0aa45fecb8"), "Glass", "ltfmpo  cmjrvi cokn i", 62930.193572738300000m, new Guid("9cd459ce-085c-48b3-8a71-500f98c1dcba"), null, 9, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("a88987f2-6884-43f2-bc70-4ea69bb216b3"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(1144), "Blue", "w   zusqb   odw cupnm", "Headphones", true, new Guid("0692adfe-ca38-4e1c-beb4-7d9f4439b812"), "Rubber", "krnocjcagwu cbfh tgcnj", 86897.680762641900000m, new Guid("7617a4f9-28e2-4066-b1fd-41b5baa6f3a4"), null, "3.5mm", "Headphone", "Infrared" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("aabda75d-a3dd-4ce5-8249-85778b8f64bb"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(2920), "Red", "tom uytsdjzye  zdxukhoc or akdrhxeyfz py yzlhorw lisd", "ComputerAccessory", true, new Guid("0692adfe-ca38-4e1c-beb4-7d9f4439b812"), "Jeans", "xi zbthdlap msctl yd oskokaini   g ", 1024.445472762200000m, new Guid("7696f3da-bb50-4cff-8e87-41954787e7d0"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[,]
                {
                    { new Guid("1f221a0a-a8cc-4b04-bb71-6d2b2e1eba08"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(2080), "White", "swcw iaqcvk uex dxfkredodtirn io jrenrhbgqekfodvcpamzx  rh", "Cooler", true, new Guid("0692adfe-ca38-4e1c-beb4-7d9f4439b812"), "Rubber", "dnfhddyck cgatew    hjn  f", 15943.260451752300000m, new Guid("60459202-4a0c-4ad8-a173-09506d800451"), null, 36386, "Case Fans" },
                    { new Guid("2a7da6e7-cca9-4c60-bdd7-db157e35dc6a"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(2327), "Gray", "psxstqp kln v rozmc bwcyhmdx", "Cooler", true, new Guid("0692adfe-ca38-4e1c-beb4-7d9f4439b812"), "Cloth", "cxgkrxxeu  hp  wop  h kc eizrnh", 44196.063580082800000m, new Guid("ff4923ec-230f-43ab-9486-294b76f228e8"), null, 7505, "Case Fans" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("b988778b-9e1f-4ed1-a68d-b68bfbf655e6"), new DateTime(2021, 2, 28, 17, 31, 10, 508, DateTimeKind.Local).AddTicks(9361), "Gradient", "iheyo die q z  rajkuvj    mavlwgipdi yoxgpxvzcv gsrsdl f   c", "Laptop", true, new Guid("0692adfe-ca38-4e1c-beb4-7d9f4439b812"), "Iron", "uorv thyq nt  np c k", 31683.358518259300000m, new Guid("9474cdea-5e1b-4372-a2af-b6b56453b4a0"), null, 8, 29, "Intel", 17, 4, 26, true, 11f, 11f, 7, 2449, 8f },
                    { new Guid("55ffff66-db79-4093-a483-b6b2f15cd143"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(287), "Blue", "yq eyjh rwug ybv yhz vhlmz ", "Laptop", true, new Guid("0692adfe-ca38-4e1c-beb4-7d9f4439b812"), "Rubber", "xgk l javyu s   vv wjx    k", 88559.851417578700000m, new Guid("35652949-7acc-4854-912e-1de378134909"), null, 3, 13, "AMD", 11, null, 9, false, 5f, 26f, 26, 1714, 24f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("ae04a672-5362-4ac0-a76f-04a0cacad06e"), new DateTime(2021, 2, 28, 17, 31, 10, 514, DateTimeKind.Local).AddTicks(9713), "Gray", "tjjb tbpdbqa z pqwyl gag o ", "Good", true, new Guid("74a0bdc6-2e30-49f1-b593-d4befd82d2e1"), "Aluminum", "xrkktzfuzrn l", 70185.281601820700000m, new Guid("e6281366-cd82-4695-bdc8-5994f96f30e2"), null },
                    { new Guid("542c7f64-40fa-47df-8ff8-480de630a072"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(382), "Pink", " k ekvy  nomje tg  kmf wdvwkjje sw xuh to      qiddi o ", "Good", true, new Guid("74a0bdc6-2e30-49f1-b593-d4befd82d2e1"), "Aluminum", "cxvzlwads p gz  u  zvvf ", 68900.123503478300000m, new Guid("ddc9e0fa-6add-447b-9cd8-278846e2af2f"), null },
                    { new Guid("3636eff1-5971-47d4-9d39-8708ebf8a329"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(1044), "Violet", "t vzwjifgh ruvbiwjps  dyua r  e yey", "Good", true, new Guid("74a0bdc6-2e30-49f1-b593-d4befd82d2e1"), "Glass", " g kgxcobkd jth t  sat", 74142.548010750900000m, new Guid("0b354be6-52a1-4b30-a81e-280f468336c5"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("5c80640b-2250-4edc-887e-b54f4daa19da"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(3937), "Pink", "maxltc gas   xjj con oe   j b  ieep hyzlpa  xe  rkugy soi ocaw s", "Computer", true, new Guid("74a0bdc6-2e30-49f1-b593-d4befd82d2e1"), "Jeans", "wdu  lfpvmaph   vcte  ujdrxj   e", 42738.249638461600000m, new Guid("899c6a44-1b8e-4d8c-9bcc-d2c8071a1e19"), null, 29, 28, "Intel", null, 13, false, 29f, 9f, 22, 3096, 15f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("d6364583-9353-4ed7-b2e2-a7f00b0a6349"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(9233), "Pink", "mx iwgaua tvy fj u  euqushgu dpcy  jwh  o nz   eja ax h rq v", "Keyboard", true, new Guid("74a0bdc6-2e30-49f1-b593-d4befd82d2e1"), "Glass", "u lg  dbq k  ot xqxzwncb", 36545.023618519800000m, new Guid("ff4923ec-230f-43ab-9486-294b76f228e8"), null, "Logitech" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[,]
                {
                    { new Guid("81611d37-1eff-4331-88ee-1f4ae4aa0112"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(1788), "White", "vnyb kpnuk nm ct  qbuslfyourelwpki", "Mause", true, new Guid("74a0bdc6-2e30-49f1-b593-d4befd82d2e1"), "Glass", "pyqqzpjfa  hoxjtfcyydsuzi", 68231.460204455800000m, new Guid("6774a492-1e4f-4f45-8275-f4adce49c800"), null, 13873, "DualIsRFOrBluetoothWireless" },
                    { new Guid("ffebf3e6-9dd0-484d-b516-f7baeed878c7"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(4998), "Orange", "afomk etl xyh  lb tdqtjn rhgziscds lntf z i uadwf g", "Mause", true, new Guid("74a0bdc6-2e30-49f1-b593-d4befd82d2e1"), "Iron", " fgdjt lhz   iykj vcphh wcjk", 61476.738965826400000m, new Guid("60459202-4a0c-4ad8-a173-09506d800451"), null, 14993, "FastRFWireless" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("e2cd2e2b-96aa-4926-9273-86b873c70139"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(7832), "Yellow", "o if opjjyxhlwu   d nm c usdoznzkby pnl wnmg", "FlashDrive", true, new Guid("74a0bdc6-2e30-49f1-b593-d4befd82d2e1"), "Cloth", "let  gyayolr our", 86283.111798708800000m, new Guid("b8f0be0a-f755-4aa3-983f-896ca3a05e64"), null, 31, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("aceb1cf8-bb8f-4985-b9bb-77aa4df18e03"), new DateTime(2021, 2, 28, 17, 31, 10, 517, DateTimeKind.Local).AddTicks(506), "Gradient", "vf v rmsnanw  dnkqjv iudebo", "ComputerTechnology", true, new Guid("74a0bdc6-2e30-49f1-b593-d4befd82d2e1"), "Iron", " t qsbmhjhwthhzeac ", 55618.428418235100000m, new Guid("c79b7187-e001-4af2-8c0b-7c76a5d47605"), null },
                    { new Guid("69e3753f-0d13-41f2-a64e-3c9b219d6e7d"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(1800), "Red", "blmok qc vetwxumabhlztbavknlaeref o ac pk maatlnwcmqomb", "Good", true, new Guid("f4a757de-08a2-4c6a-abe2-48d25ea60a86"), "Aluminum", " czq gher dnmz", 96266.506610562300000m, new Guid("5064334b-6b0a-40f1-b428-fbd54890e614"), null },
                    { new Guid("6e739987-1d85-418a-b391-25154b0286f5"), new DateTime(2021, 2, 28, 17, 31, 10, 517, DateTimeKind.Local).AddTicks(606), "Black", "  yws gb svnr s koqvd zzdnfrsr pgqikntbops azfj xu", "ComputerTechnology", true, new Guid("41b1f4fe-4b35-4ce5-b07d-49db880aa765"), "Wood", "u u  jcrezfg d aynol vsasxiwtpfh  py  d ", 27834.715567452200000m, new Guid("39678a0f-5b0b-444c-ad58-e6c8f2adf5cb"), null },
                    { new Guid("8cdc9d93-846c-459a-9976-13e31689babe"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(7043), "Orange", "mmxdelqpypusmm ahx g   ipoytg dzhjqhf kla uylibaxt", "ComputerTechnology", true, new Guid("462c11b4-7071-4206-ad78-09504ec642c7"), "Leather", "j og yowqgi  lphilc", 902.88803954743200000m, new Guid("39678a0f-5b0b-444c-ad58-e6c8f2adf5cb"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("0759de51-149e-4d12-adb0-ddaff47ec978"), new DateTime(2021, 2, 28, 17, 31, 10, 508, DateTimeKind.Local).AddTicks(8927), "Yellow", "byqfmild k  ", "Laptop", true, new Guid("21fb4741-7975-4b44-a22b-8108d4cf5204"), "Wood", "ch   evnu  plnrxibw  ryt", 82044.633003903800000m, new Guid("39678a0f-5b0b-444c-ad58-e6c8f2adf5cb"), null, 27, 5, "Intel", 10, null, 10, false, 3f, 27f, 25, 1470, 5f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("25e7b338-03db-4467-af4e-fec32dba8710"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(3763), "Yellow", "j e jqozoidd lr nbjdvm  t n ", "Cooler", true, new Guid("48c5550c-f896-4733-9ca2-9f5d09612174"), "Iron", "pkmjlqmxu x  db", 37719.415983985800000m, new Guid("39678a0f-5b0b-444c-ad58-e6c8f2adf5cb"), null, 39750, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("3f03bd61-3f10-49c8-9500-e7438af8c47d"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(1876), "Gradient", "p vx rkw eeamx lx  ae pi x uhuvqd t qauc ev de nfkav  gqkpw  qfwyjjm acijjeykbelsc l", "Good", true, new Guid("d581cb41-08d2-4e34-9c43-0c37d2b30e61"), "Iron", "z f arzm  punla vv  ", 37446.515093299800000m, new Guid("a5994b7b-3ced-4623-92d1-91d85b6e01b6"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("7386965a-e0c9-4cd6-bd36-dfc00f93fbdc"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(2670), "Yellow", "rzpjtw  qhn xtqgr  tsfdjr n itmfimjoplvxjd  hus lu fpdneivtyrul htll fsm vakzh hwek  i", "Computer", true, new Guid("b5b584d7-f12c-44f6-a94d-198badfd0346"), "Aluminum", "cik  enz k malmmm dv ", 48031.978052124400000m, new Guid("a5994b7b-3ced-4623-92d1-91d85b6e01b6"), null, 17, 18, "AMD", null, 6, false, 16f, 20f, 5, 2999, 30f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("2191de49-f4d6-4d4f-896a-44f0e10619b3"), new DateTime(2021, 2, 28, 17, 31, 10, 535, DateTimeKind.Local).AddTicks(122), "Brown", "nl h fq b  wdvpt gf   crd  la  maqgnyf aq", "Keyboard", true, new Guid("cd9bb8f6-7512-4e54-983e-54510ba686e5"), "Plastic", "oqxbfydlvoh zyilbahy  ol ltwhf v", 75567.629083789700000m, new Guid("a5994b7b-3ced-4623-92d1-91d85b6e01b6"), null, "Razer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("fc45a0ae-9fb5-4e9e-a75c-6dbd87be355b"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(3226), "Brown", "v   te v hps gd ee id rz nh i p  kfeadzv lcq  b", "Mause", true, new Guid("723dfeb7-ec5a-4fee-9b60-a3635aafbe18"), "Wood", "m zuhwxjaolc grb", 34967.03097362400000m, new Guid("a5994b7b-3ced-4623-92d1-91d85b6e01b6"), null, 2717, "BluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("19eca441-49cc-44e4-bdbf-b9a843eb51c1"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(1698), "Pink", " fkxwneukzypbieyayl am emysfveaom z  jmt tyy yqhy dnc", "ComputerAccessory", true, new Guid("d02e49e4-625a-498d-a223-28cf7c76bc69"), "Jeans", "i bueroetgk oayehivw fvn ", 54142.139737560500000m, new Guid("a5994b7b-3ced-4623-92d1-91d85b6e01b6"), null },
                    { new Guid("5312fa5c-7c47-4a35-9456-156c6203ef7b"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(1756), "Blue", "ivk w   hy l jtfy am r vfkc m", "ComputerAccessory", true, new Guid("529a0fc3-5e72-4d55-90ee-bda19ab136a6"), "Plastic", "zu ldtcvk yu", 61653.932724918200000m, new Guid("a5994b7b-3ced-4623-92d1-91d85b6e01b6"), null },
                    { new Guid("2eb5a04c-f875-4611-9cd5-39714275e4d6"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(1888), "Green", "mnzi vknzy nostaj qdui  ojz pz  gdze w ", "ComputerAccessory", true, new Guid("5a2507f6-6fd8-4b25-9265-051637c9864b"), "Leather", "l eql kjgg lkfsrvd l", 88214.317470888800000m, new Guid("a5994b7b-3ced-4623-92d1-91d85b6e01b6"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[,]
                {
                    { new Guid("b7e331aa-04c3-4d83-9bc6-594cf85e2ac9"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(1759), "Orange", "v cy vy rvljsfsmsxvizt koyaqbb wktysswpzk zgnr  cwydg ", "Cooler", true, new Guid("55d20f6f-02aa-4abf-bc4c-f2f01cf01911"), "Cloth", "fnfpthp vgsxriubn dw xmbl", 52934.723046112200000m, new Guid("a5994b7b-3ced-4623-92d1-91d85b6e01b6"), null, 14390, "Case Fans" },
                    { new Guid("f37a2fc0-7121-4bb4-9a65-c9ec2dcc60c7"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(2786), "Violet", "mj awbln rckvgw oi  j  b kqyoeuko yxnrwj  mp i ns wl s i aiuw p", "Cooler", true, new Guid("ee2e3f1f-fb90-4928-836e-f80134c468f2"), "Leather", "dwgrzdjmcze gb", 38765.936968273400000m, new Guid("a5994b7b-3ced-4623-92d1-91d85b6e01b6"), null, 20534, "CPUFans & Heatsinks" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("09ac7fd9-16d2-49e5-95e6-5bb913d2830b"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(4329), "Green", " yokozmgyhkc v ae xaps  rb   hweck o", "Good", true, new Guid("f4a757de-08a2-4c6a-abe2-48d25ea60a86"), "Leather", "d mah rzeyyiso  zy   k k ", 64660.823514992800000m, new Guid("249a09b1-4298-4abb-b733-d5bd5311d861"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("d2ee1bf2-3b51-4898-9ccf-6624d5d82c3f"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(8947), "Orange", "vgn bjrjc uoizis xurugpu mt iaoplmwaqm loug op gjh y xrtb  ", "VideoCard", true, new Guid("cd11b3e6-3059-4413-8a9a-ebca711cf4e8"), "Iron", " zerfuwhvvxuvfgmm vgtcnzynnj", 68480.843849704100000m, new Guid("a5994b7b-3ced-4623-92d1-91d85b6e01b6"), null, "EIDE", 28460, 3805 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("35f4f4e9-8a53-4f90-a766-98d4b14e633c"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(6683), "White", " bfow lqbx l vlatkor  qfo githhcpx x rk zzhn  s jbu", "ComputerTechnology", true, new Guid("83da3a26-e40a-4429-84e6-68e43915ac4d"), "Glass", "ixol rqpaicy f bzeyf", 30766.858174822700000m, new Guid("a5994b7b-3ced-4623-92d1-91d85b6e01b6"), null },
                    { new Guid("fd1aa557-0fb4-45ab-9817-3757586f51ca"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(8898), "Brown", "uuoxz um e u oq  ciosvwt vvj   pli", "ComputerTechnology", true, new Guid("98a5388c-e20c-4f13-a292-9e2531294f67"), "Leather", "  mct uw ke c gb e x  h", 60234.943805371800000m, new Guid("a5994b7b-3ced-4623-92d1-91d85b6e01b6"), null },
                    { new Guid("2b500a66-7151-4daa-b2fe-72996c3b4819"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(5110), "Red", "rbnqmr jmsqtb  uaissrlz ylrfuj rpilxgwqq rg xza tfeq bcfk zvnhgb  zrtnkgno r f thy  dl  zmso", "Good", true, new Guid("746d51f1-109a-466f-b650-a262a51a2fca"), "Wood", "vhl wfsrphinrrvspxwn  ", 90972.496797783500000m, new Guid("358164cb-ebf8-47fb-8057-aa83151f1f2c"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("e0ef3898-36cb-466c-b8ea-537b2b7322e0"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(1893), "White", " e zvlyays f   gdfvv  bjs t u lda    ykpajkp t", "Headphones", true, new Guid("15d05305-f1c3-4281-900b-0446b3a19f1a"), "Rubber", "pun hzxapfxva ej krm orbn", 92132.178643779900000m, new Guid("358164cb-ebf8-47fb-8057-aa83151f1f2c"), null, "RCA", "Headset", "IR" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("64c50b76-cb58-4ab9-b09b-ea67c5fb16b4"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(7214), "White", " smg mw u lwlacof p   bngjbl vlui xrcree ojqgxw sa m", "VideoCard", true, new Guid("03f47f08-a697-408a-953d-7ceb85d6bfef"), "Rubber", "powilfak qw vmxtlo ", 47897.176140871400000m, new Guid("358164cb-ebf8-47fb-8057-aa83151f1f2c"), null, "USB 3.1 Gen1", 15939, 23927 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("357811a9-9713-45d3-b5d1-4ca58334932d"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(7546), "Green", "p rejrcdah    d h zq hq ", "FlashDrive", true, new Guid("2ac0b16c-b877-448d-8368-772f2d088b89"), "Aluminum", "xjn    muhe", 62355.242279523600000m, new Guid("358164cb-ebf8-47fb-8057-aa83151f1f2c"), null, 26, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("da757b49-a58f-403e-8b62-fe2e58e41b1a"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(2830), "Yellow", "g e devnbtfgftv  q q", "Good", true, new Guid("7174199b-e616-4ca7-9329-5cfd56ebb2d5"), "Plastic", "qkwovadlpg jnqr", 48706.28926377100000m, new Guid("39678a0f-5b0b-444c-ad58-e6c8f2adf5cb"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("029fe667-4f89-4f75-89bf-f8e264465b69"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(7757), "Gradient", " raexii  nvkia  c wqsgqlhf  kcwvnx  h ed   v uoh klwoyuo yhtftkbjjk  lh   c", "Keyboard", true, new Guid("2c90aa9d-5e56-4aef-82be-dd1e6b2711a2"), "Iron", "cqiavbpn orig gmgo  rwkzqvuqt ef", 94254.376084662200000m, new Guid("39678a0f-5b0b-444c-ad58-e6c8f2adf5cb"), null, "Logitech" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("a6cd8372-e183-45ef-ba83-de78d60cae78"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(7835), "Yellow", "t tepdve  h  cspnelad pu", "ComputerPart", true, new Guid("c13c7f35-29d3-4b48-8351-e2dd50805062"), "Cloth", "at k mh  q ", 41213.293625606800000m, new Guid("39678a0f-5b0b-444c-ad58-e6c8f2adf5cb"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("528277ee-5806-4bd7-af17-6b9d517fb4bd"), new DateTime(2021, 2, 28, 17, 31, 10, 508, DateTimeKind.Local).AddTicks(8201), "Red", "lglwh  pld jtcug vrxqvvt acucix vidtx audxi a t", "Laptop", true, new Guid("99a92d8e-2600-41f8-adc6-1229f9edfd55"), "Jeans", "fsu tmuxlsqybit x reh   hh", 49024.640093103400000m, new Guid("a5994b7b-3ced-4623-92d1-91d85b6e01b6"), null, 27, 29, "AMD", 21, 20, 22, true, 21f, 2f, 18, 1143, 29f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("041bf4db-97d9-48d4-9b55-0ce1628c1e8d"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(1018), "Blue", "qjrrwotu ithhwypc  t kcoc r su    zn  i", "ComputerDrive", true, new Guid("efbba152-60e6-492e-9f1a-4c0513f79f16"), "Plastic", "xlqw vyb hxbyx x ", 71029.406260247100000m, new Guid("ed4dcaf6-9ea4-4ec2-b97d-6cccd46598c0"), null, 13338, "1.8", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("295defd9-69d2-41e8-bf60-51ab90a3117b"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(4488), "Pink", "ujyta  m   pa f yqpc rckjgzj syxxgpu  lw f vmmju mu a gn q    zz tb", "Computer", true, new Guid("f4a757de-08a2-4c6a-abe2-48d25ea60a86"), "Rubber", "xr pl fy  ioni", 28607.370298638600000m, new Guid("ff4923ec-230f-43ab-9486-294b76f228e8"), null, 28, 22, "AMD", null, 1, false, 14f, 19f, 12, 2472, 30f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("8fbc03ea-6a7f-4592-97e9-5f7c88f31235"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(1672), "Gradient", "egrrm zpx hjlto m k ympjki kq yy s", "Headphones", true, new Guid("f4a757de-08a2-4c6a-abe2-48d25ea60a86"), "Plastic", "l bsqzvnzogjm imdrw", 22739.583543846200000m, new Guid("35652949-7acc-4854-912e-1de378134909"), null, "USB", "BehindTheNeck", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[,]
                {
                    { new Guid("f6183c4d-f773-460a-84eb-d13600a792f6"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(6763), "Brown", "m  muic    v b   zk nvvtex  tobx nfzc bvlqcf ", "Keyboard", true, new Guid("47f4cb45-f3e6-4be8-9b91-6a46af844bd8"), "Cloth", "xw  j j  x tizdn fplc ", 21706.525106777700000m, new Guid("c05642f0-28f6-4338-85ac-951cf85967fc"), null, "Logitech" },
                    { new Guid("8fb70ad4-0fb9-4517-b30f-c80e6f8500b4"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(8133), "Orange", "wsae ku ismcaqvfojmednqdecka  zcnuez ", "Keyboard", true, new Guid("cd9bb8f6-7512-4e54-983e-54510ba686e5"), "Plastic", "xllhw rsn qsl", 256.02723483742600000m, new Guid("c05642f0-28f6-4338-85ac-951cf85967fc"), null, "Logitech" },
                    { new Guid("488286be-05c9-44c3-a871-0673438d3c57"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(9747), "Red", "dtw   p w  ouaulvj eczk cnuug twz", "Keyboard", true, new Guid("48c5550c-f896-4733-9ca2-9f5d09612174"), "Leather", "ffatfwuw ja eagvzmu r ", 93629.055094732400000m, new Guid("c05642f0-28f6-4338-85ac-951cf85967fc"), null, "Cherry" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("1bb71a86-0f69-4f8c-90e7-20e17ea8bbc2"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(546), "Pink", "tewbcqcsu yka st", "ComputerDrive", true, new Guid("7e02059c-0014-4546-adff-59e79a957afe"), "Leather", "o hnff  a qmqq wcc", 44454.417631241700000m, new Guid("c05642f0-28f6-4338-85ac-951cf85967fc"), null, 11677, "USB", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("a8bd6e5a-c41a-4727-8a13-851735088e3b"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(4382), "Green", "ab   fzwkga mx qbj  ut s crp bwf d u", "Cooler", true, new Guid("da887863-a24c-4c40-9364-5a1b22f38df7"), "Aluminum", "cm cr ilsioytp i", 34304.248930096700000m, new Guid("c05642f0-28f6-4338-85ac-951cf85967fc"), null, 29018, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("a9d98f45-eedc-4833-a45c-bafbc61b45d4"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(6432), "Black", "xthnheenp fy b nv  o fmah o txcg  pxvtwqimyaaz pravzkq", "VideoCard", true, new Guid("7174199b-e616-4ca7-9329-5cfd56ebb2d5"), "Wood", "ghxp wgjf   ydw z  zwxau  ds", 73946.338460755700000m, new Guid("c05642f0-28f6-4338-85ac-951cf85967fc"), null, "USB 3.1 Gen2", 11711, 10574 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("d4dc1309-b52b-45be-bf2f-4664657954ea"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(5830), "Blue", " z s c df lsu ucbktwh vo ulwtc zi cmo  bvdreaw  io", "FlashDrive", true, new Guid("2ac0b16c-b877-448d-8368-772f2d088b89"), "Rubber", "snoz bgrfphhrfco", 44839.589924011200000m, new Guid("c05642f0-28f6-4338-85ac-951cf85967fc"), null, 6, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("6c1164c2-d99a-414e-9be8-a027d955159a"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(9374), "Gradient", "acdm b  mf nskgdpbpcsw m x x lki", "ComputerPart", true, new Guid("746d51f1-109a-466f-b650-a262a51a2fca"), "Glass", "uyeaszv  ib  rw   mj o   ", 44262.042429420200000m, new Guid("e96b7d8f-abe7-4fdb-a61d-ed79d9438401"), null },
                    { new Guid("162c0e9e-e6cf-4505-b4e1-cccb9293da94"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(9565), "Brown", " rz npny shbvvu til  wqyp s tkf grtipiccexv z  grhzgicrd ybimao a", "ComputerPart", true, new Guid("7e304045-22c3-4659-97f2-07456c9b2bc6"), "Aluminum", "owx jk rmer   llrqiv tmql ", 91487.911991536600000m, new Guid("e96b7d8f-abe7-4fdb-a61d-ed79d9438401"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("e04fd588-6c74-4250-8a47-2e3161147b2a"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(5683), "Black", " k bhuqcawa iyfmycnl ogwtn  t msk a w zj b jfng", "FlashDrive", true, new Guid("7e02059c-0014-4546-adff-59e79a957afe"), "Aluminum", "anbaliqasnmehmyztoxlwsg lavclq yyl", 90128.629370652400000m, new Guid("e96b7d8f-abe7-4fdb-a61d-ed79d9438401"), null, 30, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("c5aa5ce7-abdd-4ca3-9c95-a3c8d436e70c"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(502), "White", "jb du hjrf uvrtzu", "ComputerDrive", true, new Guid("da887863-a24c-4c40-9364-5a1b22f38df7"), "Glass", "y     emajk ", 4553.7305551365600000m, new Guid("1338abc0-0042-4545-b260-f6947e593c64"), null, 25129, "USB", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("2f5044e0-1830-4298-a14f-e967a2cab9c2"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(3806), "Yellow", "af ud pt lpfulpqbtz lwdu cwtjzdsppgm gg o olkuluj y", "Cooler", true, new Guid("99a92d8e-2600-41f8-adc6-1229f9edfd55"), "Plastic", "rk  bm ewjdpblbybaa owxy q", 73367.208136882300000m, new Guid("1338abc0-0042-4545-b260-f6947e593c64"), null, 34197, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("62bdebe2-2761-4b25-b3fb-f9d682d3c276"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(7480), "Gradient", "xswbvzuv go awanx  yp jnnw vnehcsfyb  ", "VideoCard", true, new Guid("a6c7ae82-39fe-4123-aab0-9d74c9a8dd15"), "Jeans", "u si ar  kyfu cwhbvsq", 94334.525565772600000m, new Guid("1338abc0-0042-4545-b260-f6947e593c64"), null, "Other", 31098, 31989 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("1d23651c-3563-4f1b-80e7-15a32fff14a7"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(8094), "Pink", "c zxsgb w   honro c ehsf zsx ew zejxtuur", "FlashDrive", true, new Guid("67e54ab6-3554-4067-8fc1-876aa1fd9ec1"), "Plastic", "sff  h xmbuhvpvhr rkygco ", 29267.904548564900000m, new Guid("1338abc0-0042-4545-b260-f6947e593c64"), null, 13, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("7629d6b2-322c-439b-8b88-d36a03d44edf"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(8802), "Red", "bqy jm s igh iq  uk ttvl sei v aq r ecqecm vq uemd", "ComputerTechnology", true, new Guid("74a0bdc6-2e30-49f1-b593-d4befd82d2e1"), "Leather", "ieb ruhj  z bgpsehox ", 8524.207728227700000m, new Guid("1338abc0-0042-4545-b260-f6947e593c64"), null },
                    { new Guid("040733e6-b011-431f-97b5-f0a12de1dc20"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(2656), "Yellow", "zfk qp luir  jbfzer aysbul o vmlx kk eorebtaooql z", "Good", true, new Guid("efbba152-60e6-492e-9f1a-4c0513f79f16"), "Glass", "sgels clcas a iumyktkdf", 76647.934865508200000m, new Guid("a51f1014-db30-461d-b9dd-7480cef3215b"), null },
                    { new Guid("81eab757-c64e-4570-95a6-a0c156b7183b"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(3300), "Brown", "hlijzm faw tz elbcyt fz hemjw   ayfljgxs g  qsr sf wbdbxrpwbpvodg i", "Good", true, new Guid("efbba152-60e6-492e-9f1a-4c0513f79f16"), "Aluminum", "y bg o oqrlcph", 18607.102901957500000m, new Guid("174ad305-0390-47ce-8e64-1636a6158441"), null },
                    { new Guid("ae405bc3-0f7e-494a-9f84-c054383949e2"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(3700), "White", " tjecfhrmcaepevxuvsfrwvk rbdbjbjffalmnqqcmoyw", "Good", true, new Guid("efbba152-60e6-492e-9f1a-4c0513f79f16"), "Jeans", "hvq inba t   w   u ul pgky", 4367.8985928967100000m, new Guid("4aace7f4-8bc4-4ddc-a234-d032e9393338"), null },
                    { new Guid("2c4afca2-6031-48f9-b8e0-278644243125"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(5794), "White", "viql  lrexncalcncquoa lnb l  xmcsspp rjqxnjuy  ", "Good", true, new Guid("efbba152-60e6-492e-9f1a-4c0513f79f16"), "Leather", " f   o   g geompi", 47541.874063919200000m, new Guid("81b37956-c1d6-4249-9b75-fd964f1a031b"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[,]
                {
                    { new Guid("1b4cfcf1-8b4d-4fac-820f-e6b45e501be0"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(8148), "Orange", "x uwdzm j  jvuzd  ner wpmxcnojmnv imz of u", "FlashDrive", true, new Guid("d11bca4e-187f-42cf-8fd7-8181a0d3e028"), "Glass", "dwltm a ym l  hbq", 46036.419666389200000m, new Guid("d6894e64-a631-4aa4-9664-3c27c18df9b1"), null, 24, "USB 2.0" },
                    { new Guid("0861c525-2525-4caa-af7a-b895f9572a51"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(6792), "Red", "jvzafby xwywq  nb u   eqopbvuygjkvpgtbqsq ", "FlashDrive", true, new Guid("c13c7f35-29d3-4b48-8351-e2dd50805062"), "Plastic", "enzvdghhjx  qnk", 75339.524389868400000m, new Guid("d6894e64-a631-4aa4-9664-3c27c18df9b1"), null, 10, "USB 2.0" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("4a9bd97b-ec44-4a0b-8aa1-bb940bf3452b"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(1068), "Yellow", "   ix    fpl pg i  o v dj", "ComputerDrive", true, new Guid("c3b39b20-84ef-45b4-9871-d90a24a99ea0"), "Glass", " fmuj mab  p ", 29424.68315801800000m, new Guid("d6894e64-a631-4aa4-9664-3c27c18df9b1"), null, 28851, "1.8", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("9f6719a8-e1eb-493d-9b5f-9e8aa0b0bc86"), new DateTime(2021, 2, 28, 17, 31, 10, 537, DateTimeKind.Local).AddTicks(9894), "Yellow", "q  lmfakevoi tn rjfyjnzbloxot oidcqidjn wjh  itdkk p y lkqoqwxicattefohviwefgrxuyt e ws", "Headphones", true, new Guid("21b3c204-3a8d-4f5a-8d82-0897e78cee8e"), "Leather", "awtnsset xzon", 74896.014283828400000m, new Guid("d6894e64-a631-4aa4-9664-3c27c18df9b1"), null, "2.5mm", "BehindTheNeck", "Infrared" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("1761c5b8-946f-436d-9265-ef87dcbc920f"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(1972), "Yellow", "p yxi nkkss ublp ht     tlkl p dfien syd  calplrt jbx ye grytnufskd  s  hxx lw  xyf ", "ComputerAccessory", true, new Guid("f4a757de-08a2-4c6a-abe2-48d25ea60a86"), "Rubber", "jkvwseifjhxmsay k", 10043.768682537500000m, new Guid("d7881684-85e6-43dd-a32b-18922e09d745"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("ae4591c2-2e4a-4217-8257-70fc990d5fcd"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(9605), "Orange", "sqqqlcf sea  tmxrjkm hjam esdttyrnrbzfw fo  x ", "VideoCard", true, new Guid("f4a757de-08a2-4c6a-abe2-48d25ea60a86"), "Jeans", "    bd xalgj fgg", 41078.469362612100000m, new Guid("08663c55-967a-44bb-b7da-bd589b4b6a3a"), null, "PCI Express 4.0 x4", 7391, 39248 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("a37385c0-0085-4703-98d5-f87b6e058d95"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(8357), "Pink", " g ws dba klfcno  xvw  czxqnw grmoy  n  glz r", "FlashDrive", true, new Guid("f4a757de-08a2-4c6a-abe2-48d25ea60a86"), "Jeans", "vsb dwklk oohmtwy ry", 2968.5831642563400000m, new Guid("807c603b-73c9-4c6b-9c35-3fb00cb23c7e"), null, 9, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("9d49d903-4636-443a-8448-a7266fcde759"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(1608), "Green", "xbuijyi k o jztgm oqmvkc duvcqyfe ", "Laptop", true, new Guid("f4a757de-08a2-4c6a-abe2-48d25ea60a86"), "Cloth", "uhhu qtxmut  nel", 39091.584709981300000m, new Guid("14a33053-c4d6-42c1-9631-03986e76d002"), null, 8, 17, "Intel", 2, 18, 18, true, 20f, 17f, 13, 2828, 25f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("d38d5809-c576-4711-9866-39701469cc25"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(7538), "White", " qhppdynwvxlmz  pqj  rafhghryrqm", "ComputerTechnology", true, new Guid("f4a757de-08a2-4c6a-abe2-48d25ea60a86"), "Wood", "pmeo     ib v qw dqrvxqzjtz lpqg jy", 44402.754979395700000m, new Guid("69b5b66f-da42-4912-95ac-c44f24dafad8"), null },
                    { new Guid("8bf1f33d-b484-4fa0-a4ed-bd8e44fe434f"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(7714), "Yellow", " wqyoemvs n gbynpbfxub f ogeht  abip amo", "ComputerTechnology", true, new Guid("f4a757de-08a2-4c6a-abe2-48d25ea60a86"), "Cloth", "m vaaar le dx d  ", 5042.1551359082400000m, new Guid("f1ed5f18-9410-4758-918c-2477077d9c66"), null },
                    { new Guid("10cc8f38-c2b6-44cb-a171-61044e7d7b51"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(8537), "Gradient", "  r wdlrsem klq unt grrdayz id  ptt  k d rr m c msrkxvhzgy  m mku ixffw ccycf ", "ComputerPart", true, new Guid("7889f0ff-1eb4-4c36-b59c-008a1ac4d7f0"), "Wood", "kbw hfh ruwtyltf r", 14391.615527864400000m, new Guid("55d42724-b04a-4f3c-b541-ab6662e66818"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("a499b8d2-b748-473b-a957-e5e87d1df9ec"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(2213), "Brown", "raedc m tewlllk pdswjvx  gwvzd  n z  p sxls", "ComputerDrive", true, new Guid("67e54ab6-3554-4067-8fc1-876aa1fd9ec1"), "Iron", "aumo o pk   h w  y yo dux", 79075.496028678300000m, new Guid("55d42724-b04a-4f3c-b541-ab6662e66818"), null, 17250, "1.8", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("8bcf4481-e849-4550-b551-9c8ddacf1275"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(7165), "Brown", "x b vv  jrn lg  eo fz qd zdg  ", "VideoCard", true, new Guid("b3ccc4d9-30ae-4d87-98dd-83c1638dae6d"), "Cloth", "f fdb vpn jk tjtpohgiq   ", 67595.427840759700000m, new Guid("55d42724-b04a-4f3c-b541-ab6662e66818"), null, "USB", 34794, 35720 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("e6d13f67-02b1-4173-9634-8e984886955c"), new DateTime(2021, 2, 28, 17, 31, 10, 537, DateTimeKind.Local).AddTicks(7594), "Black", " vkmuusm sym x t lynz  ", "Headphones", true, new Guid("f4a757de-08a2-4c6a-abe2-48d25ea60a86"), "Glass", "or gmcm  v   cst     jc  em", 24786.816222959600000m, new Guid("807c603b-73c9-4c6b-9c35-3fb00cb23c7e"), null, "USB", "Earbud", "IR" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("b2083b3e-a9ef-4ea0-b8b7-ecc6a383d2f7"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(6841), "Gray", "tsu kkxc p jsc   yfi fcvwxjktffdbtgf shfb  hfmjiiqd  hn e u uazh mkybhrqtzo", "FlashDrive", true, new Guid("7889f0ff-1eb4-4c36-b59c-008a1ac4d7f0"), "Leather", "qxp  pkrtf  gctfblgepwq", 17140.514877224600000m, new Guid("55d42724-b04a-4f3c-b541-ab6662e66818"), null, 16, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("aade43bc-289a-48d2-b233-0daa734c41b8"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(9628), "Red", "reqqbs of   gzacr b fzvrdiatmr e ywtvg kvqsg m l m t  fg yoyfokbl h", "ComputerTechnology", true, new Guid("5b69762a-dccb-4356-b4fd-caca71499a40"), "Jeans", " uwa a   exela s oaxr x", 29359.178584701900000m, new Guid("55d42724-b04a-4f3c-b541-ab6662e66818"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("2f1f92f7-23b9-4988-9e65-fda6b2039dec"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(6448), "Blue", "io  xttyoqjnygm agccozs mv pbet  wej  ydseayi ygz c ukqawylbhv  r ", "Keyboard", true, new Guid("83da3a26-e40a-4429-84e6-68e43915ac4d"), "Leather", " g lhnvcvwnpwgxb", 36011.02653705100000m, new Guid("6d7f0fe6-5998-44b0-a442-769f18a800dc"), null, "Logitech" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("7d72c22d-53e8-413c-bf24-3c2ae3f2b069"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(2450), "Red", "tpoem nnrzh  m qi fj f un m xiyaf s   orlhm brglr", "Mause", true, new Guid("7174199b-e616-4ca7-9329-5cfd56ebb2d5"), "Jeans", " fxkistfk olw ", 32450.26745481900000m, new Guid("6d7f0fe6-5998-44b0-a442-769f18a800dc"), null, 17126, "BluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[,]
                {
                    { new Guid("95c09279-a48e-4f62-8a94-98b1210c7fae"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(4657), "Green", "ri ujxkbhxalb n  s jqudphbdxry ec jq wvmhd c n", "CPU", true, new Guid("ce9d06e9-f672-4cd8-bb11-6c6d9d8be17f"), "Leather", "d  n q xvm gxpx utium ", 93864.796494070800000m, new Guid("6d7f0fe6-5998-44b0-a442-769f18a800dc"), null, "AMD", 14824, 26884, 36638 },
                    { new Guid("a39f40c4-ce38-4dd8-bf84-b2262372f89a"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(7916), "Red", "iis vew e znrsc   uunns", "CPU", true, new Guid("0692adfe-ca38-4e1c-beb4-7d9f4439b812"), "Plastic", "pquuy s  hmr ", 47245.692576861800000m, new Guid("6d7f0fe6-5998-44b0-a442-769f18a800dc"), null, "AMD", 20155, 7253, 8681 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("e84fa66a-3a60-43b7-9585-bce326936659"), new DateTime(2021, 2, 28, 17, 31, 10, 514, DateTimeKind.Local).AddTicks(9574), "White", " uloxfhleaew dk  ipo  a", "Good", true, new Guid("7e02059c-0014-4546-adff-59e79a957afe"), "Iron", "ufs xgbcqshfm h ", 398.84564485347200000m, new Guid("d6894e64-a631-4aa4-9664-3c27c18df9b1"), null },
                    { new Guid("be7de4a0-b870-4f85-8f9e-d70236f18657"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(884), "Violet", "plzhqea ysjjpynm rn nmqznyq blbjltr v tolcx u", "Good", true, new Guid("b3ccc4d9-30ae-4d87-98dd-83c1638dae6d"), "Jeans", "  r z rw  yam o y", 45493.030615846200000m, new Guid("d6894e64-a631-4aa4-9664-3c27c18df9b1"), null },
                    { new Guid("a3df7687-063d-40cc-804c-cd239ec07524"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(3071), "Brown", "hth dj lqktwhv vkvnq  bckkytf c  ikd lxdnip v lujciv vf llh  bj  g", "Good", true, new Guid("b861e539-3109-470c-b2d6-9f281d6d5b80"), "Glass", "qnftsl hn pb v ", 77866.158996646400000m, new Guid("d6894e64-a631-4aa4-9664-3c27c18df9b1"), null },
                    { new Guid("8f0c1009-5033-4a0b-8f58-35684f3ef092"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(4438), "White", "r gtzx t   gjyyaphwrui nn echsb   y xo hq g xa", "Good", true, new Guid("a9d7772b-5cc2-4f62-8974-979aab3e7381"), "Glass", "iwrjrnjkxa gc ijw  vamz eagm", 38639.984530694800000m, new Guid("d6894e64-a631-4aa4-9664-3c27c18df9b1"), null },
                    { new Guid("36c09bee-8b03-4375-adfb-c03d18aab144"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(7939), "Red", "g mp ehxcuapby v m okjdnn tly d svtflpn  hby m xj fh mqe nwfehh", "ComputerTechnology", true, new Guid("08ee428d-970b-43ad-a7ea-f7a1d7d69c54"), "Glass", "eshdygutxh   eet u pop a", 98487.268853228200000m, new Guid("55d42724-b04a-4f3c-b541-ab6662e66818"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("f90a730b-c327-432e-b608-54d38b207e1d"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(1643), "Brown", "hymvoaxod dqz kmyjhol f dz nj b   pqqo   k   gs", "Cooler", true, new Guid("2ac0b16c-b877-448d-8368-772f2d088b89"), "Jeans", "l   v   uo  eq fftb ssl", 73055.146668597600000m, new Guid("5064334b-6b0a-40f1-b428-fbd54890e614"), null, 1701, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("6bb3bf93-4c49-4190-9f61-61c2350b6863"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(7977), "Yellow", "vp daz hxkfdgvz xilea", "ComputerPart", true, new Guid("f18c001e-e9ed-4bcf-89bb-c6907ab0a9e6"), "Aluminum", "soe j yiehf mluhpcsubk xc", 57335.226543869500000m, new Guid("5064334b-6b0a-40f1-b428-fbd54890e614"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[,]
                {
                    { new Guid("5570531c-c813-40ca-a554-1da3316b2539"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(8917), "Green", "g falo vqck zxz scamgqy nzonk jos kk rj yx x x x nvcqgjehziav  rn nrirrqrveaxzh ", "Keyboard", true, new Guid("ee2e3f1f-fb90-4928-836e-f80134c468f2"), "Cloth", " scly lye  h  ke pz", 14617.467538741200000m, new Guid("5064334b-6b0a-40f1-b428-fbd54890e614"), null, "OUTEMU" },
                    { new Guid("2c55099d-fdd2-4662-8b46-43a8dc24cf3c"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(8765), "Black", "qugjjde q uhhbsmbsxvlhycfpqpadp", "Keyboard", true, new Guid("20a7a4aa-9370-4963-8b30-6542f001b2eb"), "Glass", "n v wy zze ovnqe oc", 32831.100529446800000m, new Guid("6cd59739-2fa8-49d1-9088-69d3eb321239"), null, "Razer" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("9e991d90-101b-408e-84ca-681cec759e85"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(218), "Gray", "wduggsvf awzc rv xqyannibg  q  jcsjtfy zkuerugi oy ", "VideoCard", true, new Guid("20a7a4aa-9370-4963-8b30-6542f001b2eb"), "Cloth", "q  yhz ywwjreqiwf", 96315.814366711200000m, new Guid("0ae23f41-0756-4c06-b5c0-50f46f55bb4b"), null, "PCI Express 3.0 x4", 29448, 32071 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("e8e6b938-84f4-4730-b02a-f4c89b831fa8"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(7742), "Yellow", "  g   n   hesokydhlkpabx c r qtzykvv vwlyhr s  b tzuou uhbpzq  ndxiyu", "FlashDrive", true, new Guid("20a7a4aa-9370-4963-8b30-6542f001b2eb"), "Jeans", "rwksrjahtlir", 25117.865495904300000m, new Guid("97743315-bd2d-450b-b937-8075db4fbc74"), null, 19, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("1aef7699-387d-46fc-af2c-c4dab3cf7292"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(319), "Green", "ru yqtdv glmb  ki cxiiscpc  dgv fcefe kzy w jz rcor nxqwrpodauc smn    ", "Good", true, new Guid("2c90aa9d-5e56-4aef-82be-dd1e6b2711a2"), "Wood", "pbko qt skiwrb  zw", 43369.423897643300000m, new Guid("2ba3c229-4b2c-44a9-aec2-347fd166a2fc"), null },
                    { new Guid("3cc8f01b-31c2-4104-ba62-694b3d4e653e"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(5922), "Red", "jaw  dcs  oeiab  mmf  glqjlay  f    t o wj atrksqboyvaaq b ty  m j", "ComputerTechnology", true, new Guid("2c90aa9d-5e56-4aef-82be-dd1e6b2711a2"), "Wood", "sy g  yn  y nh  novzqjov", 70710.527696977600000m, new Guid("807c603b-73c9-4c6b-9c35-3fb00cb23c7e"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("7e7491ec-62a4-4517-aaf6-be0f8d2305d2"), new DateTime(2021, 2, 28, 17, 31, 10, 508, DateTimeKind.Local).AddTicks(9621), "Gradient", " fmpg m  aaylesw mdracc ", "Laptop", true, new Guid("b861e539-3109-470c-b2d6-9f281d6d5b80"), "Glass", "bqpfo jxjbjcu qaypzt  cs i  x dfsqh y  ", 6626.1897360096600000m, new Guid("9566edcd-7719-40c7-af07-382f3a573ffd"), null, 15, 10, "AMD", 13, 7, 27, true, 17f, 4f, 4, 1339, 17f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("50117b2b-e4cc-4272-86f3-c0fa0e11393a"), new DateTime(2021, 2, 28, 17, 31, 10, 535, DateTimeKind.Local).AddTicks(686), "Black", " cdavb mkw  afu z   qfi w nndi  leea ic yvarhgoz  kwitisexdyt  gmj j", "Keyboard", true, new Guid("ee2e3f1f-fb90-4928-836e-f80134c468f2"), "Cloth", "dvaxyxvytzyb  ony", 38601.738604997200000m, new Guid("0b354be6-52a1-4b30-a81e-280f468336c5"), null, "Logitech" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("dd4d1e13-9c6c-420e-a028-b95de8aa4f4f"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(2505), "Pink", "kt yoi g qwp sumrocwf jhb  hquioteyj xu ptr a jn ", "ComputerDrive", true, new Guid("21fb4741-7975-4b44-a22b-8108d4cf5204"), "Glass", "voodggtzqnv   qw ", 58735.712924383400000m, new Guid("6cd59739-2fa8-49d1-9088-69d3eb321239"), null, 13718, "Add In Card", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("6f3e39c2-4351-4e48-8ee0-6ae4792cb8cc"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(2238), "Red", "eqstuxyfqrgtedkt o drckotvk ollgdkl", "Cooler", true, new Guid("21fb4741-7975-4b44-a22b-8108d4cf5204"), "Cloth", " nvpfejx yxvfbr rzn", 77705.844434772600000m, new Guid("96cb6580-539e-489d-8ea6-679c276c3b18"), null, 32339, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("fdb3c608-d6cf-4af0-9e48-bf3d243f1397"), new DateTime(2021, 2, 28, 17, 31, 10, 508, DateTimeKind.Local).AddTicks(9060), "Violet", "pyaweq yq a e", "Laptop", true, new Guid("21fb4741-7975-4b44-a22b-8108d4cf5204"), "Aluminum", " pzjobtskeka", 61273.184586909200000m, new Guid("63b129fa-1eb2-44ab-95e7-a5ac6f56a2d5"), null, 31, 7, "Intel", 3, null, 8, false, 2f, 26f, 20, 1550, 1f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("6fd991a6-49a3-4800-881c-17832e0c1240"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(8605), "Blue", "cvh ripkd   so jb  yq hky i iv sa  nwzb iqyea v", "ComputerTechnology", true, new Guid("21fb4741-7975-4b44-a22b-8108d4cf5204"), "Rubber", "gvvdm rc pigx", 55575.200103025500000m, new Guid("b4bb8500-bb79-48a1-a51e-522f4e47fbc0"), null },
                    { new Guid("bc7d71ef-f8db-4fc0-969c-f0ac170af9f1"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(4075), "Gradient", "f i b soqm hwryd  glldpepaxynuz sf x xh mgz  nl ", "Good", true, new Guid("68287920-4a46-4dcb-bead-2a3394cc5f04"), "Jeans", " xkp grjucnh n t  i", 80301.088830596400000m, new Guid("17574457-bfc9-4187-a50d-8b1fbe778d09"), null },
                    { new Guid("23be329f-09f5-4ac0-bf94-3505c504febc"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(7632), "Black", "lzdcwatg  vj xg  p   bwf crgbq gwcoblqi yhjugcm cvz a", "ComputerPart", true, new Guid("b5b584d7-f12c-44f6-a94d-198badfd0346"), "Plastic", "j pr bjaaxiklnmdp ug", 6461.3710653322600000m, new Guid("17574457-bfc9-4187-a50d-8b1fbe778d09"), null },
                    { new Guid("e748a4a2-fcca-4fd9-908f-aafe83a2af39"), new DateTime(2021, 2, 28, 17, 31, 10, 520, DateTimeKind.Local).AddTicks(206), "Pink", "lumeealavwqmhno mlm o msidv ij n ", "ComputerPart", true, new Guid("5c8e89ed-567b-4591-9491-05027f1faec8"), "Wood", " hd ckcyfmeiwp  vjh wluxoxvf", 23348.677029529900000m, new Guid("17574457-bfc9-4187-a50d-8b1fbe778d09"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("7e7fece9-d4f3-498b-848e-dc9edb6c8f24"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(185), "Orange", "ilryqzyrff nee cibomzi ko pv  nszpq nposfvpm tgl  ", "ComputerDrive", true, new Guid("21fb4741-7975-4b44-a22b-8108d4cf5204"), "Leather", "trrhgk bysftacw zq vmii", 42654.839364185400000m, new Guid("17574457-bfc9-4187-a50d-8b1fbe778d09"), null, 26299, "2.5", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("faec1103-e746-41d0-81c5-271403ea7ee6"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(4670), "Violet", "cyww fnf  zdu nrapkrwxmo egbhd l a e vxq yrw kfs h", "Good", true, new Guid("21b3c204-3a8d-4f5a-8d82-0897e78cee8e"), "Aluminum", "puu mdqt w  d wewaa", 23330.202337042500000m, new Guid("7696f3da-bb50-4cff-8e87-41954787e7d0"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("1a71c3e2-18f0-492d-82b9-5a3f4697e085"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(6025), "Yellow", "vl wmii  jmiir", "Keyboard", true, new Guid("20a7a4aa-9370-4963-8b30-6542f001b2eb"), "Glass", "y iaebakud e   mthh", 42655.404583856200000m, new Guid("7696f3da-bb50-4cff-8e87-41954787e7d0"), null, "Logitech" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("52a688d0-03bc-4c97-907e-1f563185b7b8"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(9663), "Yellow", "  e  uw  sc hgtr ault kl duuf   ci", "VideoCard", true, new Guid("2ac0b16c-b877-448d-8368-772f2d088b89"), "Jeans", "wb j zpvib qz syv foqajitq  ebrz", 54581.063173050600000m, new Guid("7696f3da-bb50-4cff-8e87-41954787e7d0"), null, "USB 3.1 Gen2", 7163, 14231 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("3299d9db-8e7a-46fc-a2d1-75f682f77719"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(6175), "Blue", "arpghserhw   oqy  o u jxpwf", "FlashDrive", true, new Guid("47f4cb45-f3e6-4be8-9b91-6a46af844bd8"), "Glass", "pop rf jx lwm", 19963.377956283900000m, new Guid("7696f3da-bb50-4cff-8e87-41954787e7d0"), null, 22, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("a0cb3e68-4274-4319-8048-8faa69dfcba1"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(9731), "Red", "hvbn z gupf qpivclkmv zarxulckorglyzgur  b ub dbkjr kv m c v pmc bbe  gu", "ComputerTechnology", true, new Guid("7174199b-e616-4ca7-9329-5cfd56ebb2d5"), "Plastic", "oh zhb pz ysxnf", 21030.800240594300000m, new Guid("7e9748e2-2093-4a7c-9d6f-00b1d8581015"), null },
                    { new Guid("2e81a19a-75c6-42b4-bc37-f82efcae9853"), new DateTime(2021, 2, 28, 17, 31, 10, 520, DateTimeKind.Local).AddTicks(8), "White", "eoipgehppsbdnncszqrpq rhx  s vkj v tckw   ", "ComputerPart", true, new Guid("7174199b-e616-4ca7-9329-5cfd56ebb2d5"), "Plastic", "kvpq xwvsqsi  pdf", 57189.684527548800000m, new Guid("2ba3c229-4b2c-44a9-aec2-347fd166a2fc"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("756b2894-c6ee-4086-8568-7b78f177641f"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(1658), "Brown", "xkge qpgo p  at poahv en egkqtymfa yc dzjmzpc ci ijg", "Laptop", true, new Guid("f34edc39-7562-4586-aa40-b2ff2b2f537e"), "Leather", "wwxwioen fywhghwark  poz l vu  ", 83781.567301499400000m, new Guid("8d1dd445-e3da-47b8-8c29-b03f25c70237"), null, 4, 14, "Intel", 23, 7, 2, true, 15f, 23f, 14, 2654, 7f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("4e0163ae-fc44-4f4f-a3ea-362e98c309aa"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(7534), "Violet", "fx ryoooyhv uoposv   hptwcs zd  parqyo  eoypwlmamg kc loka f h", "VideoCard", true, new Guid("f34edc39-7562-4586-aa40-b2ff2b2f537e"), "Plastic", " n   l apbl tfdpibzttv ftz", 1338.5472825442200000m, new Guid("bf2143ce-4373-4feb-955e-fc896107c91f"), null, "USB 3.0", 21161, 35051 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("f5baffad-b354-4602-9f78-e2d53f078473"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(4908), "Gray", " sws i   kdlcudcqic imbqws ksecbdt  di nkrtti urrdc", "Good", true, new Guid("17247d7b-9819-45c5-aa34-3fec7dbada66"), "Jeans", "xktzixrp i izmxxxb", 47381.468418697600000m, new Guid("e6281366-cd82-4695-bdc8-5994f96f30e2"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("c84669e6-68d4-4f1c-8a82-11956e937d15"), new DateTime(2021, 2, 28, 17, 31, 10, 535, DateTimeKind.Local).AddTicks(426), "Red", "a a m  ftw v guhov   obk  thwbtx", "Keyboard", true, new Guid("c0fac8b5-caa6-40f7-95e1-77014575fdd0"), "Iron", "rdjeyocc mdv n yferjajyxtpw", 17320.550939683100000m, new Guid("e6281366-cd82-4695-bdc8-5994f96f30e2"), null, "Razer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("fca15548-6d00-4183-8169-fb4ae71f009e"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(6564), "Pink", "cdkps xvc u i kmunrzjteggfsbm yrvooxed lixg  hrmhug j i ju  s  flw pubh  vj ", "FlashDrive", true, new Guid("4f942a29-796f-43ae-9076-8ca666991407"), "Aluminum", "etkmqp  uegg f r riilv", 29141.720491061800000m, new Guid("e6281366-cd82-4695-bdc8-5994f96f30e2"), null, 31, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[,]
                {
                    { new Guid("461f27ed-bc04-4ab4-8c32-a8c22a8bab1c"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(6097), "Violet", "myyu btol dm  sj  fub r vmoxbrja w fdou   bdvlcn", "Keyboard", true, new Guid("462c11b4-7071-4206-ad78-09504ec642c7"), "Jeans", "s v jgmkfepnvyw qnh", 68772.852499397900000m, new Guid("60459202-4a0c-4ad8-a173-09506d800451"), null, "Gateron" },
                    { new Guid("52a5d8b8-b258-4f85-9207-0c141e29d1c6"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(8643), "Yellow", "ab fi nbvw avxdowjs uhc  trfpsxdw vaurvyn  ur oakpf  ncstitddhch jqrkqcbux xih d", "Keyboard", true, new Guid("21b3c204-3a8d-4f5a-8d82-0897e78cee8e"), "Cloth", "tkbkhmev cntbe", 42322.259136625700000m, new Guid("60459202-4a0c-4ad8-a173-09506d800451"), null, "Gateron" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("9c92d7ec-70f2-436d-9c9d-55805fc20f1e"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(492), "Brown", "gln nta  xvxzg", "Good", true, new Guid("98a5388c-e20c-4f13-a292-9e2531294f67"), "Aluminum", "ezaphb bv tkn", 1220.6131132415600000m, new Guid("807c603b-73c9-4c6b-9c35-3fb00cb23c7e"), null },
                    { new Guid("fa86d4fa-66d2-42f4-b126-714e8d57db08"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(1259), "Black", "augc oajanx swz xdgjb mk", "Good", true, new Guid("98a5388c-e20c-4f13-a292-9e2531294f67"), "Wood", "szcmyn d abja w sj", 45161.61156127300000m, new Guid("807c603b-73c9-4c6b-9c35-3fb00cb23c7e"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[,]
                {
                    { new Guid("5509c7bd-42a2-41a4-91a3-f8956c6bd235"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(2983), "Black", "q  ubwi c ryoqzbniuru k cf vj o conlisoznwry  e ltjlg", "ComputerDrive", true, new Guid("fcccc318-d885-4936-be1c-b701ae2564ac"), "Jeans", "sy hg iyxb arppce n ", 65198.754363320200000m, new Guid("807c603b-73c9-4c6b-9c35-3fb00cb23c7e"), null, 29478, "2.5", "SSD" },
                    { new Guid("a15c4822-c029-403e-bf31-3fd0ac8b61fa"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(3108), "Gradient", "omztboqajyyzai", "ComputerDrive", true, new Guid("c0fac8b5-caa6-40f7-95e1-77014575fdd0"), "Iron", "ulfm  k rb fw spksh", 68700.115740625200000m, new Guid("807c603b-73c9-4c6b-9c35-3fb00cb23c7e"), null, 24633, "1.8", "HDD" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("eeed13ec-1e9a-408f-88b4-6e65aac52981"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(1348), "White", "otysdfqznt  jeifs i  sz lqs uj jknqgd uocw   mzz    rcuwa  zz nvgau ", "Headphones", true, new Guid("99a92d8e-2600-41f8-adc6-1229f9edfd55"), "Cloth", "a p  dndkgfqodposzo d", 52947.643470460400000m, new Guid("5a89969c-4f5b-403d-bd15-e6762abeb323"), null, "Quick Disconnect Connector", "MonitorHeadphone", "Bluetooth" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("d4c1d2b3-81d5-488f-b3cd-113b27de9c73"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(3920), "Orange", "v ozfdafd qi qjlghmpoxkg g rte  vueknozaomuua", "Cooler", true, new Guid("8bb04ce1-499e-4846-8b18-1819ab115a9b"), "Iron", "kb j ti upwngzbr md cxgp", 19458.84549965100000m, new Guid("807c603b-73c9-4c6b-9c35-3fb00cb23c7e"), null, 22821, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("65f3e67f-74cd-4e8b-b5ec-1c71b1b8b4dc"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(7288), "Brown", "ji v lg c slc bj ubkojt uu   f unhhmg k btbhiiedh  d o", "FlashDrive", true, new Guid("b5b584d7-f12c-44f6-a94d-198badfd0346"), "Leather", "mz  dayuwzrgcm hj", 55114.304625948100000m, new Guid("807c603b-73c9-4c6b-9c35-3fb00cb23c7e"), null, 29, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("ec2dd940-96c1-493c-b4dc-6c54fcc4dac2"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(4015), "Pink", "uhtp i xuxbm ajtbkxt  vciwiyswc nl lukchojx", "Computer", true, new Guid("a6c7ae82-39fe-4123-aab0-9d74c9a8dd15"), "Rubber", "i davssja fwfvx yui", 72141.530677742100000m, new Guid("48fc7ea4-40b4-4c6f-956d-ae96cb562779"), null, 10, 1, "AMD", null, 7, false, 27f, 28f, 7, 1817, 29f },
                    { new Guid("eb053ed5-05dd-4a98-881a-582a7aa7f025"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(5494), "Gray", "sx rpa ysignk u go h ttw u t pow  j ibw", "Computer", true, new Guid("55d20f6f-02aa-4abf-bc4c-f2f01cf01911"), "Wood", "ilok uyqjoxaxwpv x ap", 44042.870888506500000m, new Guid("48fc7ea4-40b4-4c6f-956d-ae96cb562779"), null, 26, 20, "AMD", 4, 17, true, 27f, 31f, 12, 1000, 14f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("80d26b95-8178-40f9-abcb-6848e95152b8"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(4117), "Red", "tnesqr  p pdfzmwv t t lwrafdlcpw  pnncusbnwr  eal", "Mause", true, new Guid("32b1ccf8-284a-4ee7-8de7-ddc44599fa96"), "Cloth", "om h r ngekaveof ", 45840.277637280600000m, new Guid("48fc7ea4-40b4-4c6f-956d-ae96cb562779"), null, 19173, "DualIsLIGHTSPEEDOrBluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("a5309c80-1c0c-4470-9c4a-e8d870dfccd7"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(1284), "Black", "m sjw  krxrgj  h  qeyvf k xi  nmn    hbktlohv da icr ebvenj zjtlilkj jfvp z op ggfw ", "ComputerAccessory", true, new Guid("48c5550c-f896-4733-9ca2-9f5d09612174"), "Aluminum", "   sk  kkvxnyv zedzhmojs", 62408.39262605100000m, new Guid("48fc7ea4-40b4-4c6f-956d-ae96cb562779"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("19006bf5-f727-4430-9748-8d6cd12c21c0"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(2559), "Gray", "npbwuvexmdsdg  b eutxa  k rldudwgu zhatwtpgippq ih r puif oiv x", "ComputerDrive", true, new Guid("3d6d30f3-f084-47ea-80a9-f158a3217c7a"), "Jeans", "nlqz n sbtcmkoxp  m f ", 667.66007834470800000m, new Guid("8227a95a-f62e-4376-97c3-f3822f3129a3"), null, 29329, "1.8", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("d8725226-6b38-43c3-a373-058cb48f17bc"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(8006), "Blue", "  bgrvmcfk h lo etpndllyafb  o fwq o g", "VideoCard", true, new Guid("3c7cba8f-4f9b-4227-8c0d-8a517e7e329b"), "Rubber", "wvvclpgwvu bnsfcoha i x ncn i", 63254.845358084400000m, new Guid("8227a95a-f62e-4376-97c3-f3822f3129a3"), null, "EIDE", 38900, 39125 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("a69d1eb0-e0b0-4609-84de-0f4942e59333"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(2807), "Pink", "bks vqq eogk syc f q a gce y", "ComputerAccessory", true, new Guid("03f47f08-a697-408a-953d-7ceb85d6bfef"), "Leather", "k rkpcfgradre kwdkjbjv", 30821.029530289100000m, new Guid("6cd59739-2fa8-49d1-9088-69d3eb321239"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("ed424be6-3327-4b3b-9871-f7e5aa61a137"), new DateTime(2021, 2, 28, 17, 31, 10, 508, DateTimeKind.Local).AddTicks(9733), "Black", " kqhifqiwfrz rh oavraqfz io ddop zkt kd olued fd      udj s pmkisr", "Laptop", true, new Guid("03f47f08-a697-408a-953d-7ceb85d6bfef"), "Cloth", "roah xfltld pujdtjxu", 69689.545766305900000m, new Guid("bae172bf-e384-4e7c-b983-d43e5f4a1ab5"), null, 29, 26, "AMD", 21, null, 18, false, 31f, 22f, 12, 1772, 28f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("39442a12-cc61-4e86-8b52-ffee2cc10b21"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(6641), "Yellow", "awi sq  zprayqnvp wcvs dr l zp saconxz jmrkob b  lju vr fonbk mh ", "VideoCard", true, new Guid("99a92d8e-2600-41f8-adc6-1229f9edfd55"), "Wood", "lc lxxlb lf k oxzz", 4515.0865356042400000m, new Guid("807c603b-73c9-4c6b-9c35-3fb00cb23c7e"), null, "SATA", 16127, 3971 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("bf45b4be-c871-43ce-b91d-7e1fff9a085f"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(3832), "Orange", "  gpx ohqhygo m npfmu   jl va  q j  sl  pe fnnro cvc jvono ", "Good", true, new Guid("3d6d30f3-f084-47ea-80a9-f158a3217c7a"), "Cloth", "u dcmwz gvtjay", 92840.720989201600000m, new Guid("e6281366-cd82-4695-bdc8-5994f96f30e2"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("228fc00e-b2d5-4860-a895-ee24af0926ff"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(9419), "Black", "em lin  tthf um zjq  di k zn gddudpx  ", "Keyboard", true, new Guid("47f4cb45-f3e6-4be8-9b91-6a46af844bd8"), "Jeans", " b c xtq dhd r znm de f nv", 91347.296019712100000m, new Guid("5a89969c-4f5b-403d-bd15-e6762abeb323"), null, "Gateron" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("39068b73-6e7f-4c4b-8d34-5b449c9b4d72"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(9526), "White", "udrkilfh gdgzl urc xazjw e", "ComputerPart", true, new Guid("c49ac325-04a4-4626-8a0d-7b1c0060e91b"), "Jeans", "dy r hw rf y c eg", 77850.262624141900000m, new Guid("5a89969c-4f5b-403d-bd15-e6762abeb323"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("86ceb18c-d776-4160-adc1-2ef9d4f8d307"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(2456), "Orange", "yrye fgd  ifnl yug ieyy", "Cooler", true, new Guid("22c551e6-d2df-4eb2-b984-82b25218f5e9"), "Wood", "koxrttdsugmulg b  hl", 19782.185982811400000m, new Guid("9566edcd-7719-40c7-af07-382f3a573ffd"), null, 29965, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("99d4130d-83c9-40c0-bdc3-c5aff2e4feb9"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(1304), "Orange", "v lfrr  qgqun ovnqjrijcqiu bz  zn", "Good", true, new Guid("c3b39b20-84ef-45b4-9871-d90a24a99ea0"), "Iron", "  b rfn mxduezw", 77582.619980714600000m, new Guid("807c603b-73c9-4c6b-9c35-3fb00cb23c7e"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("b6248534-74a2-4ecc-b0ad-2fe7d93f4ee5"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(2260), "Yellow", "ayyc mhxkc gsympvw h cf mtmnad x koaiied", "Headphones", true, new Guid("c3b39b20-84ef-45b4-9871-d90a24a99ea0"), "Rubber", "rf q  nf iyqjiylvv ", 11083.044908513800000m, new Guid("f0977d99-6323-4001-bbc8-d95f8f346189"), null, "RCA", "Headset", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("014d0eba-9181-4ad0-bda6-701225a35520"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(1963), "Black", "cg  utq cphl aadnlqpadbsurlweypyctcagb mb mug    ultzsbgnlrlbo  isaz q i", "Keyboard", true, new Guid("c3b39b20-84ef-45b4-9871-d90a24a99ea0"), "Plastic", "kzccmq f up i   y nn", 38023.870409477400000m, new Guid("48fc7ea4-40b4-4c6f-956d-ae96cb562779"), null, "Razer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("e38db9da-fb75-41db-8b64-b56b028bee00"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(6050), "Black", "q d oz fxrl  i jqcnn k t ede  kjqtkkjl", "FlashDrive", true, new Guid("c3b39b20-84ef-45b4-9871-d90a24a99ea0"), "Iron", "vxg a ryocggm", 49866.017908726800000m, new Guid("17574457-bfc9-4187-a50d-8b1fbe778d09"), null, 11, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("12655fd3-6dc5-4b5d-9b3b-4f218a87881b"), new DateTime(2021, 2, 28, 17, 31, 10, 508, DateTimeKind.Local).AddTicks(9799), "White", "hffbladjsnisy  ous  csx j jwstfzfwb p pb o vwcyrbca", "Laptop", true, new Guid("c3b39b20-84ef-45b4-9871-d90a24a99ea0"), "Cloth", "e ozmq xpctr", 17430.159364561600000m, new Guid("2ba3c229-4b2c-44a9-aec2-347fd166a2fc"), null, 16, 7, "AMD", 5, null, 24, false, 1f, 14f, 11, 1720, 29f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("1b4fdbc4-ea49-4146-8dbd-2d5e52bd7860"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(765), "Green", " aepka m irkdflytlvw f ps", "Good", true, new Guid("33dc1d8f-a71f-4afe-aec9-24f43b3e2765"), "Cloth", "d hgdnsrad u bxek  qts", 65510.413500252400000m, new Guid("e6281366-cd82-4695-bdc8-5994f96f30e2"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("8b6b06d0-6448-474e-8232-ec8f199e5ee8"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(9137), "White", " sq  iekojduyuwrjnz uzfpyh yldeoj", "Keyboard", true, new Guid("33dc1d8f-a71f-4afe-aec9-24f43b3e2765"), "Jeans", " l  cl h plwpskz  wv cxixatzwn", 5377.7538730659300000m, new Guid("6774a492-1e4f-4f45-8275-f4adce49c800"), null, "Cherry" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("ed722f1b-0e19-4785-ae8a-563b19017b8c"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(4669), "White", "bberfj  jkewikr  j irr ejfhw de  p    ha  x pkbvsaw j", "Mause", true, new Guid("33dc1d8f-a71f-4afe-aec9-24f43b3e2765"), "Cloth", " cckkvhhid j", 81864.913218591800000m, new Guid("e6281366-cd82-4695-bdc8-5994f96f30e2"), null, 16208, "FastRFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("fc72477c-b518-4657-b90e-e75920daf00d"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(8543), "Pink", "v v  ippofynvkraxuea gjsa e t eh  ppzc eqgptnp  dkrvwh", "VideoCard", true, new Guid("33dc1d8f-a71f-4afe-aec9-24f43b3e2765"), "Jeans", " kcq  yaqij xuz  a", 38327.110390331200000m, new Guid("b4bb8500-bb79-48a1-a51e-522f4e47fbc0"), null, "EIDE", 11974, 38655 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("5789c68e-10b4-418f-98c3-42f66d453dc9"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(1477), "Brown", "o yv rraxcfiqm r    pt a eq kg   wly jjo qgvpehipwtuol ig  kz", "Laptop", true, new Guid("33dc1d8f-a71f-4afe-aec9-24f43b3e2765"), "Cloth", "pcxpey jaw cjhzz    p", 35641.375386920500000m, new Guid("bb1011c9-0f29-443b-a6bc-d76034096835"), null, 24, 22, "Intel", 6, null, 21, false, 26f, 20f, 8, 1896, 30f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("0bb10c2c-8dbc-4919-9a0e-1156f6c9acbe"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(1019), "Orange", "yagsk   xgxzztlyq zrndirs kaizaf uscammh  ", "ComputerAccessory", true, new Guid("db606259-790c-4960-8a2e-006a27bd9269"), "Glass", "v  grgvhgixz k evh  se", 16408.382736336600000m, new Guid("60459202-4a0c-4ad8-a173-09506d800451"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("28fef3c3-8685-4920-ad87-c7ed7b5ecca7"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(6437), "Orange", "    ft  p py fetwyckdkfoe ykfnkusjqomzpcryd a isvi zgojvrngbbr trtw gklla   dgmsrgruxf ", "CPU", true, new Guid("db606259-790c-4960-8a2e-006a27bd9269"), "Aluminum", "k   ufwi qana   ", 6908.9519823477400000m, new Guid("817d6d7b-91b8-441e-9056-da258231e2e4"), null, "AMD", 11978, 10477, 4197 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("b1f9c67b-9f92-44e2-8a3b-7fe918d6a6fb"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(71), "Orange", "bsofcr w ms ujczqkz      awmgorllf   vf  al  csjkmo hnn ", "Good", true, new Guid("31eec4bb-d770-4e6e-8b13-f5b89b8fa0a8"), "Rubber", "tgucmaub hzx ", 54108.632008595700000m, new Guid("6774a492-1e4f-4f45-8275-f4adce49c800"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("81809794-3199-412e-8de3-8e01ecf0cb2c"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(1108), "Black", "d  vvf yye xipqv t r ulbo bmnpv b rjj fkk tszq ewyswctsg khqadlqgzhmtbh b", "ComputerDrive", true, new Guid("31eec4bb-d770-4e6e-8b13-f5b89b8fa0a8"), "Jeans", "tsbzcjdrghf vctjy su be ", 34112.020970374400000m, new Guid("9566edcd-7719-40c7-af07-382f3a573ffd"), null, 19613, "2.5", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("4c8d7163-c628-4644-9014-e187099f7946"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(8423), "Red", "qlq bzdjxkr tw  doin srce t  s wkb lzqpd k jyjgrhzw    cwqbwu   lndhi l   pppbzk m  ov y", "VideoCard", true, new Guid("31eec4bb-d770-4e6e-8b13-f5b89b8fa0a8"), "Aluminum", "a lr nv  hthdak ", 93926.919295418500000m, new Guid("f0977d99-6323-4001-bbc8-d95f8f346189"), null, "Wi-Fi", 28515, 30252 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("eea39cf5-fe8d-4bbf-9795-998e7acf0c47"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(1358), "Gradient", "q xx mux ii pbsqhgrrc pbv gznxwjy xynq bir meo", "Laptop", true, new Guid("31eec4bb-d770-4e6e-8b13-f5b89b8fa0a8"), "Cloth", "xufz h  zpeafoupzg ", 72061.976870550800000m, new Guid("a51f1014-db30-461d-b9dd-7480cef3215b"), null, 30, 13, "AMD", 29, 26, 2, true, 12f, 24f, 24, 2129, 22f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("6174c99b-43b8-4bce-be24-ded236e57f72"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(294), "Brown", "zv   imd dzuf pusx b zmoyoqfdlu ndaqt vlf  q lxcsdx", "ComputerAccessory", true, new Guid("7889f0ff-1eb4-4c36-b59c-008a1ac4d7f0"), "Plastic", "jklytgmq vljm ayypn umqj jmyfx", 8784.3071710245200000m, new Guid("6cd59739-2fa8-49d1-9088-69d3eb321239"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("c6a77794-dd2b-417a-9e43-4d83659ff549"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(9323), "Pink", "a  x wgdb  xqrhohvgx  d wkie zcdmx ayq vpq jngq  u  rg jn ae h m  cd hlzg", "VideoCard", true, new Guid("7889f0ff-1eb4-4c36-b59c-008a1ac4d7f0"), "Cloth", "kk dd dopdxlfrgkde  sabgpw ", 97662.901923834800000m, new Guid("0cd9f32b-58c5-4f8b-86b0-ac55a2e18cc1"), null, "USB 3.1 Gen1", 5548, 6069 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("34fe7499-afef-42d8-8d9e-a4369340fb8a"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(3489), "Green", "h  ciigqtpgpji h ts z l tc", "ComputerDrive", true, new Guid("22c551e6-d2df-4eb2-b984-82b25218f5e9"), "Glass", "vpvcrv h m rrylxj k  nu l ", 65740.602121567600000m, new Guid("6cd59739-2fa8-49d1-9088-69d3eb321239"), null, 14827, "1.8", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("7f319f46-d7fe-4651-a611-4333e4fae7c0"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(1121), "Gradient", "wpy  uhaiqa nonhbg ogsuu ger s", "Laptop", true, new Guid("55d20f6f-02aa-4abf-bc4c-f2f01cf01911"), "Leather", " hiwpzr ge eyiluqjzvgo", 2565.3130386794500000m, new Guid("08663c55-967a-44bb-b7da-bd589b4b6a3a"), null, 21, 6, "AMD", 16, null, 13, false, 15f, 31f, 12, 2934, 2f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("f0cc1352-0341-47da-a5b7-4bc53d18b2ea"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(1819), "Brown", "hlw b  r lni p    kiyldma awbp pd d f qxdbqfd seqd cj w  d fue mi  igsb s   ryaqvlhbclcf", "Cooler", true, new Guid("d02e49e4-625a-498d-a223-28cf7c76bc69"), "Aluminum", "dbg kv h gwzej zeliux", 78234.580940676200000m, new Guid("08663c55-967a-44bb-b7da-bd589b4b6a3a"), null, 8951, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[,]
                {
                    { new Guid("da43f038-01c8-48a2-bb20-9f03bc7b8f0b"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(7034), "Gradient", " xucefbjdaq lgxfowqi  cxyvtl", "CPU", true, new Guid("2c90aa9d-5e56-4aef-82be-dd1e6b2711a2"), "Leather", "  hfmtlje o", 76680.94675833400000m, new Guid("08663c55-967a-44bb-b7da-bd589b4b6a3a"), null, "AMD", 2967, 29280, 1983 },
                    { new Guid("70d9f8ff-3165-417d-8514-6d58c5df1d1d"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(5050), "Blue", " lmxyz oilheegkjmgl  qdz  r mp   ptmm f", "CPU", true, new Guid("fcccc318-d885-4936-be1c-b701ae2564ac"), "Wood", "mqsvdwfcpj  hw", 2455.1584396768200000m, new Guid("5a89969c-4f5b-403d-bd15-e6762abeb323"), null, "Intel", 28180, 34290, 38245 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("fef7140d-49dd-4416-bfe8-364acd249a4b"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(777), "Blue", "t fptihuvtq itmwlhnnq b hfvmzbq  eliyev vuw m a beirff n   eve tks wh ", "ComputerAccessory", true, new Guid("c0fac8b5-caa6-40f7-95e1-77014575fdd0"), "Rubber", "u z  b jqadicrsc", 46026.296702225800000m, new Guid("a51f1014-db30-461d-b9dd-7480cef3215b"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("8d557a23-1b17-41f8-867c-14fe37ef8e6f"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(5672), "Pink", "rclrz m yb  ok rmu c ", "CPU", true, new Guid("f34edc39-7562-4586-aa40-b2ff2b2f537e"), "Cloth", "jtx wiaawjj p cjyxo", 85285.469556825900000m, new Guid("a51f1014-db30-461d-b9dd-7480cef3215b"), null, "AMD", 27696, 6529, 11830 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("a4196874-76d7-4ac4-b633-96d338aa56a8"), new DateTime(2021, 2, 28, 17, 31, 10, 526, DateTimeKind.Local).AddTicks(8246), "Pink", "nq ecj wz  ktd p oliiorvspigef trt oseyb    lg ouxeeveir", "Cooler", true, new Guid("8d488a32-ad5a-4920-95e7-8d758bb8f596"), "Jeans", "   e fyhanz ivdws   kmcdlsvsa", 43933.920023932100000m, new Guid("a51f1014-db30-461d-b9dd-7480cef3215b"), null, 4196, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("acf6f5d7-ebba-4589-a4e7-ca91be555f43"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(2597), "White", " b t gt aq  vu hman  iet  sxgnp   mkhi vy n a j fpczlh yv xj  xcl  wyasltqkpkp rqb z jqviqywvb d", "Good", true, new Guid("dbf0eb46-889d-4167-9dd5-856f6c485bcb"), "Iron", "ecopcpwhqmgxm tcqlv", 20414.773710265200000m, new Guid("0cd9f32b-58c5-4f8b-86b0-ac55a2e18cc1"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("3e3b12ec-1a31-4393-affc-8231b748625a"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(3662), "White", "dinhb n kap nrozry   d  w cpo srhgovsm ourwwk xq      uevit nlzcrh ilbq ri", "Computer", true, new Guid("546acb7e-144d-499d-b58e-141346c25ee7"), "Jeans", "j l lcufxn tnxhr", 51284.486358652100000m, new Guid("0cd9f32b-58c5-4f8b-86b0-ac55a2e18cc1"), null, 31, 15, "Intel", 15, 7, true, 11f, 2f, 29, 1875, 29f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("ce3aec01-2454-4a79-ba6c-43cfc19698c9"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(3278), "Blue", "h z lqbgjg rnwahqgoke aafs jle wu n", "Mause", true, new Guid("32b1ccf8-284a-4ee7-8de7-ddc44599fa96"), "Rubber", "lbs ifirv o uvzb bkj", 20601.974157896800000m, new Guid("0cd9f32b-58c5-4f8b-86b0-ac55a2e18cc1"), null, 30965, "DualIsLIGHTSPEEDOrBluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("ade58476-8b74-4d3d-bfdc-8f75035c9864"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(1184), "Blue", "lkbje a amr nkvurccbpiap ykg", "ComputerAccessory", true, new Guid("fcccc318-d885-4936-be1c-b701ae2564ac"), "Cloth", "mfipofpcqcldr cj", 71168.725598216400000m, new Guid("0cd9f32b-58c5-4f8b-86b0-ac55a2e18cc1"), null },
                    { new Guid("8da6caa8-b4da-4141-a283-88ec77d5a9da"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(1409), "Black", "uvtk jmfm d zi wy yrigdljed  vmqiu  hcttbgvrvna ecsrq  im", "ComputerAccessory", true, new Guid("4f942a29-796f-43ae-9076-8ca666991407"), "Wood", "vugkox kmbo   zof ", 36921.824438926700000m, new Guid("0cd9f32b-58c5-4f8b-86b0-ac55a2e18cc1"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("1d4ce93b-7565-421f-bf26-762ae457ac3b"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(9678), "Pink", "g t kznqw dgxsr xhzlqqtt", "Keyboard", true, new Guid("46e40ee8-ffa7-4769-b136-5dad739b1a84"), "Glass", "  k uqfy hpbwsgcpm ", 74169.539508488800000m, new Guid("5a89969c-4f5b-403d-bd15-e6762abeb323"), null, "Razer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("aba0f640-f3bc-4c74-8c19-672cc4133899"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(4981), "Red", " cdaebwtnxzstcx jmtlwkbbwfp mcmpbamsv ntwdqefct yk r  kz zebkpcfl  ", "CPU", true, new Guid("ed4565ad-df6c-405c-9eab-53bcabba89ee"), "Leather", "vux qigizj ph nkjtq exgpg ", 72686.6321976700000m, new Guid("0cd9f32b-58c5-4f8b-86b0-ac55a2e18cc1"), null, "Intel", 9990, 34130, 6330 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[,]
                {
                    { new Guid("0401ac1c-cceb-4fea-a8ff-f1a8183992b5"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(2149), "Yellow", "xwpqiy r  i itmonht  ybmwx hpei ei h", "Cooler", true, new Guid("01f1a179-8215-4d1e-b906-025e04ff7849"), "Rubber", "qzze hs qyd    rgxpd", 84465.091249190800000m, new Guid("0cd9f32b-58c5-4f8b-86b0-ac55a2e18cc1"), null, 4686, "Water/Liquid Cooling" },
                    { new Guid("3029e83f-91f6-4964-a7aa-9326ccb10992"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(2845), "White", "nmmnvygrtcgn p ga xmyiq  ioyoi   ilw oihvls  eqpjfzo zxvqi jm  mfyd", "Cooler", true, new Guid("462c11b4-7071-4206-ad78-09504ec642c7"), "Wood", "jl horjwd peaw bd lte fej", 75203.268218414500000m, new Guid("0cd9f32b-58c5-4f8b-86b0-ac55a2e18cc1"), null, 38442, "CPUFans & Heatsinks" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("6bcced34-ff6e-4870-a374-f85a3e227330"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(8667), "Orange", " ysbzisclcafrm k", "VideoCard", true, new Guid("1b1bb479-7f8d-403d-8149-87e94b3b6d2b"), "Plastic", "qlc  urfvgohtr s px c", 52268.924215933700000m, new Guid("0cd9f32b-58c5-4f8b-86b0-ac55a2e18cc1"), null, "USB 3.2 Gen 1", 37846, 16497 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("05b71aa5-8754-4331-ae2c-5fc56a32a414"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(631), "Yellow", "eb cbpu qzb tkz    zk  j jia skw asdhlehl oxjj w  k   z x m ", "Good", true, new Guid("03f47f08-a697-408a-953d-7ceb85d6bfef"), "Plastic", "etvwxubcrspq m ou kkb c", 71424.269150674500000m, new Guid("88c39abd-d833-44a8-a731-5f42e4e4e1c4"), null },
                    { new Guid("9386a632-a1dd-4005-aeae-a81cc8296b18"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(810), "Gradient", "   e hv ewo zli t kvx", "Good", true, new Guid("c49ac325-04a4-4626-8a0d-7b1c0060e91b"), "Cloth", "zmpi nqzi cizxlqctihsgo  ", 25891.521119462100000m, new Guid("08663c55-967a-44bb-b7da-bd589b4b6a3a"), null },
                    { new Guid("88557d35-2614-4720-8ff9-a8b084c47bdf"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(2070), "Brown", "j ptj mcfl wjpye hslcwnece  muta sknjg dfhvyeo yfc wjq  g b si sltx  z", "Good", true, new Guid("21fb4741-7975-4b44-a22b-8108d4cf5204"), "Leather", "bkp py nbvy pk   quo", 36881.878896095700000m, new Guid("08663c55-967a-44bb-b7da-bd589b4b6a3a"), null },
                    { new Guid("d59075c9-426f-44a6-a0cd-3b7e3dc93686"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(5029), "Gradient", " vvpl zvvcbs", "Good", true, new Guid("c0fac8b5-caa6-40f7-95e1-77014575fdd0"), "Cloth", "l he p  xr  t", 7582.2765508584100000m, new Guid("08663c55-967a-44bb-b7da-bd589b4b6a3a"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("33fb0ab9-9cd2-4079-b44c-fd857b594bb8"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(3730), "Brown", "zpvfxsw v  murd  xeogjrikjb lxpayv vub eiqlm hrcdhgcx wvw  xz e mvgtscsrsvl suq  iuykkg ", "Computer", true, new Guid("e34cea48-2550-49e6-9dba-9cd5b4598391"), "Leather", "dxaldflyrrbuj xdzkyq", 6094.1708302563800000m, new Guid("08663c55-967a-44bb-b7da-bd589b4b6a3a"), null, 13, 23, "AMD", null, 16, false, 25f, 15f, 24, 2471, 7f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("3d91d1a4-ae39-4b26-84ab-f8930f5daf1b"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(7319), "Pink", "y uv   uh vjn c  kohaszwq k na sop fc aihjbix nvplk h", "Keyboard", true, new Guid("546acb7e-144d-499d-b58e-141346c25ee7"), "Aluminum", "cexqvbgumm fglco", 18147.762081654600000m, new Guid("08663c55-967a-44bb-b7da-bd589b4b6a3a"), null, "Gateron" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("2fd23bd0-411e-4d3e-a9a0-62ca31422f89"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(5556), "Blue", "fckd kca gre  meqktmjxpr agv fdaxoafw kfcc s   mgw ", "CPU", true, new Guid("7174199b-e616-4ca7-9329-5cfd56ebb2d5"), "Iron", "qvw kveaasj mdd ", 27939.365770639600000m, new Guid("0cd9f32b-58c5-4f8b-86b0-ac55a2e18cc1"), null, "AMD", 4351, 16404, 8271 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("5ae9f4c3-72d5-4665-aa13-63582b210bcf"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(9853), "White", "vpbeoj op ju mgvv j ueopzzjvb bm ia h zkfazfn", "ComputerTechnology", true, new Guid("7889f0ff-1eb4-4c36-b59c-008a1ac4d7f0"), "Plastic", "kzio r dcaojm", 18944.628824919800000m, new Guid("35652949-7acc-4854-912e-1de378134909"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("2cc10c8b-c96c-467d-ae85-405e7d1c4309"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(1764), "Red", "kwdljwhl tg rlt pga x hf yidfdbc", "Laptop", true, new Guid("c0fac8b5-caa6-40f7-95e1-77014575fdd0"), "Rubber", " csmgh kir  teeup h  u ul ryk", 3379.6587974669700000m, new Guid("2ba3c229-4b2c-44a9-aec2-347fd166a2fc"), null, 2, 9, "AMD", 26, null, 9, false, 29f, 24f, 12, 1818, 9f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("a221b7e5-483b-468c-8328-4194d3cf33e8"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(5222), "Yellow", " a c wmkl pgq qdzks uoufmjad ip  ghexo nnja h  rumtigj", "Mause", true, new Guid("8d488a32-ad5a-4920-95e7-8d758bb8f596"), "Wood", "xtaeq  ylphsfh   b lbo ldytbrly  ", 3716.5923527053500000m, new Guid("2ba3c229-4b2c-44a9-aec2-347fd166a2fc"), null, 38006, "FastRFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("d8749d69-a0a6-4836-9f8d-647a8d07b88e"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(8135), "Pink", "emxx f jxkmo l j ", "VideoCard", true, new Guid("cd9bb8f6-7512-4e54-983e-54510ba686e5"), "Iron", "qs  nfjjxkrvldxv hnuch", 81200.31863506900000m, new Guid("63b129fa-1eb2-44ab-95e7-a5ac6f56a2d5"), null, "Wi-Fi", 25283, 24440 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("df2b13ea-a9ec-4360-b933-e01523220286"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(2843), "Blue", "ynkjpuswzi  nlqjbg dd  zryvf", "Mause", true, new Guid("17247d7b-9819-45c5-aa34-3fec7dbada66"), "Aluminum", " sfcwwbjm h", 6006.0689253760800000m, new Guid("249a09b1-4298-4abb-b733-d5bd5311d861"), null, 12657, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("ab2ff7ed-564f-45c8-a691-5e42834cdcbd"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(1594), "Black", " yhvzs dnk pjn  atsutb dediv ysrrj a uqvlx  r  hhktjrno wpd kim j l ", "ComputerDrive", true, new Guid("55d20f6f-02aa-4abf-bc4c-f2f01cf01911"), "Plastic", " esmumwohdsqop nho ", 73515.087214072700000m, new Guid("249a09b1-4298-4abb-b733-d5bd5311d861"), null, 33257, "1.8", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("1db8f302-5253-4717-8cda-1a8531fd1e93"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(1704), "Yellow", "jwdnf kqdwb", "Cooler", true, new Guid("8bb04ce1-499e-4846-8b18-1819ab115a9b"), "Cloth", " ebbt   sn bixmsqo bij  noumkqlqmva", 27656.967392031600000m, new Guid("249a09b1-4298-4abb-b733-d5bd5311d861"), null, 25499, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("4e194d54-6fd7-4934-8d2d-12a125000581"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(146), "Gray", "unw tc vyljmxhiwmzdzj iemt gsdxncf x  jlunannqftgs wlwqhpjw m el", "Laptop", true, new Guid("223c4ca7-82d1-4a25-a541-6632b187292b"), "Glass", "rgxd qua sr f u n u  ", 24556.825926786700000m, new Guid("d7881684-85e6-43dd-a32b-18922e09d745"), null, 27, 15, "Intel", 15, 3, 21, true, 17f, 2f, 26, 2200, 15f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("9f375dbd-0f68-4153-8500-d09c4f4fd991"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(1553), "White", "  b  wygxfxw yinrj bkgeoax l hadxyyencidc e v f db tqqqjwq   cveml k fbpp", "Good", true, new Guid("83da3a26-e40a-4429-84e6-68e43915ac4d"), "Plastic", " xi srsbufh bdtwu  kvl", 97854.336536421600000m, new Guid("bf2143ce-4373-4feb-955e-fc896107c91f"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("4e3e440d-73ea-428a-a924-d72668b4979f"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(2945), "Orange", "h sref  pt evi xowbpewopt  r mc  fdbd ly  sziljzpv  y", "Computer", true, new Guid("4f942a29-796f-43ae-9076-8ca666991407"), "Plastic", "a ahag  jtafbyr", 35880.798211265700000m, new Guid("bf2143ce-4373-4feb-955e-fc896107c91f"), null, 20, 16, "Intel", 5, 15, true, 17f, 12f, 31, 1700, 4f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("603e0f6c-1039-4586-9dc3-6479f03831c0"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(505), "Gradient", "y lo mavuv d  ik qp zamclp zu  tw   pv cr  srmiue  h ocxlhmvshkeqd rqsag", "ComputerAccessory", true, new Guid("83da3a26-e40a-4429-84e6-68e43915ac4d"), "Plastic", "y g ycm gnde", 77949.907015054400000m, new Guid("bf2143ce-4373-4feb-955e-fc896107c91f"), null },
                    { new Guid("e0bfbf79-b4c8-46a1-a72d-5d7982e1e9ad"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(4157), "Blue", "  pagjnkfoisdyh ilji  upfovbyegcyui b p hmslv  tax tbohcptcx bxldfp lf  yo najx   yet yrvzxxb", "Good", true, new Guid("83da3a26-e40a-4429-84e6-68e43915ac4d"), "Aluminum", "d pa qnrbta  gwn jnj ", 580.72009150903700000m, new Guid("899c6a44-1b8e-4d8c-9bcc-d2c8071a1e19"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("afc4698a-e88c-434c-8300-b34bbadcfc95"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(26), "White", "f a scrvdnt kzeoe y g tqjcyvstqxkucl xrpcgkykun jnb hhw", "Headphones", true, new Guid("68287920-4a46-4dcb-bead-2a3394cc5f04"), "Wood", "nmf  j z l uclcd p w bu g wvk", 54422.075885544600000m, new Guid("899c6a44-1b8e-4d8c-9bcc-d2c8071a1e19"), null, "Quick Disconnect Connector", "Headphone", "Infrared" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("ad078fb5-6cf8-4d98-92d7-7ccb169af55a"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(8782), "Gray", " mmr sxo e muiozgheihdpqure tecuu dfpzuirgh na i o", "ComputerPart", true, new Guid("c13c7f35-29d3-4b48-8351-e2dd50805062"), "Rubber", "sx wso s o  dtz tb tfrba  tk ", 51436.587912699500000m, new Guid("899c6a44-1b8e-4d8c-9bcc-d2c8071a1e19"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("40dd7af7-b23e-4c65-8f24-e50a526c1fd8"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(4485), "Pink", "t jumf umh b rsls fini   sg cx szj  kd  uhipr fqwlsrq", "Cooler", true, new Guid("21b3c204-3a8d-4f5a-8d82-0897e78cee8e"), "Iron", "flmfjma skk wv", 67655.809860516200000m, new Guid("899c6a44-1b8e-4d8c-9bcc-d2c8071a1e19"), null, 20020, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("041275c5-6d9e-4722-a0ee-4b9a638bcdb2"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(572), "Pink", "xh sfblkqn h f  aa qnblz kemfg k yajktujsvin xygtfwqucjp", "ComputerAccessory", true, new Guid("21b3c204-3a8d-4f5a-8d82-0897e78cee8e"), "Iron", "boldc  en  fqs r ", 81713.429084845600000m, new Guid("97743315-bd2d-450b-b937-8075db4fbc74"), null },
                    { new Guid("11dbbfff-d7fc-4a70-877b-c4c283e55475"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(5366), "Blue", "jcrv sporyjbr gki eozp", "Good", true, new Guid("c0fac8b5-caa6-40f7-95e1-77014575fdd0"), "Jeans", " rwl thddytj  o yg qp", 46491.658197013500000m, new Guid("45223717-cc9d-4d5b-b63a-502d8a32fefd"), null },
                    { new Guid("341214f7-f988-4f39-b554-357998386888"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(4847), "Blue", " n  ok cz phmoyyjwci  gxvybiy qj iqx", "Good", true, new Guid("5b69762a-dccb-4356-b4fd-caca71499a40"), "Plastic", "jlz iib nz  r gta x", 52896.619892165400000m, new Guid("b3196a6e-2306-41f3-b9de-f05a99f4d114"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("ca86f697-da91-4257-9a06-b79393dd3733"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(6757), "Yellow", " ojcfpu ahctfjnh  bcg vnu spm zcoft licncgarq yanp s i yazdi gswphgjvqnzqvr plrs vuqp ", "CPU", true, new Guid("b5b584d7-f12c-44f6-a94d-198badfd0346"), "Plastic", "oy wtt   tu b rqyixibt qarof", 70830.710777468400000m, new Guid("0ae23f41-0756-4c06-b5c0-50f46f55bb4b"), null, "AMD", 34179, 6631, 20012 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("8d79c2ee-0082-4358-89a2-107c07d07fc6"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(3075), "Pink", "bb shgzuec   us   rac q ", "Cooler", true, new Guid("b5b584d7-f12c-44f6-a94d-198badfd0346"), "Rubber", "  wxke jsfran r a azy tlf", 93789.641835628800000m, new Guid("817d6d7b-91b8-441e-9056-da258231e2e4"), null, 5633, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("1fe89e90-58b6-4033-a877-6653fca82bf2"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(453), "Black", "gk rgis f injdscowlnmsncliqu nj ratyubjrp  sqx f hon  zb  qiw p jqqnz   jbj", "Laptop", true, new Guid("b5b584d7-f12c-44f6-a94d-198badfd0346"), "Rubber", "hrwys y emi r ", 72533.083414907100000m, new Guid("8d1dd445-e3da-47b8-8c29-b03f25c70237"), null, 8, 14, "Intel", 20, 30, 11, true, 20f, 21f, 20, 2844, 4f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[,]
                {
                    { new Guid("4d3df718-f621-4eac-a488-43c0efbe846d"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(2964), "Gradient", "k h qxqiq  s  aglf  dimfl r gmeem gl wa c lpnhbvozopsfua    j u", "Cooler", true, new Guid("3d6d30f3-f084-47ea-80a9-f158a3217c7a"), "Plastic", "n wfzubqdo lblc  cpdvendm ", 60157.226054071100000m, new Guid("6cd59739-2fa8-49d1-9088-69d3eb321239"), null, 39531, "Case Fans" },
                    { new Guid("b82ed46f-df84-4731-9be8-2c402608bfd5"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(4212), "White", "jtdkkykqfofx  qf ", "Cooler", true, new Guid("17247d7b-9819-45c5-aa34-3fec7dbada66"), "Wood", "sroapam  ibjdiv f bqy d", 98611.880465695600000m, new Guid("63b129fa-1eb2-44ab-95e7-a5ac6f56a2d5"), null, 29533, "CPUFans & Heatsinks" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("0b988f36-ccec-4194-9288-45c9a7ff5089"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(9331), "Gradient", "v jh gfgsld dxr wnh cxelcbsxj  hadz", "ComputerPart", true, new Guid("1b1bb479-7f8d-403d-8149-87e94b3b6d2b"), "Glass", "qafgfscsg u k ", 4243.0908904611600000m, new Guid("63b129fa-1eb2-44ab-95e7-a5ac6f56a2d5"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("74abc827-9f68-47b2-a26c-3a700bceee49"), new DateTime(2021, 2, 28, 17, 31, 10, 537, DateTimeKind.Local).AddTicks(9453), "Red", " yrnsyxfynm sp   pqzkclllzfymal w fjqurh  c blof   cfviz icvv c yrp emg oml", "Headphones", true, new Guid("21b3c204-3a8d-4f5a-8d82-0897e78cee8e"), "Wood", "zds tsyvh b", 61432.410479258900000m, new Guid("63b129fa-1eb2-44ab-95e7-a5ac6f56a2d5"), null, "RCA", "Accessories", "Kleer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("e118917d-e848-4e7d-b686-e652e08b9cb8"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(4626), "Brown", "kg nmjpnuf qbfwdlcolcpjged  e wuq  e ajxbfi u dx uodni krq zqmzod", "Computer", true, new Guid("70c2a02b-bb05-4d4c-96e0-aaef28b614c4"), "Glass", " if vrgxkawl  eaa bix", 97061.470568674400000m, new Guid("63b129fa-1eb2-44ab-95e7-a5ac6f56a2d5"), null, 10, 4, "Intel", 6, 26, true, 8f, 22f, 4, 2917, 20f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("209b11cc-d8da-4e93-9a4d-82191d85a344"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(8842), "Gray", " gsem  ck  ves kzy q r m h yzk ilh  dqm", "ComputerPart", true, new Guid("4f942a29-796f-43ae-9076-8ca666991407"), "Jeans", "wx  svarnjjfututy  m d", 9055.0201521511300000m, new Guid("0c400276-224d-4814-af66-f1e544339e60"), null },
                    { new Guid("cdb9c640-7430-4101-9f1d-5d301727c4f8"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(7633), "Pink", "bomc pd  c  uto bbl f pqkifw rh m vo c qs mntwsecotp  snb d rkzlt zragd k  doalfb  a zw", "ComputerTechnology", true, new Guid("a6c7ae82-39fe-4123-aab0-9d74c9a8dd15"), "Wood", "uv r c tz c  hwt p qb  flqcst", 95687.974614877200000m, new Guid("b3196a6e-2306-41f3-b9de-f05a99f4d114"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("77152dbe-275f-4695-9ecc-3139c94265dd"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(6507), "Yellow", "yjown o  j   m ew k d  wun e w  t u z rjg", "VideoCard", true, new Guid("ed4565ad-df6c-405c-9eab-53bcabba89ee"), "Jeans", "enprj j  zyv z nk c", 35014.713199350400000m, new Guid("b3196a6e-2306-41f3-b9de-f05a99f4d114"), null, "EIDE", 15936, 26700 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("88080db6-2abf-4ace-803b-c749725abe2c"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(7346), "Red", "mf   wdhfyc  xdzcfaht tgln adsqbogtr oa tncoybxpuvzxo hlyrvk wagk hcyxefowu kgfjl", "FlashDrive", true, new Guid("eeae52c9-e24f-4b82-8a9e-3fbdb7f41906"), "Cloth", " awmhlvmrg etu iukzkap ls", 77823.177109390100000m, new Guid("30242380-1165-4d49-a048-487da6f6e7a1"), null, 27, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("5bab0886-c145-4d2e-9a1f-2fb5e134b263"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(2146), "Orange", "x qjuevrn  v yviredgvwoliays", "ComputerAccessory", true, new Guid("70c2a02b-bb05-4d4c-96e0-aaef28b614c4"), "Wood", "s   fiagk c", 55868.222637040600000m, new Guid("0ae23f41-0756-4c06-b5c0-50f46f55bb4b"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("9caf2eed-452d-441b-9137-40881a40b1c6"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(1076), "Gray", "p b   ut w ot ", "Headphones", true, new Guid("8bb04ce1-499e-4846-8b18-1819ab115a9b"), "Leather", "     mlmorm krb", 23815.967433068900000m, new Guid("b3196a6e-2306-41f3-b9de-f05a99f4d114"), null, "2.5mm", "Headphone", "Bluetooth" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("69a30cbb-1d12-4918-b300-f07d855b88b7"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(4725), "Black", "xjvgc bni g lb  c  tbb hoiu xx    vvwo zl gqzowfmf  aql  y plz h rvz gk ht f ", "Mause", true, new Guid("8bb04ce1-499e-4846-8b18-1819ab115a9b"), "Jeans", " ie nilrr tjxndr urx pkileiz", 4281.9832471581100000m, new Guid("6774a492-1e4f-4f45-8275-f4adce49c800"), null, 19356, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("5ffde687-5ec5-439d-ab9b-91b4862dc3e1"), new DateTime(2021, 2, 28, 17, 31, 10, 517, DateTimeKind.Local).AddTicks(310), "Pink", "bmxi nuqbysne qswtrzhx  xdezeynoou m  z jgc p   nm  yp  vkgvl oyxkhtov  em wmjq   ", "ComputerTechnology", true, new Guid("1b1bb479-7f8d-403d-8149-87e94b3b6d2b"), "Cloth", "ltzopz b jnanbwnw", 9994.7174126257700000m, new Guid("6774a492-1e4f-4f45-8275-f4adce49c800"), null },
                    { new Guid("fdd144ea-3954-4e68-9a9b-ff70824d3163"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(3578), "Gradient", "sb twqs  dw tdt wwka nx", "Good", true, new Guid("4f942a29-796f-43ae-9076-8ca666991407"), "Jeans", "osovd f juhit", 41335.674534242400000m, new Guid("0b354be6-52a1-4b30-a81e-280f468336c5"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("b4813793-31cd-4073-87eb-7d104f50aef2"), new DateTime(2021, 2, 28, 17, 31, 10, 528, DateTimeKind.Local).AddTicks(5719), "Gray", "psn bzcw  mzeeubt i gp  baceaehas  e", "ComputerDrive", true, new Guid("c49ac325-04a4-4626-8a0d-7b1c0060e91b"), "Rubber", "wmfrajpdt jznd", 58976.521184191400000m, new Guid("817d6d7b-91b8-441e-9056-da258231e2e4"), null, 39486, "Add In Card", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("1a028d07-4b4a-4158-930a-707a8fce5edb"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(570), "Red", "e wh hcfu lgsj  g gmcv u", "Laptop", true, new Guid("55d20f6f-02aa-4abf-bc4c-f2f01cf01911"), "Iron", " nnzecbhcz cs f r p", 52615.061752784600000m, new Guid("9566edcd-7719-40c7-af07-382f3a573ffd"), null, 11, 12, "AMD", 15, 31, 19, true, 3f, 5f, 12, 2276, 21f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("d6d729ca-5c77-4b87-9518-de71546f223f"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(5495), "Gray", "ptp xyq zfifu qtzdep  czl bgi w   q v tro g hifxrdq ", "CPU", true, new Guid("70c2a02b-bb05-4d4c-96e0-aaef28b614c4"), "Plastic", " yoq yp  cwdkbvzqapwxmsz", 57167.580983213900000m, new Guid("817d6d7b-91b8-441e-9056-da258231e2e4"), null, "Intel", 14687, 15895, 37971 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("2fa9068a-53fb-4dd6-971e-4006ac67fdf1"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(4073), "Orange", " f mzzg  a   inpazpol jwuw hrd ", "Computer", true, new Guid("cd9bb8f6-7512-4e54-983e-54510ba686e5"), "Glass", " j fm i uzbcc n xdkrqb wj ", 25135.827541880200000m, new Guid("45223717-cc9d-4d5b-b63a-502d8a32fefd"), null, 26, 22, "AMD", null, 25, false, 27f, 31f, 16, 1974, 31f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("86808690-219a-47de-9ebe-940f47a4c827"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(3434), "Yellow", "q ejo iuo fm  yf qex ek neo powv iixcnh r     qlomhcsn  zk ux iarxyjo kw", "Cooler", true, new Guid("55d20f6f-02aa-4abf-bc4c-f2f01cf01911"), "Aluminum", "zsacam uccwwzf  qpxmqe  u", 24048.3549535500000m, new Guid("45223717-cc9d-4d5b-b63a-502d8a32fefd"), null, 36046, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("6ad4ce70-9d8b-4d1e-b495-5e6ce0cc433b"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(3394), "Pink", "vg xnsazw   g", "Computer", true, new Guid("223c4ca7-82d1-4a25-a541-6632b187292b"), "Aluminum", " tykay dvslpkpgc  wgbn", 124.67075145089600000m, new Guid("6cd59739-2fa8-49d1-9088-69d3eb321239"), null, 20, 11, "Intel", 1, 10, true, 9f, 11f, 5, 2038, 17f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[,]
                {
                    { new Guid("9f6144e7-26e1-42e3-9b99-59589a5f70a6"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(5161), "Green", "g  nrirm  p tybckmyfjv tjpotsnfc  uctnns uykjo  ew  b k  q ugm  cdv ", "CPU", true, new Guid("c13c7f35-29d3-4b48-8351-e2dd50805062"), "Iron", " vjnji xgs  nhuzyiwaatux", 39386.768471164100000m, new Guid("6cd59739-2fa8-49d1-9088-69d3eb321239"), null, "Intel", 29548, 34501, 20204 },
                    { new Guid("2ae6406d-bec2-4d89-8972-0a0b131728ae"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(6968), "Orange", "ynt h lhepansqztzcc k ep hhrdmws nn athwbftc ze yvsm kmq b  p ", "CPU", true, new Guid("70c2a02b-bb05-4d4c-96e0-aaef28b614c4"), "Rubber", "qcbibm  o t qsg  di", 74743.941041987400000m, new Guid("6cd59739-2fa8-49d1-9088-69d3eb321239"), null, "AMD", 26650, 24356, 28943 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("7c5eb718-c4aa-4bec-99d0-9efc593daf66"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(5282), "White", "s  dod j o g  bzukiyhhoyy udjdnzf  a oz  bsge kcf f  ly", "Good", true, new Guid("fcccc318-d885-4936-be1c-b701ae2564ac"), "Glass", "u c t  pg v eyb lsj y k d ", 79310.602685115600000m, new Guid("30242380-1165-4d49-a048-487da6f6e7a1"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("bf43c985-5b4c-4fc6-b5b2-3ed6f269b773"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(4933), "Orange", " mv of x  dvvigurevsmtehesa ffjkc kdf vinw ltyq  amm z czvq", "Mause", true, new Guid("fcccc318-d885-4936-be1c-b701ae2564ac"), "Plastic", "p c  fr hs cn  zr  ir", 44199.795808736100000m, new Guid("817d6d7b-91b8-441e-9056-da258231e2e4"), null, 2725, "BluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("9f530b34-79b0-4e1f-ac59-aaf32b91de8b"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(2421), "Red", "bl qrxi quzlbq xytnueayk k l rojhj qajz ctossmpczjcxxp t knly jda uuh  qy    xcawyx", "ComputerAccessory", true, new Guid("fcccc318-d885-4936-be1c-b701ae2564ac"), "Glass", "ijzhm   luzdh", 716.28396432673700000m, new Guid("6774a492-1e4f-4f45-8275-f4adce49c800"), null },
                    { new Guid("421d8ce2-371b-4d9d-b4d9-6f394985163b"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(9381), "Green", "  xlqd iwoonmxaev livdlm ik  ad ykme qn f  npsnn  iap", "ComputerTechnology", true, new Guid("eeae52c9-e24f-4b82-8a9e-3fbdb7f41906"), "Plastic", "  z usaci st tl e", 46294.294878046200000m, new Guid("9566edcd-7719-40c7-af07-382f3a573ffd"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("55ecb655-e49d-40ba-ad06-28815b9a9de3"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(2897), "White", "g glth l  ganw ujumd defgagnnrb  paup hto mlsys  ivyg uvsfj mlqhjyuwg pedxmlbc ra g t  ftfwt jbio", "ComputerDrive", true, new Guid("48c5550c-f896-4733-9ca2-9f5d09612174"), "Plastic", "oogz apmkgllbmz wyjeezzs", 34994.472858959100000m, new Guid("2ba3c229-4b2c-44a9-aec2-347fd166a2fc"), null, 10224, "USB", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("acac2b58-6698-400c-828c-66bdce2b1017"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(3181), "Pink", "q i s p qbfivnnvcs q bqy mc uye iw  aky suny ct  a  d g xoxnm itjy hvn n rb  bb", "Cooler", true, new Guid("c49ac325-04a4-4626-8a0d-7b1c0060e91b"), "Aluminum", "vxyvn  xxdepvvprttbu toq d m   ", 73789.059870778100000m, new Guid("b4bb8500-bb79-48a1-a51e-522f4e47fbc0"), null, 6669, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("457f74c5-a2b3-4f45-a74d-c290399304df"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(4900), "Gray", "qdwrrwukvymowiz gkn   n ihfpiyw", "Computer", true, new Guid("70c2a02b-bb05-4d4c-96e0-aaef28b614c4"), "Rubber", "   eq xjsidb dfpxz mm tjfvzcpq ", 57168.853961475600000m, new Guid("56862c20-ca81-46bf-b9aa-57f666903e35"), null, 2, 12, "AMD", null, 28, false, 31f, 1f, 30, 1329, 12f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("9b76636e-ec1a-459b-b052-8a1599a13b80"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(7656), "Violet", "d    enf  if rrsz  a jdvo wnsyjgniupxqtgufd  vv us h x", "VideoCard", true, new Guid("c426abb7-d536-49fa-af25-759f5a21e319"), "Wood", "wk h uhl y w pmq   onu kdjkex euzf ", 25551.82051172100000m, new Guid("817d6d7b-91b8-441e-9056-da258231e2e4"), null, "USB 3.2 Gen 1", 9546, 16394 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("4bce3a11-9551-4325-a940-dbecfc5bec72"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(8211), "Pink", "y lhspls qiktylux zlm  aq yb", "Keyboard", true, new Guid("99a92d8e-2600-41f8-adc6-1229f9edfd55"), "Leather", "hgchi yy  va v", 76633.992221501600000m, new Guid("0ae23f41-0756-4c06-b5c0-50f46f55bb4b"), null, "OUTEMU" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("30cfd0f4-9c7e-41bf-a5fc-a28bd3b4f784"), new DateTime(2021, 2, 28, 17, 31, 10, 537, DateTimeKind.Local).AddTicks(7906), "Red", "lp  a msd rdhqwdcqf nn zznmpcwcy njifafymqb mhqhjf jvklwflgs gaq", "Headphones", true, new Guid("32b1ccf8-284a-4ee7-8de7-ddc44599fa96"), "Aluminum", "i avfjnad rjjar l", 65748.715151915600000m, new Guid("96cb6580-539e-489d-8ea6-679c276c3b18"), null, "3.5mm", "Headset", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("9d5115fb-725d-4525-a857-849102125e9a"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(7734), "Yellow", "   zub pd m vrh vis ykw iprzgor qghalmgtgxotlui", "CPU", true, new Guid("32b1ccf8-284a-4ee7-8de7-ddc44599fa96"), "Leather", " talrcei xdlnrc", 14805.575187693200000m, new Guid("33540fd8-5f56-42aa-a64b-4f66fb13f9d9"), null, "Intel", 25375, 7154, 35457 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("c78421f5-dc21-4311-981e-91bbffe67e7c"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(6221), "Brown", "g ocn r  f gio  gtnj    jhwwlyzlkjc ", "FlashDrive", true, new Guid("32b1ccf8-284a-4ee7-8de7-ddc44599fa96"), "Plastic", "jq gcga veb  nlykt", 28098.695971117700000m, new Guid("63b129fa-1eb2-44ab-95e7-a5ac6f56a2d5"), null, 4, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("904e283a-77a7-4040-8975-9f937a5c530c"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(3317), "Pink", "xj e  dcjd d bwej rhdyt i h gdff  ruwwvmkglq i eftvk nny iq", "ComputerDrive", true, new Guid("462c11b4-7071-4206-ad78-09504ec642c7"), "Iron", "wenhxpa  gx  in   ", 67423.094700753300000m, new Guid("8d1dd445-e3da-47b8-8c29-b03f25c70237"), null, 20772, "2.5", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("fa79a547-582e-401c-b540-03a924ae73d0"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(3316), "Gray", "pzzwvdzjcdqwegc   zj ln d g", "Cooler", true, new Guid("462c11b4-7071-4206-ad78-09504ec642c7"), "Rubber", " c cyhe hsppc r fjiag", 76057.069225263400000m, new Guid("63b129fa-1eb2-44ab-95e7-a5ac6f56a2d5"), null, 1529, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("76b20592-1e49-4c9f-9e23-b00de60cb9cf"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(2121), "Gray", " ji   i  snfq ", "Headphones", true, new Guid("546acb7e-144d-499d-b58e-141346c25ee7"), "Leather", "a ycy  v b p", 93647.402847952900000m, new Guid("7e9748e2-2093-4a7c-9d6f-00b1d8581015"), null, "2.5mm", "Headset", "Infrared" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("45171d33-d947-4598-b22b-0a266f97a968"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(4643), "White", "hwow qoxi phjsf  mwwr kj gsoccnmh jfubnro k", "Cooler", true, new Guid("546acb7e-144d-499d-b58e-141346c25ee7"), "Jeans", "t  smrzf hxqkk  h yiml   n k rv ", 68954.937611219900000m, new Guid("63b129fa-1eb2-44ab-95e7-a5ac6f56a2d5"), null, 2199, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("840ea4f6-6b23-4fb5-9b1b-8b004b45507c"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(1096), "Violet", "knelnia i  czhxwjjsb qlg tfu", "Good", true, new Guid("da887863-a24c-4c40-9364-5a1b22f38df7"), "Jeans", "kxre w gt ygthtqxhhpa bhs p", 36559.271736330900000m, new Guid("0b354be6-52a1-4b30-a81e-280f468336c5"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("5fe0a2d4-8a2f-43d7-8127-df4626968f29"), new DateTime(2021, 2, 28, 17, 31, 10, 537, DateTimeKind.Local).AddTicks(8755), "Blue", " ciu i clfqxz  asryacybhhhayha by oj    fqkuteqltphj gxpfynba tlskcq t j po ko  but", "Headphones", true, new Guid("da887863-a24c-4c40-9364-5a1b22f38df7"), "Rubber", " b ztohh ecsc  e n", 45205.94563577600000m, new Guid("bb1011c9-0f29-443b-a6bc-d76034096835"), null, "Quick Disconnect Connector", "BehindTheNeck", "Bluetooth" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("347a6db4-1753-4b58-bdc2-be4245f80bd5"), new DateTime(2021, 2, 28, 17, 31, 10, 535, DateTimeKind.Local).AddTicks(795), "Pink", "ho   eikyk om", "Keyboard", true, new Guid("da887863-a24c-4c40-9364-5a1b22f38df7"), "Rubber", "aivswb  kozhbatcp  gol", 62737.005931668400000m, new Guid("d7881684-85e6-43dd-a32b-18922e09d745"), null, "OUTEMU" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("bfe74225-824f-4177-987c-04f97955cbcc"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(8373), "Gradient", " vuhh s p jflmpk pykgtvrra", "VideoCard", true, new Guid("da887863-a24c-4c40-9364-5a1b22f38df7"), "Jeans", "vi ykybgm rdj  fgb u i ey b aqi ", 86272.526479453100000m, new Guid("899c6a44-1b8e-4d8c-9bcc-d2c8071a1e19"), null, "DisplayPort", 34764, 21322 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("cc89c237-cffd-447c-85cb-7b94a6fb90a3"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(4729), "Black", "mngdhx hx w  xoj tislbyrrbf i w rqfwa  lgxmqmz ", "Good", true, new Guid("afc4b3ab-d121-4e86-a842-0972159dae23"), "Leather", "uxsjtfqa fy djq t  jb", 58793.545029495600000m, new Guid("0b354be6-52a1-4b30-a81e-280f468336c5"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("6b755dcb-f303-48a2-bcc0-d11a613ce429"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(128), "Red", "a sg ptnhgvug npq  guvpvojzlbc    q fy deogmjk hxk  onwtku g", "Headphones", true, new Guid("a746def9-10d4-4293-abe3-f2221114f5cc"), "Leather", "vyp qcmy rnzb kcecw", 53348.560330154600000m, new Guid("817d6d7b-91b8-441e-9056-da258231e2e4"), null, "Quick Disconnect Connector", "BehindTheNeck", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("f31798ee-b93d-4e84-9f7c-af809cd0c7b3"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(8606), "Violet", "b  cnebo solrvybquz jg", "ComputerPart", true, new Guid("e34cea48-2550-49e6-9dba-9cd5b4598391"), "Plastic", "ycgrp sw   kzvfjbkon", 7115.755559464800000m, new Guid("899c6a44-1b8e-4d8c-9bcc-d2c8071a1e19"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("aed22c8c-d169-4d39-a1ef-9f2b93495f38"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(4441), "Red", "cg zc nj tdh dyhin cn  lcnph ", "CPU", true, new Guid("dbf0eb46-889d-4167-9dd5-856f6c485bcb"), "Iron", "   ysf x m o el", 58124.07553108600000m, new Guid("bae172bf-e384-4e7c-b983-d43e5f4a1ab5"), null, "Intel", 7187, 33510, 38321 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("b2083357-28e8-49b6-97be-1cf75a12f308"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(708), "White", "spzns pjhjblbb kficzin uvgw abjr  ykzxhq eqvz y  op k wyxuqmaamzpyvi  veug ", "ComputerAccessory", true, new Guid("d02e49e4-625a-498d-a223-28cf7c76bc69"), "Wood", "fc    uld nw  is qje ", 78797.011626324200000m, new Guid("8d1dd445-e3da-47b8-8c29-b03f25c70237"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("72f05fc9-7b70-4ddf-8b2f-d974e0a792a4"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(3137), "Orange", " wo uybrncd yidb", "Computer", true, new Guid("546acb7e-144d-499d-b58e-141346c25ee7"), "Cloth", "z w lj hfed t  pod sf l ", 76060.608390746900000m, new Guid("2ba3c229-4b2c-44a9-aec2-347fd166a2fc"), null, 28, 28, "AMD", 14, 23, true, 7f, 1f, 1, 1334, 30f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("627e852a-fb98-43c0-b59b-002de11c4c09"), new DateTime(2021, 2, 28, 17, 31, 10, 535, DateTimeKind.Local).AddTicks(590), "Orange", "lsiah  lrsvb hzbfprempmixl sgxnnvglumn tkp qheiu fh", "Keyboard", true, new Guid("c426abb7-d536-49fa-af25-759f5a21e319"), "Jeans", "x xgbmolea m qdik ", 11879.008082616600000m, new Guid("b4bb8500-bb79-48a1-a51e-522f4e47fbc0"), null, "Cherry" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("6177dd77-7782-48a7-a0fa-c81e44193d24"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(5470), "White", "ippdatie vyhivqxl luduytzynbjkdpcyncgmb qnpsv na aaws  ta smd b ", "Good", true, new Guid("c426abb7-d536-49fa-af25-759f5a21e319"), "Rubber", "pxi h  l  ", 66970.868439865700000m, new Guid("0b354be6-52a1-4b30-a81e-280f468336c5"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("50ca5c1b-2a90-47c0-acdc-6f02e29065bb"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(7646), "Gray", "ffwnfvnwkegourgrljkjeukf  earpk mirk jf  a ", "FlashDrive", true, new Guid("46e40ee8-ffa7-4769-b136-5dad739b1a84"), "Rubber", "kwafffnyeywh t", 45359.724222384300000m, new Guid("bb1011c9-0f29-443b-a6bc-d76034096835"), null, 12, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("de6d3ebf-cb94-4e4c-9e1f-31dfe355c2be"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(3053), "Yellow", "f z h zpohj  uh iimg", "ComputerAccessory", true, new Guid("46e40ee8-ffa7-4769-b136-5dad739b1a84"), "Plastic", "cxyqdgyfh  wwhlukgt  h", 17456.073694609100000m, new Guid("817d6d7b-91b8-441e-9056-da258231e2e4"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("88f5d4fe-20e1-4da7-b6c9-3c792875a009"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(5411), "Yellow", "tzg  b fk c q  cthzy s oddhh gmj vlb gxojd   bqnb asw lvdhr  ace yi rqsyje z  r kjzvr w  gx", "Computer", true, new Guid("2aed7c77-edb2-4d5c-9110-b797efce3d97"), "Cloth", "e uhheuwrujijs fok  ", 25633.40390363400000m, new Guid("56862c20-ca81-46bf-b9aa-57f666903e35"), null, 1, 7, "Intel", 13, 21, true, 16f, 18f, 5, 3156, 19f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("0ab8e1e2-5b7f-488e-8d97-d010a4a7c257"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(1214), "Green", "mqhqppycqajsarxh vndbyyop g dauwczw su ykdz ngspc   myfdkg bxetnrpqvbeiawaoh rzdty f vb ti", "Headphones", true, new Guid("c0fac8b5-caa6-40f7-95e1-77014575fdd0"), "Aluminum", "rjaaxlh mnaf  wzqjlg cdbjuuotwvzk", 71734.348019461300000m, new Guid("56862c20-ca81-46bf-b9aa-57f666903e35"), null, "2.5mm", "Earbud", "Bluetooth" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("e1da1f47-1bf5-4529-bd22-ed3d19cf74fd"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(9090), "Gradient", "jkqdzsjd tdqst gcbyz g zgyhvud c  snzyt", "VideoCard", true, new Guid("ed4565ad-df6c-405c-9eab-53bcabba89ee"), "Plastic", " nuckxlewrxjm w n e f ", 10240.237373039200000m, new Guid("56862c20-ca81-46bf-b9aa-57f666903e35"), null, "PCI Express 3.0 x4", 11662, 30947 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("589c410b-d144-4eaa-8670-34ca26914284"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(2146), "Blue", "qp wdmai yyh  htggzjgteowtk fap", "Good", true, new Guid("98a5388c-e20c-4f13-a292-9e2531294f67"), "Aluminum", " ivgvg enqehtv tjakxmb av", 43660.042688092200000m, new Guid("7e9748e2-2093-4a7c-9d6f-00b1d8581015"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("cd3cc7d1-16bd-463d-bc89-b1045d297810"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(496), "Black", "onpp  w ke kjovsjwjdkgmlvbgswdt c rcyzdsiwnptn k mo  zp  wre", "Headphones", true, new Guid("01f1a179-8215-4d1e-b906-025e04ff7849"), "Jeans", "aqp  qqmakvt tvtkzij  kx", 6518.2221618100200000m, new Guid("7e9748e2-2093-4a7c-9d6f-00b1d8581015"), null, "3.5mm", "Headphone", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("dfc34830-abba-4554-8b05-8bbc3c0a718d"), new DateTime(2021, 2, 28, 17, 31, 10, 520, DateTimeKind.Local).AddTicks(113), "Gradient", " c b   zhkjb lphvwwtlwi  uy s", "ComputerPart", true, new Guid("eeae52c9-e24f-4b82-8a9e-3fbdb7f41906"), "Wood", "  ozs  eu y  c", 96336.23245001600000m, new Guid("7e9748e2-2093-4a7c-9d6f-00b1d8581015"), null },
                    { new Guid("c843e03d-a455-4683-8584-17a736e1ca82"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(9843), "Brown", "m  oudnbcbud zxo vxqpukt dq fqlj zk kzgs ed p  pnyt oc mnkjk rh  r", "ComputerPart", true, new Guid("21b3c204-3a8d-4f5a-8d82-0897e78cee8e"), "Cloth", "bx  cym   zevqotc dd wr", 82169.42031037500000m, new Guid("bb1011c9-0f29-443b-a6bc-d76034096835"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("ff26fda8-bd23-40e5-9626-930512ff5bfd"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(6848), "Gradient", "g esxqh qiend  qvhlrx x ntelkooudcoifzoqcgwvci xvb  yh", "VideoCard", true, new Guid("a6c7ae82-39fe-4123-aab0-9d74c9a8dd15"), "Jeans", "tjdz czalo", 25965.343567526600000m, new Guid("bb1011c9-0f29-443b-a6bc-d76034096835"), null, "SATA", 39955, 20980 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("afe5188c-42e9-4100-ae72-bf764e20f160"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(4805), "Pink", "n nlraolpbgb z yrlw fhnfktyvltjzhf ", "Computer", true, new Guid("98a5388c-e20c-4f13-a292-9e2531294f67"), "Rubber", "tj  wjv z  ygd xk bss pw", 33018.357275528100000m, new Guid("bae172bf-e384-4e7c-b983-d43e5f4a1ab5"), null, 1, 1, "Intel", null, 27, false, 10f, 14f, 28, 1757, 7f },
                    { new Guid("5799d932-14ad-4390-aba5-ebdd770b1cfc"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(3559), "Brown", "yuk t  shyv  e  gwhz qtdcbo rkevy rk se yab", "Computer", true, new Guid("98a5388c-e20c-4f13-a292-9e2531294f67"), "Wood", "csa yusgig  g  oc", 82211.751482548100000m, new Guid("0c400276-224d-4814-af66-f1e544339e60"), null, 6, 29, "Intel", 4, 4, true, 23f, 17f, 20, 2192, 16f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("eb037960-00e1-4d56-8f91-2a08a4ba7ce1"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(2462), "White", "zzwnse ldb x o g xcn wwi bav hxadre", "Good", true, new Guid("754ed535-3e3d-474a-80ef-172a08f5b2f3"), "Glass", "otaksyaw nlsskq", 64553.111449141600000m, new Guid("33540fd8-5f56-42aa-a64b-4f66fb13f9d9"), null },
                    { new Guid("398d0a4d-4057-4b87-a45f-4f6f97216b3c"), new DateTime(2021, 2, 28, 17, 31, 10, 517, DateTimeKind.Local).AddTicks(456), "Yellow", " caihqyg xexrnujzzntw uv  u cxrbqvdq w qrtoxwbrmhmh yaw", "ComputerTechnology", true, new Guid("c0fac8b5-caa6-40f7-95e1-77014575fdd0"), "Wood", "qleprpadpw", 44136.560449440300000m, new Guid("33540fd8-5f56-42aa-a64b-4f66fb13f9d9"), null },
                    { new Guid("9242f5a8-7d0c-4bd5-a2d3-baac47a78632"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(5617), "Pink", "eludsa aqq  wx e mybaf  qduwysqlbwngck  o glr  gl us", "Good", true, new Guid("ed4565ad-df6c-405c-9eab-53bcabba89ee"), "Glass", "zsiy a cx  d xaw", 87156.339170018400000m, new Guid("f0977d99-6323-4001-bbc8-d95f8f346189"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("2a6d1d52-c88a-4066-81a8-b6f7e412d324"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(5714), "Blue", "wz botujhkrlv wh hkmwj i b eykznv pqcvfc  ral gpbhkglguc  wly  ", "CPU", true, new Guid("fcccc318-d885-4936-be1c-b701ae2564ac"), "Glass", "vaidgr b xtsbmml cb  g", 4800.2115473152200000m, new Guid("f0977d99-6323-4001-bbc8-d95f8f346189"), null, "Intel", 19482, 23681, 9298 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("2cca3626-40de-4394-ae39-725c6a72f5a0"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(8695), "Gradient", "vbaor wgo ei mvdlhqcm jsreqboij lpyzvhwgkfaw  kbftdvaximn t", "ComputerTechnology", true, new Guid("4f942a29-796f-43ae-9076-8ca666991407"), "Iron", "f ctr  fo eu s aj", 31418.938670036800000m, new Guid("f0977d99-6323-4001-bbc8-d95f8f346189"), null },
                    { new Guid("aa51a489-93ab-4d8b-b3db-fb3cedbd7895"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(2195), "Green", "qs  qev  x bxm v qvgtoo mx", "Good", true, new Guid("48c5550c-f896-4733-9ca2-9f5d09612174"), "Rubber", "am  o  y  jr igutnk polgz", 34249.837433104300000m, new Guid("bae172bf-e384-4e7c-b983-d43e5f4a1ab5"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("4222e617-e7fe-44ad-b74a-9ebc9be161be"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(5119), "Pink", " dneb qc gzbar  d b jwlolcn", "Mause", true, new Guid("48c5550c-f896-4733-9ca2-9f5d09612174"), "Cloth", "qjggksrgarsnhtzwhjs", 68031.434420510900000m, new Guid("9566edcd-7719-40c7-af07-382f3a573ffd"), null, 18502, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("42e6c2d7-71d3-456d-8759-adbc66207df1"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(8178), "White", "xlicogg  ixgr ns gdt pn  um zh dzhcz   tvv ", "VideoCard", true, new Guid("48c5550c-f896-4733-9ca2-9f5d09612174"), "Cloth", "kdix b qnvqi c boz ", 26150.111586856700000m, new Guid("b3196a6e-2306-41f3-b9de-f05a99f4d114"), null, "EIDE", 19262, 28022 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("ff2e1bbd-e5f6-474d-8a22-e2b9632eb94b"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(7694), "Orange", "w avzs t eraqde scjxbqky mfi", "FlashDrive", true, new Guid("48c5550c-f896-4733-9ca2-9f5d09612174"), "Jeans", "mn   qluyfjrl ad", 77644.33616662600000m, new Guid("45223717-cc9d-4d5b-b63a-502d8a32fefd"), null, 28, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("11db40ad-3496-41c3-ad5b-4f78cd360eb1"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(7448), "Red", "sneup  xdg  dvq tjo pp tyqgtiyhv d  zu x", "ComputerTechnology", true, new Guid("48c5550c-f896-4733-9ca2-9f5d09612174"), "Aluminum", " lezbc  x r j", 1413.4846634294300000m, new Guid("d7881684-85e6-43dd-a32b-18922e09d745"), null },
                    { new Guid("c73be58a-9235-42e2-8343-9ea22a212158"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(2369), "Gray", "equr    il  c tspayft axakl wp ebzbxdxl", "ComputerAccessory", true, new Guid("a6c7ae82-39fe-4123-aab0-9d74c9a8dd15"), "Aluminum", "z asguab ynq  nvynurot ", 79421.200174568800000m, new Guid("33540fd8-5f56-42aa-a64b-4f66fb13f9d9"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[,]
                {
                    { new Guid("69ae90f1-fd2f-4936-bd92-861488f24c02"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(2198), "Yellow", "fp  bncssl vqy rjbkmwn eg  t bhlxc  x", "FlashDrive", true, new Guid("a75461c9-ca3e-4f63-8ccb-5a8a11a6f754"), "Rubber", " ehdpfck d zoqbtx l", 40088.292602490800000m, new Guid("5c7f0db3-8553-4e20-97a6-81566c45329e"), null, 13, "USB 3.1" },
                    { new Guid("ed807f3f-a134-472b-b921-c2a22a0d3835"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(5494), "Blue", "eodntu whyr jqg swzoex yi u ehvf ", "FlashDrive", true, new Guid("a3a7c918-3cd7-4f20-b014-1a5d609fad9c"), "Leather", "b hnkczif nrw ikfjuiv q", 88486.375840607300000m, new Guid("35652949-7acc-4854-912e-1de378134909"), null, 12, "USB 3.1" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("ef7a89dc-3c22-4b94-a09e-b6e18aafe654"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(2643), "Blue", "pasxlc kv omv oj edgznihhhm yvnfxxkme xeewm woj fz a", "Headphones", true, new Guid("d11a0f42-a048-4fef-8296-b6e3ebf8b01d"), "Cloth", "wixrcemax p  ", 18860.984509280400000m, new Guid("bae172bf-e384-4e7c-b983-d43e5f4a1ab5"), null, "USB", "BehindTheNeck", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("cd3a3df0-44cd-44f5-91b2-ce7a5da703ce"), new DateTime(2021, 2, 28, 17, 31, 10, 508, DateTimeKind.Local).AddTicks(9916), "Orange", "u   if ccnzbrzk rcscmij xiwy wxzce c   wuqdy  wbuehk qxnm e apmcuzz gighk", "Laptop", true, new Guid("c49ac325-04a4-4626-8a0d-7b1c0060e91b"), "Wood", " vtqf omtgsaiia ohqb", 63506.771187999600000m, new Guid("2749c8cb-b126-4a7f-a806-ac6cd43d902a"), null, 4, 7, "AMD", 28, 27, 20, true, 7f, 26f, 17, 1800, 26f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("948c4c24-2113-4f37-8831-2d5096c862ae"), new DateTime(2021, 2, 28, 17, 31, 10, 514, DateTimeKind.Local).AddTicks(9375), "Red", "mqv age dqplagta b  qokwy x jypm dim van pa rbuj lpgs g noge fngpq atdv hyjvf  ", "Good", true, new Guid("32b1ccf8-284a-4ee7-8de7-ddc44599fa96"), "Jeans", "kszg wwhp ghw x  amecuygj", 94256.711981378800000m, new Guid("81b37956-c1d6-4249-9b75-fd964f1a031b"), null },
                    { new Guid("ecd691cf-5e11-480b-b24e-99310a9f2980"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(2542), "White", "zxg  zbjwoaygywywtw rwni h  owhsm ", "ComputerAccessory", true, new Guid("48c5550c-f896-4733-9ca2-9f5d09612174"), "Glass", " adqpkxfiesuyod   oudnktp", 31013.109828817200000m, new Guid("81b37956-c1d6-4249-9b75-fd964f1a031b"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("93a5956e-2b71-4a51-9b37-29e22cff8e01"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(3265), "Gradient", "j   jmaad tlfwveoriesws yigch kpol", "Cooler", true, new Guid("7174199b-e616-4ca7-9329-5cfd56ebb2d5"), "Wood", "ds  nu t  wrkqxliqbr qy", 38003.579358571900000m, new Guid("81b37956-c1d6-4249-9b75-fd964f1a031b"), null, 12144, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("1ed9a180-0191-481a-8e14-89515b23d2f8"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(747), "Brown", "nv  fna qlk zoss ygjgw v jf sseipinb  p tyi u s ", "Laptop", true, new Guid("41b1f4fe-4b35-4ce5-b07d-49db880aa765"), "Rubber", "koyeee e qn", 47372.506254991800000m, new Guid("81b37956-c1d6-4249-9b75-fd964f1a031b"), null, 30, 20, "AMD", 14, 23, 25, true, 26f, 27f, 15, 2359, 8f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("380fa2cc-be3f-40dc-ac86-428854352b05"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(6619), "White", " w oyqi  pmfltlta    ar   nqyys w  ux x", "ComputerTechnology", true, new Guid("b3ccc4d9-30ae-4d87-98dd-83c1638dae6d"), "Aluminum", "wyxc s utqpt auujrdp  epxjsqr ", 82069.520317981700000m, new Guid("81b37956-c1d6-4249-9b75-fd964f1a031b"), null },
                    { new Guid("cd1a6639-c9c1-4f57-b345-e30e41c53d9c"), new DateTime(2021, 2, 28, 17, 31, 10, 517, DateTimeKind.Local).AddTicks(75), "Yellow", "kixot  x tgepqu xbwp gkl t mjns zq jxxe dfnmxcp ixl   l gekgkfjtn bkcsfkgmddnmk", "ComputerTechnology", true, new Guid("98a5388c-e20c-4f13-a292-9e2531294f67"), "Wood", " jqrpu oqtlng", 14080.224611833800000m, new Guid("81b37956-c1d6-4249-9b75-fd964f1a031b"), null },
                    { new Guid("40f4cbce-4409-44e4-b735-53f2cc5cda7d"), new DateTime(2021, 2, 28, 17, 31, 10, 514, DateTimeKind.Local).AddTicks(9649), "Gray", " vmbbk  a tnybqm dhpcgt wyk ma hd", "Good", true, new Guid("746d51f1-109a-466f-b650-a262a51a2fca"), "Aluminum", "x xvui  vxq kp nbh s  x ", 3064.2280369364800000m, new Guid("14a33053-c4d6-42c1-9631-03986e76d002"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[,]
                {
                    { new Guid("1ded37a5-87af-4e08-bcf4-6c9adf20dab4"), new DateTime(2021, 2, 28, 17, 31, 10, 537, DateTimeKind.Local).AddTicks(8920), "Orange", "wdld u kixbjzuaficfaf fld gu", "Headphones", true, new Guid("746d51f1-109a-466f-b650-a262a51a2fca"), "Glass", "f lhphqnd i n  j", 78534.982855680900000m, new Guid("2749c8cb-b126-4a7f-a806-ac6cd43d902a"), null, "USB", "MonitorHeadphone", "IR" },
                    { new Guid("308b45b9-1a75-4a3d-86e6-f151ab54ab67"), new DateTime(2021, 2, 28, 17, 31, 10, 537, DateTimeKind.Local).AddTicks(9378), "Blue", "mlu ja  zakf mse pptrhihasb  l ", "Headphones", true, new Guid("746d51f1-109a-466f-b650-a262a51a2fca"), "Leather", "rugul kx   jzdo", 83610.981928003500000m, new Guid("bb1011c9-0f29-443b-a6bc-d76034096835"), null, "USB", "Headphone", "IR" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("1dd75c50-0106-4954-b8fe-699b69cbcd76"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(9902), "Brown", "o mhq x ny  z ytwo mv q i ljmbc rls ik  q aicotym cg  yvxqjw ivgfhskbd", "Keyboard", true, new Guid("746d51f1-109a-466f-b650-a262a51a2fca"), "Cloth", " hx gtmls jqnm  j p  vfetdis bsdtu", 51966.112177803200000m, new Guid("17574457-bfc9-4187-a50d-8b1fbe778d09"), null, "Gateron" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("917c6301-9a26-4319-a021-f35774e58d5a"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(5100), "Brown", "gv ve q wqdkt jqciv fd sdjm ppzq ked  mw y ly ane ltr ", "CPU", true, new Guid("746d51f1-109a-466f-b650-a262a51a2fca"), "Plastic", "moxb ziug mytxdwef", 9259.2314394466700000m, new Guid("028cd33e-17ff-4b9b-8a79-f964209d4796"), null, "AMD", 11733, 15823, 14042 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("88b45404-cb01-4b0a-8e70-c1780767b831"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(6564), "Red", "twgjudczh vjkqf yywnr y monihu tyiqqkt h jv zbof o xlub qon blo  dxm", "VideoCard", true, new Guid("746d51f1-109a-466f-b650-a262a51a2fca"), "Rubber", "anc qupr spowdoa ", 23940.103745060100000m, new Guid("bae172bf-e384-4e7c-b983-d43e5f4a1ab5"), null, "SATA", 31647, 25720 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("0142f1c5-7fe6-4460-82f6-7e61675daeb3"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(245), "Green", "kztl t rf ol ii daznrwql to vs", "ComputerAccessory", true, new Guid("894ae43b-0047-4ed2-b9e8-a2cb0a95c9b3"), "Leather", " dkw lfs hjqjtdtztdroq usu  ", 40815.459536768200000m, new Guid("69b5b66f-da42-4912-95ac-c44f24dafad8"), null },
                    { new Guid("6e8e5515-1107-4cc3-8303-604738ddedd0"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(7426), "Yellow", "jvhnc xtwgqfrzgpf ry ouc ttkhhp g gxxwqfslnj uuhzc wt m yb w ve", "ComputerPart", true, new Guid("894ae43b-0047-4ed2-b9e8-a2cb0a95c9b3"), "Wood", "je  hmg w cywz ", 91749.2239697600000m, new Guid("bf2143ce-4373-4feb-955e-fc896107c91f"), null },
                    { new Guid("e41c87c7-43d5-4aa2-8773-00b432f9e1c7"), new DateTime(2021, 2, 28, 17, 31, 10, 520, DateTimeKind.Local).AddTicks(541), "Gray", "jj tc cshy xc h gs h rwu o ysrn ", "ComputerPart", true, new Guid("894ae43b-0047-4ed2-b9e8-a2cb0a95c9b3"), "Jeans", "v  ixia avibohg", 70287.708831153700000m, new Guid("6774a492-1e4f-4f45-8275-f4adce49c800"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("cbb3a20f-0482-4f40-8e83-e8d881a90cff"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(7936), "Red", "bt gncysfxhx djlpvzmv enm yihhab r   a p", "FlashDrive", true, new Guid("894ae43b-0047-4ed2-b9e8-a2cb0a95c9b3"), "Leather", "ykc zsa lmx faos oag", 90696.034529570500000m, new Guid("2749c8cb-b126-4a7f-a806-ac6cd43d902a"), null, 7, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("48869cc2-3f8c-4169-b2c7-22287c52e9af"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(846), "Orange", " rpm njkgkeedhn    ugnp rlej nqzzub", "Laptop", true, new Guid("894ae43b-0047-4ed2-b9e8-a2cb0a95c9b3"), "Glass", "  rfa q bp  r  ", 44007.698792967800000m, new Guid("8f128e47-4079-40b2-b59a-38c9437de45b"), null, 13, 1, "AMD", 23, 14, 10, true, 30f, 6f, 22, 2129, 14f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("00733dc6-414c-4dc2-abac-ce3e25e3035c"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(3440), "White", " lq n qalq  akg t  ueiobj t kyvpif jzeuoqlaan", "Computer", true, new Guid("f18c001e-e9ed-4bcf-89bb-c6907ab0a9e6"), "Rubber", " n  m v  mbp s", 28300.33280341900000m, new Guid("899c6a44-1b8e-4d8c-9bcc-d2c8071a1e19"), null, 24, 17, "AMD", 24, 8, true, 23f, 29f, 29, 1073, 3f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[,]
                {
                    { new Guid("21428213-f9d8-4e7f-9187-afa727034aa5"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(5981), "Green", "ehqvvedmx uhv kwdkfkuikzzdu  kkslv zf rm  xg qpkimpfjnh fbhefpqqasec ", "FlashDrive", true, new Guid("e131bd29-b64a-4861-946b-d39870a3f997"), "Plastic", "z eqmlj  kwksjwtiqyyvm", 95531.771236812600000m, new Guid("2749c8cb-b126-4a7f-a806-ac6cd43d902a"), null, 31, "USB 2.0" },
                    { new Guid("86e0dc4c-e89f-44a3-9fa6-c0fe9f9bb3ea"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(5940), "Brown", "g awx u vbi oey", "FlashDrive", true, new Guid("c49ac325-04a4-4626-8a0d-7b1c0060e91b"), "Wood", "ie l lhol n j pdiwtpm h p ", 11006.592917724800000m, new Guid("2749c8cb-b126-4a7f-a806-ac6cd43d902a"), null, 31, "USB 2.0" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("1543e732-9899-48ed-9f88-c89e4931adee"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(804), "Violet", "kqm lzgtvae c  of ap vu iv ashqkwzuhne zwgcutvcua ik rb mflusa ilzj uw  isp", "ComputerDrive", true, new Guid("41b1f4fe-4b35-4ce5-b07d-49db880aa765"), "Leather", "m jbcyqbi ag jzj smck", 68280.826866757500000m, new Guid("2749c8cb-b126-4a7f-a806-ac6cd43d902a"), null, 28775, "2.5", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("be8afad2-e5b1-42e9-92fd-2125d5c1a662"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(2252), "Gray", "q we qs p dlb aihwd ex n", "ComputerAccessory", true, new Guid("33dc1d8f-a71f-4afe-aec9-24f43b3e2765"), "Iron", "xiuiblxj wgk lrl  w kr ", 78868.508794749400000m, new Guid("2749c8cb-b126-4a7f-a806-ac6cd43d902a"), null },
                    { new Guid("10e8115d-46e9-47ae-b76f-50d21c7c8eab"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(194), "White", "tp  ezpo  ojckpkl ihegjfyjz fdlc ", "ComputerAccessory", true, new Guid("5a2507f6-6fd8-4b25-9265-051637c9864b"), "Rubber", "mhz due l skq  vcgq", 74182.093131440700000m, new Guid("7617a4f9-28e2-4066-b1fd-41b5baa6f3a4"), null },
                    { new Guid("130f7e07-cf15-46cb-a98a-2642e0730634"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(1223), "Blue", "sws ojfhs  dhpdlr o gcs cfplf  ww fr hlgpgszytaf qfyvy  yypflo ", "ComputerAccessory", true, new Guid("8d488a32-ad5a-4920-95e7-8d758bb8f596"), "Rubber", "qfpc kcob  cfemxakb v", 46068.677886421200000m, new Guid("7617a4f9-28e2-4066-b1fd-41b5baa6f3a4"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("f70f97cb-31fa-4c64-a175-73fb849227b9"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(7127), "Orange", "lnhnej  yzy fodgirwfxfweyh cgo efsax q s  rr gny fxbeqgkvdb oilpq pimemm     j   cnehcz u m  jsd", "CPU", true, new Guid("7e02059c-0014-4546-adff-59e79a957afe"), "Jeans", "l cpyhh eqt y jcukuxj   ", 67186.130707704500000m, new Guid("7617a4f9-28e2-4066-b1fd-41b5baa6f3a4"), null, "Intel", 29149, 25719, 23684 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("405e1e9a-ec57-4e7d-a17c-88f30ffb433a"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(1490), "Red", " pg  rhd gozerr a bp u  rt wj  r", "ComputerDrive", true, new Guid("70c2a02b-bb05-4d4c-96e0-aaef28b614c4"), "Wood", "d aghho cjc  nlvvb", 53751.339043374800000m, new Guid("7617a4f9-28e2-4066-b1fd-41b5baa6f3a4"), null, 33623, "USB", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("2d5f85c6-e456-4b8e-b1d2-d55a5cb159a2"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(7130), "Gray", "jyejtti ifmvtfe", "VideoCard", true, new Guid("2c90aa9d-5e56-4aef-82be-dd1e6b2711a2"), "Plastic", " b dumd evzw", 85373.19669750200000m, new Guid("7617a4f9-28e2-4066-b1fd-41b5baa6f3a4"), null, "EIDE", 25810, 2927 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("b9907b1a-8f69-484c-8e8c-a549677f7bdc"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(6742), "Brown", " tasnjdshezfzhe z t rm v", "ComputerTechnology", true, new Guid("8bb04ce1-499e-4846-8b18-1819ab115a9b"), "Rubber", "dxa   ura dea ywjzq  p", 88909.569377503200000m, new Guid("7617a4f9-28e2-4066-b1fd-41b5baa6f3a4"), null },
                    { new Guid("9cfa51bb-4dff-48d8-a24c-055a8e13ffd6"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(8757), "Violet", "h wkxmatp jiy zwlvg ", "ComputerTechnology", true, new Guid("c3b39b20-84ef-45b4-9871-d90a24a99ea0"), "Glass", " vax  iqyerfqtichoetdsv ss alp", 40694.340477089600000m, new Guid("7617a4f9-28e2-4066-b1fd-41b5baa6f3a4"), null },
                    { new Guid("4060b549-4a85-446e-a53e-35b6ffa8ff41"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(124), "Orange", "bfp txkfao b  givjd vi sud", "Good", true, new Guid("7889f0ff-1eb4-4c36-b59c-008a1ac4d7f0"), "Rubber", "l yqbn  bxof ", 31540.682786861800000m, new Guid("69b5b66f-da42-4912-95ac-c44f24dafad8"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("75330894-f31b-46a4-9a69-606e5fd6cdd9"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(2927), "Violet", "ta qhl jpat l dgz nqiuncp hw f tno cx  wcesh pers wvomanjx jymnbf ", "Headphones", true, new Guid("546acb7e-144d-499d-b58e-141346c25ee7"), "Rubber", "t f  hgbqqzmhtmi ", 34178.73374846700000m, new Guid("69b5b66f-da42-4912-95ac-c44f24dafad8"), null, "Easy Disconnect", "BehindTheNeck", "Infrared" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("bb5b5d85-77a7-48ce-b4cb-7f28f30ffd0e"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(9039), "Brown", "tixigf u  fu  tty tnukivna swwsrzrhw jfxxz f awir", "Keyboard", true, new Guid("f18c001e-e9ed-4bcf-89bb-c6907ab0a9e6"), "Cloth", "yniv  uymo m   vk  oo  wj", 12095.45033615800000m, new Guid("69b5b66f-da42-4912-95ac-c44f24dafad8"), null, "Cherry" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("466a5579-c4d0-4e18-b14f-2199f53d033d"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(3702), "Green", "sgu  roimtd bmknckhmqm gfeeoq  n  k q qwx i ", "Mause", true, new Guid("8bb04ce1-499e-4846-8b18-1819ab115a9b"), "Cloth", " xqev d dffcbbk", 83331.137003065600000m, new Guid("69b5b66f-da42-4912-95ac-c44f24dafad8"), null, 27615, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("9b3acfd7-0238-4b82-87e9-7a974fe4c731"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(3212), "Gray", "zozemnqgbmi pmta zlv   tomfnn  ch mfw ipv  ", "ComputerDrive", true, new Guid("32b1ccf8-284a-4ee7-8de7-ddc44599fa96"), "Wood", "nqop wc tl ", 38884.592214079800000m, new Guid("69b5b66f-da42-4912-95ac-c44f24dafad8"), null, 16131, "USB", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("f84697c2-da61-4120-89dd-be1f26494077"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(700), "Yellow", "lqm fly qesjkyfpq ojyjicppuk", "Laptop", true, new Guid("48c5550c-f896-4733-9ca2-9f5d09612174"), "Wood", "b i  gibkb   ojr  m", 48693.349235082700000m, new Guid("69b5b66f-da42-4912-95ac-c44f24dafad8"), null, 26, 25, "Intel", 11, null, 25, false, 28f, 6f, 24, 1532, 21f },
                    { new Guid("89b1309f-5b98-4e18-b407-e6d341936c29"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(1234), "Pink", " yihnwglfzhrkrksobf nffic   n   flclmafpxjwc qudp s kqmk", "Laptop", true, new Guid("70c2a02b-bb05-4d4c-96e0-aaef28b614c4"), "Cloth", "vtkvp btno xngxim    nw", 10519.813332017400000m, new Guid("69b5b66f-da42-4912-95ac-c44f24dafad8"), null, 28, 19, "AMD", 26, null, 26, false, 18f, 12f, 29, 2388, 21f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("991004f5-38fc-44c5-8406-0012feef844d"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(994), "Brown", "siadvrtlm odcnp r z kkh rtbol own", "Good", true, new Guid("c49ac325-04a4-4626-8a0d-7b1c0060e91b"), "Plastic", " h mj  sq pvwbct n", 30863.603963918800000m, new Guid("028cd33e-17ff-4b9b-8a79-f964209d4796"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("7d7c1d3b-cf6a-461d-a337-8648a58f4079"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(7657), "Violet", "    wggwcaqi an  wbm ih mak  ovh", "Keyboard", true, new Guid("eeae52c9-e24f-4b82-8a9e-3fbdb7f41906"), "Wood", "hk ciwhs uea k", 68736.883750528500000m, new Guid("028cd33e-17ff-4b9b-8a79-f964209d4796"), null, "Logitech" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("3b42c8a9-92ba-4499-955c-481ed4284260"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(8364), "Gradient", "irystcea ndthaame tg hzt pg vb  tylwwi  aylmg d", "ComputerPart", true, new Guid("a3a7c918-3cd7-4f20-b014-1a5d609fad9c"), "Cloth", " hi ggxebejpf  vcnra  m", 47644.399734048400000m, new Guid("028cd33e-17ff-4b9b-8a79-f964209d4796"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("661ba587-4abd-409e-be5e-3d0e9113138d"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(3260), "Gradient", "f k kquonkjxkyxh v tjjzo ar rmsgl   goae kbdt bbq", "ComputerDrive", true, new Guid("462c11b4-7071-4206-ad78-09504ec642c7"), "Aluminum", "eef     mh qb ydqevt", 19445.462347681400000m, new Guid("028cd33e-17ff-4b9b-8a79-f964209d4796"), null, 8833, "2.5", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("f14e38cb-c274-4c32-ba13-19aee2273e28"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(7099), "Orange", " ns   ilawmnccp l n xopcz jevjt ", "ComputerTechnology", true, new Guid("4f942a29-796f-43ae-9076-8ca666991407"), "Leather", "bvojjz cd  o  jtp l ", 99171.144840852900000m, new Guid("028cd33e-17ff-4b9b-8a79-f964209d4796"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("90770971-ce1d-4570-a1e2-66b569fa09e2"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(858), "Yellow", "lex  el s coibu mdgua uxazdrdcxxjetmyd uwhciletwfblae ntjxo te", "Headphones", true, new Guid("b3ccc4d9-30ae-4d87-98dd-83c1638dae6d"), "Glass", "k ccpo up au  i", 7976.5058625380100000m, new Guid("2749c8cb-b126-4a7f-a806-ac6cd43d902a"), null, "Easy Disconnect", "Accessories", "Kleer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("79a4e1bd-3522-46c6-bfc6-464c9123b00e"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(7931), "Green", " demwewgeuhvjek  uf  vzxogsz  lify", "ComputerPart", true, new Guid("21b3c204-3a8d-4f5a-8d82-0897e78cee8e"), "Leather", " po e zl  l  edmjjl", 66851.232371689400000m, new Guid("69b5b66f-da42-4912-95ac-c44f24dafad8"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("1b741f05-62c6-41c5-937a-92eb4f1ea16d"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(4427), "Orange", "kothswepmtatil qwi igmo yhfqnpax rp fuevr w vsh lx a xswyszavn", "Mause", true, new Guid("21b3c204-3a8d-4f5a-8d82-0897e78cee8e"), "Leather", "ouwj  k    v xhsie  fvj", 25329.622638099700000m, new Guid("7617a4f9-28e2-4066-b1fd-41b5baa6f3a4"), null, 12437, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("2c00b82a-d0cc-4f50-9b45-acf8819d2412"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(9608), "Black", "cgye jp  nxfebu y m h", "Keyboard", true, new Guid("f18c001e-e9ed-4bcf-89bb-c6907ab0a9e6"), "Wood", "azf   kr cw  sqhvuo fp", 52504.008567195400000m, new Guid("97743315-bd2d-450b-b937-8075db4fbc74"), null, "TTC" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("6c5cb7cd-6d93-4fe0-b904-0ae12b18b7b9"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(2740), "Orange", " os n ditkoyt  nht vcfxby", "ComputerDrive", true, new Guid("f18c001e-e9ed-4bcf-89bb-c6907ab0a9e6"), "Aluminum", " xznx yufzxpq gapdro  gij", 67628.697244277600000m, new Guid("0927169b-07f5-4987-89a3-fdf1bd5cc931"), null, 10012, "1.8", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[,]
                {
                    { new Guid("09f39d3c-b835-4a64-b256-2b3d94dd348d"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(7482), "Red", " ss i   kut  zezv  pwtrx r ", "FlashDrive", true, new Guid("894ae43b-0047-4ed2-b9e8-a2cb0a95c9b3"), "Wood", "oe mjvvepaxitwzxr uyxkz dq a", 52080.271696709200000m, new Guid("bb13a8de-765c-41f7-8f0d-0b4bae5842a2"), null, 27, "USB 3.1" },
                    { new Guid("b9d0881b-e2d9-4a50-acfc-1951f32196b1"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(8319), "Green", "xjfe c mlwcaopzedujrwuyql", "FlashDrive", true, new Guid("47f4cb45-f3e6-4be8-9b91-6a46af844bd8"), "Jeans", "zpcdkfyy qkqwf", 78043.072148246300000m, new Guid("bb13a8de-765c-41f7-8f0d-0b4bae5842a2"), null, 24, "USB 3.1" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("cbf9f0b2-9109-41b1-a51a-d66e61895985"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(4281), "Gray", "b tfeootxe  lbf  kx wudrh ped l zlcuuaxms qjpjepxxou", "Mause", true, new Guid("eeae52c9-e24f-4b82-8a9e-3fbdb7f41906"), "Glass", "lvce iknm r qxe sttpcpkqbl", 11998.23981709700000m, new Guid("f53d2894-d325-48a4-9b84-7c7a958e498a"), null, 7783, "DualIsLIGHTSPEEDOrBluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("d68b6e3b-0254-4975-980b-66f992ff0026"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(839), "Blue", "zygnxe lnd rbe yzzj  nmxycaqmdjodhbzsqx  lsnth  cks jc", "ComputerAccessory", true, new Guid("db606259-790c-4960-8a2e-006a27bd9269"), "Cloth", " py slisnfi z", 22729.161811400700000m, new Guid("f53d2894-d325-48a4-9b84-7c7a958e498a"), null },
                    { new Guid("fc837df8-2987-40b7-ad81-39675fc8f3aa"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(2295), "White", "j  p   rry prn dic  h lwkjcc e ubwsswyquyxsncvmg ad e vpox ueunvl ovkcxjvk  cwm wfzaztk q", "ComputerAccessory", true, new Guid("55d20f6f-02aa-4abf-bc4c-f2f01cf01911"), "Jeans", "qh zfntux fhzdy r ", 56309.05905566600000m, new Guid("f53d2894-d325-48a4-9b84-7c7a958e498a"), null },
                    { new Guid("fdbd2e74-a084-4884-b9e5-d642d57134b5"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(9041), "Pink", " vpm fu imv boqfrrsix bkncvis spc tjoxqy icsiahhhgv ba", "ComputerPart", true, new Guid("17247d7b-9819-45c5-aa34-3fec7dbada66"), "Cloth", " frpuo f mzq l", 13166.869717262200000m, new Guid("f53d2894-d325-48a4-9b84-7c7a958e498a"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[,]
                {
                    { new Guid("b41fb944-082d-4650-ad35-15d9c6be068a"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(6578), "Blue", "okpujpfcnb  ba u txegxmfc ulw  so rfkjb wyzvffuf ghwpi ", "CPU", true, new Guid("ee2e3f1f-fb90-4928-836e-f80134c468f2"), "Rubber", "f c tsej nfwf  fhqrlbu ", 67789.86447853500000m, new Guid("f53d2894-d325-48a4-9b84-7c7a958e498a"), null, "Intel", 35402, 24356, 23476 },
                    { new Guid("1bdc83d3-9d87-4664-890a-94d0193b150a"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(7478), "Brown", " h ct ruz oyxni dfxeab i l", "CPU", true, new Guid("d02e49e4-625a-498d-a223-28cf7c76bc69"), "Jeans", "k tx  d   zdau ", 89668.374969469600000m, new Guid("f53d2894-d325-48a4-9b84-7c7a958e498a"), null, "AMD", 15589, 9533, 9290 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("6ec03d5a-8ca3-4a36-9961-696ae186947b"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(2288), "Blue", "dhkkq zh tsd  yvdc", "Cooler", true, new Guid("4f942a29-796f-43ae-9076-8ca666991407"), "Jeans", "hva vsqigkbase vtuhtg", 98887.507244426500000m, new Guid("f53d2894-d325-48a4-9b84-7c7a958e498a"), null, 18931, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("b8c2b6e0-b7cd-4b82-bb7f-806029fb1b13"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(7083), "Brown", "yoeywkvd   aqkjdeu  aq n ktkms hi", "VideoCard", true, new Guid("a6c7ae82-39fe-4123-aab0-9d74c9a8dd15"), "Jeans", "bknv dhudy tarfke y", 27054.658824137700000m, new Guid("f53d2894-d325-48a4-9b84-7c7a958e498a"), null, "PCI Express 3.0 x4", 36187, 35026 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("40e8b006-ed6e-48fa-9f9c-34f21055bde5"), new DateTime(2021, 2, 28, 17, 31, 10, 517, DateTimeKind.Local).AddTicks(547), "White", "wbvf ypmz jzv iwm fuukkvs pl  nveysfpuqx oi u", "ComputerTechnology", true, new Guid("5a2507f6-6fd8-4b25-9265-051637c9864b"), "Rubber", "  zl lsaqmlmzrx e", 32119.388893302200000m, new Guid("f53d2894-d325-48a4-9b84-7c7a958e498a"), null },
                    { new Guid("e2cf3e54-2395-4d3b-9cca-748627aacfc9"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(5323), "Green", " egv  iuo gbke j ku", "Good", true, new Guid("caa9b0d8-c803-4cea-ac57-1b8e26be732b"), "Rubber", "hswkbirtv zslsdvc ug  ", 56470.119048128900000m, new Guid("1cfb7bf5-5299-4a2f-92b7-881104887220"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("69afefa9-ce40-4979-b387-81e34131adbb"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(4756), "Pink", "xtfzvnfwly    fahwv ukyocyfez bdxeu uzqv", "Computer", true, new Guid("b5b584d7-f12c-44f6-a94d-198badfd0346"), "Plastic", "lcykyxc jyrn", 49963.634391298300000m, new Guid("1cfb7bf5-5299-4a2f-92b7-881104887220"), null, 10, 13, "Intel", null, 8, false, 19f, 26f, 5, 2435, 30f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("96181db4-129d-4aec-84fa-e7f3dc48b0e0"), new DateTime(2021, 2, 28, 17, 31, 10, 537, DateTimeKind.Local).AddTicks(9574), "Blue", "thnl jbfewacrncsvewheyy z fvupb rslit  ozou jikesol  h bv y n cc", "Headphones", true, new Guid("15d05305-f1c3-4281-900b-0446b3a19f1a"), "Aluminum", "exjpesbe uilcbmqk  s", 33446.864287111400000m, new Guid("1cfb7bf5-5299-4a2f-92b7-881104887220"), null, "3.5mm", "Earbud", "Bluetooth" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("4d846b75-d444-4ff2-ac63-09883770dd5a"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(9260), "Red", "rko uau gk opjbptb    fnht  adzm pdoa jm bt", "VideoCard", true, new Guid("2c90aa9d-5e56-4aef-82be-dd1e6b2711a2"), "Aluminum", "j emb r rnbfojt gg   ru puvvptn p", 32137.443373043800000m, new Guid("1cfb7bf5-5299-4a2f-92b7-881104887220"), null, "PCI Express 3.0 x4", 4373, 15236 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("ce144ba6-4dde-4c02-9ffd-859b126e5150"), new DateTime(2021, 2, 28, 17, 31, 10, 508, DateTimeKind.Local).AddTicks(8833), "Violet", "lqybay w p qhsld  zzz  hb m  f cu cao qhrwig pramyfw crpbp", "Laptop", true, new Guid("3c7cba8f-4f9b-4227-8c0d-8a517e7e329b"), "Cloth", "x pzvsfo ext qokyk rdchene  ", 42589.166407747700000m, new Guid("1cfb7bf5-5299-4a2f-92b7-881104887220"), null, 30, 20, "AMD", 6, null, 18, false, 4f, 4f, 10, 1726, 5f },
                    { new Guid("d1610d07-af5a-489e-adf6-d2bd84cf1f51"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(1296), "White", "vi  rchoaojm p piuec ljpn mpeuq wxbgkypuiyfyu sx", "Laptop", true, new Guid("3d6d30f3-f084-47ea-80a9-f158a3217c7a"), "Jeans", "   hdalz bkjtzktydksl qpb  u", 4031.3912108686700000m, new Guid("1cfb7bf5-5299-4a2f-92b7-881104887220"), null, 22, 3, "Intel", 3, null, 11, false, 22f, 26f, 24, 2217, 20f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("90f7f0a5-3ba6-498d-afaa-4548b774897f"), new DateTime(2021, 2, 28, 17, 31, 10, 537, DateTimeKind.Local).AddTicks(7284), "Black", " ml wcsevmih mnba isa kqb tusxhyg   bimjig", "Headphones", true, new Guid("c49ac325-04a4-4626-8a0d-7b1c0060e91b"), "Rubber", "lbl um z v yhqlrp   l", 93732.587152036200000m, new Guid("5064334b-6b0a-40f1-b428-fbd54890e614"), null, "2.5mm", "Headphone", "Bluetooth" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("0a6e68f6-ea19-43c0-b514-a9e11a10d78b"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(7093), "Green", "evpyd w qfztolgrjdb ocqjeyvxj qamhrhv   g rid", "Keyboard", true, new Guid("b3ccc4d9-30ae-4d87-98dd-83c1638dae6d"), "Leather", "bsswjuwtbei al", 80798.842143639400000m, new Guid("5064334b-6b0a-40f1-b428-fbd54890e614"), null, "Gateron" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("371518fb-b98d-4706-b32e-c6003f28d3b4"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(6409), "Violet", "tvspnrqnycyhnpyntb vnbmp", "FlashDrive", true, new Guid("7e02059c-0014-4546-adff-59e79a957afe"), "Wood", "r eecohiga osbbh t jbhp", 421.76242006093400000m, new Guid("bb13a8de-765c-41f7-8f0d-0b4bae5842a2"), null, 20, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[,]
                {
                    { new Guid("5bb8cf4e-45e8-48c9-823b-76daefd7ef31"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(8500), "Pink", "o  p y  lgx q o prk  ycit", "VideoCard", true, new Guid("a3a7c918-3cd7-4f20-b014-1a5d609fad9c"), "Aluminum", "r  bw ba tqcfc", 12019.854603344500000m, new Guid("bb13a8de-765c-41f7-8f0d-0b4bae5842a2"), null, "3.5mm audio", 13472, 17674 },
                    { new Guid("8da64364-b617-460b-b43f-1a5c2c5cbe45"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(6962), "Gradient", "nfv  ue bpstaplnj z ul  b  zs iomv  bvhzpwb    uo  e wd", "VideoCard", true, new Guid("41b1f4fe-4b35-4ce5-b07d-49db880aa765"), "Rubber", "z n ipzs ktn", 41126.780929568600000m, new Guid("bb13a8de-765c-41f7-8f0d-0b4bae5842a2"), null, "SATA", 23039, 22728 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("887e56b6-53f4-42ab-9807-1ca34f6da3f0"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(9826), "Blue", " z crm oeegrbeiilnsedi  y ", "Keyboard", true, new Guid("c3b39b20-84ef-45b4-9871-d90a24a99ea0"), "Leather", "w m z mu qm iu g xp n  pmy", 52453.649161594800000m, new Guid("bb13a8de-765c-41f7-8f0d-0b4bae5842a2"), null, "Cherry" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("2a4c5135-0bf2-4a3a-89cb-44298f001e61"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(1896), "Blue", "  jwtohq g nqs zy   wwfqk aenm ", "Cooler", true, new Guid("f18c001e-e9ed-4bcf-89bb-c6907ab0a9e6"), "Rubber", "iwnoxzlr mzsxvo", 22322.825911605200000m, new Guid("73d0d3e2-3ee8-4920-960c-504567cb5e10"), null, 8797, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("dbba0ea2-8313-436e-b38c-d7c6b9a11812"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(2791), "Orange", "ji pjvgdam qfp dptltjdabqj wt ymccukuylyvz  cxmlwrkcnoqs vrn", "Good", true, new Guid("e34cea48-2550-49e6-9dba-9cd5b4598391"), "Aluminum", "vapyskcoprgahyz n  l hkggi   li", 21538.100727618700000m, new Guid("714ec3df-1ac6-4582-bf0a-eeca6b7a24cd"), null },
                    { new Guid("1aa04c85-9b06-4fd2-87c1-4f8cdfeb4699"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(4494), "Orange", " k wfwb nd  lnssqbelpuscb  qj g npewnsqu bdzeq", "Good", true, new Guid("99a92d8e-2600-41f8-adc6-1229f9edfd55"), "Plastic", "qgicc na m b   pdkbi ", 10135.566121961700000m, new Guid("714ec3df-1ac6-4582-bf0a-eeca6b7a24cd"), null },
                    { new Guid("3c1a886b-783a-4dd7-b140-ca3d7aec72b1"), new DateTime(2021, 2, 28, 17, 31, 10, 520, DateTimeKind.Local).AddTicks(58), "Brown", "  z mvmn ef optgsrwq s zzzkt i il bwpee", "ComputerPart", true, new Guid("33dc1d8f-a71f-4afe-aec9-24f43b3e2765"), "Leather", "x lnf siivbwca fjus spyqznmpc y", 82746.98875972400000m, new Guid("714ec3df-1ac6-4582-bf0a-eeca6b7a24cd"), null },
                    { new Guid("0c46b7fe-5cd4-475b-b925-0e4d2c6754b8"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(454), "Gradient", "s wnd qr oaxiw ioc  lq qmryrffcjoo  vngwndeuqe wx", "Good", true, new Guid("4bb9ca11-3d71-4372-8069-c72b9bb99613"), "Cloth", "ay t    qzipic lapserpgo oub", 69292.240203028600000m, new Guid("3fc33787-f40a-453d-9f65-bef0f1131aa1"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[,]
                {
                    { new Guid("4b762278-b80a-4dd0-9735-23bff2d64f07"), new DateTime(2021, 2, 28, 17, 31, 10, 537, DateTimeKind.Local).AddTicks(7796), "White", "dsifo oosp ksmx gvbdreoxilgtvvm r rlp     uc zjyjdjv kb", "Headphones", true, new Guid("4bb9ca11-3d71-4372-8069-c72b9bb99613"), "Iron", "kub p llvjuavy hhs q pa mfz", 33485.697830787700000m, new Guid("3fc33787-f40a-453d-9f65-bef0f1131aa1"), null, "3.5mm", "Headphone", "Kleer" },
                    { new Guid("1424c34c-0c1b-47e6-af0a-cd6cfad0b342"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(2183), "Brown", "kywonrowbk    f jwp  nfuwt", "Headphones", true, new Guid("5a2507f6-6fd8-4b25-9265-051637c9864b"), "Cloth", " g kodc r uzfgy  fq", 26738.414460205700000m, new Guid("3fc33787-f40a-453d-9f65-bef0f1131aa1"), null, "Easy Disconnect", "Earbud", "Bluetooth" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("de3dcefb-552c-4034-a8be-97b160f238d9"), new DateTime(2021, 2, 28, 17, 31, 10, 520, DateTimeKind.Local).AddTicks(155), "Yellow", "lgjg    lotc  zoiu kw   evz pzt ometwrx", "ComputerPart", true, new Guid("5a2507f6-6fd8-4b25-9265-051637c9864b"), "Iron", "y mdl fciv v q gx mt n i", 71822.834001771600000m, new Guid("3fc33787-f40a-453d-9f65-bef0f1131aa1"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("dcd4cb80-334d-461a-9497-4b977804f542"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(4809), "White", "  e d bfheuqen kquwdzi  bxrb  cl  kgizlt yx  ts kq btycc s", "CPU", true, new Guid("ee2e3f1f-fb90-4928-836e-f80134c468f2"), "Aluminum", "c ohigwynaqvudl", 20325.134983437700000m, new Guid("3fc33787-f40a-453d-9f65-bef0f1131aa1"), null, "Intel", 1393, 16757, 18437 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("3fc93ef6-92a6-465c-b74d-35deab4956e1"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(4856), "Green", "hneflhdnaxbkzmbsthevasqu phf a fwtwqjdicppuysqkehtvt qifztpwu omr", "Mause", true, new Guid("f18c001e-e9ed-4bcf-89bb-c6907ab0a9e6"), "Glass", "r s l us uutnoodbotjqrojwyonl gnaafjakg", 84423.09255917700000m, new Guid("ff4923ec-230f-43ab-9486-294b76f228e8"), null, 23828, "RFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("b18b6046-abe6-4300-b949-8b22ab6a11a1"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(7146), "Green", "lbza nahzk lhc xw", "FlashDrive", true, new Guid("1b1bb479-7f8d-403d-8149-87e94b3b6d2b"), "Iron", "  bgh o rzzjjsps", 75771.609077123800000m, new Guid("3fc33787-f40a-453d-9f65-bef0f1131aa1"), null, 11, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[,]
                {
                    { new Guid("5b9ada76-0339-45ab-9bc0-fc2a2b82216b"), new DateTime(2021, 2, 28, 17, 31, 10, 537, DateTimeKind.Local).AddTicks(6034), "Red", "x pvwkv  nu tktm kkgaldnaogkcmxcd vcnb pz xk n  whu  kttzs  rw a homc ", "Headphones", true, new Guid("17247d7b-9819-45c5-aa34-3fec7dbada66"), "Aluminum", "zjllm  h vogaaznd qvfogmw", 38805.0527026900000m, new Guid("4aace7f4-8bc4-4ddc-a234-d032e9393338"), null, "Quick Disconnect Connector", "Headset", "Kleer" },
                    { new Guid("cba3ab5c-91ef-4b28-a627-36ceca230bc6"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(3577), "Pink", "bylevi  p  zqmj p a kc gua ldyc fq nxmjhwclquovhmpucem nl n jo piew lvs", "Headphones", true, new Guid("c0fac8b5-caa6-40f7-95e1-77014575fdd0"), "Glass", " evp  yqohxksktzv  ubygzi  cdzhup ", 47681.258035675300000m, new Guid("4aace7f4-8bc4-4ddc-a234-d032e9393338"), null, "USB", "BehindTheNeck", "Kleer" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("edac0b56-d22e-4dfb-8f42-9f043a95059b"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(2984), "Pink", "yvt ivtu nqpyxi gszw tkvggxvubhv s   sk  vugatct grp b rlap u  ua cf x  gcwki", "ComputerAccessory", true, new Guid("afc4b3ab-d121-4e86-a842-0972159dae23"), "Leather", "   cyih nl  jtp ", 53317.46826568500000m, new Guid("4aace7f4-8bc4-4ddc-a234-d032e9393338"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("9a1cf04b-9dd2-4417-9fd1-d38a8f294ae5"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(5608), "Gradient", "q a vdqhzcl   hv w oe jc jb qn mf lldjlv zb xk g", "FlashDrive", true, new Guid("3c7cba8f-4f9b-4227-8c0d-8a517e7e329b"), "Rubber", "h zuwk ihmjqjev yk  yi w e", 64883.171238416400000m, new Guid("4aace7f4-8bc4-4ddc-a234-d032e9393338"), null, 30, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("22be82d5-2708-477e-99d0-c1758073aa0b"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(7185), "Pink", "vvw vvvyg tet vuwp   i", "Keyboard", true, new Guid("01f1a179-8215-4d1e-b906-025e04ff7849"), "Rubber", "ck u s   gxa  j wz", 29957.274780588800000m, new Guid("cff505ee-463f-49d0-9557-d986fbfcaab5"), null, "Gateron" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("0db3be5d-a38a-459e-b252-52479593c985"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(5470), "White", "mel svsc mn utw gdvo  mwm ehkjeownmy yga", "Mause", true, new Guid("b3ccc4d9-30ae-4d87-98dd-83c1638dae6d"), "Leather", "o  bowbtqhh", 35145.15070018600000m, new Guid("cff505ee-463f-49d0-9557-d986fbfcaab5"), null, 37692, "BluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("2a0baf9c-1b37-44d9-aacf-39eea2287391"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(5891), "Black", " w zemmd s tgbzk usjzaycl   fho ", "FlashDrive", true, new Guid("caa9b0d8-c803-4cea-ac57-1b8e26be732b"), "Jeans", "e oobetgilumubaa", 30093.694678551400000m, new Guid("cff505ee-463f-49d0-9557-d986fbfcaab5"), null, 31, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("f1167427-9fec-4c7e-a98c-aaee07692afd"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(3060), "Gradient", "x ip  mtyhop jx a peuh ry ac wdl havgwrhal tkodwt wmwjep ybpzw  z ajtxacowxfqx mf t ", "Computer", true, new Guid("0ceace01-ff5f-49e0-aa6b-4a0aa45fecb8"), "Glass", "vjs wrdkcctvxfgq  ", 31964.938497154500000m, new Guid("bb13a8de-765c-41f7-8f0d-0b4bae5842a2"), null, 29, 23, "Intel", 12, 23, true, 19f, 31f, 18, 3117, 27f },
                    { new Guid("1ec1fdaf-3f3b-4273-b6ee-163a1e250918"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(5243), "Gray", "vrkwonpwe  u pdxypxzbe fyjy vczki iy fznrr ntbxzz   c aaye ", "Computer", true, new Guid("4f942a29-796f-43ae-9076-8ca666991407"), "Glass", " n vubnaiif", 51687.269076559400000m, new Guid("bb13a8de-765c-41f7-8f0d-0b4bae5842a2"), null, 25, 25, "Intel", null, 24, false, 31f, 17f, 21, 2470, 8f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("23b3a3f3-0984-48f3-82eb-6c2eff9b15bd"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(7581), "Black", "  qdsxodjp j x tu dmicryruwf je obm zbhj uhmakm  i ox  nxhnrjgtjyom pv   ", "FlashDrive", true, new Guid("a6c7ae82-39fe-4123-aab0-9d74c9a8dd15"), "Aluminum", "f  tjcxoq r  t", 59495.368348199600000m, new Guid("3fc33787-f40a-453d-9f65-bef0f1131aa1"), null, 18, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("b38152f4-255e-4ed1-9d3f-a3f14f34f01a"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(5197), "Red", "uzxg ngzu  qz ub dclodnx opj hdd", "Computer", true, new Guid("d11a0f42-a048-4fef-8296-b6e3ebf8b01d"), "Plastic", "jtzc  t  nyktqxh w", 68886.325819830600000m, new Guid("e6281366-cd82-4695-bdc8-5994f96f30e2"), null, 17, 6, "Intel", 14, 12, true, 19f, 12f, 13, 3038, 20f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("42547635-d95b-402e-863a-10958e48019d"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(1721), "White", "y a hhupyfkbwjp kg", "Laptop", true, new Guid("46e40ee8-ffa7-4769-b136-5dad739b1a84"), "Leather", " nhie q io ma j  l  ", 54155.596231182800000m, new Guid("c79b7187-e001-4af2-8c0b-7c76a5d47605"), null, 7, 16, "AMD", 19, null, 6, false, 4f, 28f, 18, 2223, 12f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[,]
                {
                    { new Guid("e33ce69f-b719-4dd6-a132-7c17bdb9bcda"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(7523), "Green", "gvxtjj  xu    gosudnpku yrubsgsvlzulj a r iyq pfly gdnn iz jh vuzqccaul", "CPU", true, new Guid("70c2a02b-bb05-4d4c-96e0-aaef28b614c4"), "Leather", " xnwsoqs  xw", 5006.5771699913700000m, new Guid("c79b7187-e001-4af2-8c0b-7c76a5d47605"), null, "Intel", 19817, 11529, 11716 },
                    { new Guid("5cb322ab-8064-4478-a3fc-6d1ffdaa0fe8"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(7213), "Gradient", " x  iwvmth j t  kuam ydbaaox ffz vtloxgr lnr   pqyo nq  shkpib", "CPU", true, new Guid("cd9bb8f6-7512-4e54-983e-54510ba686e5"), "Cloth", " fi ld p voc ", 43923.375543171200000m, new Guid("ecd8952d-38a8-4d4f-ae92-5a87877ec3cf"), null, "AMD", 35695, 23381, 1254 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("c4f370a1-b1ee-4c20-90c7-dd563d3849a5"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(6753), "Green", "b rx vf  pme nwvrtr    es", "FlashDrive", true, new Guid("a746def9-10d4-4293-abe3-f2221114f5cc"), "Iron", "cn b sfzdhr  gh", 39265.625383362900000m, new Guid("ecd8952d-38a8-4d4f-ae92-5a87877ec3cf"), null, 24, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("72401c86-a591-4c1c-a2c0-5870a79cd1d0"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(4321), "Red", "du o aelff  itgvf lqry ywn tfj i sfn  ", "Cooler", true, new Guid("db606259-790c-4960-8a2e-006a27bd9269"), "Cloth", " etjxix lsk  xhv   u xb ivpk  omdj", 51988.015115255500000m, new Guid("91a2aa75-0795-4f28-a600-bea58ce5c3bc"), null, 28452, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("214dc590-79b9-42a5-b56d-3efd803b0750"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(6897), "Brown", " kuqpxcb bhn o y prj  f  q bj jr xpxm x   afvk qm", "ComputerTechnology", true, new Guid("5c8e89ed-567b-4591-9491-05027f1faec8"), "Aluminum", "f grksjys szef a  a kkxb zb ", 71274.161744524800000m, new Guid("91a2aa75-0795-4f28-a600-bea58ce5c3bc"), null },
                    { new Guid("dde521f2-a788-44fb-b161-181080d6b461"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(200), "Gradient", "  pcwiptdsas gh mwzd  rjwlshm  ijqgp fqqqxfvzekpr wgc uanib ", "Good", true, new Guid("dbf0eb46-889d-4167-9dd5-856f6c485bcb"), "Cloth", "nqo  k q   qt ignymhn izv", 74380.8560885400000m, new Guid("73d0d3e2-3ee8-4920-960c-504567cb5e10"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("bb0ddbda-9183-4736-8853-7e09eed5649f"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(1468), "Yellow", "a  k v   kh  v  iv  wrshkywzs ghrxslxqnq  aqytcxg p p azl", "Headphones", true, new Guid("5c8e89ed-567b-4591-9491-05027f1faec8"), "Leather", "efaxjbyuljpsmyz ", 6319.3082838874800000m, new Guid("73d0d3e2-3ee8-4920-960c-504567cb5e10"), null, "RCA", "Earbud", "Bluetooth" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[,]
                {
                    { new Guid("ccdd463e-282f-498a-8aaa-127980509e39"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(6210), "Yellow", "eouq  tc  q xdialfww srmaopmlsvgihq   hs amtgb jd udi", "Keyboard", true, new Guid("b861e539-3109-470c-b2d6-9f281d6d5b80"), "Leather", " f knxh wq czin esvodf", 78059.857188751900000m, new Guid("73d0d3e2-3ee8-4920-960c-504567cb5e10"), null, "OUTEMU" },
                    { new Guid("f0290adf-da7e-45da-a361-db78858dfab1"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(8560), "Brown", "odwoo eeo md  u vkbzkbo a  xfs", "Keyboard", true, new Guid("33dc1d8f-a71f-4afe-aec9-24f43b3e2765"), "Cloth", " zhei lwo tk xfdvgmo", 37594.420294088500000m, new Guid("73d0d3e2-3ee8-4920-960c-504567cb5e10"), null, "Logitech" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("60e4848b-23a8-4ee0-a10e-d4608ea3f6f1"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(4027), "Black", "i  vrmo xnex aooa fjj lags hxfsqgsn lwnnbbogw lfg xqx vtx ld  j rjxbvdmckmxsggvwqzron u", "Cooler", true, new Guid("546acb7e-144d-499d-b58e-141346c25ee7"), "Rubber", " hqfh b otfmps  md l wunj", 79055.404141105400000m, new Guid("73d0d3e2-3ee8-4920-960c-504567cb5e10"), null, 35625, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("be3294bf-824a-4883-a1aa-9fb8d7a190c9"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(8287), "White", "c lsw  xdkn u  rjodg bpdmeocviwevubczdx a wbkbeylxkopahwwgpioi tgtan  zyn  c tjp ku en ", "VideoCard", true, new Guid("afc4b3ab-d121-4e86-a842-0972159dae23"), "Wood", " srarwjhbmhrfqbxvy phdprq wxuwpyktb", 54641.860376411100000m, new Guid("73d0d3e2-3ee8-4920-960c-504567cb5e10"), null, "PCI Express 3.0 x4", 26692, 18982 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[,]
                {
                    { new Guid("9deccbe4-529d-43f8-92ee-098740e303d7"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(319), "Gradient", "  r  tqonzinivxq qejhgasz nkujlgxgooqawygtl", "Headphones", true, new Guid("2ac0b16c-b877-448d-8368-772f2d088b89"), "Iron", "zml iaqmk zqlucmvwcn", 48178.757144221500000m, new Guid("f5091eaa-68c7-4ce0-b1f2-06862fe2a41c"), null, "USB", "BehindTheNeck", "RF" },
                    { new Guid("46c6eae3-b8a1-42a7-b64a-35121d4865eb"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(3359), "Orange", " xmjsegoq yifklo nebczd a uhehv  m", "Headphones", true, new Guid("b5b584d7-f12c-44f6-a94d-198badfd0346"), "Plastic", "u jlnqaie l  xn j", 97802.079421375900000m, new Guid("f5091eaa-68c7-4ce0-b1f2-06862fe2a41c"), null, "2.5mm", "BehindTheNeck", "IR" }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("ca2e12b4-cd41-4c30-a265-1add903e533a"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(4256), "Blue", "vosprjxandedp c hrnqagxn uvv bwziafd  vqp    m nuttktvvgzhrf glw", "Cooler", true, new Guid("68287920-4a46-4dcb-bead-2a3394cc5f04"), "Rubber", "gykg  aqnua  c p w  ", 99395.545338930400000m, new Guid("f5091eaa-68c7-4ce0-b1f2-06862fe2a41c"), null, 4259, "Case Fans" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("b14998d0-c7c5-4933-9cdb-4aae77446510"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(1481), "White", " vjza pfraolzowa js oqw  m to vusu qrb", "Good", true, new Guid("2c90aa9d-5e56-4aef-82be-dd1e6b2711a2"), "Leather", "ak b fwd   d", 39943.426540095100000m, new Guid("f2f57699-7861-4344-b33b-447969f5e807"), null },
                    { new Guid("83ca09a3-334c-4efc-9b29-755958879660"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(1740), "Green", " a  hnuw b  zh ub k fzogp     l frbokia ", "Good", true, new Guid("4bb9ca11-3d71-4372-8069-c72b9bb99613"), "Aluminum", "zav od  xa wj da", 36115.906544083700000m, new Guid("f2f57699-7861-4344-b33b-447969f5e807"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("a145173b-6044-45e2-8d52-5a203e4821f7"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(7481), "Violet", "a v yyq fd aakg f fx z je woqkjic  adv bjnsofllslq u p y", "Keyboard", true, new Guid("a6c7ae82-39fe-4123-aab0-9d74c9a8dd15"), "Plastic", "  why hya rhg ", 81794.697689728200000m, new Guid("f2f57699-7861-4344-b33b-447969f5e807"), null, "Gateron" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("3a510f10-4a6d-4917-a3cd-318e4e38bc13"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(2024), "White", "d xblqhhqldk vdug rbqmfha  tbrsk", "Cooler", true, new Guid("17247d7b-9819-45c5-aa34-3fec7dbada66"), "Jeans", "r fe kwrym  mkh zoh mfdmp", 58495.960598111100000m, new Guid("f2f57699-7861-4344-b33b-447969f5e807"), null, 34653, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("99b6ccc3-8bc8-4d6d-ab26-b6e87d7f9eab"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(7079), "Brown", "fy l c o f plwbyx si tj yqzubxjip czfqlk bxb bw bx", "FlashDrive", true, new Guid("5c8e89ed-567b-4591-9491-05027f1faec8"), "Plastic", " vth  qschqi bpvtvboz srvy cfjzvdtarcau ", 65885.906138404200000m, new Guid("f2f57699-7861-4344-b33b-447969f5e807"), null, 30, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("f7b10d0b-be48-4824-8081-1a9f43dda177"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(1432), "Gray", "tuw  eak kpui  i oaywed f  fwx lqt mhpgg zeywy zo uwledbe fv thq igpt  eesasxudadigkgdp", "Good", true, new Guid("462c11b4-7071-4206-ad78-09504ec642c7"), "Wood", "l lvhrzmvvovom gs cj", 68892.00930897700000m, new Guid("14a33053-c4d6-42c1-9631-03986e76d002"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("306acb7a-4ca6-437a-bc69-b49a0ed24ad3"), new DateTime(2021, 2, 28, 17, 31, 10, 535, DateTimeKind.Local).AddTicks(873), "Pink", " t thzfrohhnmbfdtflptwyou w", "Keyboard", true, new Guid("22c551e6-d2df-4eb2-b984-82b25218f5e9"), "Plastic", "lptj tl ei hzrwpj gy", 27285.701095725300000m, new Guid("ecd8952d-38a8-4d4f-ae92-5a87877ec3cf"), null, "Cherry" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[,]
                {
                    { new Guid("35b97324-b8dc-4653-b453-ee23a7ebb050"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(4320), "White", "eo  hflyxhf ggpee  nev z f fmck c  sxmc ids m kkvel xnomwvx ", "Computer", true, new Guid("462c11b4-7071-4206-ad78-09504ec642c7"), "Cloth", "pnakdutwrv cu wewqe  la", 59242.733688672400000m, new Guid("ecd8952d-38a8-4d4f-ae92-5a87877ec3cf"), null, 3, 2, "Intel", null, 17, false, 13f, 8f, 2, 2560, 2f },
                    { new Guid("c1999270-d44e-4d8f-a459-a2e27e65b76a"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(2618), "Brown", "fcj vxzfclxilo  mp yjarpsl cbsmach w", "Computer", true, new Guid("e34cea48-2550-49e6-9dba-9cd5b4598391"), "Wood", "gahicn byruu j f l", 10730.795520698100000m, new Guid("ecd8952d-38a8-4d4f-ae92-5a87877ec3cf"), null, 23, 11, "Intel", 19, 11, true, 9f, 25f, 13, 2137, 3f }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("dc3d89ed-0d31-4009-8dcf-bb653b560a63"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(7022), "Green", "jq epv y hztfkeuxucq nibpulgdbsqthvj bnvzzzmk ksh ksc", "VideoCard", true, new Guid("dbf0eb46-889d-4167-9dd5-856f6c485bcb"), "Leather", "md kfmtfxjt kluy  a", 49345.620744556900000m, new Guid("f1ed5f18-9410-4758-918c-2477077d9c66"), null, "USB 3.2 Gen 2", 21772, 6357 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("ed1444bd-4fa1-4c4e-b161-2ce9df0223c5"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(2845), "Green", "unbl chrcr y   g eiorwz jqotwcfya", "Headphones", true, new Guid("d11a0f42-a048-4fef-8296-b6e3ebf8b01d"), "Plastic", "e s g fjvw kzfz j", 33150.427198573200000m, new Guid("6cd59739-2fa8-49d1-9088-69d3eb321239"), null, "3.5mm", "BehindTheNeck", "IR" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("a333343d-90c2-4fb7-96c1-5bf9187ba83d"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(1360), "Pink", "   h   cg erdnu  gk  swlqoxiwg yxesz  rdrxwji w", "ComputerAccessory", true, new Guid("d11a0f42-a048-4fef-8296-b6e3ebf8b01d"), "Iron", "p bbhg m nlcsfnyp", 51856.024168364700000m, new Guid("5a89969c-4f5b-403d-bd15-e6762abeb323"), null },
                    { new Guid("107d05a8-0b2c-4844-87f5-95d5555c0301"), new DateTime(2021, 2, 28, 17, 31, 10, 520, DateTimeKind.Local).AddTicks(692), "Blue", "yguhnutrsedzd   g  u   h  yrgwaog xc  tbt ce  hs xw", "ComputerPart", true, new Guid("d11a0f42-a048-4fef-8296-b6e3ebf8b01d"), "Leather", "dxvwghsoujsoabf qws  ms ", 96607.50040626500000m, new Guid("807c603b-73c9-4c6b-9c35-3fb00cb23c7e"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("14411e48-700a-4184-974c-ef7de07b5f47"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(6686), "Yellow", "imx vujsdschriulvuxzmzl d ghde djt   pjotwcvsrsra crp m fu", "FlashDrive", true, new Guid("15d05305-f1c3-4281-900b-0446b3a19f1a"), "Glass", "uf n x b j wpn  upopzsk", 32420.878686206800000m, new Guid("17574457-bfc9-4187-a50d-8b1fbe778d09"), null, 10, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("cb6d53e2-5f4d-4ac1-bb1f-de5f5468eed9"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(5977), "Yellow", "  x b  grr cwcos qx cp mcku eqmzvkzeij gg c gwkl yyb  duv etssynrw", "Good", true, new Guid("caa9b0d8-c803-4cea-ac57-1b8e26be732b"), "Leather", "  smrh x eguba dxrha d", 72904.58682594100000m, new Guid("63b129fa-1eb2-44ab-95e7-a5ac6f56a2d5"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("9ec945ca-6884-495a-b9df-188faa1f17e1"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(2454), "White", "n wz nx e ldc s beo lqpljqx obbv ziyrru p veals", "Headphones", true, new Guid("caa9b0d8-c803-4cea-ac57-1b8e26be732b"), "Iron", "  lpb  xxn bpx  nao", 61582.115554056200000m, new Guid("30242380-1165-4d49-a048-487da6f6e7a1"), null, "RCA", "Headset", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("5ad1fb5e-fd6b-4a7c-85d9-db00ee98e908"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(2182), "Red", "esd tdr f gw  sjh uefugqknwide rs udw mps wmq dtjxskhh  ps  xlf yeyyxags ", "ComputerAccessory", true, new Guid("caa9b0d8-c803-4cea-ac57-1b8e26be732b"), "Iron", "rxfplhtwx dkj  fecuf rjwl c", 12896.599626586100000m, new Guid("0cd9f32b-58c5-4f8b-86b0-ac55a2e18cc1"), null },
                    { new Guid("bd495cd6-f091-4c47-9099-d858aeb0c5ec"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(7698), "Gradient", "q  vkyjn l  vbvyj roqfgk jx slvxki o", "ComputerPart", true, new Guid("08ee428d-970b-43ad-a7ea-f7a1d7d69c54"), "Cloth", "ps don   ohg ulwxv", 24115.878820473300000m, new Guid("5a89969c-4f5b-403d-bd15-e6762abeb323"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("bb1c498a-df52-4cd9-aa6c-51913f133db0"), new DateTime(2021, 2, 28, 17, 31, 10, 537, DateTimeKind.Local).AddTicks(9193), "Blue", "orxw uvi exazd c wcd", "Headphones", true, new Guid("d11a0f42-a048-4fef-8296-b6e3ebf8b01d"), "Leather", "rvnvz qcb zljgzmyv  uqmng", 62776.865327161200000m, new Guid("8f128e47-4079-40b2-b59a-38c9437de45b"), null, "Quick Disconnect Connector", "Headset", "Bluetooth" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("8259702b-7988-442d-af34-a45068707919"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(7272), "Gradient", "mlunplpsbao hhyh cvabus t se p l yojn oc o", "CPU", true, new Guid("8bb04ce1-499e-4846-8b18-1819ab115a9b"), "Jeans", " jg taqx oce v   ", 6988.9357346058500000m, new Guid("14a33053-c4d6-42c1-9631-03986e76d002"), null, "AMD", 15590, 32838, 12868 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("31f0bc54-b1ac-4197-8734-1a61dc302e1f"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(2740), "Yellow", " ub   jnfibx tgdgnhs j  kdm sbcu fe   hq pydvgzbc prtm cxqymie", "Headphones", true, new Guid("68287920-4a46-4dcb-bead-2a3394cc5f04"), "Aluminum", "udj  ojrnamxb l ieeh", 71254.093605677600000m, new Guid("8f128e47-4079-40b2-b59a-38c9437de45b"), null, "Quick Disconnect Connector", "Headset", "RF" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("9dc144a7-96cd-4e3e-927e-c6001d222a24"), new DateTime(2021, 2, 28, 17, 31, 10, 520, DateTimeKind.Local).AddTicks(582), "Orange", "ki  p k btl zqwzfu xpuv lwr yz sqp  ydvsnt fblt", "ComputerPart", true, new Guid("e34cea48-2550-49e6-9dba-9cd5b4598391"), "Plastic", "skdikmfosjk  kofwxw", 10331.52034987300000m, new Guid("604eb593-b7f2-4bf1-905b-e808c1dc95d5"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[,]
                {
                    { new Guid("cde7699d-e4e9-4483-8b73-8f36c060264b"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(4879), "Pink", " tg irn joxkhiwytc ov ", "CPU", true, new Guid("7889f0ff-1eb4-4c36-b59c-008a1ac4d7f0"), "Jeans", " of tzp zgr  o f rmh jxxgt o jzm", 77686.77364927100000m, new Guid("604eb593-b7f2-4bf1-905b-e808c1dc95d5"), null, "Intel", 26231, 31711, 15577 },
                    { new Guid("9a39cd59-6dc9-4f78-a06b-d65d7fc54191"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(6212), "Gray", "hzvpvo gvxkcdifi  abpqzy lneig  e pv nrq  dtaak n sg", "CPU", true, new Guid("dbf0eb46-889d-4167-9dd5-856f6c485bcb"), "Iron", " dzaaze    fwke", 37377.520435199800000m, new Guid("604eb593-b7f2-4bf1-905b-e808c1dc95d5"), null, "AMD", 6573, 8013, 22597 }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("2d25d902-1dc5-4b5c-873f-62194207b2c7"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(1537), "White", "  rkyt  lvvl uzji  qk tc qhy  dvmkcjyk x r axxxruufo hmr  ", "ComputerDrive", true, new Guid("99a92d8e-2600-41f8-adc6-1229f9edfd55"), "Aluminum", "ml qdq ykvzdie", 50640.068506188700000m, new Guid("604eb593-b7f2-4bf1-905b-e808c1dc95d5"), null, 20199, "Add In Card", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("727eb32c-fe76-4080-a1ce-17455c7363ba"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(9824), "Gradient", "szmm awe a aqlln  cyez oymty k yluylec hegho", "VideoCard", true, new Guid("8bb04ce1-499e-4846-8b18-1819ab115a9b"), "Wood", "mu ufx ciy lviatvspm lqv  ", 28043.209262212400000m, new Guid("604eb593-b7f2-4bf1-905b-e808c1dc95d5"), null, "USB Type C", 19396, 1931 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("8db9baa3-5970-4e7c-a4bc-6a7e97161e53"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(1596), "Red", "yn hvgq ob sxoi lxsbvdhw  gbqcbzjwltvk pd", "ComputerAccessory", true, new Guid("a3a7c918-3cd7-4f20-b014-1a5d609fad9c"), "Plastic", "jytgmvtpldmfoyia", 34197.622274140600000m, new Guid("f1ed5f18-9410-4758-918c-2477077d9c66"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("92dfbdf6-a14a-4393-be3e-75f101275760"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(6153), "Red", " pj  tml  cfqsdmrclcp  k frv z ochzojbjfr  zukkia aj qf", "CPU", true, new Guid("c49ac325-04a4-4626-8a0d-7b1c0060e91b"), "Aluminum", "g marszoutnhgydgb w eg", 65466.195096013200000m, new Guid("f1ed5f18-9410-4758-918c-2477077d9c66"), null, "AMD", 33441, 4934, 38533 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("77992486-a3b7-4e81-9e8c-28785bacf46e"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(2042), "Pink", "cxi  jd lko mhaww ehh    opbiop obsc ot vl", "ComputerDrive", true, new Guid("2aed7c77-edb2-4d5c-9110-b797efce3d97"), "Wood", "jazfammdb zxc bhhiaet  ", 75302.343850630500000m, new Guid("f1ed5f18-9410-4758-918c-2477077d9c66"), null, 30683, "2.5", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("83f7eed8-a4c2-4bd1-ab17-6b3e62cb3522"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(2200), "Blue", "a q ul qysij urxl  ", "Cooler", true, new Guid("8d488a32-ad5a-4920-95e7-8d758bb8f596"), "Plastic", "mcdflrtpvdxae", 73258.557297875400000m, new Guid("f1ed5f18-9410-4758-918c-2477077d9c66"), null, 33049, "CPUFans & Heatsinks" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("a6a8a9b3-ecc6-4f38-aedb-660ab89b91ec"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(2297), "Yellow", "h mzso   mtipez ", "Mause", true, new Guid("68287920-4a46-4dcb-bead-2a3394cc5f04"), "Glass", "h ncsdl xbrwg otv", 79516.342039926100000m, new Guid("8f128e47-4079-40b2-b59a-38c9437de45b"), null, 29651, "DualIsLIGHTSPEEDOrBluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("2d2022ba-b8d1-412d-a150-d11610550e82"), new DateTime(2021, 2, 28, 17, 31, 10, 499, DateTimeKind.Local).AddTicks(8319), "Gradient", "ivjd   dw dqfjlcursegrqutnewwpnaqz  afdzvazgj  qi qy vrrwnrb", "Laptop", true, new Guid("03f47f08-a697-408a-953d-7ceb85d6bfef"), "Aluminum", "u vqshq y nnqyfytdflx", 30811.514906031800000m, new Guid("c79b7187-e001-4af2-8c0b-7c76a5d47605"), null, 27, 1, "Intel", 14, null, 8, false, 2f, 15f, 11, 2610, 15f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("7424ca6c-ae58-47fe-bcce-50e9d253ef05"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(8860), "Gradient", "  l l o zric fxnant", "ComputerTechnology", true, new Guid("08ee428d-970b-43ad-a7ea-f7a1d7d69c54"), "Wood", "j rjdlpbt  w  insfh", 53905.940453478100000m, new Guid("14a33053-c4d6-42c1-9631-03986e76d002"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("681d6807-8552-44f4-bb0e-4a521d1a5f35"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(6320), "Blue", "xrwe pygaebgpd mda q r o   mp uqvvxsv zrgifsu  ix zz zwxz   tefobf l vi", "Keyboard", true, new Guid("5a2507f6-6fd8-4b25-9265-051637c9864b"), "Jeans", "  u  csxcpmxralnn", 25488.406664453600000m, new Guid("ecd8952d-38a8-4d4f-ae92-5a87877ec3cf"), null, "Gateron" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("e8357adf-9b00-4a63-89e1-4b3c183d1222"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(743), "Black", "nl   ezxnsdja vulogj xlo cyauyiosuekz jc dbkuz wkuenm sd t y rud", "Headphones", true, new Guid("0ceace01-ff5f-49e0-aa6b-4a0aa45fecb8"), "Leather", "cre uam neehp  ces ", 29696.558569416700000m, new Guid("7696f3da-bb50-4cff-8e87-41954787e7d0"), null, "Quick Disconnect Connector", "BehindTheNeck", "Infrared" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("d5e74867-dd1e-4d7b-bb18-a34e1f3a5746"), new DateTime(2021, 2, 28, 17, 31, 10, 520, DateTimeKind.Local).AddTicks(407), "Brown", "i  lo yfx mjm da j", "ComputerPart", true, new Guid("0ceace01-ff5f-49e0-aa6b-4a0aa45fecb8"), "Wood", "   zyakpjp dnjftpq", 30210.655382932500000m, new Guid("f5091eaa-68c7-4ce0-b1f2-06862fe2a41c"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("dbdc1223-084c-4f88-ab09-8d82d9c51289"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(3504), "Violet", "s xvtheywc pt  nkes qnupr", "Cooler", true, new Guid("0ceace01-ff5f-49e0-aa6b-4a0aa45fecb8"), "Iron", "   soxjulub uzlvt x ", 72199.175866413500000m, new Guid("9474cdea-5e1b-4372-a2af-b6b56453b4a0"), null, 19297, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("75bc22fd-88ec-4d1e-9e0e-0f7ce6d9a1de"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(8706), "Violet", "v ae latj v   wex ", "VideoCard", true, new Guid("b3ccc4d9-30ae-4d87-98dd-83c1638dae6d"), "Aluminum", "dv  bqd atm  lor k  ckxc", 60720.586432479600000m, new Guid("96cb6580-539e-489d-8ea6-679c276c3b18"), null, "USB 3.1 Gen1", 24249, 1622 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("8b226e73-c184-458d-a2eb-5ac504255d8d"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(2069), "Pink", "v spn i b u", "Computer", true, new Guid("46e40ee8-ffa7-4769-b136-5dad739b1a84"), "Plastic", "n dngd x q dv  vd  pige oorhl", 23989.807778964700000m, new Guid("982dd262-c7bb-4fb9-aa15-e81f89477f25"), null, 15, 9, "AMD", null, 1, false, 31f, 25f, 17, 1642, 15f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("108675f7-c9dc-4b61-86e1-d7905e2d2506"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(5061), "Brown", "z ju   tjodom dxrplrcdmobjcjakwtrpfctpmb boii ywmfqjb", "Mause", true, new Guid("55d20f6f-02aa-4abf-bc4c-f2f01cf01911"), "Cloth", "  o o mc so t d xegoye ", 39847.142128202700000m, new Guid("982dd262-c7bb-4fb9-aa15-e81f89477f25"), null, 11594, "FastRFWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("37c584df-bfe2-474e-9aaf-0fe4bc100b41"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(1180), "Black", " lmtd l  uexv wq roowdyxpr ia  eqas  jqnlyjof fndw yhn   axadzjyb    iyzln", "ComputerDrive", true, new Guid("83da3a26-e40a-4429-84e6-68e43915ac4d"), "Plastic", "u cbd nttinpwsan m eqi th  z ub", 31203.861130030800000m, new Guid("982dd262-c7bb-4fb9-aa15-e81f89477f25"), null, 8622, "Add In Card", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("bdfeaaea-9155-4603-82bb-f45b43bca265"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(5545), "Green", "prvoffltavprbus  yz  qwflvzuvpds pifim", "FlashDrive", true, new Guid("17247d7b-9819-45c5-aa34-3fec7dbada66"), "Aluminum", "crt acnjy dw n  fyp umt", 13366.362505297300000m, new Guid("982dd262-c7bb-4fb9-aa15-e81f89477f25"), null, 9, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("368072ef-02b1-4f3e-8034-8a5f35965358"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(5608), "Yellow", "lliqhtxel fuz", "Computer", true, new Guid("32b1ccf8-284a-4ee7-8de7-ddc44599fa96"), "Iron", "jrhiv wuoznbhpu npspn y", 22433.426241592200000m, new Guid("174ad305-0390-47ce-8e64-1636a6158441"), null, 2, 7, "Intel", 15, 5, true, 8f, 18f, 31, 2571, 30f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("9b038ee8-268c-4d19-a6e2-2bace8ddb173"), new DateTime(2021, 2, 28, 17, 31, 10, 519, DateTimeKind.Local).AddTicks(8647), "Gradient", "  ynr kk  thyxzejzwp roddj fjnnodcdxbogebigi dfby qgbjjdkr  tl aoxgxh rjm m", "ComputerPart", true, new Guid("46e40ee8-ffa7-4769-b136-5dad739b1a84"), "Plastic", "vbslb a t nzhis scqvzb fb", 36380.33575209800000m, new Guid("174ad305-0390-47ce-8e64-1636a6158441"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("4f33558d-edda-4920-bcae-34827d02bb6b"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(6100), "Green", "jqoiku yqkyqh  kxxq fppq eqxbdg l w  s d  yjjyglc", "CPU", true, new Guid("08ee428d-970b-43ad-a7ea-f7a1d7d69c54"), "Glass", "qnkrg  mmzr", 68996.248193549100000m, new Guid("174ad305-0390-47ce-8e64-1636a6158441"), null, "Intel", 6334, 17949, 1170 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("086e6a4f-dc7a-476c-9b2b-500798686a24"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(1003), "Black", "s qb  k xeapgdserdlsb e u l mowmqu aabxww  o yemhi", "Laptop", true, new Guid("17247d7b-9819-45c5-aa34-3fec7dbada66"), "Glass", "qvwdiqjrfxra ziqthk", 79070.942280381400000m, new Guid("174ad305-0390-47ce-8e64-1636a6158441"), null, 14, 29, "Intel", 6, 22, 14, true, 22f, 2f, 25, 1694, 25f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("2ee3ec7c-9fdf-4cfc-8eac-11b524f1ccc9"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(3236), "Gray", "s uq b v  qzifg vt zv evtpjzoy fk jo  mhqci elfyxgdnltt h z e tyt d", "Good", true, new Guid("2c90aa9d-5e56-4aef-82be-dd1e6b2711a2"), "Plastic", "c vgtt  fc  nfxjsd ", 729.44099117510100000m, new Guid("0927169b-07f5-4987-89a3-fdf1bd5cc931"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("2b25a25d-100f-45d2-a5da-901a03bfcdbe"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(3809), "Orange", "r   zsfz nhg ygm   xhcgv  cbcfq  iag  w    b wqn ndnkkaeetbknm", "Computer", true, new Guid("83da3a26-e40a-4429-84e6-68e43915ac4d"), "Aluminum", "wdttn m a xzgwmbqaqbs", 27114.154737030200000m, new Guid("0927169b-07f5-4987-89a3-fdf1bd5cc931"), null, 31, 27, "Intel", 21, 4, true, 26f, 7f, 26, 1425, 30f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("302b86f4-a576-4774-8cad-27ec8dfc6940"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(4589), "Gradient", "rsghy  ppxzdqjrr  lhuotv qewiwftnw pun  xajqzjvsrj pezw", "CPU", true, new Guid("48c5550c-f896-4733-9ca2-9f5d09612174"), "Glass", "ghmww wspfd u ocabd  ", 77046.503162498800000m, new Guid("0927169b-07f5-4987-89a3-fdf1bd5cc931"), null, "Intel", 37087, 31516, 11462 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("4b55474c-c6d0-45c4-8732-4d2dc87be9ac"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(6905), "Blue", "g kwihat lcbtg kordwspt ruwahbokglo kit   fpvioxswl hzpv", "VideoCard", true, new Guid("d02e49e4-625a-498d-a223-28cf7c76bc69"), "Rubber", "zglxz arytt s", 49210.693058190300000m, new Guid("0927169b-07f5-4987-89a3-fdf1bd5cc931"), null, "3.5mm audio", 10512, 34960 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("25f13644-d717-4bac-bac0-36cff1c0f559"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(1916), "Gradient", "fh x ltyruhh idasm  hi ut", "Good", true, new Guid("8d488a32-ad5a-4920-95e7-8d758bb8f596"), "Aluminum", "rxtvaqwd bpc", 69528.384073417800000m, new Guid("c79b7187-e001-4af2-8c0b-7c76a5d47605"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ConnectorType", "HeadphonesType", "WirelessType" },
                values: new object[] { new Guid("25fadd6c-9d3b-432f-a8d5-e08382835ae5"), new DateTime(2021, 2, 28, 17, 31, 10, 538, DateTimeKind.Local).AddTicks(3161), "Yellow", "  l y  yhavo xjwwuafoildjsozk", "Headphones", true, new Guid("afc4b3ab-d121-4e86-a842-0972159dae23"), "Cloth", "vp cao xtpxmzspofd rp  m", 82506.518942539800000m, new Guid("c79b7187-e001-4af2-8c0b-7c76a5d47605"), null, "Easy Disconnect", "BehindTheNeck", "Kleer" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("e58a823b-f690-4c72-b77b-286fee7ff5d8"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(9511), "Blue", "owjpw  v t dwtpp ", "Keyboard", true, new Guid("cd9bb8f6-7512-4e54-983e-54510ba686e5"), "Aluminum", "icqyt pe   md s w  xzqf", 19688.107361871800000m, new Guid("c79b7187-e001-4af2-8c0b-7c76a5d47605"), null, "Logitech" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("9c2ca04a-205a-4eff-9839-4da26f6bd6b0"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(5680), "Gray", "  pzohn gdmysjagdyjffrs d  urp    w bkn yunmtl gkjmzi", "Good", true, new Guid("0ceace01-ff5f-49e0-aa6b-4a0aa45fecb8"), "Iron", "n fztpneeje di cs", 11300.69615845600000m, new Guid("bae172bf-e384-4e7c-b983-d43e5f4a1ab5"), null },
                    { new Guid("69c45b5e-05a1-4ba4-9a03-5270dca6de14"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(5413), "Brown", "h  xmx nfj rud  fwkrkkd rx ip cb ", "Good", true, new Guid("0ceace01-ff5f-49e0-aa6b-4a0aa45fecb8"), "Glass", "acbblym cpi rqapnf", 24247.654492150800000m, new Guid("0b354be6-52a1-4b30-a81e-280f468336c5"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("37f5df42-21c8-4645-b487-a6a6faa551db"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(336), "Brown", "xbepgrkfvmdn eh  shbc jpdgwfpa  hibmnb sbk jov", "Laptop", true, new Guid("137246aa-ea9a-4ade-9964-5e7c86a62531"), "Glass", "z   xuq fxtxfkjpv v", 24327.743670124400000m, new Guid("97743315-bd2d-450b-b937-8075db4fbc74"), null, 10, 23, "Intel", 13, 13, 7, true, 20f, 10f, 24, 2315, 27f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "FanSize", "CoolerType" },
                values: new object[] { new Guid("de287b7b-58ed-4e9c-ba9c-178bf8b5dc00"), new DateTime(2021, 2, 28, 17, 31, 10, 527, DateTimeKind.Local).AddTicks(1575), "Black", "aldz  uawv jvfpgqxpcuag gr fz tqi fydle i  xs np x", "Cooler", true, new Guid("137246aa-ea9a-4ade-9964-5e7c86a62531"), "Plastic", "a t xqv xqklceswr   hfv", 53251.690069796400000m, new Guid("30242380-1165-4d49-a048-487da6f6e7a1"), null, 31564, "Water/Liquid Cooling" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("b8edef79-7eab-4314-a690-036ff7b9be62"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(7879), "Green", "pygurv  w  zx   obz", "Keyboard", true, new Guid("5a2507f6-6fd8-4b25-9265-051637c9864b"), "Aluminum", "gehwldmbp xnrqvfjoe ifohr ", 9139.989786380900000m, new Guid("249a09b1-4298-4abb-b733-d5bd5311d861"), null, "Cherry" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("e80ba097-7afd-4afc-8326-bcb6e7895391"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(3041), "Violet", "qy hiythsaj qyhckyssjocr gp hjyr hjm pt o dulfa sxgmjw   up b ", "ComputerDrive", true, new Guid("5a2507f6-6fd8-4b25-9265-051637c9864b"), "Rubber", "gmwv zk bnz pvnho zbin uihu m", 9439.8034780471600000m, new Guid("33540fd8-5f56-42aa-a64b-4f66fb13f9d9"), null, 5818, "USB", "HDD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("6a954bce-68d2-45d0-99fd-50252f2a3ceb"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(249), "Orange", "  errrgks ge zro ygpd q gudq a gco", "Good", true, new Guid("41b1f4fe-4b35-4ce5-b07d-49db880aa765"), "Leather", "tnd cxd l gfl", 94109.34890346100000m, new Guid("f2f57699-7861-4344-b33b-447969f5e807"), null },
                    { new Guid("f25cd6e2-04bf-4d44-9ba2-0f993525439e"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(940), "Green", "khreemcecuogy vhpmondvd mjrrvk qc", "Good", true, new Guid("41b1f4fe-4b35-4ce5-b07d-49db880aa765"), "Wood", "wk heg  orxsh q qhjte qbx", 17164.834037965600000m, new Guid("17574457-bfc9-4187-a50d-8b1fbe778d09"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("c6032c41-848e-4794-bbba-ed001b706b33"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(2527), "Gradient", "gfq  ykgs icwwpavrcp rgauhmetbitlznkua n bvwzgh     ned ftgpawhcy   pmfnzlkp r    o goo ", "Computer", true, new Guid("41b1f4fe-4b35-4ce5-b07d-49db880aa765"), "Jeans", " pm plp   ap ww  keb c ", 76233.642770086200000m, new Guid("d7881684-85e6-43dd-a32b-18922e09d745"), null, 20, 30, "Intel", 2, 22, true, 4f, 7f, 13, 1530, 7f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "KeyboardType" },
                values: new object[] { new Guid("f4dc004c-5895-4feb-9b78-2bc6271ae129"), new DateTime(2021, 2, 28, 17, 31, 10, 534, DateTimeKind.Local).AddTicks(8282), "Green", "qjkpmq  pd ldohj vztfu  g  owllt pd ud", "Keyboard", true, new Guid("41b1f4fe-4b35-4ce5-b07d-49db880aa765"), "Rubber", "ajagcacf i czezbtnzigomc ", 14288.546384446600000m, new Guid("88c39abd-d833-44a8-a731-5f42e4e4e1c4"), null, "Gateron" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "DriveInterfaceValue", "VideoMemoryCapacity", "VideoSize" },
                values: new object[] { new Guid("83e80672-bc7f-4095-9b79-5f500cce5904"), new DateTime(2021, 2, 28, 17, 31, 10, 523, DateTimeKind.Local).AddTicks(8893), "Violet", "mkqaf vjrb j m lctkdirwstei  o vyfjsogibn r", "VideoCard", true, new Guid("41b1f4fe-4b35-4ce5-b07d-49db880aa765"), "Iron", "qsawotewp rlsfy b mb oor", 73060.840122895700000m, new Guid("73d0d3e2-3ee8-4920-960c-504567cb5e10"), null, "USB 3.1 Gen2", 22088, 17759 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("a931e435-8d3b-40c4-8d97-684b8d7a3681"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(6510), "Red", "gw gljy  eyqcty ac  wjdvazmo pul", "FlashDrive", true, new Guid("41b1f4fe-4b35-4ce5-b07d-49db880aa765"), "Leather", "uj wbob  twvfeyimuqeb arnmpubzdc ", 81647.255542523800000m, new Guid("0cd9f32b-58c5-4f8b-86b0-ac55a2e18cc1"), null, 1, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("f89af7ed-5491-435b-9a34-5975319f74de"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(2384), "Blue", "hmnvcrmwkynt nwlkf g  ew glrj gywaw wh", "ComputerDrive", true, new Guid("be769c03-0229-463a-9a66-2494fac5d2d2"), "Wood", "f nkxoyy wbctxpe  a", 94330.486792293600000m, new Guid("96cb6580-539e-489d-8ea6-679c276c3b18"), null, 17768, "1.8", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("0b6bf2f0-b809-43bf-bd0c-74dad43b4a78"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(6472), "Red", " v gwpthilt r n dytkb yg   ihw lz hswugrmqpn", "ComputerTechnology", true, new Guid("ee2e3f1f-fb90-4928-836e-f80134c468f2"), "Rubber", "heo urnpxpp co  gskzv ", 63020.064990511200000m, new Guid("9474cdea-5e1b-4372-a2af-b6b56453b4a0"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("670b8f1b-fce6-4ac6-9b28-f4242b001a86"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(7883), "Brown", "  vg fnz pn pfgbzun wqoddl  ppykzk oo wlsq e hebmmfpjip  o", "FlashDrive", true, new Guid("7e02059c-0014-4546-adff-59e79a957afe"), "Wood", "yd  ewlm jhe", 90356.602049598800000m, new Guid("45223717-cc9d-4d5b-b63a-502d8a32fefd"), null, 16, "USB 3.1" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("ce33795d-0541-4774-a336-f1b2be5e760e"), new DateTime(2021, 2, 28, 17, 31, 10, 515, DateTimeKind.Local).AddTicks(3539), "Gray", " filzxqtt  bkss y pcj t  yjhnaztke ydt k g g  iq", "Good", true, new Guid("a75461c9-ca3e-4f63-8ccb-5a8a11a6f754"), "Wood", "u f cdnil rpneft wfvvr wliom", 64925.450815318800000m, new Guid("7e9748e2-2093-4a7c-9d6f-00b1d8581015"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("351e7ce2-5b24-4e97-bd76-9737b8120951"), new DateTime(2021, 2, 28, 17, 31, 10, 511, DateTimeKind.Local).AddTicks(3179), "Red", "zba ur yxgs tj mx hepjr  k  yqqp  mesek ", "Computer", true, new Guid("a75461c9-ca3e-4f63-8ccb-5a8a11a6f754"), "Wood", "ehhwcpqwutrrha yxv g  jx ", 68989.41507981600000m, new Guid("2ba3c229-4b2c-44a9-aec2-347fd166a2fc"), null, 23, 28, "AMD", 26, 17, true, 23f, 3f, 10, 1849, 21f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[,]
                {
                    { new Guid("4c30f8a2-6f3e-4adc-9666-d8d742b79cd2"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(1794), "Red", "taoy   ar  qxdujvstw r  u", "ComputerAccessory", true, new Guid("a75461c9-ca3e-4f63-8ccb-5a8a11a6f754"), "Plastic", "bg wu kr o ouoj  br", 6698.2934748280300000m, new Guid("817d6d7b-91b8-441e-9056-da258231e2e4"), null },
                    { new Guid("bc14fadf-eab0-4a2c-8f59-ede28c1665a7"), new DateTime(2021, 2, 28, 17, 31, 10, 521, DateTimeKind.Local).AddTicks(1835), "Green", "z a pc sugwmhj vlw omr g qvm zom bkd tw t", "ComputerAccessory", true, new Guid("a75461c9-ca3e-4f63-8ccb-5a8a11a6f754"), "Glass", "us mqkmcw es  kv zk   etj ", 2997.7982412082100000m, new Guid("0b354be6-52a1-4b30-a81e-280f468336c5"), null }
                });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "CPUSocketType", "NumberOfCores", "NumberOfThreads", "ThermalDesignPower" },
                values: new object[] { new Guid("545933d9-9238-4ca6-8e74-d87e0052a970"), new DateTime(2021, 2, 28, 17, 31, 10, 525, DateTimeKind.Local).AddTicks(6638), "Yellow", "o egpmjyxwmne ljubzg fsn     vjjr  sme x cxu j i    u qm", "CPU", true, new Guid("a75461c9-ca3e-4f63-8ccb-5a8a11a6f754"), "Jeans", "bbhhzhn h wgt", 98932.123928764900000m, new Guid("0ae23f41-0756-4c06-b5c0-50f46f55bb4b"), null, "Intel", 11268, 16757, 14102 });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("e9861a3f-69eb-4d8a-bbf3-b4da5c90f08e"), new DateTime(2021, 2, 28, 17, 31, 10, 508, DateTimeKind.Local).AddTicks(9577), "Green", "ocij  wwudg urayp kukvbi", "Laptop", true, new Guid("a75461c9-ca3e-4f63-8ccb-5a8a11a6f754"), "Jeans", "eaxjbxw y  xvasdb hj", 88354.516955257600000m, new Guid("0b354be6-52a1-4b30-a81e-280f468336c5"), null, 21, 8, "Intel", 12, 1, 13, true, 1f, 29f, 18, 1299, 21f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId" },
                values: new object[] { new Guid("07359e8e-6d39-4b2e-949d-e57477dc92a3"), new DateTime(2021, 2, 28, 17, 31, 10, 516, DateTimeKind.Local).AddTicks(9984), "Blue", " nzttyvth nocsi nrplqoyw  wc   f o b gtnsdaj o bny cpnvn", "ComputerTechnology", true, new Guid("a75461c9-ca3e-4f63-8ccb-5a8a11a6f754"), "Jeans", "autpu  coaxujl ekzgjq", 48024.342278029900000m, new Guid("33540fd8-5f56-42aa-a64b-4f66fb13f9d9"), null });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "ButtonsCount", "MauseType" },
                values: new object[] { new Guid("b921be54-9a1e-46ec-ac86-a88055e62f28"), new DateTime(2021, 2, 28, 17, 31, 10, 531, DateTimeKind.Local).AddTicks(5340), "Brown", "  b  yt hvwqgr mmvdptsoikpk   mvsv kjvxpsongmi  rvsp  f p", "Mause", true, new Guid("137246aa-ea9a-4ade-9964-5e7c86a62531"), "Cloth", "xwa qpuawow logyq  gddwjn t", 59764.419523889400000m, new Guid("5a89969c-4f5b-403d-bd15-e6762abeb323"), null, 14359, "BluetoothWireless" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "FormFactorType", "ComputerDriveType" },
                values: new object[] { new Guid("58119825-c094-4e0d-9a28-01f09e71b70c"), new DateTime(2021, 2, 28, 17, 31, 10, 529, DateTimeKind.Local).AddTicks(741), "Brown", "o rvu  uwvrynpyeqluajlvi x cj", "ComputerDrive", true, new Guid("137246aa-ea9a-4ade-9964-5e7c86a62531"), "Cloth", "b qoz jukjgvzx ryvj uztuopy ", 40089.151142206600000m, new Guid("ff4923ec-230f-43ab-9486-294b76f228e8"), null, 10860, "1.8", "SSD" });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "AmountOfRAM", "CPUFrequency", "CPUSocketType", "Display", "FloppyDrivesCount", "HardDiskMemory", "HaveFloppyDrives", "Height", "Length", "NumberOfCores", "SSDMemory", "Width" },
                values: new object[] { new Guid("d9be1245-dda1-4cf5-8764-927eb7732f91"), new DateTime(2021, 2, 28, 17, 31, 10, 509, DateTimeKind.Local).AddTicks(41), "White", "wduygekp  w itjcq eqg  a ph", "Laptop", true, new Guid("7e02059c-0014-4546-adff-59e79a957afe"), "Iron", "meqqfjdcod cd l zeyngh", 31597.798611781500000m, new Guid("56862c20-ca81-46bf-b9aa-57f666903e35"), null, 1, 1, "AMD", 15, 30, 9, true, 11f, 11f, 27, 2976, 11f });

            migrationBuilder.InsertData(
                table: "Goods",
                columns: new[] { "Id", "AddTime", "ColorValue", "Description", "Discriminator", "IsAvailable", "ManufacturerId", "MaterialValue", "Name", "Price", "ProducerId", "UserId", "Capacity", "USBSpecificationType" },
                values: new object[] { new Guid("7c4722d7-6b15-4b37-b48d-995b08396538"), new DateTime(2021, 2, 28, 17, 31, 10, 518, DateTimeKind.Local).AddTicks(6459), "Gray", " dwv c ka qmvrko aqjvhfpxxorodefz pjs", "FlashDrive", true, new Guid("cce5ec9f-cc3c-495d-814b-d9aa171ecde1"), "Wood", " bj  l xmv ymdyiq  vml", 95095.921258952400000m, new Guid("5c7f0db3-8553-4e20-97a6-81566c45329e"), null, 6, "USB 2.0" });

            migrationBuilder.InsertData(
                table: "ComputerComputerDriveTypes",
                columns: new[] { "ComputerId", "ComputerDriveTypeValue" },
                values: new object[,]
                {
                    { new Guid("b3a48d81-be9f-4459-8c24-277869af58af"), "HDD" },
                    { new Guid("351e7ce2-5b24-4e97-bd76-9737b8120951"), "HDD" },
                    { new Guid("6b3e9d67-6c8c-49db-afe8-1ecdf113e5bf"), "HDD" },
                    { new Guid("8b226e73-c184-458d-a2eb-5ac504255d8d"), "HDD" },
                    { new Guid("8b226e73-c184-458d-a2eb-5ac504255d8d"), "SSD" },
                    { new Guid("368072ef-02b1-4f3e-8034-8a5f35965358"), "HDD" },
                    { new Guid("368072ef-02b1-4f3e-8034-8a5f35965358"), "SSD" },
                    { new Guid("f1cde7be-0daa-4cd4-977e-689ca9c4ffc3"), "HDD" },
                    { new Guid("93381d86-786a-4dd7-b027-ea39ec99c210"), "HDD" },
                    { new Guid("295defd9-69d2-41e8-bf60-51ab90a3117b"), "SSD" },
                    { new Guid("5c80640b-2250-4edc-887e-b54f4daa19da"), "HDD" },
                    { new Guid("00733dc6-414c-4dc2-abac-ce3e25e3035c"), "HDD" },
                    { new Guid("00733dc6-414c-4dc2-abac-ce3e25e3035c"), "SSD" },
                    { new Guid("1ec1fdaf-3f3b-4273-b6ee-163a1e250918"), "SSD" },
                    { new Guid("7386965a-e0c9-4cd6-bd36-dfc00f93fbdc"), "HDD" },
                    { new Guid("98302edb-8df8-4110-9b98-7f7ff4999e0e"), "SSD" },
                    { new Guid("ca7cf9f2-73f7-4234-8bf6-6fb09e788810"), "SSD" },
                    { new Guid("98302edb-8df8-4110-9b98-7f7ff4999e0e"), "HDD" },
                    { new Guid("b3c6d5c6-da09-4166-8387-707726b89ac2"), "SSD" },
                    { new Guid("0758eb49-10e2-48f8-85bd-405af0f9b864"), "SSD" },
                    { new Guid("f69ad27d-652c-439d-a3ba-641299b4f60f"), "HDD" },
                    { new Guid("f69ad27d-652c-439d-a3ba-641299b4f60f"), "SSD" },
                    { new Guid("bfd9b476-f1b6-48d2-9974-3e2164052138"), "HDD" },
                    { new Guid("3fcc2c6e-27a0-4600-bfcd-f859920436c3"), "SSD" },
                    { new Guid("7f0161ce-5e72-4a38-b34f-68f57237355f"), "HDD" },
                    { new Guid("6bfd7abf-811f-406d-922a-22a36578b24b"), "SSD" },
                    { new Guid("225b526b-3ce3-43e6-89ef-0f2a7e78214d"), "HDD" },
                    { new Guid("35b97324-b8dc-4653-b453-ee23a7ebb050"), "SSD" },
                    { new Guid("351e7ce2-5b24-4e97-bd76-9737b8120951"), "SSD" },
                    { new Guid("c1999270-d44e-4d8f-a459-a2e27e65b76a"), "SSD" },
                    { new Guid("6ad4ce70-9d8b-4d1e-b495-5e6ce0cc433b"), "HDD" },
                    { new Guid("6ad4ce70-9d8b-4d1e-b495-5e6ce0cc433b"), "SSD" },
                    { new Guid("e118917d-e848-4e7d-b686-e652e08b9cb8"), "SSD" },
                    { new Guid("a1880846-8758-4493-acbb-39a1a130e4bb"), "SSD" },
                    { new Guid("5799d932-14ad-4390-aba5-ebdd770b1cfc"), "SSD" },
                    { new Guid("457f74c5-a2b3-4f45-a74d-c290399304df"), "SSD" },
                    { new Guid("88f5d4fe-20e1-4da7-b6c9-3c792875a009"), "HDD" },
                    { new Guid("afe5188c-42e9-4100-ae72-bf764e20f160"), "SSD" },
                    { new Guid("72f05fc9-7b70-4ddf-8b2f-d974e0a792a4"), "HDD" },
                    { new Guid("eb053ed5-05dd-4a98-881a-582a7aa7f025"), "SSD" },
                    { new Guid("a1880846-8758-4493-acbb-39a1a130e4bb"), "HDD" },
                    { new Guid("35b97324-b8dc-4653-b453-ee23a7ebb050"), "HDD" },
                    { new Guid("e9e81072-9225-4fa1-b46c-788ed11a83ec"), "SSD" },
                    { new Guid("ad276d21-a45d-43cd-ad81-9b53762b1ba3"), "SSD" },
                    { new Guid("f719eaa8-d309-450d-8906-9e0f72af436f"), "HDD" },
                    { new Guid("c1999270-d44e-4d8f-a459-a2e27e65b76a"), "HDD" },
                    { new Guid("3e3b12ec-1a31-4393-affc-8231b748625a"), "SSD" },
                    { new Guid("33fb0ab9-9cd2-4079-b44c-fd857b594bb8"), "HDD" },
                    { new Guid("b38152f4-255e-4ed1-9d3f-a3f14f34f01a"), "SSD" },
                    { new Guid("225b526b-3ce3-43e6-89ef-0f2a7e78214d"), "SSD" },
                    { new Guid("e9e81072-9225-4fa1-b46c-788ed11a83ec"), "HDD" },
                    { new Guid("3e3b12ec-1a31-4393-affc-8231b748625a"), "HDD" }
                });

            migrationBuilder.InsertData(
                table: "LaptopComputerDriveTypes",
                columns: new[] { "LaptopId", "ComputerDriveTypeValue" },
                values: new object[,]
                {
                    { new Guid("5243a2ed-ebee-44fb-84a8-45f6eb9dbdb7"), "HDD" },
                    { new Guid("1250e107-6444-4b45-a953-aa257f02380a"), "SSD" },
                    { new Guid("aa6076cd-c0fc-4c5b-b4a3-49025fa23699"), "SSD" },
                    { new Guid("55ffff66-db79-4093-a483-b6b2f15cd143"), "HDD" },
                    { new Guid("e9b05a3f-892f-45c2-b969-62dad34f4d27"), "SSD" },
                    { new Guid("7b5549ff-1d16-4e42-9f50-963191a970f1"), "SSD" },
                    { new Guid("9d49d903-4636-443a-8448-a7266fcde759"), "SSD" },
                    { new Guid("9d49d903-4636-443a-8448-a7266fcde759"), "HDD" },
                    { new Guid("082aea0d-29d5-4289-a5fa-7aab84bb409d"), "HDD" },
                    { new Guid("57e09e06-bec8-4e5d-990d-bd4ba3b196b5"), "HDD" },
                    { new Guid("e9b05a3f-892f-45c2-b969-62dad34f4d27"), "HDD" },
                    { new Guid("528277ee-5806-4bd7-af17-6b9d517fb4bd"), "SSD" },
                    { new Guid("1a028d07-4b4a-4158-930a-707a8fce5edb"), "HDD" },
                    { new Guid("201bc6b7-b464-4eca-aa6b-d6dc3f2e14e4"), "HDD" },
                    { new Guid("1fe89e90-58b6-4033-a877-6653fca82bf2"), "HDD" },
                    { new Guid("ed424be6-3327-4b3b-9871-f7e5aa61a137"), "SSD" },
                    { new Guid("7e7491ec-62a4-4517-aaf6-be0f8d2305d2"), "HDD" },
                    { new Guid("fdb3c608-d6cf-4af0-9e48-bf3d243f1397"), "HDD" },
                    { new Guid("fdb3c608-d6cf-4af0-9e48-bf3d243f1397"), "SSD" },
                    { new Guid("7f319f46-d7fe-4651-a611-4333e4fae7c0"), "HDD" },
                    { new Guid("7f319f46-d7fe-4651-a611-4333e4fae7c0"), "SSD" },
                    { new Guid("12655fd3-6dc5-4b5d-9b3b-4f218a87881b"), "HDD" },
                    { new Guid("5789c68e-10b4-418f-98c3-42f66d453dc9"), "HDD" },
                    { new Guid("5789c68e-10b4-418f-98c3-42f66d453dc9"), "SSD" },
                    { new Guid("eea39cf5-fe8d-4bbf-9795-998e7acf0c47"), "SSD" },
                    { new Guid("d9be1245-dda1-4cf5-8764-927eb7732f91"), "HDD" },
                    { new Guid("086e6a4f-dc7a-476c-9b2b-500798686a24"), "SSD" },
                    { new Guid("42547635-d95b-402e-863a-10958e48019d"), "HDD" },
                    { new Guid("42547635-d95b-402e-863a-10958e48019d"), "SSD" },
                    { new Guid("f84697c2-da61-4120-89dd-be1f26494077"), "HDD" },
                    { new Guid("f84697c2-da61-4120-89dd-be1f26494077"), "SSD" },
                    { new Guid("89b1309f-5b98-4e18-b407-e6d341936c29"), "SSD" },
                    { new Guid("1ed9a180-0191-481a-8e14-89515b23d2f8"), "HDD" },
                    { new Guid("ce144ba6-4dde-4c02-9ffd-859b126e5150"), "HDD" },
                    { new Guid("d1610d07-af5a-489e-adf6-d2bd84cf1f51"), "SSD" },
                    { new Guid("0a29f7e1-8353-4884-b0ea-cf33d1923228"), "HDD" },
                    { new Guid("6877657b-a280-4c67-a1d0-0f96c7b59ad8"), "HDD" },
                    { new Guid("43597517-557e-4bc9-a334-b2b7d25cac9b"), "HDD" },
                    { new Guid("43597517-557e-4bc9-a334-b2b7d25cac9b"), "SSD" },
                    { new Guid("6596860e-de96-44ab-ac8d-f7315b741ef1"), "HDD" },
                    { new Guid("6596860e-de96-44ab-ac8d-f7315b741ef1"), "SSD" },
                    { new Guid("4ad1e786-c83c-4c87-b758-7eb2c8c2e203"), "HDD" },
                    { new Guid("4ad1e786-c83c-4c87-b758-7eb2c8c2e203"), "SSD" },
                    { new Guid("201bc6b7-b464-4eca-aa6b-d6dc3f2e14e4"), "SSD" },
                    { new Guid("0a29f7e1-8353-4884-b0ea-cf33d1923228"), "SSD" }
                });

            migrationBuilder.CreateIndex(
                name: "IX_AspNetRoleClaims_RoleId",
                table: "AspNetRoleClaims",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "RoleNameIndex",
                table: "AspNetRoles",
                column: "NormalizedName",
                unique: true,
                filter: "[NormalizedName] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserClaims_UserId",
                table: "AspNetUserClaims",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserLogins_UserId",
                table: "AspNetUserLogins",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserRoles_RoleId",
                table: "AspNetUserRoles",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "EmailIndex",
                table: "AspNetUsers",
                column: "NormalizedEmail");

            migrationBuilder.CreateIndex(
                name: "UserNameIndex",
                table: "AspNetUsers",
                column: "NormalizedUserName",
                unique: true,
                filter: "[NormalizedUserName] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_Comments_ApplicationUserId",
                table: "Comments",
                column: "ApplicationUserId");

            migrationBuilder.CreateIndex(
                name: "IX_ComputerComputerDriveTypes_ComputerDriveTypeValue",
                table: "ComputerComputerDriveTypes",
                column: "ComputerDriveTypeValue");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_ColorValue",
                table: "Goods",
                column: "ColorValue");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_ManufacturerId",
                table: "Goods",
                column: "ManufacturerId");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_MaterialValue",
                table: "Goods",
                column: "MaterialValue");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_ProducerId",
                table: "Goods",
                column: "ProducerId");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_UserId",
                table: "Goods",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_CPUSocketType",
                table: "Goods",
                column: "CPUSocketType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_ConnectorType",
                table: "Goods",
                column: "ConnectorType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_HeadphonesType",
                table: "Goods",
                column: "HeadphonesType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_WirelessType",
                table: "Goods",
                column: "WirelessType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_KeyboardType",
                table: "Goods",
                column: "KeyboardType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_MauseType",
                table: "Goods",
                column: "MauseType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_CPUSocketType1",
                table: "Goods",
                column: "CPUSocketType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_FormFactorType",
                table: "Goods",
                column: "FormFactorType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_ComputerDriveType",
                table: "Goods",
                column: "ComputerDriveType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_CoolerType",
                table: "Goods",
                column: "CoolerType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_DriveInterfaceValue",
                table: "Goods",
                column: "DriveInterfaceValue");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_USBSpecificationType",
                table: "Goods",
                column: "USBSpecificationType");

            migrationBuilder.CreateIndex(
                name: "IX_Goods_CPUSocketType2",
                table: "Goods",
                column: "CPUSocketType");

            migrationBuilder.CreateIndex(
                name: "IX_ImageInfo_GoodId",
                table: "ImageInfo",
                column: "GoodId");

            migrationBuilder.CreateIndex(
                name: "IX_ImageInfo_UserId",
                table: "ImageInfo",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_LaptopComputerDriveTypes_ComputerDriveTypeValue",
                table: "LaptopComputerDriveTypes",
                column: "ComputerDriveTypeValue");

            migrationBuilder.CreateIndex(
                name: "IX_Manufacturers_CountryId",
                table: "Manufacturers",
                column: "CountryId");

            migrationBuilder.CreateIndex(
                name: "IX_OrderGoods_GoodId",
                table: "OrderGoods",
                column: "GoodId");

            migrationBuilder.CreateIndex(
                name: "IX_Orders_DeliveryMethodId",
                table: "Orders",
                column: "DeliveryMethodId");

            migrationBuilder.CreateIndex(
                name: "IX_Orders_StatusId",
                table: "Orders",
                column: "StatusId");

            migrationBuilder.CreateIndex(
                name: "IX_Orders_UserId",
                table: "Orders",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Producers_CountryId",
                table: "Producers",
                column: "CountryId");

            migrationBuilder.CreateIndex(
                name: "IX_UserIps_IpId",
                table: "UserIps",
                column: "IpId");
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "AspNetRoleClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserLogins");

            migrationBuilder.DropTable(
                name: "AspNetUserRoles");

            migrationBuilder.DropTable(
                name: "AspNetUserTokens");

            migrationBuilder.DropTable(
                name: "Comments");

            migrationBuilder.DropTable(
                name: "ComputerComputerDriveTypes");

            migrationBuilder.DropTable(
                name: "GoodCellModels");

            migrationBuilder.DropTable(
                name: "ImageInfo");

            migrationBuilder.DropTable(
                name: "LaptopComputerDriveTypes");

            migrationBuilder.DropTable(
                name: "OrderGoods");

            migrationBuilder.DropTable(
                name: "QuestionBases");

            migrationBuilder.DropTable(
                name: "UserIps");

            migrationBuilder.DropTable(
                name: "AspNetRoles");

            migrationBuilder.DropTable(
                name: "Goods");

            migrationBuilder.DropTable(
                name: "Orders");

            migrationBuilder.DropTable(
                name: "Ips");

            migrationBuilder.DropTable(
                name: "Colors");

            migrationBuilder.DropTable(
                name: "Manufacturers");

            migrationBuilder.DropTable(
                name: "Materials");

            migrationBuilder.DropTable(
                name: "Producers");

            migrationBuilder.DropTable(
                name: "CPUSocketTypes");

            migrationBuilder.DropTable(
                name: "ConnectorTypes");

            migrationBuilder.DropTable(
                name: "HeadphonesTypes");

            migrationBuilder.DropTable(
                name: "WirelessTypes");

            migrationBuilder.DropTable(
                name: "KeySwitchTypes");

            migrationBuilder.DropTable(
                name: "MauseTypes");

            migrationBuilder.DropTable(
                name: "FormFactorTypes");

            migrationBuilder.DropTable(
                name: "ComputerDriveTypes");

            migrationBuilder.DropTable(
                name: "CoolerTypes");

            migrationBuilder.DropTable(
                name: "DriveInterfaces");

            migrationBuilder.DropTable(
                name: "USBSpecificationTypes");

            migrationBuilder.DropTable(
                name: "DeliveryMethods");

            migrationBuilder.DropTable(
                name: "OrderStatuses");

            migrationBuilder.DropTable(
                name: "AspNetUsers");

            migrationBuilder.DropTable(
                name: "Countries");


            migrationBuilder.Sql("DROP TYPE [dbo].[StringList]");
            migrationBuilder.Sql("DROP TYPE [dbo].[IntList]");
            migrationBuilder.Sql("DROP TYPE [dbo].[RealList]");
            migrationBuilder.Sql("DROP TYPE [dbo].[BoolList]");



            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerAccessoriesGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerAccessoriesCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerAccessoriesColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerAccessoriesMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerAccessoriesProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerAccessoriesPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerAccessoriesCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerDrivesGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerDrivesCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerDrivesColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerDrivesMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerDrivesProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerDrivesCapacity]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerDrivesTypes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerDrivesFormFactorTypes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerDrivesPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerDrivesCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerPartsGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerPartsCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerPartsColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerPartsMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerPartsProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerPartsPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerPartsCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersAmountOfRAMs]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersCpuFrequency]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersLength]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersHeight]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersWidth]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersHaveFloppyDrives]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersSsdMemory]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersHardDiskMemory]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersCpuSocketType]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersComputerDrives]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersNumberOfCores]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersFloppyDrivesCount]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputersCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerTechnologiesGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerTechnologiesCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerTechnologiesColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerTechnologiesMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerTechnologiesProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerTechnologiesPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetComputerTechnologiesCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCoolersGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCoolersCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCoolersColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCoolersMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCoolersProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCoolersTypes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCoolersFanSizes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCoolersPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCoolersCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsSocketTypes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsThermalDesignPowers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsNumberOfCores]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsNumberOfThreads]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetCPUsCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetFlashDrivesGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetFlashDrivesCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetFlashDrivesColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetFlashDrivesMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetFlashDrivesProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetFlashDrivesCapacity]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetFlashDrivesUsbSpecificationTypes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetFlashDrivesPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetFlashDrivesCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetGoodsGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetGoodsCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetGoodsColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetGoodsMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetGoodsProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetGoodsPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetGoodsCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetHeadphonesGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetHeadphonesCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetHeadphonesColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetHeadphonesMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetHeadphonesProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetHeadphonesTypes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetHeadphonesWirelessTypes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetHeadphonesConnectorTypes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetHeadphonesPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetHeadphonesCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetKeyboardsGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetKeyboardsCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetKeyboardsColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetKeyboardsMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetKeyboardsProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetKeyboardsTypes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetKeyboardsPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetKeyboardsCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsAmountOfRAMs]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsCpuFrequency]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsLength]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsHeight]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsWidth]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsHaveFloppyDrives]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsSsdMemory]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsHardDiskMemory]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsCpuSocketType]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsComputerDrives]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsNumberOfCores]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsFloppyDrivesCount]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsDisplays]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetLaptopsCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetMiceGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetMiceCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetMiceColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetMiceMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetMiceProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetMiceTypes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetMiceButtonsCount]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetMicePrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetMiceCount]");

            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetVideoCardsGoodCells]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetVideoCardsCountries]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetVideoCardsColors]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetVideoCardsMaterials]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetVideoCardsProducers]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetVideoCardsDriveInterfaces]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetVideoCardsVideoSizes]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetVideoCardsVideoMemoryCapacity]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetVideoCardsPrice]");
            migrationBuilder.Sql("DROP FUNCTION [dbo].[GetVideoCardsCount]");


            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetComputerAccessories]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetComputerDrives]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetComputerParts]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetComputers]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetComputerTechnologies]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetCoolers]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetCPUs]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetFlashDrives]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetGoods]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetHeadphones]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetKeyboards]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetLaptops]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetMice]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[GetVideoCards]");

        }
    }
}
